
ScopeUSB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096a8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08009830  08009830  00019830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009878  08009878  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  08009878  08009878  00019878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009880  08009880  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009880  08009880  00019880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009884  08009884  00019884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08009888  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e28  200001ec  08009a74  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00001504  20002014  08009a74  00022014  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b652  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b3a  00000000  00000000  0003b86e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001540  00000000  00000000  0003f3a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001388  00000000  00000000  000408e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002560a  00000000  00000000  00041c70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000131d2  00000000  00000000  0006727a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d43a1  00000000  00000000  0007a44c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014e7ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b64  00000000  00000000  0014e868  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001ec 	.word	0x200001ec
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009818 	.word	0x08009818

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001f0 	.word	0x200001f0
 80001c4:	08009818 	.word	0x08009818

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b972 	b.w	8000d00 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9e08      	ldr	r6, [sp, #32]
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	4688      	mov	r8, r1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d14b      	bne.n	8000ada <__udivmoddi4+0xa6>
 8000a42:	428a      	cmp	r2, r1
 8000a44:	4615      	mov	r5, r2
 8000a46:	d967      	bls.n	8000b18 <__udivmoddi4+0xe4>
 8000a48:	fab2 f282 	clz	r2, r2
 8000a4c:	b14a      	cbz	r2, 8000a62 <__udivmoddi4+0x2e>
 8000a4e:	f1c2 0720 	rsb	r7, r2, #32
 8000a52:	fa01 f302 	lsl.w	r3, r1, r2
 8000a56:	fa20 f707 	lsr.w	r7, r0, r7
 8000a5a:	4095      	lsls	r5, r2
 8000a5c:	ea47 0803 	orr.w	r8, r7, r3
 8000a60:	4094      	lsls	r4, r2
 8000a62:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a66:	0c23      	lsrs	r3, r4, #16
 8000a68:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a6c:	fa1f fc85 	uxth.w	ip, r5
 8000a70:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a74:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a78:	fb07 f10c 	mul.w	r1, r7, ip
 8000a7c:	4299      	cmp	r1, r3
 8000a7e:	d909      	bls.n	8000a94 <__udivmoddi4+0x60>
 8000a80:	18eb      	adds	r3, r5, r3
 8000a82:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a86:	f080 811b 	bcs.w	8000cc0 <__udivmoddi4+0x28c>
 8000a8a:	4299      	cmp	r1, r3
 8000a8c:	f240 8118 	bls.w	8000cc0 <__udivmoddi4+0x28c>
 8000a90:	3f02      	subs	r7, #2
 8000a92:	442b      	add	r3, r5
 8000a94:	1a5b      	subs	r3, r3, r1
 8000a96:	b2a4      	uxth	r4, r4
 8000a98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000aa0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000aa8:	45a4      	cmp	ip, r4
 8000aaa:	d909      	bls.n	8000ac0 <__udivmoddi4+0x8c>
 8000aac:	192c      	adds	r4, r5, r4
 8000aae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ab2:	f080 8107 	bcs.w	8000cc4 <__udivmoddi4+0x290>
 8000ab6:	45a4      	cmp	ip, r4
 8000ab8:	f240 8104 	bls.w	8000cc4 <__udivmoddi4+0x290>
 8000abc:	3802      	subs	r0, #2
 8000abe:	442c      	add	r4, r5
 8000ac0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ac4:	eba4 040c 	sub.w	r4, r4, ip
 8000ac8:	2700      	movs	r7, #0
 8000aca:	b11e      	cbz	r6, 8000ad4 <__udivmoddi4+0xa0>
 8000acc:	40d4      	lsrs	r4, r2
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e9c6 4300 	strd	r4, r3, [r6]
 8000ad4:	4639      	mov	r1, r7
 8000ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ada:	428b      	cmp	r3, r1
 8000adc:	d909      	bls.n	8000af2 <__udivmoddi4+0xbe>
 8000ade:	2e00      	cmp	r6, #0
 8000ae0:	f000 80eb 	beq.w	8000cba <__udivmoddi4+0x286>
 8000ae4:	2700      	movs	r7, #0
 8000ae6:	e9c6 0100 	strd	r0, r1, [r6]
 8000aea:	4638      	mov	r0, r7
 8000aec:	4639      	mov	r1, r7
 8000aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af2:	fab3 f783 	clz	r7, r3
 8000af6:	2f00      	cmp	r7, #0
 8000af8:	d147      	bne.n	8000b8a <__udivmoddi4+0x156>
 8000afa:	428b      	cmp	r3, r1
 8000afc:	d302      	bcc.n	8000b04 <__udivmoddi4+0xd0>
 8000afe:	4282      	cmp	r2, r0
 8000b00:	f200 80fa 	bhi.w	8000cf8 <__udivmoddi4+0x2c4>
 8000b04:	1a84      	subs	r4, r0, r2
 8000b06:	eb61 0303 	sbc.w	r3, r1, r3
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	4698      	mov	r8, r3
 8000b0e:	2e00      	cmp	r6, #0
 8000b10:	d0e0      	beq.n	8000ad4 <__udivmoddi4+0xa0>
 8000b12:	e9c6 4800 	strd	r4, r8, [r6]
 8000b16:	e7dd      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000b18:	b902      	cbnz	r2, 8000b1c <__udivmoddi4+0xe8>
 8000b1a:	deff      	udf	#255	; 0xff
 8000b1c:	fab2 f282 	clz	r2, r2
 8000b20:	2a00      	cmp	r2, #0
 8000b22:	f040 808f 	bne.w	8000c44 <__udivmoddi4+0x210>
 8000b26:	1b49      	subs	r1, r1, r5
 8000b28:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b2c:	fa1f f885 	uxth.w	r8, r5
 8000b30:	2701      	movs	r7, #1
 8000b32:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b36:	0c23      	lsrs	r3, r4, #16
 8000b38:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b3c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b40:	fb08 f10c 	mul.w	r1, r8, ip
 8000b44:	4299      	cmp	r1, r3
 8000b46:	d907      	bls.n	8000b58 <__udivmoddi4+0x124>
 8000b48:	18eb      	adds	r3, r5, r3
 8000b4a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b4e:	d202      	bcs.n	8000b56 <__udivmoddi4+0x122>
 8000b50:	4299      	cmp	r1, r3
 8000b52:	f200 80cd 	bhi.w	8000cf0 <__udivmoddi4+0x2bc>
 8000b56:	4684      	mov	ip, r0
 8000b58:	1a59      	subs	r1, r3, r1
 8000b5a:	b2a3      	uxth	r3, r4
 8000b5c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b60:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b64:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b68:	fb08 f800 	mul.w	r8, r8, r0
 8000b6c:	45a0      	cmp	r8, r4
 8000b6e:	d907      	bls.n	8000b80 <__udivmoddi4+0x14c>
 8000b70:	192c      	adds	r4, r5, r4
 8000b72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b76:	d202      	bcs.n	8000b7e <__udivmoddi4+0x14a>
 8000b78:	45a0      	cmp	r8, r4
 8000b7a:	f200 80b6 	bhi.w	8000cea <__udivmoddi4+0x2b6>
 8000b7e:	4618      	mov	r0, r3
 8000b80:	eba4 0408 	sub.w	r4, r4, r8
 8000b84:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b88:	e79f      	b.n	8000aca <__udivmoddi4+0x96>
 8000b8a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b8e:	40bb      	lsls	r3, r7
 8000b90:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b94:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b98:	fa01 f407 	lsl.w	r4, r1, r7
 8000b9c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ba0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ba4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ba8:	4325      	orrs	r5, r4
 8000baa:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bae:	0c2c      	lsrs	r4, r5, #16
 8000bb0:	fb08 3319 	mls	r3, r8, r9, r3
 8000bb4:	fa1f fa8e 	uxth.w	sl, lr
 8000bb8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000bbc:	fb09 f40a 	mul.w	r4, r9, sl
 8000bc0:	429c      	cmp	r4, r3
 8000bc2:	fa02 f207 	lsl.w	r2, r2, r7
 8000bc6:	fa00 f107 	lsl.w	r1, r0, r7
 8000bca:	d90b      	bls.n	8000be4 <__udivmoddi4+0x1b0>
 8000bcc:	eb1e 0303 	adds.w	r3, lr, r3
 8000bd0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000bd4:	f080 8087 	bcs.w	8000ce6 <__udivmoddi4+0x2b2>
 8000bd8:	429c      	cmp	r4, r3
 8000bda:	f240 8084 	bls.w	8000ce6 <__udivmoddi4+0x2b2>
 8000bde:	f1a9 0902 	sub.w	r9, r9, #2
 8000be2:	4473      	add	r3, lr
 8000be4:	1b1b      	subs	r3, r3, r4
 8000be6:	b2ad      	uxth	r5, r5
 8000be8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bec:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000bf4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000bf8:	45a2      	cmp	sl, r4
 8000bfa:	d908      	bls.n	8000c0e <__udivmoddi4+0x1da>
 8000bfc:	eb1e 0404 	adds.w	r4, lr, r4
 8000c00:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c04:	d26b      	bcs.n	8000cde <__udivmoddi4+0x2aa>
 8000c06:	45a2      	cmp	sl, r4
 8000c08:	d969      	bls.n	8000cde <__udivmoddi4+0x2aa>
 8000c0a:	3802      	subs	r0, #2
 8000c0c:	4474      	add	r4, lr
 8000c0e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c12:	fba0 8902 	umull	r8, r9, r0, r2
 8000c16:	eba4 040a 	sub.w	r4, r4, sl
 8000c1a:	454c      	cmp	r4, r9
 8000c1c:	46c2      	mov	sl, r8
 8000c1e:	464b      	mov	r3, r9
 8000c20:	d354      	bcc.n	8000ccc <__udivmoddi4+0x298>
 8000c22:	d051      	beq.n	8000cc8 <__udivmoddi4+0x294>
 8000c24:	2e00      	cmp	r6, #0
 8000c26:	d069      	beq.n	8000cfc <__udivmoddi4+0x2c8>
 8000c28:	ebb1 050a 	subs.w	r5, r1, sl
 8000c2c:	eb64 0403 	sbc.w	r4, r4, r3
 8000c30:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c34:	40fd      	lsrs	r5, r7
 8000c36:	40fc      	lsrs	r4, r7
 8000c38:	ea4c 0505 	orr.w	r5, ip, r5
 8000c3c:	e9c6 5400 	strd	r5, r4, [r6]
 8000c40:	2700      	movs	r7, #0
 8000c42:	e747      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000c44:	f1c2 0320 	rsb	r3, r2, #32
 8000c48:	fa20 f703 	lsr.w	r7, r0, r3
 8000c4c:	4095      	lsls	r5, r2
 8000c4e:	fa01 f002 	lsl.w	r0, r1, r2
 8000c52:	fa21 f303 	lsr.w	r3, r1, r3
 8000c56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c5a:	4338      	orrs	r0, r7
 8000c5c:	0c01      	lsrs	r1, r0, #16
 8000c5e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c62:	fa1f f885 	uxth.w	r8, r5
 8000c66:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c6e:	fb07 f308 	mul.w	r3, r7, r8
 8000c72:	428b      	cmp	r3, r1
 8000c74:	fa04 f402 	lsl.w	r4, r4, r2
 8000c78:	d907      	bls.n	8000c8a <__udivmoddi4+0x256>
 8000c7a:	1869      	adds	r1, r5, r1
 8000c7c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c80:	d22f      	bcs.n	8000ce2 <__udivmoddi4+0x2ae>
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d92d      	bls.n	8000ce2 <__udivmoddi4+0x2ae>
 8000c86:	3f02      	subs	r7, #2
 8000c88:	4429      	add	r1, r5
 8000c8a:	1acb      	subs	r3, r1, r3
 8000c8c:	b281      	uxth	r1, r0
 8000c8e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c92:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c96:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c9a:	fb00 f308 	mul.w	r3, r0, r8
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d907      	bls.n	8000cb2 <__udivmoddi4+0x27e>
 8000ca2:	1869      	adds	r1, r5, r1
 8000ca4:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ca8:	d217      	bcs.n	8000cda <__udivmoddi4+0x2a6>
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d915      	bls.n	8000cda <__udivmoddi4+0x2a6>
 8000cae:	3802      	subs	r0, #2
 8000cb0:	4429      	add	r1, r5
 8000cb2:	1ac9      	subs	r1, r1, r3
 8000cb4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000cb8:	e73b      	b.n	8000b32 <__udivmoddi4+0xfe>
 8000cba:	4637      	mov	r7, r6
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	e709      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000cc0:	4607      	mov	r7, r0
 8000cc2:	e6e7      	b.n	8000a94 <__udivmoddi4+0x60>
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	e6fb      	b.n	8000ac0 <__udivmoddi4+0x8c>
 8000cc8:	4541      	cmp	r1, r8
 8000cca:	d2ab      	bcs.n	8000c24 <__udivmoddi4+0x1f0>
 8000ccc:	ebb8 0a02 	subs.w	sl, r8, r2
 8000cd0:	eb69 020e 	sbc.w	r2, r9, lr
 8000cd4:	3801      	subs	r0, #1
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	e7a4      	b.n	8000c24 <__udivmoddi4+0x1f0>
 8000cda:	4660      	mov	r0, ip
 8000cdc:	e7e9      	b.n	8000cb2 <__udivmoddi4+0x27e>
 8000cde:	4618      	mov	r0, r3
 8000ce0:	e795      	b.n	8000c0e <__udivmoddi4+0x1da>
 8000ce2:	4667      	mov	r7, ip
 8000ce4:	e7d1      	b.n	8000c8a <__udivmoddi4+0x256>
 8000ce6:	4681      	mov	r9, r0
 8000ce8:	e77c      	b.n	8000be4 <__udivmoddi4+0x1b0>
 8000cea:	3802      	subs	r0, #2
 8000cec:	442c      	add	r4, r5
 8000cee:	e747      	b.n	8000b80 <__udivmoddi4+0x14c>
 8000cf0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cf4:	442b      	add	r3, r5
 8000cf6:	e72f      	b.n	8000b58 <__udivmoddi4+0x124>
 8000cf8:	4638      	mov	r0, r7
 8000cfa:	e708      	b.n	8000b0e <__udivmoddi4+0xda>
 8000cfc:	4637      	mov	r7, r6
 8000cfe:	e6e9      	b.n	8000ad4 <__udivmoddi4+0xa0>

08000d00 <__aeabi_idiv0>:
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	0000      	movs	r0, r0
	...

08000d08 <globalFilterF1>:


*/

float globalFilterF1(float XF10)
{
 8000d08:	b5b0      	push	{r4, r5, r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	ed87 0a01 	vstr	s0, [r7, #4]
static float XF11=0;

static float YF10=0;
static float YF11=0;

YF10 = - (-0.9999453650985516) * YF11
 8000d12:	4b2b      	ldr	r3, [pc, #172]	; (8000dc0 <globalFilterF1+0xb8>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff fbba 	bl	8000490 <__aeabi_f2d>
 8000d1c:	a322      	add	r3, pc, #136	; (adr r3, 8000da8 <globalFilterF1+0xa0>)
 8000d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d22:	f7ff fc0d 	bl	8000540 <__aeabi_dmul>
 8000d26:	4603      	mov	r3, r0
 8000d28:	460c      	mov	r4, r1
 8000d2a:	4625      	mov	r5, r4
 8000d2c:	461c      	mov	r4, r3
     + (-0.9999726825492758) * XF10 + (0.9999726825492757) * XF11;
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f7ff fbae 	bl	8000490 <__aeabi_f2d>
 8000d34:	a31e      	add	r3, pc, #120	; (adr r3, 8000db0 <globalFilterF1+0xa8>)
 8000d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d3a:	f7ff fc01 	bl	8000540 <__aeabi_dmul>
 8000d3e:	4602      	mov	r2, r0
 8000d40:	460b      	mov	r3, r1
 8000d42:	4620      	mov	r0, r4
 8000d44:	4629      	mov	r1, r5
 8000d46:	f7ff fa45 	bl	80001d4 <__adddf3>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	460c      	mov	r4, r1
 8000d4e:	4625      	mov	r5, r4
 8000d50:	461c      	mov	r4, r3
 8000d52:	4b1c      	ldr	r3, [pc, #112]	; (8000dc4 <globalFilterF1+0xbc>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff fb9a 	bl	8000490 <__aeabi_f2d>
 8000d5c:	a316      	add	r3, pc, #88	; (adr r3, 8000db8 <globalFilterF1+0xb0>)
 8000d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d62:	f7ff fbed 	bl	8000540 <__aeabi_dmul>
 8000d66:	4602      	mov	r2, r0
 8000d68:	460b      	mov	r3, r1
 8000d6a:	4620      	mov	r0, r4
 8000d6c:	4629      	mov	r1, r5
 8000d6e:	f7ff fa31 	bl	80001d4 <__adddf3>
 8000d72:	4603      	mov	r3, r0
 8000d74:	460c      	mov	r4, r1
 8000d76:	4618      	mov	r0, r3
 8000d78:	4621      	mov	r1, r4
 8000d7a:	f7ff fdf3 	bl	8000964 <__aeabi_d2f>
 8000d7e:	4602      	mov	r2, r0
YF10 = - (-0.9999453650985516) * YF11
 8000d80:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <globalFilterF1+0xc0>)
 8000d82:	601a      	str	r2, [r3, #0]

XF11=XF10;
 8000d84:	4a0f      	ldr	r2, [pc, #60]	; (8000dc4 <globalFilterF1+0xbc>)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6013      	str	r3, [r2, #0]

YF11=YF10;
 8000d8a:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <globalFilterF1+0xc0>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a0c      	ldr	r2, [pc, #48]	; (8000dc0 <globalFilterF1+0xb8>)
 8000d90:	6013      	str	r3, [r2, #0]

return YF10;
 8000d92:	4b0d      	ldr	r3, [pc, #52]	; (8000dc8 <globalFilterF1+0xc0>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	ee07 3a90 	vmov	s15, r3
}
 8000d9a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bdb0      	pop	{r4, r5, r7, pc}
 8000da4:	f3af 8000 	nop.w
 8000da8:	6c1c5267 	.word	0x6c1c5267
 8000dac:	3fefff8d 	.word	0x3fefff8d
 8000db0:	b60e2934 	.word	0xb60e2934
 8000db4:	bfefffc6 	.word	0xbfefffc6
 8000db8:	b60e2933 	.word	0xb60e2933
 8000dbc:	3fefffc6 	.word	0x3fefffc6
 8000dc0:	2000020c 	.word	0x2000020c
 8000dc4:	20000210 	.word	0x20000210
 8000dc8:	20000214 	.word	0x20000214
 8000dcc:	00000000 	.word	0x00000000

08000dd0 <globalFilterF2>:


*/

float globalFilterF2(float XF20)
{
 8000dd0:	b5b0      	push	{r4, r5, r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	ed87 0a01 	vstr	s0, [r7, #4]
static float XF21=0;

static float YF20=0;
static float YF21=0;

YF20 = - (-0.9999453650985516) * YF21
 8000dda:	4b2b      	ldr	r3, [pc, #172]	; (8000e88 <globalFilterF2+0xb8>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff fb56 	bl	8000490 <__aeabi_f2d>
 8000de4:	a322      	add	r3, pc, #136	; (adr r3, 8000e70 <globalFilterF2+0xa0>)
 8000de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dea:	f7ff fba9 	bl	8000540 <__aeabi_dmul>
 8000dee:	4603      	mov	r3, r0
 8000df0:	460c      	mov	r4, r1
 8000df2:	4625      	mov	r5, r4
 8000df4:	461c      	mov	r4, r3
     + (0.0000043477073155) * XF20 + (0.0000043477073154) * XF21;
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f7ff fb4a 	bl	8000490 <__aeabi_f2d>
 8000dfc:	a31e      	add	r3, pc, #120	; (adr r3, 8000e78 <globalFilterF2+0xa8>)
 8000dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e02:	f7ff fb9d 	bl	8000540 <__aeabi_dmul>
 8000e06:	4602      	mov	r2, r0
 8000e08:	460b      	mov	r3, r1
 8000e0a:	4620      	mov	r0, r4
 8000e0c:	4629      	mov	r1, r5
 8000e0e:	f7ff f9e1 	bl	80001d4 <__adddf3>
 8000e12:	4603      	mov	r3, r0
 8000e14:	460c      	mov	r4, r1
 8000e16:	4625      	mov	r5, r4
 8000e18:	461c      	mov	r4, r3
 8000e1a:	4b1c      	ldr	r3, [pc, #112]	; (8000e8c <globalFilterF2+0xbc>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff fb36 	bl	8000490 <__aeabi_f2d>
 8000e24:	a316      	add	r3, pc, #88	; (adr r3, 8000e80 <globalFilterF2+0xb0>)
 8000e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e2a:	f7ff fb89 	bl	8000540 <__aeabi_dmul>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	460b      	mov	r3, r1
 8000e32:	4620      	mov	r0, r4
 8000e34:	4629      	mov	r1, r5
 8000e36:	f7ff f9cd 	bl	80001d4 <__adddf3>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	460c      	mov	r4, r1
 8000e3e:	4618      	mov	r0, r3
 8000e40:	4621      	mov	r1, r4
 8000e42:	f7ff fd8f 	bl	8000964 <__aeabi_d2f>
 8000e46:	4602      	mov	r2, r0
YF20 = - (-0.9999453650985516) * YF21
 8000e48:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <globalFilterF2+0xc0>)
 8000e4a:	601a      	str	r2, [r3, #0]

XF21=XF20;
 8000e4c:	4a0f      	ldr	r2, [pc, #60]	; (8000e8c <globalFilterF2+0xbc>)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6013      	str	r3, [r2, #0]

YF21=YF20;
 8000e52:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <globalFilterF2+0xc0>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a0c      	ldr	r2, [pc, #48]	; (8000e88 <globalFilterF2+0xb8>)
 8000e58:	6013      	str	r3, [r2, #0]

return YF20;
 8000e5a:	4b0d      	ldr	r3, [pc, #52]	; (8000e90 <globalFilterF2+0xc0>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	ee07 3a90 	vmov	s15, r3
}
 8000e62:	eeb0 0a67 	vmov.f32	s0, s15
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e6c:	f3af 8000 	nop.w
 8000e70:	6c1c5267 	.word	0x6c1c5267
 8000e74:	3fefff8d 	.word	0x3fefff8d
 8000e78:	afd801d2 	.word	0xafd801d2
 8000e7c:	3ed23c50 	.word	0x3ed23c50
 8000e80:	afd634a7 	.word	0xafd634a7
 8000e84:	3ed23c50 	.word	0x3ed23c50
 8000e88:	20000218 	.word	0x20000218
 8000e8c:	2000021c 	.word	0x2000021c
 8000e90:	20000220 	.word	0x20000220

08000e94 <HAL_ADC_ConvHalfCpltCallback>:
volatile uint16_t buffer[PKG_SIZE * 2];
volatile float out[PKG_SIZE];
uint8_t timeToSendData = 0;
uint16_t *dataPtr;

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	timeToSendData = 1;
 8000e9c:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	701a      	strb	r2, [r3, #0]
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20000208 	.word	0x20000208

08000eb4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	timeToSendData = 2;
 8000ebc:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	701a      	strb	r2, [r3, #0]
}
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	20000208 	.word	0x20000208

08000ed4 <processData>:


void processData() {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0

	//Выбираем текущий буфер, если выставлен флаг, если флаг не выставлен - return
	switch (timeToSendData) {
 8000eda:	4b1f      	ldr	r3, [pc, #124]	; (8000f58 <processData+0x84>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d002      	beq.n	8000ee8 <processData+0x14>
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d004      	beq.n	8000ef0 <processData+0x1c>
		break;
	case SECOND_BUF_HALF:
		dataPtr = ((uint16_t*) buffer) + PKG_SIZE;
		break;
	default:
		return;
 8000ee6:	e034      	b.n	8000f52 <processData+0x7e>
		dataPtr = ((uint16_t*) buffer);
 8000ee8:	4b1c      	ldr	r3, [pc, #112]	; (8000f5c <processData+0x88>)
 8000eea:	4a1d      	ldr	r2, [pc, #116]	; (8000f60 <processData+0x8c>)
 8000eec:	601a      	str	r2, [r3, #0]
		break;
 8000eee:	e003      	b.n	8000ef8 <processData+0x24>
		dataPtr = ((uint16_t*) buffer) + PKG_SIZE;
 8000ef0:	4a1c      	ldr	r2, [pc, #112]	; (8000f64 <processData+0x90>)
 8000ef2:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <processData+0x88>)
 8000ef4:	601a      	str	r2, [r3, #0]
		break;
 8000ef6:	bf00      	nop
		break;
	}

	timeToSendData = 0;
 8000ef8:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <processData+0x84>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	701a      	strb	r2, [r3, #0]

	for (int i = 0; i < PKG_SIZE; i++) {
 8000efe:	2300      	movs	r3, #0
 8000f00:	607b      	str	r3, [r7, #4]
 8000f02:	e01e      	b.n	8000f42 <processData+0x6e>

		out[i] =globalFilterF2(globalFilterF1(dataPtr[i]));
 8000f04:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <processData+0x88>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	4413      	add	r3, r2
 8000f0e:	881b      	ldrh	r3, [r3, #0]
 8000f10:	ee07 3a90 	vmov	s15, r3
 8000f14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f18:	eeb0 0a67 	vmov.f32	s0, s15
 8000f1c:	f7ff fef4 	bl	8000d08 <globalFilterF1>
 8000f20:	eef0 7a40 	vmov.f32	s15, s0
 8000f24:	eeb0 0a67 	vmov.f32	s0, s15
 8000f28:	f7ff ff52 	bl	8000dd0 <globalFilterF2>
 8000f2c:	eef0 7a40 	vmov.f32	s15, s0
 8000f30:	4a0d      	ldr	r2, [pc, #52]	; (8000f68 <processData+0x94>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	4413      	add	r3, r2
 8000f38:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < PKG_SIZE; i++) {
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	607b      	str	r3, [r7, #4]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2b77      	cmp	r3, #119	; 0x77
 8000f46:	dddd      	ble.n	8000f04 <processData+0x30>


	}

	CDC_Transmit_FS((uint8_t*) out, PKG_SIZE * sizeof(float));
 8000f48:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8000f4c:	4806      	ldr	r0, [pc, #24]	; (8000f68 <processData+0x94>)
 8000f4e:	f007 fef3 	bl	8008d38 <CDC_Transmit_FS>

	//CDC_Transmit_FS(dataPtr, PKG_SIZE*sizeof(uint16_t));
}
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000208 	.word	0x20000208
 8000f5c:	20000730 	.word	0x20000730
 8000f60:	20000470 	.word	0x20000470
 8000f64:	20000560 	.word	0x20000560
 8000f68:	20000234 	.word	0x20000234

08000f6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f70:	f000 fcdc 	bl	800192c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f74:	f000 f826 	bl	8000fc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f78:	f000 f9aa 	bl	80012d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f7c:	f000 f988 	bl	8001290 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000f80:	f007 fdcc 	bl	8008b1c <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000f84:	f000 f888 	bl	8001098 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000f88:	f000 f958 	bl	800123c <MX_USART2_UART_Init>
  MX_DAC_Init();
 8000f8c:	f000 f8d6 	bl	800113c <MX_DAC_Init>
  MX_TIM2_Init();
 8000f90:	f000 f908 	bl	80011a4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim2);
 8000f94:	4807      	ldr	r0, [pc, #28]	; (8000fb4 <main+0x48>)
 8000f96:	f003 fee6 	bl	8004d66 <HAL_TIM_Base_Start>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4806      	ldr	r0, [pc, #24]	; (8000fb8 <main+0x4c>)
 8000f9e:	f001 fa6c 	bl	800247a <HAL_DAC_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	HAL_ADC_Start_DMA(&hadc1, (uint16_t*) &buffer, PKG_SIZE * 2);
 8000fa2:	22f0      	movs	r2, #240	; 0xf0
 8000fa4:	4905      	ldr	r1, [pc, #20]	; (8000fbc <main+0x50>)
 8000fa6:	4806      	ldr	r0, [pc, #24]	; (8000fc0 <main+0x54>)
 8000fa8:	f000 fd98 	bl	8001adc <HAL_ADC_Start_DMA>

	while (1) {
		processData();
 8000fac:	f7ff ff92 	bl	8000ed4 <processData>
 8000fb0:	e7fc      	b.n	8000fac <main+0x40>
 8000fb2:	bf00      	nop
 8000fb4:	200006b0 	.word	0x200006b0
 8000fb8:	2000045c 	.word	0x2000045c
 8000fbc:	20000470 	.word	0x20000470
 8000fc0:	20000414 	.word	0x20000414

08000fc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b094      	sub	sp, #80	; 0x50
 8000fc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fca:	f107 0320 	add.w	r3, r7, #32
 8000fce:	2230      	movs	r2, #48	; 0x30
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f008 fb5e 	bl	8009694 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd8:	f107 030c 	add.w	r3, r7, #12
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	4b28      	ldr	r3, [pc, #160]	; (8001090 <SystemClock_Config+0xcc>)
 8000fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff0:	4a27      	ldr	r2, [pc, #156]	; (8001090 <SystemClock_Config+0xcc>)
 8000ff2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff8:	4b25      	ldr	r3, [pc, #148]	; (8001090 <SystemClock_Config+0xcc>)
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001004:	2300      	movs	r3, #0
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	4b22      	ldr	r3, [pc, #136]	; (8001094 <SystemClock_Config+0xd0>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a21      	ldr	r2, [pc, #132]	; (8001094 <SystemClock_Config+0xd0>)
 800100e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001012:	6013      	str	r3, [r2, #0]
 8001014:	4b1f      	ldr	r3, [pc, #124]	; (8001094 <SystemClock_Config+0xd0>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800101c:	607b      	str	r3, [r7, #4]
 800101e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001020:	2301      	movs	r3, #1
 8001022:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001024:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800102a:	2302      	movs	r3, #2
 800102c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800102e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001032:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001034:	2304      	movs	r3, #4
 8001036:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001038:	2390      	movs	r3, #144	; 0x90
 800103a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800103c:	2302      	movs	r3, #2
 800103e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8001040:	2306      	movs	r3, #6
 8001042:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001044:	f107 0320 	add.w	r3, r7, #32
 8001048:	4618      	mov	r0, r3
 800104a:	f003 f9ff 	bl	800444c <HAL_RCC_OscConfig>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001054:	f000 f9f6 	bl	8001444 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001058:	230f      	movs	r3, #15
 800105a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800105c:	2302      	movs	r3, #2
 800105e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001064:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001068:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800106a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800106e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001070:	f107 030c 	add.w	r3, r7, #12
 8001074:	2104      	movs	r1, #4
 8001076:	4618      	mov	r0, r3
 8001078:	f003 fc58 	bl	800492c <HAL_RCC_ClockConfig>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001082:	f000 f9df 	bl	8001444 <Error_Handler>
  }
}
 8001086:	bf00      	nop
 8001088:	3750      	adds	r7, #80	; 0x50
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40023800 	.word	0x40023800
 8001094:	40007000 	.word	0x40007000

08001098 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800109e:	463b      	mov	r3, r7
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010aa:	4b21      	ldr	r3, [pc, #132]	; (8001130 <MX_ADC1_Init+0x98>)
 80010ac:	4a21      	ldr	r2, [pc, #132]	; (8001134 <MX_ADC1_Init+0x9c>)
 80010ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010b0:	4b1f      	ldr	r3, [pc, #124]	; (8001130 <MX_ADC1_Init+0x98>)
 80010b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010b6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010b8:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <MX_ADC1_Init+0x98>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010be:	4b1c      	ldr	r3, [pc, #112]	; (8001130 <MX_ADC1_Init+0x98>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010c4:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <MX_ADC1_Init+0x98>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010ca:	4b19      	ldr	r3, [pc, #100]	; (8001130 <MX_ADC1_Init+0x98>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010d2:	4b17      	ldr	r3, [pc, #92]	; (8001130 <MX_ADC1_Init+0x98>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010d8:	4b15      	ldr	r3, [pc, #84]	; (8001130 <MX_ADC1_Init+0x98>)
 80010da:	4a17      	ldr	r2, [pc, #92]	; (8001138 <MX_ADC1_Init+0xa0>)
 80010dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010de:	4b14      	ldr	r3, [pc, #80]	; (8001130 <MX_ADC1_Init+0x98>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010e4:	4b12      	ldr	r3, [pc, #72]	; (8001130 <MX_ADC1_Init+0x98>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <MX_ADC1_Init+0x98>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80010f2:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <MX_ADC1_Init+0x98>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010f8:	480d      	ldr	r0, [pc, #52]	; (8001130 <MX_ADC1_Init+0x98>)
 80010fa:	f000 fcab 	bl	8001a54 <HAL_ADC_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001104:	f000 f99e 	bl	8001444 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001108:	2305      	movs	r3, #5
 800110a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800110c:	2301      	movs	r3, #1
 800110e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8001110:	2306      	movs	r3, #6
 8001112:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001114:	463b      	mov	r3, r7
 8001116:	4619      	mov	r1, r3
 8001118:	4805      	ldr	r0, [pc, #20]	; (8001130 <MX_ADC1_Init+0x98>)
 800111a:	f000 fddb 	bl	8001cd4 <HAL_ADC_ConfigChannel>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001124:	f000 f98e 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001128:	bf00      	nop
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000414 	.word	0x20000414
 8001134:	40012000 	.word	0x40012000
 8001138:	0f000001 	.word	0x0f000001

0800113c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001142:	463b      	mov	r3, r7
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800114a:	4b14      	ldr	r3, [pc, #80]	; (800119c <MX_DAC_Init+0x60>)
 800114c:	4a14      	ldr	r2, [pc, #80]	; (80011a0 <MX_DAC_Init+0x64>)
 800114e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001150:	4812      	ldr	r0, [pc, #72]	; (800119c <MX_DAC_Init+0x60>)
 8001152:	f001 f970 	bl	8002436 <HAL_DAC_Init>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800115c:	f000 f972 	bl	8001444 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001160:	2324      	movs	r3, #36	; 0x24
 8001162:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001164:	2300      	movs	r3, #0
 8001166:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001168:	463b      	mov	r3, r7
 800116a:	2200      	movs	r2, #0
 800116c:	4619      	mov	r1, r3
 800116e:	480b      	ldr	r0, [pc, #44]	; (800119c <MX_DAC_Init+0x60>)
 8001170:	f001 fa3d 	bl	80025ee <HAL_DAC_ConfigChannel>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800117a:	f000 f963 	bl	8001444 <Error_Handler>
  }
  /** Configure Triangle wave generation on DAC OUT1
  */
  if (HAL_DACEx_TriangleWaveGenerate(&hdac, DAC_CHANNEL_1, DAC_TRIANGLEAMPLITUDE_4095) != HAL_OK)
 800117e:	f44f 6230 	mov.w	r2, #2816	; 0xb00
 8001182:	2100      	movs	r1, #0
 8001184:	4805      	ldr	r0, [pc, #20]	; (800119c <MX_DAC_Init+0x60>)
 8001186:	f001 fa7f 	bl	8002688 <HAL_DACEx_TriangleWaveGenerate>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8001190:	f000 f958 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	2000045c 	.word	0x2000045c
 80011a0:	40007400 	.word	0x40007400

080011a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011aa:	f107 0308 	add.w	r3, r7, #8
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b8:	463b      	mov	r3, r7
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011c0:	4b1d      	ldr	r3, [pc, #116]	; (8001238 <MX_TIM2_Init+0x94>)
 80011c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80011c8:	4b1b      	ldr	r3, [pc, #108]	; (8001238 <MX_TIM2_Init+0x94>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ce:	4b1a      	ldr	r3, [pc, #104]	; (8001238 <MX_TIM2_Init+0x94>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1700;
 80011d4:	4b18      	ldr	r3, [pc, #96]	; (8001238 <MX_TIM2_Init+0x94>)
 80011d6:	f240 62a4 	movw	r2, #1700	; 0x6a4
 80011da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011dc:	4b16      	ldr	r3, [pc, #88]	; (8001238 <MX_TIM2_Init+0x94>)
 80011de:	2200      	movs	r2, #0
 80011e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011e2:	4b15      	ldr	r3, [pc, #84]	; (8001238 <MX_TIM2_Init+0x94>)
 80011e4:	2280      	movs	r2, #128	; 0x80
 80011e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011e8:	4813      	ldr	r0, [pc, #76]	; (8001238 <MX_TIM2_Init+0x94>)
 80011ea:	f003 fd91 	bl	8004d10 <HAL_TIM_Base_Init>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011f4:	f000 f926 	bl	8001444 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011fe:	f107 0308 	add.w	r3, r7, #8
 8001202:	4619      	mov	r1, r3
 8001204:	480c      	ldr	r0, [pc, #48]	; (8001238 <MX_TIM2_Init+0x94>)
 8001206:	f003 feda 	bl	8004fbe <HAL_TIM_ConfigClockSource>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001210:	f000 f918 	bl	8001444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001214:	2320      	movs	r3, #32
 8001216:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001218:	2300      	movs	r3, #0
 800121a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800121c:	463b      	mov	r3, r7
 800121e:	4619      	mov	r1, r3
 8001220:	4805      	ldr	r0, [pc, #20]	; (8001238 <MX_TIM2_Init+0x94>)
 8001222:	f004 f8ef 	bl	8005404 <HAL_TIMEx_MasterConfigSynchronization>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800122c:	f000 f90a 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001230:	bf00      	nop
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	200006b0 	.word	0x200006b0

0800123c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001240:	4b11      	ldr	r3, [pc, #68]	; (8001288 <MX_USART2_UART_Init+0x4c>)
 8001242:	4a12      	ldr	r2, [pc, #72]	; (800128c <MX_USART2_UART_Init+0x50>)
 8001244:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001246:	4b10      	ldr	r3, [pc, #64]	; (8001288 <MX_USART2_UART_Init+0x4c>)
 8001248:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800124c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800124e:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <MX_USART2_UART_Init+0x4c>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001254:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <MX_USART2_UART_Init+0x4c>)
 8001256:	2200      	movs	r2, #0
 8001258:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800125a:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <MX_USART2_UART_Init+0x4c>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001260:	4b09      	ldr	r3, [pc, #36]	; (8001288 <MX_USART2_UART_Init+0x4c>)
 8001262:	220c      	movs	r2, #12
 8001264:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001266:	4b08      	ldr	r3, [pc, #32]	; (8001288 <MX_USART2_UART_Init+0x4c>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <MX_USART2_UART_Init+0x4c>)
 800126e:	2200      	movs	r2, #0
 8001270:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001272:	4805      	ldr	r0, [pc, #20]	; (8001288 <MX_USART2_UART_Init+0x4c>)
 8001274:	f004 f956 	bl	8005524 <HAL_UART_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800127e:	f000 f8e1 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	200006f0 	.word	0x200006f0
 800128c:	40004400 	.word	0x40004400

08001290 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <MX_DMA_Init+0x3c>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a0b      	ldr	r2, [pc, #44]	; (80012cc <MX_DMA_Init+0x3c>)
 80012a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b09      	ldr	r3, [pc, #36]	; (80012cc <MX_DMA_Init+0x3c>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2100      	movs	r1, #0
 80012b6:	2038      	movs	r0, #56	; 0x38
 80012b8:	f001 f887 	bl	80023ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012bc:	2038      	movs	r0, #56	; 0x38
 80012be:	f001 f8a0 	bl	8002402 <HAL_NVIC_EnableIRQ>

}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40023800 	.word	0x40023800

080012d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08c      	sub	sp, #48	; 0x30
 80012d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d6:	f107 031c 	add.w	r3, r7, #28
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	60da      	str	r2, [r3, #12]
 80012e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	61bb      	str	r3, [r7, #24]
 80012ea:	4b51      	ldr	r3, [pc, #324]	; (8001430 <MX_GPIO_Init+0x160>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a50      	ldr	r2, [pc, #320]	; (8001430 <MX_GPIO_Init+0x160>)
 80012f0:	f043 0310 	orr.w	r3, r3, #16
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b4e      	ldr	r3, [pc, #312]	; (8001430 <MX_GPIO_Init+0x160>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0310 	and.w	r3, r3, #16
 80012fe:	61bb      	str	r3, [r7, #24]
 8001300:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
 8001306:	4b4a      	ldr	r3, [pc, #296]	; (8001430 <MX_GPIO_Init+0x160>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a49      	ldr	r2, [pc, #292]	; (8001430 <MX_GPIO_Init+0x160>)
 800130c:	f043 0304 	orr.w	r3, r3, #4
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b47      	ldr	r3, [pc, #284]	; (8001430 <MX_GPIO_Init+0x160>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0304 	and.w	r3, r3, #4
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	613b      	str	r3, [r7, #16]
 8001322:	4b43      	ldr	r3, [pc, #268]	; (8001430 <MX_GPIO_Init+0x160>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a42      	ldr	r2, [pc, #264]	; (8001430 <MX_GPIO_Init+0x160>)
 8001328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b40      	ldr	r3, [pc, #256]	; (8001430 <MX_GPIO_Init+0x160>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001336:	613b      	str	r3, [r7, #16]
 8001338:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	4b3c      	ldr	r3, [pc, #240]	; (8001430 <MX_GPIO_Init+0x160>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	4a3b      	ldr	r2, [pc, #236]	; (8001430 <MX_GPIO_Init+0x160>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	6313      	str	r3, [r2, #48]	; 0x30
 800134a:	4b39      	ldr	r3, [pc, #228]	; (8001430 <MX_GPIO_Init+0x160>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	4b35      	ldr	r3, [pc, #212]	; (8001430 <MX_GPIO_Init+0x160>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a34      	ldr	r2, [pc, #208]	; (8001430 <MX_GPIO_Init+0x160>)
 8001360:	f043 0302 	orr.w	r3, r3, #2
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b32      	ldr	r3, [pc, #200]	; (8001430 <MX_GPIO_Init+0x160>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	60bb      	str	r3, [r7, #8]
 8001370:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	607b      	str	r3, [r7, #4]
 8001376:	4b2e      	ldr	r3, [pc, #184]	; (8001430 <MX_GPIO_Init+0x160>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a2d      	ldr	r2, [pc, #180]	; (8001430 <MX_GPIO_Init+0x160>)
 800137c:	f043 0308 	orr.w	r3, r3, #8
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4b2b      	ldr	r3, [pc, #172]	; (8001430 <MX_GPIO_Init+0x160>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f003 0308 	and.w	r3, r3, #8
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800138e:	2200      	movs	r2, #0
 8001390:	2108      	movs	r1, #8
 8001392:	4828      	ldr	r0, [pc, #160]	; (8001434 <MX_GPIO_Init+0x164>)
 8001394:	f001 febe 	bl	8003114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001398:	2200      	movs	r2, #0
 800139a:	f24f 0110 	movw	r1, #61456	; 0xf010
 800139e:	4826      	ldr	r0, [pc, #152]	; (8001438 <MX_GPIO_Init+0x168>)
 80013a0:	f001 feb8 	bl	8003114 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013a4:	2308      	movs	r3, #8
 80013a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a8:	2301      	movs	r3, #1
 80013aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b0:	2300      	movs	r3, #0
 80013b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013b4:	f107 031c 	add.w	r3, r7, #28
 80013b8:	4619      	mov	r1, r3
 80013ba:	481e      	ldr	r0, [pc, #120]	; (8001434 <MX_GPIO_Init+0x164>)
 80013bc:	f001 fd10 	bl	8002de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013c0:	2304      	movs	r3, #4
 80013c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c4:	2300      	movs	r3, #0
 80013c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013cc:	f107 031c 	add.w	r3, r7, #28
 80013d0:	4619      	mov	r1, r3
 80013d2:	481a      	ldr	r0, [pc, #104]	; (800143c <MX_GPIO_Init+0x16c>)
 80013d4:	f001 fd04 	bl	8002de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80013d8:	f24f 0310 	movw	r3, #61456	; 0xf010
 80013dc:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013de:	2301      	movs	r3, #1
 80013e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ea:	f107 031c 	add.w	r3, r7, #28
 80013ee:	4619      	mov	r1, r3
 80013f0:	4811      	ldr	r0, [pc, #68]	; (8001438 <MX_GPIO_Init+0x168>)
 80013f2:	f001 fcf5 	bl	8002de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80013f6:	2320      	movs	r3, #32
 80013f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013fa:	2300      	movs	r3, #0
 80013fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001402:	f107 031c 	add.w	r3, r7, #28
 8001406:	4619      	mov	r1, r3
 8001408:	480b      	ldr	r0, [pc, #44]	; (8001438 <MX_GPIO_Init+0x168>)
 800140a:	f001 fce9 	bl	8002de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800140e:	2302      	movs	r3, #2
 8001410:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <MX_GPIO_Init+0x170>)
 8001414:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800141a:	f107 031c 	add.w	r3, r7, #28
 800141e:	4619      	mov	r1, r3
 8001420:	4804      	ldr	r0, [pc, #16]	; (8001434 <MX_GPIO_Init+0x164>)
 8001422:	f001 fcdd 	bl	8002de0 <HAL_GPIO_Init>

}
 8001426:	bf00      	nop
 8001428:	3730      	adds	r7, #48	; 0x30
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40023800 	.word	0x40023800
 8001434:	40021000 	.word	0x40021000
 8001438:	40020c00 	.word	0x40020c00
 800143c:	40020400 	.word	0x40020400
 8001440:	10120000 	.word	0x10120000

08001444 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
	...

08001454 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <HAL_MspInit+0x4c>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	4a0f      	ldr	r2, [pc, #60]	; (80014a0 <HAL_MspInit+0x4c>)
 8001464:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001468:	6453      	str	r3, [r2, #68]	; 0x44
 800146a:	4b0d      	ldr	r3, [pc, #52]	; (80014a0 <HAL_MspInit+0x4c>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	603b      	str	r3, [r7, #0]
 800147a:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <HAL_MspInit+0x4c>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	4a08      	ldr	r2, [pc, #32]	; (80014a0 <HAL_MspInit+0x4c>)
 8001480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001484:	6413      	str	r3, [r2, #64]	; 0x40
 8001486:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <HAL_MspInit+0x4c>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148e:	603b      	str	r3, [r7, #0]
 8001490:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001492:	2007      	movs	r0, #7
 8001494:	f000 ff8e 	bl	80023b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001498:	bf00      	nop
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40023800 	.word	0x40023800

080014a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08a      	sub	sp, #40	; 0x28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a2f      	ldr	r2, [pc, #188]	; (8001580 <HAL_ADC_MspInit+0xdc>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d158      	bne.n	8001578 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	4b2e      	ldr	r3, [pc, #184]	; (8001584 <HAL_ADC_MspInit+0xe0>)
 80014cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ce:	4a2d      	ldr	r2, [pc, #180]	; (8001584 <HAL_ADC_MspInit+0xe0>)
 80014d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d4:	6453      	str	r3, [r2, #68]	; 0x44
 80014d6:	4b2b      	ldr	r3, [pc, #172]	; (8001584 <HAL_ADC_MspInit+0xe0>)
 80014d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	4b27      	ldr	r3, [pc, #156]	; (8001584 <HAL_ADC_MspInit+0xe0>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a26      	ldr	r2, [pc, #152]	; (8001584 <HAL_ADC_MspInit+0xe0>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b24      	ldr	r3, [pc, #144]	; (8001584 <HAL_ADC_MspInit+0xe0>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80014fe:	2320      	movs	r3, #32
 8001500:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001502:	2303      	movs	r3, #3
 8001504:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150a:	f107 0314 	add.w	r3, r7, #20
 800150e:	4619      	mov	r1, r3
 8001510:	481d      	ldr	r0, [pc, #116]	; (8001588 <HAL_ADC_MspInit+0xe4>)
 8001512:	f001 fc65 	bl	8002de0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001516:	4b1d      	ldr	r3, [pc, #116]	; (800158c <HAL_ADC_MspInit+0xe8>)
 8001518:	4a1d      	ldr	r2, [pc, #116]	; (8001590 <HAL_ADC_MspInit+0xec>)
 800151a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800151c:	4b1b      	ldr	r3, [pc, #108]	; (800158c <HAL_ADC_MspInit+0xe8>)
 800151e:	2200      	movs	r2, #0
 8001520:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001522:	4b1a      	ldr	r3, [pc, #104]	; (800158c <HAL_ADC_MspInit+0xe8>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001528:	4b18      	ldr	r3, [pc, #96]	; (800158c <HAL_ADC_MspInit+0xe8>)
 800152a:	2200      	movs	r2, #0
 800152c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800152e:	4b17      	ldr	r3, [pc, #92]	; (800158c <HAL_ADC_MspInit+0xe8>)
 8001530:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001534:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001536:	4b15      	ldr	r3, [pc, #84]	; (800158c <HAL_ADC_MspInit+0xe8>)
 8001538:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800153c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800153e:	4b13      	ldr	r3, [pc, #76]	; (800158c <HAL_ADC_MspInit+0xe8>)
 8001540:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001544:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001546:	4b11      	ldr	r3, [pc, #68]	; (800158c <HAL_ADC_MspInit+0xe8>)
 8001548:	f44f 7280 	mov.w	r2, #256	; 0x100
 800154c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800154e:	4b0f      	ldr	r3, [pc, #60]	; (800158c <HAL_ADC_MspInit+0xe8>)
 8001550:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001554:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001556:	4b0d      	ldr	r3, [pc, #52]	; (800158c <HAL_ADC_MspInit+0xe8>)
 8001558:	2200      	movs	r2, #0
 800155a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800155c:	480b      	ldr	r0, [pc, #44]	; (800158c <HAL_ADC_MspInit+0xe8>)
 800155e:	f001 f8d1 	bl	8002704 <HAL_DMA_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001568:	f7ff ff6c 	bl	8001444 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a07      	ldr	r2, [pc, #28]	; (800158c <HAL_ADC_MspInit+0xe8>)
 8001570:	639a      	str	r2, [r3, #56]	; 0x38
 8001572:	4a06      	ldr	r2, [pc, #24]	; (800158c <HAL_ADC_MspInit+0xe8>)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001578:	bf00      	nop
 800157a:	3728      	adds	r7, #40	; 0x28
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40012000 	.word	0x40012000
 8001584:	40023800 	.word	0x40023800
 8001588:	40020000 	.word	0x40020000
 800158c:	20000650 	.word	0x20000650
 8001590:	40026410 	.word	0x40026410

08001594 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08a      	sub	sp, #40	; 0x28
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a1b      	ldr	r2, [pc, #108]	; (8001620 <HAL_DAC_MspInit+0x8c>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d12f      	bne.n	8001616 <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	4b1a      	ldr	r3, [pc, #104]	; (8001624 <HAL_DAC_MspInit+0x90>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	4a19      	ldr	r2, [pc, #100]	; (8001624 <HAL_DAC_MspInit+0x90>)
 80015c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80015c4:	6413      	str	r3, [r2, #64]	; 0x40
 80015c6:	4b17      	ldr	r3, [pc, #92]	; (8001624 <HAL_DAC_MspInit+0x90>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	4b13      	ldr	r3, [pc, #76]	; (8001624 <HAL_DAC_MspInit+0x90>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a12      	ldr	r2, [pc, #72]	; (8001624 <HAL_DAC_MspInit+0x90>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b10      	ldr	r3, [pc, #64]	; (8001624 <HAL_DAC_MspInit+0x90>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015ee:	2310      	movs	r3, #16
 80015f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015f2:	2303      	movs	r3, #3
 80015f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fa:	f107 0314 	add.w	r3, r7, #20
 80015fe:	4619      	mov	r1, r3
 8001600:	4809      	ldr	r0, [pc, #36]	; (8001628 <HAL_DAC_MspInit+0x94>)
 8001602:	f001 fbed 	bl	8002de0 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2100      	movs	r1, #0
 800160a:	2036      	movs	r0, #54	; 0x36
 800160c:	f000 fedd 	bl	80023ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001610:	2036      	movs	r0, #54	; 0x36
 8001612:	f000 fef6 	bl	8002402 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001616:	bf00      	nop
 8001618:	3728      	adds	r7, #40	; 0x28
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40007400 	.word	0x40007400
 8001624:	40023800 	.word	0x40023800
 8001628:	40020000 	.word	0x40020000

0800162c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800163c:	d115      	bne.n	800166a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <HAL_TIM_Base_MspInit+0x48>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	4a0b      	ldr	r2, [pc, #44]	; (8001674 <HAL_TIM_Base_MspInit+0x48>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6413      	str	r3, [r2, #64]	; 0x40
 800164e:	4b09      	ldr	r3, [pc, #36]	; (8001674 <HAL_TIM_Base_MspInit+0x48>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800165a:	2200      	movs	r2, #0
 800165c:	2100      	movs	r1, #0
 800165e:	201c      	movs	r0, #28
 8001660:	f000 feb3 	bl	80023ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001664:	201c      	movs	r0, #28
 8001666:	f000 fecc 	bl	8002402 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800166a:	bf00      	nop
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40023800 	.word	0x40023800

08001678 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08a      	sub	sp, #40	; 0x28
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a28      	ldr	r2, [pc, #160]	; (8001738 <HAL_UART_MspInit+0xc0>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d149      	bne.n	800172e <HAL_UART_MspInit+0xb6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	4b27      	ldr	r3, [pc, #156]	; (800173c <HAL_UART_MspInit+0xc4>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	4a26      	ldr	r2, [pc, #152]	; (800173c <HAL_UART_MspInit+0xc4>)
 80016a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a8:	6413      	str	r3, [r2, #64]	; 0x40
 80016aa:	4b24      	ldr	r3, [pc, #144]	; (800173c <HAL_UART_MspInit+0xc4>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b2:	613b      	str	r3, [r7, #16]
 80016b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	4b20      	ldr	r3, [pc, #128]	; (800173c <HAL_UART_MspInit+0xc4>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	4a1f      	ldr	r2, [pc, #124]	; (800173c <HAL_UART_MspInit+0xc4>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	6313      	str	r3, [r2, #48]	; 0x30
 80016c6:	4b1d      	ldr	r3, [pc, #116]	; (800173c <HAL_UART_MspInit+0xc4>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	60bb      	str	r3, [r7, #8]
 80016d6:	4b19      	ldr	r3, [pc, #100]	; (800173c <HAL_UART_MspInit+0xc4>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	4a18      	ldr	r2, [pc, #96]	; (800173c <HAL_UART_MspInit+0xc4>)
 80016dc:	f043 0308 	orr.w	r3, r3, #8
 80016e0:	6313      	str	r3, [r2, #48]	; 0x30
 80016e2:	4b16      	ldr	r3, [pc, #88]	; (800173c <HAL_UART_MspInit+0xc4>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	f003 0308 	and.w	r3, r3, #8
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016ee:	2304      	movs	r3, #4
 80016f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f2:	2302      	movs	r3, #2
 80016f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fa:	2303      	movs	r3, #3
 80016fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016fe:	2307      	movs	r3, #7
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001702:	f107 0314 	add.w	r3, r7, #20
 8001706:	4619      	mov	r1, r3
 8001708:	480d      	ldr	r0, [pc, #52]	; (8001740 <HAL_UART_MspInit+0xc8>)
 800170a:	f001 fb69 	bl	8002de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800170e:	2340      	movs	r3, #64	; 0x40
 8001710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001712:	2302      	movs	r3, #2
 8001714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171a:	2303      	movs	r3, #3
 800171c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800171e:	2307      	movs	r3, #7
 8001720:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001722:	f107 0314 	add.w	r3, r7, #20
 8001726:	4619      	mov	r1, r3
 8001728:	4806      	ldr	r0, [pc, #24]	; (8001744 <HAL_UART_MspInit+0xcc>)
 800172a:	f001 fb59 	bl	8002de0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800172e:	bf00      	nop
 8001730:	3728      	adds	r7, #40	; 0x28
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40004400 	.word	0x40004400
 800173c:	40023800 	.word	0x40023800
 8001740:	40020000 	.word	0x40020000
 8001744:	40020c00 	.word	0x40020c00

08001748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800175a:	e7fe      	b.n	800175a <HardFault_Handler+0x4>

0800175c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001760:	e7fe      	b.n	8001760 <MemManage_Handler+0x4>

08001762 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001766:	e7fe      	b.n	8001766 <BusFault_Handler+0x4>

08001768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800176c:	e7fe      	b.n	800176c <UsageFault_Handler+0x4>

0800176e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800179c:	f000 f918 	bl	80019d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017a8:	4802      	ldr	r0, [pc, #8]	; (80017b4 <TIM2_IRQHandler+0x10>)
 80017aa:	f003 fb00 	bl	8004dae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	200006b0 	.word	0x200006b0

080017b8 <OTG_FS_WKUP_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS wake-up interrupt through EXTI line 18.
  */
void OTG_FS_WKUP_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_WKUP_IRQn 0 */

  /* USER CODE END OTG_FS_WKUP_IRQn 0 */
  if ((&hpcd_USB_OTG_FS)->Init.low_power_enable) {
 80017bc:	4b0e      	ldr	r3, [pc, #56]	; (80017f8 <OTG_FS_WKUP_IRQHandler+0x40>)
 80017be:	6a1b      	ldr	r3, [r3, #32]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d007      	beq.n	80017d4 <OTG_FS_WKUP_IRQHandler+0x1c>
    /* Reset SLEEPDEEP bit of Cortex System Control Register */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80017c4:	4b0d      	ldr	r3, [pc, #52]	; (80017fc <OTG_FS_WKUP_IRQHandler+0x44>)
 80017c6:	691b      	ldr	r3, [r3, #16]
 80017c8:	4a0c      	ldr	r2, [pc, #48]	; (80017fc <OTG_FS_WKUP_IRQHandler+0x44>)
 80017ca:	f023 0306 	bic.w	r3, r3, #6
 80017ce:	6113      	str	r3, [r2, #16]
    SystemClock_Config();
 80017d0:	f7ff fbf8 	bl	8000fc4 <SystemClock_Config>
  }
  __HAL_PCD_UNGATE_PHYCLOCK(&hpcd_USB_OTG_FS);
 80017d4:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <OTG_FS_WKUP_IRQHandler+0x40>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a06      	ldr	r2, [pc, #24]	; (80017f8 <OTG_FS_WKUP_IRQHandler+0x40>)
 80017e0:	6812      	ldr	r2, [r2, #0]
 80017e2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80017e6:	f023 0301 	bic.w	r3, r3, #1
 80017ea:	6013      	str	r3, [r2, #0]
  /* Clear EXTI pending bit */
  __HAL_USB_OTG_FS_WAKEUP_EXTI_CLEAR_FLAG();
 80017ec:	4b04      	ldr	r3, [pc, #16]	; (8001800 <OTG_FS_WKUP_IRQHandler+0x48>)
 80017ee:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80017f2:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN OTG_FS_WKUP_IRQn 1 */

  /* USER CODE END OTG_FS_WKUP_IRQn 1 */
}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	20001c08 	.word	0x20001c08
 80017fc:	e000ed00 	.word	0xe000ed00
 8001800:	40013c00 	.word	0x40013c00

08001804 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8001808:	4802      	ldr	r0, [pc, #8]	; (8001814 <TIM6_DAC_IRQHandler+0x10>)
 800180a:	f000 fe9c 	bl	8002546 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	2000045c 	.word	0x2000045c

08001818 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800181c:	4802      	ldr	r0, [pc, #8]	; (8001828 <DMA2_Stream0_IRQHandler+0x10>)
 800181e:	f001 f877 	bl	8002910 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000650 	.word	0x20000650

0800182c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001830:	4802      	ldr	r0, [pc, #8]	; (800183c <OTG_FS_IRQHandler+0x10>)
 8001832:	f001 fdd8 	bl	80033e6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20001c08 	.word	0x20001c08

08001840 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001848:	4a14      	ldr	r2, [pc, #80]	; (800189c <_sbrk+0x5c>)
 800184a:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <_sbrk+0x60>)
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001854:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <_sbrk+0x64>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d102      	bne.n	8001862 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800185c:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <_sbrk+0x64>)
 800185e:	4a12      	ldr	r2, [pc, #72]	; (80018a8 <_sbrk+0x68>)
 8001860:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001862:	4b10      	ldr	r3, [pc, #64]	; (80018a4 <_sbrk+0x64>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	429a      	cmp	r2, r3
 800186e:	d207      	bcs.n	8001880 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001870:	f007 fed6 	bl	8009620 <__errno>
 8001874:	4602      	mov	r2, r0
 8001876:	230c      	movs	r3, #12
 8001878:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800187a:	f04f 33ff 	mov.w	r3, #4294967295
 800187e:	e009      	b.n	8001894 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001880:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <_sbrk+0x64>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001886:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <_sbrk+0x64>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4413      	add	r3, r2
 800188e:	4a05      	ldr	r2, [pc, #20]	; (80018a4 <_sbrk+0x64>)
 8001890:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001892:	68fb      	ldr	r3, [r7, #12]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3718      	adds	r7, #24
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20020000 	.word	0x20020000
 80018a0:	00000500 	.word	0x00000500
 80018a4:	20000224 	.word	0x20000224
 80018a8:	20002018 	.word	0x20002018

080018ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018b0:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <SystemInit+0x28>)
 80018b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018b6:	4a07      	ldr	r2, [pc, #28]	; (80018d4 <SystemInit+0x28>)
 80018b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018c0:	4b04      	ldr	r3, [pc, #16]	; (80018d4 <SystemInit+0x28>)
 80018c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018c6:	609a      	str	r2, [r3, #8]
#endif
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001910 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80018dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80018de:	e003      	b.n	80018e8 <LoopCopyDataInit>

080018e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80018e0:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80018e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80018e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80018e6:	3104      	adds	r1, #4

080018e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80018e8:	480b      	ldr	r0, [pc, #44]	; (8001918 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80018ea:	4b0c      	ldr	r3, [pc, #48]	; (800191c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80018ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80018ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80018f0:	d3f6      	bcc.n	80018e0 <CopyDataInit>
  ldr  r2, =_sbss
 80018f2:	4a0b      	ldr	r2, [pc, #44]	; (8001920 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80018f4:	e002      	b.n	80018fc <LoopFillZerobss>

080018f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80018f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80018f8:	f842 3b04 	str.w	r3, [r2], #4

080018fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80018fc:	4b09      	ldr	r3, [pc, #36]	; (8001924 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80018fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001900:	d3f9      	bcc.n	80018f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001902:	f7ff ffd3 	bl	80018ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001906:	f007 fe91 	bl	800962c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800190a:	f7ff fb2f 	bl	8000f6c <main>
  bx  lr    
 800190e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001910:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001914:	08009888 	.word	0x08009888
  ldr  r0, =_sdata
 8001918:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800191c:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 8001920:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 8001924:	20002014 	.word	0x20002014

08001928 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001928:	e7fe      	b.n	8001928 <ADC_IRQHandler>
	...

0800192c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001930:	4b0e      	ldr	r3, [pc, #56]	; (800196c <HAL_Init+0x40>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a0d      	ldr	r2, [pc, #52]	; (800196c <HAL_Init+0x40>)
 8001936:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800193a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800193c:	4b0b      	ldr	r3, [pc, #44]	; (800196c <HAL_Init+0x40>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a0a      	ldr	r2, [pc, #40]	; (800196c <HAL_Init+0x40>)
 8001942:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001946:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001948:	4b08      	ldr	r3, [pc, #32]	; (800196c <HAL_Init+0x40>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a07      	ldr	r2, [pc, #28]	; (800196c <HAL_Init+0x40>)
 800194e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001952:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001954:	2003      	movs	r0, #3
 8001956:	f000 fd2d 	bl	80023b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800195a:	2000      	movs	r0, #0
 800195c:	f000 f808 	bl	8001970 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001960:	f7ff fd78 	bl	8001454 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40023c00 	.word	0x40023c00

08001970 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001978:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <HAL_InitTick+0x54>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <HAL_InitTick+0x58>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	4619      	mov	r1, r3
 8001982:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001986:	fbb3 f3f1 	udiv	r3, r3, r1
 800198a:	fbb2 f3f3 	udiv	r3, r2, r3
 800198e:	4618      	mov	r0, r3
 8001990:	f000 fd45 	bl	800241e <HAL_SYSTICK_Config>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e00e      	b.n	80019bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b0f      	cmp	r3, #15
 80019a2:	d80a      	bhi.n	80019ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019a4:	2200      	movs	r2, #0
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ac:	f000 fd0d 	bl	80023ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019b0:	4a06      	ldr	r2, [pc, #24]	; (80019cc <HAL_InitTick+0x5c>)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
 80019b8:	e000      	b.n	80019bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20000000 	.word	0x20000000
 80019c8:	20000008 	.word	0x20000008
 80019cc:	20000004 	.word	0x20000004

080019d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019d4:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <HAL_IncTick+0x20>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	461a      	mov	r2, r3
 80019da:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <HAL_IncTick+0x24>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4413      	add	r3, r2
 80019e0:	4a04      	ldr	r2, [pc, #16]	; (80019f4 <HAL_IncTick+0x24>)
 80019e2:	6013      	str	r3, [r2, #0]
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	20000008 	.word	0x20000008
 80019f4:	20000734 	.word	0x20000734

080019f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  return uwTick;
 80019fc:	4b03      	ldr	r3, [pc, #12]	; (8001a0c <HAL_GetTick+0x14>)
 80019fe:	681b      	ldr	r3, [r3, #0]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	20000734 	.word	0x20000734

08001a10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a18:	f7ff ffee 	bl	80019f8 <HAL_GetTick>
 8001a1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a28:	d005      	beq.n	8001a36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a2a:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <HAL_Delay+0x40>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4413      	add	r3, r2
 8001a34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a36:	bf00      	nop
 8001a38:	f7ff ffde 	bl	80019f8 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d8f7      	bhi.n	8001a38 <HAL_Delay+0x28>
  {
  }
}
 8001a48:	bf00      	nop
 8001a4a:	3710      	adds	r7, #16
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20000008 	.word	0x20000008

08001a54 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e033      	b.n	8001ad2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d109      	bne.n	8001a86 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff fd16 	bl	80014a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	f003 0310 	and.w	r3, r3, #16
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d118      	bne.n	8001ac4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a9a:	f023 0302 	bic.w	r3, r3, #2
 8001a9e:	f043 0202 	orr.w	r2, r3, #2
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 fa36 	bl	8001f18 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	f023 0303 	bic.w	r3, r3, #3
 8001aba:	f043 0201 	orr.w	r2, r3, #1
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	641a      	str	r2, [r3, #64]	; 0x40
 8001ac2:	e001      	b.n	8001ac8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
	...

08001adc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d101      	bne.n	8001afa <HAL_ADC_Start_DMA+0x1e>
 8001af6:	2302      	movs	r3, #2
 8001af8:	e0cc      	b.n	8001c94 <HAL_ADC_Start_DMA+0x1b8>
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2201      	movs	r2, #1
 8001afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d018      	beq.n	8001b42 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689a      	ldr	r2, [r3, #8]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f042 0201 	orr.w	r2, r2, #1
 8001b1e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b20:	4b5e      	ldr	r3, [pc, #376]	; (8001c9c <HAL_ADC_Start_DMA+0x1c0>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a5e      	ldr	r2, [pc, #376]	; (8001ca0 <HAL_ADC_Start_DMA+0x1c4>)
 8001b26:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2a:	0c9a      	lsrs	r2, r3, #18
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	4413      	add	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001b34:	e002      	b.n	8001b3c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f9      	bne.n	8001b36 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	f040 80a0 	bne.w	8001c92 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b5a:	f023 0301 	bic.w	r3, r3, #1
 8001b5e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d007      	beq.n	8001b84 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b78:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b7c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b90:	d106      	bne.n	8001ba0 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b96:	f023 0206 	bic.w	r2, r3, #6
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	645a      	str	r2, [r3, #68]	; 0x44
 8001b9e:	e002      	b.n	8001ba6 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bae:	4b3d      	ldr	r3, [pc, #244]	; (8001ca4 <HAL_ADC_Start_DMA+0x1c8>)
 8001bb0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bb6:	4a3c      	ldr	r2, [pc, #240]	; (8001ca8 <HAL_ADC_Start_DMA+0x1cc>)
 8001bb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bbe:	4a3b      	ldr	r2, [pc, #236]	; (8001cac <HAL_ADC_Start_DMA+0x1d0>)
 8001bc0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bc6:	4a3a      	ldr	r2, [pc, #232]	; (8001cb0 <HAL_ADC_Start_DMA+0x1d4>)
 8001bc8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001bd2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	685a      	ldr	r2, [r3, #4]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001be2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bf2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	334c      	adds	r3, #76	; 0x4c
 8001bfe:	4619      	mov	r1, r3
 8001c00:	68ba      	ldr	r2, [r7, #8]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f000 fe2c 	bl	8002860 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 031f 	and.w	r3, r3, #31
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d12a      	bne.n	8001c6a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a26      	ldr	r2, [pc, #152]	; (8001cb4 <HAL_ADC_Start_DMA+0x1d8>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d015      	beq.n	8001c4a <HAL_ADC_Start_DMA+0x16e>
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a25      	ldr	r2, [pc, #148]	; (8001cb8 <HAL_ADC_Start_DMA+0x1dc>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d105      	bne.n	8001c34 <HAL_ADC_Start_DMA+0x158>
 8001c28:	4b1e      	ldr	r3, [pc, #120]	; (8001ca4 <HAL_ADC_Start_DMA+0x1c8>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 031f 	and.w	r3, r3, #31
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d00a      	beq.n	8001c4a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a20      	ldr	r2, [pc, #128]	; (8001cbc <HAL_ADC_Start_DMA+0x1e0>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d129      	bne.n	8001c92 <HAL_ADC_Start_DMA+0x1b6>
 8001c3e:	4b19      	ldr	r3, [pc, #100]	; (8001ca4 <HAL_ADC_Start_DMA+0x1c8>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f003 031f 	and.w	r3, r3, #31
 8001c46:	2b0f      	cmp	r3, #15
 8001c48:	d823      	bhi.n	8001c92 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d11c      	bne.n	8001c92 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	689a      	ldr	r2, [r3, #8]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	e013      	b.n	8001c92 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a11      	ldr	r2, [pc, #68]	; (8001cb4 <HAL_ADC_Start_DMA+0x1d8>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d10e      	bne.n	8001c92 <HAL_ADC_Start_DMA+0x1b6>
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d107      	bne.n	8001c92 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c90:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3718      	adds	r7, #24
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20000000 	.word	0x20000000
 8001ca0:	431bde83 	.word	0x431bde83
 8001ca4:	40012300 	.word	0x40012300
 8001ca8:	08002111 	.word	0x08002111
 8001cac:	080021cb 	.word	0x080021cb
 8001cb0:	080021e7 	.word	0x080021e7
 8001cb4:	40012000 	.word	0x40012000
 8001cb8:	40012100 	.word	0x40012100
 8001cbc:	40012200 	.word	0x40012200

08001cc0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d101      	bne.n	8001cf0 <HAL_ADC_ConfigChannel+0x1c>
 8001cec:	2302      	movs	r3, #2
 8001cee:	e105      	b.n	8001efc <HAL_ADC_ConfigChannel+0x228>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2b09      	cmp	r3, #9
 8001cfe:	d925      	bls.n	8001d4c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68d9      	ldr	r1, [r3, #12]
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4613      	mov	r3, r2
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	4413      	add	r3, r2
 8001d14:	3b1e      	subs	r3, #30
 8001d16:	2207      	movs	r2, #7
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	43da      	mvns	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	400a      	ands	r2, r1
 8001d24:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68d9      	ldr	r1, [r3, #12]
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	4618      	mov	r0, r3
 8001d38:	4603      	mov	r3, r0
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	4403      	add	r3, r0
 8001d3e:	3b1e      	subs	r3, #30
 8001d40:	409a      	lsls	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	430a      	orrs	r2, r1
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	e022      	b.n	8001d92 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6919      	ldr	r1, [r3, #16]
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	4413      	add	r3, r2
 8001d60:	2207      	movs	r2, #7
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43da      	mvns	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	400a      	ands	r2, r1
 8001d6e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6919      	ldr	r1, [r3, #16]
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	689a      	ldr	r2, [r3, #8]
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	4618      	mov	r0, r3
 8001d82:	4603      	mov	r3, r0
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	4403      	add	r3, r0
 8001d88:	409a      	lsls	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2b06      	cmp	r3, #6
 8001d98:	d824      	bhi.n	8001de4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	4613      	mov	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4413      	add	r3, r2
 8001daa:	3b05      	subs	r3, #5
 8001dac:	221f      	movs	r2, #31
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	43da      	mvns	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	400a      	ands	r2, r1
 8001dba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	4618      	mov	r0, r3
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685a      	ldr	r2, [r3, #4]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4413      	add	r3, r2
 8001dd4:	3b05      	subs	r3, #5
 8001dd6:	fa00 f203 	lsl.w	r2, r0, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	430a      	orrs	r2, r1
 8001de0:	635a      	str	r2, [r3, #52]	; 0x34
 8001de2:	e04c      	b.n	8001e7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	2b0c      	cmp	r3, #12
 8001dea:	d824      	bhi.n	8001e36 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685a      	ldr	r2, [r3, #4]
 8001df6:	4613      	mov	r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	4413      	add	r3, r2
 8001dfc:	3b23      	subs	r3, #35	; 0x23
 8001dfe:	221f      	movs	r2, #31
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	43da      	mvns	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	400a      	ands	r2, r1
 8001e0c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	4613      	mov	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	4413      	add	r3, r2
 8001e26:	3b23      	subs	r3, #35	; 0x23
 8001e28:	fa00 f203 	lsl.w	r2, r0, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	430a      	orrs	r2, r1
 8001e32:	631a      	str	r2, [r3, #48]	; 0x30
 8001e34:	e023      	b.n	8001e7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	4613      	mov	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	3b41      	subs	r3, #65	; 0x41
 8001e48:	221f      	movs	r2, #31
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	43da      	mvns	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	400a      	ands	r2, r1
 8001e56:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	4618      	mov	r0, r3
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	3b41      	subs	r3, #65	; 0x41
 8001e72:	fa00 f203 	lsl.w	r2, r0, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e7e:	4b22      	ldr	r3, [pc, #136]	; (8001f08 <HAL_ADC_ConfigChannel+0x234>)
 8001e80:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a21      	ldr	r2, [pc, #132]	; (8001f0c <HAL_ADC_ConfigChannel+0x238>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d109      	bne.n	8001ea0 <HAL_ADC_ConfigChannel+0x1cc>
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2b12      	cmp	r3, #18
 8001e92:	d105      	bne.n	8001ea0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a19      	ldr	r2, [pc, #100]	; (8001f0c <HAL_ADC_ConfigChannel+0x238>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d123      	bne.n	8001ef2 <HAL_ADC_ConfigChannel+0x21e>
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2b10      	cmp	r3, #16
 8001eb0:	d003      	beq.n	8001eba <HAL_ADC_ConfigChannel+0x1e6>
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2b11      	cmp	r3, #17
 8001eb8:	d11b      	bne.n	8001ef2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2b10      	cmp	r3, #16
 8001ecc:	d111      	bne.n	8001ef2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ece:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <HAL_ADC_ConfigChannel+0x23c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a10      	ldr	r2, [pc, #64]	; (8001f14 <HAL_ADC_ConfigChannel+0x240>)
 8001ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed8:	0c9a      	lsrs	r2, r3, #18
 8001eda:	4613      	mov	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4413      	add	r3, r2
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ee4:	e002      	b.n	8001eec <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1f9      	bne.n	8001ee6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	40012300 	.word	0x40012300
 8001f0c:	40012000 	.word	0x40012000
 8001f10:	20000000 	.word	0x20000000
 8001f14:	431bde83 	.word	0x431bde83

08001f18 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f20:	4b79      	ldr	r3, [pc, #484]	; (8002108 <ADC_Init+0x1f0>)
 8001f22:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	431a      	orrs	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	685a      	ldr	r2, [r3, #4]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6859      	ldr	r1, [r3, #4]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	021a      	lsls	r2, r3, #8
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	685a      	ldr	r2, [r3, #4]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001f70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6859      	ldr	r1, [r3, #4]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	430a      	orrs	r2, r1
 8001f82:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	689a      	ldr	r2, [r3, #8]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6899      	ldr	r1, [r3, #8]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68da      	ldr	r2, [r3, #12]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001faa:	4a58      	ldr	r2, [pc, #352]	; (800210c <ADC_Init+0x1f4>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d022      	beq.n	8001ff6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	689a      	ldr	r2, [r3, #8]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fbe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	6899      	ldr	r1, [r3, #8]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001fe0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6899      	ldr	r1, [r3, #8]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	609a      	str	r2, [r3, #8]
 8001ff4:	e00f      	b.n	8002016 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	689a      	ldr	r2, [r3, #8]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002004:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	689a      	ldr	r2, [r3, #8]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002014:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 0202 	bic.w	r2, r2, #2
 8002024:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	6899      	ldr	r1, [r3, #8]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	7e1b      	ldrb	r3, [r3, #24]
 8002030:	005a      	lsls	r2, r3, #1
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	430a      	orrs	r2, r1
 8002038:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d01b      	beq.n	800207c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	685a      	ldr	r2, [r3, #4]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002052:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	685a      	ldr	r2, [r3, #4]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002062:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6859      	ldr	r1, [r3, #4]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206e:	3b01      	subs	r3, #1
 8002070:	035a      	lsls	r2, r3, #13
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	430a      	orrs	r2, r1
 8002078:	605a      	str	r2, [r3, #4]
 800207a:	e007      	b.n	800208c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800208a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800209a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	3b01      	subs	r3, #1
 80020a8:	051a      	lsls	r2, r3, #20
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	430a      	orrs	r2, r1
 80020b0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80020c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6899      	ldr	r1, [r3, #8]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020ce:	025a      	lsls	r2, r3, #9
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	430a      	orrs	r2, r1
 80020d6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6899      	ldr	r1, [r3, #8]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	029a      	lsls	r2, r3, #10
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	430a      	orrs	r2, r1
 80020fa:	609a      	str	r2, [r3, #8]
}
 80020fc:	bf00      	nop
 80020fe:	3714      	adds	r7, #20
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	40012300 	.word	0x40012300
 800210c:	0f000001 	.word	0x0f000001

08002110 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800211c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002126:	2b00      	cmp	r3, #0
 8002128:	d13c      	bne.n	80021a4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d12b      	bne.n	800219c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002148:	2b00      	cmp	r3, #0
 800214a:	d127      	bne.n	800219c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002152:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002156:	2b00      	cmp	r3, #0
 8002158:	d006      	beq.n	8002168 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002164:	2b00      	cmp	r3, #0
 8002166:	d119      	bne.n	800219c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0220 	bic.w	r2, r2, #32
 8002176:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002188:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d105      	bne.n	800219c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002194:	f043 0201 	orr.w	r2, r3, #1
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f7fe fe89 	bl	8000eb4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80021a2:	e00e      	b.n	80021c2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a8:	f003 0310 	and.w	r3, r3, #16
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d003      	beq.n	80021b8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80021b0:	68f8      	ldr	r0, [r7, #12]
 80021b2:	f7ff fd85 	bl	8001cc0 <HAL_ADC_ErrorCallback>
}
 80021b6:	e004      	b.n	80021c2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	4798      	blx	r3
}
 80021c2:	bf00      	nop
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b084      	sub	sp, #16
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80021d8:	68f8      	ldr	r0, [r7, #12]
 80021da:	f7fe fe5b 	bl	8000e94 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021de:	bf00      	nop
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b084      	sub	sp, #16
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2240      	movs	r2, #64	; 0x40
 80021f8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fe:	f043 0204 	orr.w	r2, r3, #4
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002206:	68f8      	ldr	r0, [r7, #12]
 8002208:	f7ff fd5a 	bl	8001cc0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800220c:	bf00      	nop
 800220e:	3710      	adds	r7, #16
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002224:	4b0c      	ldr	r3, [pc, #48]	; (8002258 <__NVIC_SetPriorityGrouping+0x44>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002230:	4013      	ands	r3, r2
 8002232:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800223c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002244:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002246:	4a04      	ldr	r2, [pc, #16]	; (8002258 <__NVIC_SetPriorityGrouping+0x44>)
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	60d3      	str	r3, [r2, #12]
}
 800224c:	bf00      	nop
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	e000ed00 	.word	0xe000ed00

0800225c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002260:	4b04      	ldr	r3, [pc, #16]	; (8002274 <__NVIC_GetPriorityGrouping+0x18>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	0a1b      	lsrs	r3, r3, #8
 8002266:	f003 0307 	and.w	r3, r3, #7
}
 800226a:	4618      	mov	r0, r3
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002286:	2b00      	cmp	r3, #0
 8002288:	db0b      	blt.n	80022a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800228a:	79fb      	ldrb	r3, [r7, #7]
 800228c:	f003 021f 	and.w	r2, r3, #31
 8002290:	4907      	ldr	r1, [pc, #28]	; (80022b0 <__NVIC_EnableIRQ+0x38>)
 8002292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002296:	095b      	lsrs	r3, r3, #5
 8002298:	2001      	movs	r0, #1
 800229a:	fa00 f202 	lsl.w	r2, r0, r2
 800229e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	e000e100 	.word	0xe000e100

080022b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	4603      	mov	r3, r0
 80022bc:	6039      	str	r1, [r7, #0]
 80022be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	db0a      	blt.n	80022de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	b2da      	uxtb	r2, r3
 80022cc:	490c      	ldr	r1, [pc, #48]	; (8002300 <__NVIC_SetPriority+0x4c>)
 80022ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d2:	0112      	lsls	r2, r2, #4
 80022d4:	b2d2      	uxtb	r2, r2
 80022d6:	440b      	add	r3, r1
 80022d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022dc:	e00a      	b.n	80022f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	4908      	ldr	r1, [pc, #32]	; (8002304 <__NVIC_SetPriority+0x50>)
 80022e4:	79fb      	ldrb	r3, [r7, #7]
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	3b04      	subs	r3, #4
 80022ec:	0112      	lsls	r2, r2, #4
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	440b      	add	r3, r1
 80022f2:	761a      	strb	r2, [r3, #24]
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	e000e100 	.word	0xe000e100
 8002304:	e000ed00 	.word	0xe000ed00

08002308 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002308:	b480      	push	{r7}
 800230a:	b089      	sub	sp, #36	; 0x24
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	f1c3 0307 	rsb	r3, r3, #7
 8002322:	2b04      	cmp	r3, #4
 8002324:	bf28      	it	cs
 8002326:	2304      	movcs	r3, #4
 8002328:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	3304      	adds	r3, #4
 800232e:	2b06      	cmp	r3, #6
 8002330:	d902      	bls.n	8002338 <NVIC_EncodePriority+0x30>
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	3b03      	subs	r3, #3
 8002336:	e000      	b.n	800233a <NVIC_EncodePriority+0x32>
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800233c:	f04f 32ff 	mov.w	r2, #4294967295
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43da      	mvns	r2, r3
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	401a      	ands	r2, r3
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002350:	f04f 31ff 	mov.w	r1, #4294967295
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	fa01 f303 	lsl.w	r3, r1, r3
 800235a:	43d9      	mvns	r1, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002360:	4313      	orrs	r3, r2
         );
}
 8002362:	4618      	mov	r0, r3
 8002364:	3724      	adds	r7, #36	; 0x24
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
	...

08002370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3b01      	subs	r3, #1
 800237c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002380:	d301      	bcc.n	8002386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002382:	2301      	movs	r3, #1
 8002384:	e00f      	b.n	80023a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002386:	4a0a      	ldr	r2, [pc, #40]	; (80023b0 <SysTick_Config+0x40>)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3b01      	subs	r3, #1
 800238c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800238e:	210f      	movs	r1, #15
 8002390:	f04f 30ff 	mov.w	r0, #4294967295
 8002394:	f7ff ff8e 	bl	80022b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002398:	4b05      	ldr	r3, [pc, #20]	; (80023b0 <SysTick_Config+0x40>)
 800239a:	2200      	movs	r2, #0
 800239c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800239e:	4b04      	ldr	r3, [pc, #16]	; (80023b0 <SysTick_Config+0x40>)
 80023a0:	2207      	movs	r2, #7
 80023a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	e000e010 	.word	0xe000e010

080023b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f7ff ff29 	bl	8002214 <__NVIC_SetPriorityGrouping>
}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b086      	sub	sp, #24
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	4603      	mov	r3, r0
 80023d2:	60b9      	str	r1, [r7, #8]
 80023d4:	607a      	str	r2, [r7, #4]
 80023d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023d8:	2300      	movs	r3, #0
 80023da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023dc:	f7ff ff3e 	bl	800225c <__NVIC_GetPriorityGrouping>
 80023e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	68b9      	ldr	r1, [r7, #8]
 80023e6:	6978      	ldr	r0, [r7, #20]
 80023e8:	f7ff ff8e 	bl	8002308 <NVIC_EncodePriority>
 80023ec:	4602      	mov	r2, r0
 80023ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023f2:	4611      	mov	r1, r2
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff ff5d 	bl	80022b4 <__NVIC_SetPriority>
}
 80023fa:	bf00      	nop
 80023fc:	3718      	adds	r7, #24
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b082      	sub	sp, #8
 8002406:	af00      	add	r7, sp, #0
 8002408:	4603      	mov	r3, r0
 800240a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800240c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff ff31 	bl	8002278 <__NVIC_EnableIRQ>
}
 8002416:	bf00      	nop
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b082      	sub	sp, #8
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f7ff ffa2 	bl	8002370 <SysTick_Config>
 800242c:	4603      	mov	r3, r0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002436:	b580      	push	{r7, lr}
 8002438:	b082      	sub	sp, #8
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e014      	b.n	8002472 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	791b      	ldrb	r3, [r3, #4]
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d105      	bne.n	800245e <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f7ff f89b 	bl	8001594 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2202      	movs	r2, #2
 8002462:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2201      	movs	r2, #1
 800246e:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 800247a:	b480      	push	{r7}
 800247c:	b085      	sub	sp, #20
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
 8002482:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002484:	2300      	movs	r3, #0
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	2300      	movs	r3, #0
 800248a:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	795b      	ldrb	r3, [r3, #5]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d101      	bne.n	8002498 <HAL_DAC_Start+0x1e>
 8002494:	2302      	movs	r3, #2
 8002496:	e050      	b.n	800253a <HAL_DAC_Start+0xc0>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2202      	movs	r2, #2
 80024a2:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6819      	ldr	r1, [r3, #0]
 80024aa:	2201      	movs	r2, #1
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	409a      	lsls	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	430a      	orrs	r2, r1
 80024b6:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d11a      	bne.n	80024f4 <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024d4:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2b04      	cmp	r3, #4
 80024da:	d127      	bne.n	800252c <HAL_DAC_Start+0xb2>
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	2b38      	cmp	r3, #56	; 0x38
 80024e0:	d124      	bne.n	800252c <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	685a      	ldr	r2, [r3, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f042 0201 	orr.w	r2, r2, #1
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	e01b      	b.n	800252c <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024fe:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 800250a:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002512:	d10b      	bne.n	800252c <HAL_DAC_Start+0xb2>
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 800251a:	d107      	bne.n	800252c <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f042 0202 	orr.w	r2, r2, #2
 800252a:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3714      	adds	r7, #20
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b082      	sub	sp, #8
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002554:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002558:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800255c:	d118      	bne.n	8002590 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2204      	movs	r2, #4
 8002562:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	f043 0201 	orr.w	r2, r3, #1
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002578:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002588:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f825 	bl	80025da <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002596:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800259a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800259e:	d118      	bne.n	80025d2 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2204      	movs	r2, #4
 80025a4:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	f043 0202 	orr.w	r2, r3, #2
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80025ba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80025ca:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f000 f88e 	bl	80026ee <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 80025d2:	bf00      	nop
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b087      	sub	sp, #28
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	60f8      	str	r0, [r7, #12]
 80025f6:	60b9      	str	r1, [r7, #8]
 80025f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80025fa:	2300      	movs	r3, #0
 80025fc:	617b      	str	r3, [r7, #20]
 80025fe:	2300      	movs	r3, #0
 8002600:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	795b      	ldrb	r3, [r3, #5]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d101      	bne.n	800260e <HAL_DAC_ConfigChannel+0x20>
 800260a:	2302      	movs	r3, #2
 800260c:	e036      	b.n	800267c <HAL_DAC_ConfigChannel+0x8e>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2201      	movs	r2, #1
 8002612:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2202      	movs	r2, #2
 8002618:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002622:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	43db      	mvns	r3, r3
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	4013      	ands	r3, r2
 8002632:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	4313      	orrs	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	4313      	orrs	r3, r2
 800264c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6819      	ldr	r1, [r3, #0]
 800265c:	22c0      	movs	r2, #192	; 0xc0
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	43da      	mvns	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	400a      	ands	r2, r1
 800266c:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2201      	movs	r2, #1
 8002672:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	371c      	adds	r7, #28
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <HAL_DACEx_TriangleWaveGenerate>:
  *            @arg DAC_TRIANGLEAMPLITUDE_2047: Select max triangle amplitude of 2047
  *            @arg DAC_TRIANGLEAMPLITUDE_4095: Select max triangle amplitude of 4095                               
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_TriangleWaveGenerate(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Amplitude)
{  
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	795b      	ldrb	r3, [r3, #5]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d101      	bne.n	80026a0 <HAL_DACEx_TriangleWaveGenerate+0x18>
 800269c:	2302      	movs	r3, #2
 800269e:	e020      	b.n	80026e2 <HAL_DACEx_TriangleWaveGenerate+0x5a>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2201      	movs	r2, #1
 80026a4:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2202      	movs	r2, #2
 80026aa:	711a      	strb	r2, [r3, #4]
  
  /* Enable the selected wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, (DAC_CR_WAVE1 | DAC_CR_MAMP1) << Channel, (DAC_CR_WAVE1_1 | Amplitude) << Channel);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	fa01 f303 	lsl.w	r3, r1, r3
 80026bc:	43db      	mvns	r3, r3
 80026be:	ea02 0103 	and.w	r1, r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	409a      	lsls	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	430a      	orrs	r2, r1
 80026d2:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2201      	movs	r2, #1
 80026d8:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2200      	movs	r2, #0
 80026de:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b083      	sub	sp, #12
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
	...

08002704 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800270c:	2300      	movs	r3, #0
 800270e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002710:	f7ff f972 	bl	80019f8 <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e099      	b.n	8002854 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2202      	movs	r2, #2
 800272c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 0201 	bic.w	r2, r2, #1
 800273e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002740:	e00f      	b.n	8002762 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002742:	f7ff f959 	bl	80019f8 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b05      	cmp	r3, #5
 800274e:	d908      	bls.n	8002762 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2220      	movs	r2, #32
 8002754:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2203      	movs	r2, #3
 800275a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e078      	b.n	8002854 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1e8      	bne.n	8002742 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002778:	697a      	ldr	r2, [r7, #20]
 800277a:	4b38      	ldr	r3, [pc, #224]	; (800285c <HAL_DMA_Init+0x158>)
 800277c:	4013      	ands	r3, r2
 800277e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800278e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800279a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b8:	2b04      	cmp	r3, #4
 80027ba:	d107      	bne.n	80027cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c4:	4313      	orrs	r3, r2
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	697a      	ldr	r2, [r7, #20]
 80027d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	f023 0307 	bic.w	r3, r3, #7
 80027e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	d117      	bne.n	8002826 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00e      	beq.n	8002826 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 fa6f 	bl	8002cec <DMA_CheckFifoParam>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d008      	beq.n	8002826 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2240      	movs	r2, #64	; 0x40
 8002818:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002822:	2301      	movs	r3, #1
 8002824:	e016      	b.n	8002854 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 fa26 	bl	8002c80 <DMA_CalcBaseAndBitshift>
 8002834:	4603      	mov	r3, r0
 8002836:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283c:	223f      	movs	r2, #63	; 0x3f
 800283e:	409a      	lsls	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3718      	adds	r7, #24
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	f010803f 	.word	0xf010803f

08002860 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
 800286c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800286e:	2300      	movs	r3, #0
 8002870:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002876:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800287e:	2b01      	cmp	r3, #1
 8002880:	d101      	bne.n	8002886 <HAL_DMA_Start_IT+0x26>
 8002882:	2302      	movs	r3, #2
 8002884:	e040      	b.n	8002908 <HAL_DMA_Start_IT+0xa8>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b01      	cmp	r3, #1
 8002898:	d12f      	bne.n	80028fa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2202      	movs	r2, #2
 800289e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	68b9      	ldr	r1, [r7, #8]
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f000 f9b8 	bl	8002c24 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b8:	223f      	movs	r2, #63	; 0x3f
 80028ba:	409a      	lsls	r2, r3
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f042 0216 	orr.w	r2, r2, #22
 80028ce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d007      	beq.n	80028e8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f042 0208 	orr.w	r2, r2, #8
 80028e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 0201 	orr.w	r2, r2, #1
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	e005      	b.n	8002906 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002902:	2302      	movs	r3, #2
 8002904:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002906:	7dfb      	ldrb	r3, [r7, #23]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002918:	2300      	movs	r3, #0
 800291a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800291c:	4b92      	ldr	r3, [pc, #584]	; (8002b68 <HAL_DMA_IRQHandler+0x258>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a92      	ldr	r2, [pc, #584]	; (8002b6c <HAL_DMA_IRQHandler+0x25c>)
 8002922:	fba2 2303 	umull	r2, r3, r2, r3
 8002926:	0a9b      	lsrs	r3, r3, #10
 8002928:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800293a:	2208      	movs	r2, #8
 800293c:	409a      	lsls	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	4013      	ands	r3, r2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d01a      	beq.n	800297c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b00      	cmp	r3, #0
 8002952:	d013      	beq.n	800297c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 0204 	bic.w	r2, r2, #4
 8002962:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002968:	2208      	movs	r2, #8
 800296a:	409a      	lsls	r2, r3
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002974:	f043 0201 	orr.w	r2, r3, #1
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002980:	2201      	movs	r2, #1
 8002982:	409a      	lsls	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	4013      	ands	r3, r2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d012      	beq.n	80029b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00b      	beq.n	80029b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299e:	2201      	movs	r2, #1
 80029a0:	409a      	lsls	r2, r3
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029aa:	f043 0202 	orr.w	r2, r3, #2
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b6:	2204      	movs	r2, #4
 80029b8:	409a      	lsls	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	4013      	ands	r3, r2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d012      	beq.n	80029e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00b      	beq.n	80029e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d4:	2204      	movs	r2, #4
 80029d6:	409a      	lsls	r2, r3
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e0:	f043 0204 	orr.w	r2, r3, #4
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ec:	2210      	movs	r2, #16
 80029ee:	409a      	lsls	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4013      	ands	r3, r2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d043      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0308 	and.w	r3, r3, #8
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d03c      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a0a:	2210      	movs	r2, #16
 8002a0c:	409a      	lsls	r2, r3
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d018      	beq.n	8002a52 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d108      	bne.n	8002a40 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d024      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	4798      	blx	r3
 8002a3e:	e01f      	b.n	8002a80 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d01b      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	4798      	blx	r3
 8002a50:	e016      	b.n	8002a80 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d107      	bne.n	8002a70 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0208 	bic.w	r2, r2, #8
 8002a6e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d003      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a84:	2220      	movs	r2, #32
 8002a86:	409a      	lsls	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f000 808e 	beq.w	8002bae <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0310 	and.w	r3, r3, #16
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 8086 	beq.w	8002bae <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	409a      	lsls	r2, r3
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b05      	cmp	r3, #5
 8002ab8:	d136      	bne.n	8002b28 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f022 0216 	bic.w	r2, r2, #22
 8002ac8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	695a      	ldr	r2, [r3, #20]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ad8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d103      	bne.n	8002aea <HAL_DMA_IRQHandler+0x1da>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d007      	beq.n	8002afa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f022 0208 	bic.w	r2, r2, #8
 8002af8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afe:	223f      	movs	r2, #63	; 0x3f
 8002b00:	409a      	lsls	r2, r3
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d07d      	beq.n	8002c1a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	4798      	blx	r3
        }
        return;
 8002b26:	e078      	b.n	8002c1a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d01c      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d108      	bne.n	8002b56 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d030      	beq.n	8002bae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	4798      	blx	r3
 8002b54:	e02b      	b.n	8002bae <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d027      	beq.n	8002bae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	4798      	blx	r3
 8002b66:	e022      	b.n	8002bae <HAL_DMA_IRQHandler+0x29e>
 8002b68:	20000000 	.word	0x20000000
 8002b6c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10f      	bne.n	8002b9e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 0210 	bic.w	r2, r2, #16
 8002b8c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d032      	beq.n	8002c1c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d022      	beq.n	8002c08 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2205      	movs	r2, #5
 8002bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 0201 	bic.w	r2, r2, #1
 8002bd8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	3301      	adds	r3, #1
 8002bde:	60bb      	str	r3, [r7, #8]
 8002be0:	697a      	ldr	r2, [r7, #20]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d307      	bcc.n	8002bf6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1f2      	bne.n	8002bda <HAL_DMA_IRQHandler+0x2ca>
 8002bf4:	e000      	b.n	8002bf8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002bf6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d005      	beq.n	8002c1c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	4798      	blx	r3
 8002c18:	e000      	b.n	8002c1c <HAL_DMA_IRQHandler+0x30c>
        return;
 8002c1a:	bf00      	nop
    }
  }
}
 8002c1c:	3718      	adds	r7, #24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop

08002c24 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
 8002c30:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c40:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	2b40      	cmp	r3, #64	; 0x40
 8002c50:	d108      	bne.n	8002c64 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68ba      	ldr	r2, [r7, #8]
 8002c60:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002c62:	e007      	b.n	8002c74 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	60da      	str	r2, [r3, #12]
}
 8002c74:	bf00      	nop
 8002c76:	3714      	adds	r7, #20
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	3b10      	subs	r3, #16
 8002c90:	4a14      	ldr	r2, [pc, #80]	; (8002ce4 <DMA_CalcBaseAndBitshift+0x64>)
 8002c92:	fba2 2303 	umull	r2, r3, r2, r3
 8002c96:	091b      	lsrs	r3, r3, #4
 8002c98:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c9a:	4a13      	ldr	r2, [pc, #76]	; (8002ce8 <DMA_CalcBaseAndBitshift+0x68>)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2b03      	cmp	r3, #3
 8002cac:	d909      	bls.n	8002cc2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002cb6:	f023 0303 	bic.w	r3, r3, #3
 8002cba:	1d1a      	adds	r2, r3, #4
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	659a      	str	r2, [r3, #88]	; 0x58
 8002cc0:	e007      	b.n	8002cd2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002cca:	f023 0303 	bic.w	r3, r3, #3
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3714      	adds	r7, #20
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	aaaaaaab 	.word	0xaaaaaaab
 8002ce8:	08009870 	.word	0x08009870

08002cec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d11f      	bne.n	8002d46 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	2b03      	cmp	r3, #3
 8002d0a:	d855      	bhi.n	8002db8 <DMA_CheckFifoParam+0xcc>
 8002d0c:	a201      	add	r2, pc, #4	; (adr r2, 8002d14 <DMA_CheckFifoParam+0x28>)
 8002d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d12:	bf00      	nop
 8002d14:	08002d25 	.word	0x08002d25
 8002d18:	08002d37 	.word	0x08002d37
 8002d1c:	08002d25 	.word	0x08002d25
 8002d20:	08002db9 	.word	0x08002db9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d045      	beq.n	8002dbc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d34:	e042      	b.n	8002dbc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d3e:	d13f      	bne.n	8002dc0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d44:	e03c      	b.n	8002dc0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d4e:	d121      	bne.n	8002d94 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	2b03      	cmp	r3, #3
 8002d54:	d836      	bhi.n	8002dc4 <DMA_CheckFifoParam+0xd8>
 8002d56:	a201      	add	r2, pc, #4	; (adr r2, 8002d5c <DMA_CheckFifoParam+0x70>)
 8002d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d5c:	08002d6d 	.word	0x08002d6d
 8002d60:	08002d73 	.word	0x08002d73
 8002d64:	08002d6d 	.word	0x08002d6d
 8002d68:	08002d85 	.word	0x08002d85
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d70:	e02f      	b.n	8002dd2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d024      	beq.n	8002dc8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d82:	e021      	b.n	8002dc8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d88:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d8c:	d11e      	bne.n	8002dcc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d92:	e01b      	b.n	8002dcc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d902      	bls.n	8002da0 <DMA_CheckFifoParam+0xb4>
 8002d9a:	2b03      	cmp	r3, #3
 8002d9c:	d003      	beq.n	8002da6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d9e:	e018      	b.n	8002dd2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	73fb      	strb	r3, [r7, #15]
      break;
 8002da4:	e015      	b.n	8002dd2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002daa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00e      	beq.n	8002dd0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	73fb      	strb	r3, [r7, #15]
      break;
 8002db6:	e00b      	b.n	8002dd0 <DMA_CheckFifoParam+0xe4>
      break;
 8002db8:	bf00      	nop
 8002dba:	e00a      	b.n	8002dd2 <DMA_CheckFifoParam+0xe6>
      break;
 8002dbc:	bf00      	nop
 8002dbe:	e008      	b.n	8002dd2 <DMA_CheckFifoParam+0xe6>
      break;
 8002dc0:	bf00      	nop
 8002dc2:	e006      	b.n	8002dd2 <DMA_CheckFifoParam+0xe6>
      break;
 8002dc4:	bf00      	nop
 8002dc6:	e004      	b.n	8002dd2 <DMA_CheckFifoParam+0xe6>
      break;
 8002dc8:	bf00      	nop
 8002dca:	e002      	b.n	8002dd2 <DMA_CheckFifoParam+0xe6>
      break;   
 8002dcc:	bf00      	nop
 8002dce:	e000      	b.n	8002dd2 <DMA_CheckFifoParam+0xe6>
      break;
 8002dd0:	bf00      	nop
    }
  } 
  
  return status; 
 8002dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3714      	adds	r7, #20
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b089      	sub	sp, #36	; 0x24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dea:	2300      	movs	r3, #0
 8002dec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002dee:	2300      	movs	r3, #0
 8002df0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002df2:	2300      	movs	r3, #0
 8002df4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002df6:	2300      	movs	r3, #0
 8002df8:	61fb      	str	r3, [r7, #28]
 8002dfa:	e16b      	b.n	80030d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	f040 815a 	bne.w	80030ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d00b      	beq.n	8002e3a <HAL_GPIO_Init+0x5a>
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d007      	beq.n	8002e3a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e2e:	2b11      	cmp	r3, #17
 8002e30:	d003      	beq.n	8002e3a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2b12      	cmp	r3, #18
 8002e38:	d130      	bne.n	8002e9c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	2203      	movs	r2, #3
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	68da      	ldr	r2, [r3, #12]
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e70:	2201      	movs	r2, #1
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	091b      	lsrs	r3, r3, #4
 8002e86:	f003 0201 	and.w	r2, r3, #1
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	2203      	movs	r2, #3
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	43db      	mvns	r3, r3
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	689a      	ldr	r2, [r3, #8]
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d003      	beq.n	8002edc <HAL_GPIO_Init+0xfc>
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	2b12      	cmp	r3, #18
 8002eda:	d123      	bne.n	8002f24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	08da      	lsrs	r2, r3, #3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3208      	adds	r2, #8
 8002ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	f003 0307 	and.w	r3, r3, #7
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	220f      	movs	r2, #15
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	4013      	ands	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	691a      	ldr	r2, [r3, #16]
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	f003 0307 	and.w	r3, r3, #7
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	08da      	lsrs	r2, r3, #3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	3208      	adds	r2, #8
 8002f1e:	69b9      	ldr	r1, [r7, #24]
 8002f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	2203      	movs	r2, #3
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	43db      	mvns	r3, r3
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f003 0203 	and.w	r2, r3, #3
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 80b4 	beq.w	80030ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f66:	2300      	movs	r3, #0
 8002f68:	60fb      	str	r3, [r7, #12]
 8002f6a:	4b5f      	ldr	r3, [pc, #380]	; (80030e8 <HAL_GPIO_Init+0x308>)
 8002f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6e:	4a5e      	ldr	r2, [pc, #376]	; (80030e8 <HAL_GPIO_Init+0x308>)
 8002f70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f74:	6453      	str	r3, [r2, #68]	; 0x44
 8002f76:	4b5c      	ldr	r3, [pc, #368]	; (80030e8 <HAL_GPIO_Init+0x308>)
 8002f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f82:	4a5a      	ldr	r2, [pc, #360]	; (80030ec <HAL_GPIO_Init+0x30c>)
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	089b      	lsrs	r3, r3, #2
 8002f88:	3302      	adds	r3, #2
 8002f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	220f      	movs	r2, #15
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	43db      	mvns	r3, r3
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a51      	ldr	r2, [pc, #324]	; (80030f0 <HAL_GPIO_Init+0x310>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d02b      	beq.n	8003006 <HAL_GPIO_Init+0x226>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a50      	ldr	r2, [pc, #320]	; (80030f4 <HAL_GPIO_Init+0x314>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d025      	beq.n	8003002 <HAL_GPIO_Init+0x222>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a4f      	ldr	r2, [pc, #316]	; (80030f8 <HAL_GPIO_Init+0x318>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d01f      	beq.n	8002ffe <HAL_GPIO_Init+0x21e>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a4e      	ldr	r2, [pc, #312]	; (80030fc <HAL_GPIO_Init+0x31c>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d019      	beq.n	8002ffa <HAL_GPIO_Init+0x21a>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a4d      	ldr	r2, [pc, #308]	; (8003100 <HAL_GPIO_Init+0x320>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d013      	beq.n	8002ff6 <HAL_GPIO_Init+0x216>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a4c      	ldr	r2, [pc, #304]	; (8003104 <HAL_GPIO_Init+0x324>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d00d      	beq.n	8002ff2 <HAL_GPIO_Init+0x212>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a4b      	ldr	r2, [pc, #300]	; (8003108 <HAL_GPIO_Init+0x328>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d007      	beq.n	8002fee <HAL_GPIO_Init+0x20e>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a4a      	ldr	r2, [pc, #296]	; (800310c <HAL_GPIO_Init+0x32c>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d101      	bne.n	8002fea <HAL_GPIO_Init+0x20a>
 8002fe6:	2307      	movs	r3, #7
 8002fe8:	e00e      	b.n	8003008 <HAL_GPIO_Init+0x228>
 8002fea:	2308      	movs	r3, #8
 8002fec:	e00c      	b.n	8003008 <HAL_GPIO_Init+0x228>
 8002fee:	2306      	movs	r3, #6
 8002ff0:	e00a      	b.n	8003008 <HAL_GPIO_Init+0x228>
 8002ff2:	2305      	movs	r3, #5
 8002ff4:	e008      	b.n	8003008 <HAL_GPIO_Init+0x228>
 8002ff6:	2304      	movs	r3, #4
 8002ff8:	e006      	b.n	8003008 <HAL_GPIO_Init+0x228>
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e004      	b.n	8003008 <HAL_GPIO_Init+0x228>
 8002ffe:	2302      	movs	r3, #2
 8003000:	e002      	b.n	8003008 <HAL_GPIO_Init+0x228>
 8003002:	2301      	movs	r3, #1
 8003004:	e000      	b.n	8003008 <HAL_GPIO_Init+0x228>
 8003006:	2300      	movs	r3, #0
 8003008:	69fa      	ldr	r2, [r7, #28]
 800300a:	f002 0203 	and.w	r2, r2, #3
 800300e:	0092      	lsls	r2, r2, #2
 8003010:	4093      	lsls	r3, r2
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	4313      	orrs	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003018:	4934      	ldr	r1, [pc, #208]	; (80030ec <HAL_GPIO_Init+0x30c>)
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	089b      	lsrs	r3, r3, #2
 800301e:	3302      	adds	r3, #2
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003026:	4b3a      	ldr	r3, [pc, #232]	; (8003110 <HAL_GPIO_Init+0x330>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	43db      	mvns	r3, r3
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	4013      	ands	r3, r2
 8003034:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d003      	beq.n	800304a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	4313      	orrs	r3, r2
 8003048:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800304a:	4a31      	ldr	r2, [pc, #196]	; (8003110 <HAL_GPIO_Init+0x330>)
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003050:	4b2f      	ldr	r3, [pc, #188]	; (8003110 <HAL_GPIO_Init+0x330>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	43db      	mvns	r3, r3
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	4013      	ands	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d003      	beq.n	8003074 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	4313      	orrs	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003074:	4a26      	ldr	r2, [pc, #152]	; (8003110 <HAL_GPIO_Init+0x330>)
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800307a:	4b25      	ldr	r3, [pc, #148]	; (8003110 <HAL_GPIO_Init+0x330>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	43db      	mvns	r3, r3
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	4013      	ands	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d003      	beq.n	800309e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	4313      	orrs	r3, r2
 800309c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800309e:	4a1c      	ldr	r2, [pc, #112]	; (8003110 <HAL_GPIO_Init+0x330>)
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030a4:	4b1a      	ldr	r3, [pc, #104]	; (8003110 <HAL_GPIO_Init+0x330>)
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	43db      	mvns	r3, r3
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	4013      	ands	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d003      	beq.n	80030c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030c8:	4a11      	ldr	r2, [pc, #68]	; (8003110 <HAL_GPIO_Init+0x330>)
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	3301      	adds	r3, #1
 80030d2:	61fb      	str	r3, [r7, #28]
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	2b0f      	cmp	r3, #15
 80030d8:	f67f ae90 	bls.w	8002dfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030dc:	bf00      	nop
 80030de:	3724      	adds	r7, #36	; 0x24
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	40023800 	.word	0x40023800
 80030ec:	40013800 	.word	0x40013800
 80030f0:	40020000 	.word	0x40020000
 80030f4:	40020400 	.word	0x40020400
 80030f8:	40020800 	.word	0x40020800
 80030fc:	40020c00 	.word	0x40020c00
 8003100:	40021000 	.word	0x40021000
 8003104:	40021400 	.word	0x40021400
 8003108:	40021800 	.word	0x40021800
 800310c:	40021c00 	.word	0x40021c00
 8003110:	40013c00 	.word	0x40013c00

08003114 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	460b      	mov	r3, r1
 800311e:	807b      	strh	r3, [r7, #2]
 8003120:	4613      	mov	r3, r2
 8003122:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003124:	787b      	ldrb	r3, [r7, #1]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d003      	beq.n	8003132 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800312a:	887a      	ldrh	r2, [r7, #2]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003130:	e003      	b.n	800313a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003132:	887b      	ldrh	r3, [r7, #2]
 8003134:	041a      	lsls	r2, r3, #16
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	619a      	str	r2, [r3, #24]
}
 800313a:	bf00      	nop
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr

08003146 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003146:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003148:	b08f      	sub	sp, #60	; 0x3c
 800314a:	af0a      	add	r7, sp, #40	; 0x28
 800314c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d101      	bne.n	8003158 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e10f      	b.n	8003378 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d106      	bne.n	8003178 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f005 ff26 	bl	8008fc4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2203      	movs	r2, #3
 800317c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003188:	2b00      	cmp	r3, #0
 800318a:	d102      	bne.n	8003192 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4618      	mov	r0, r3
 8003198:	f002 fea3 	bl	8005ee2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	603b      	str	r3, [r7, #0]
 80031a2:	687e      	ldr	r6, [r7, #4]
 80031a4:	466d      	mov	r5, sp
 80031a6:	f106 0410 	add.w	r4, r6, #16
 80031aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80031ba:	1d33      	adds	r3, r6, #4
 80031bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031be:	6838      	ldr	r0, [r7, #0]
 80031c0:	f002 fd7a 	bl	8005cb8 <USB_CoreInit>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d005      	beq.n	80031d6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2202      	movs	r2, #2
 80031ce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e0d0      	b.n	8003378 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2100      	movs	r1, #0
 80031dc:	4618      	mov	r0, r3
 80031de:	f002 fe91 	bl	8005f04 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031e2:	2300      	movs	r3, #0
 80031e4:	73fb      	strb	r3, [r7, #15]
 80031e6:	e04a      	b.n	800327e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80031e8:	7bfa      	ldrb	r2, [r7, #15]
 80031ea:	6879      	ldr	r1, [r7, #4]
 80031ec:	4613      	mov	r3, r2
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	1a9b      	subs	r3, r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	440b      	add	r3, r1
 80031f6:	333d      	adds	r3, #61	; 0x3d
 80031f8:	2201      	movs	r2, #1
 80031fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80031fc:	7bfa      	ldrb	r2, [r7, #15]
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	4613      	mov	r3, r2
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	1a9b      	subs	r3, r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	333c      	adds	r3, #60	; 0x3c
 800320c:	7bfa      	ldrb	r2, [r7, #15]
 800320e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003210:	7bfa      	ldrb	r2, [r7, #15]
 8003212:	7bfb      	ldrb	r3, [r7, #15]
 8003214:	b298      	uxth	r0, r3
 8003216:	6879      	ldr	r1, [r7, #4]
 8003218:	4613      	mov	r3, r2
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	1a9b      	subs	r3, r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	440b      	add	r3, r1
 8003222:	3342      	adds	r3, #66	; 0x42
 8003224:	4602      	mov	r2, r0
 8003226:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003228:	7bfa      	ldrb	r2, [r7, #15]
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	4613      	mov	r3, r2
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	1a9b      	subs	r3, r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	440b      	add	r3, r1
 8003236:	333f      	adds	r3, #63	; 0x3f
 8003238:	2200      	movs	r2, #0
 800323a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800323c:	7bfa      	ldrb	r2, [r7, #15]
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	4613      	mov	r3, r2
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	1a9b      	subs	r3, r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	3344      	adds	r3, #68	; 0x44
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003250:	7bfa      	ldrb	r2, [r7, #15]
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	4613      	mov	r3, r2
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	1a9b      	subs	r3, r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	440b      	add	r3, r1
 800325e:	3348      	adds	r3, #72	; 0x48
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003264:	7bfa      	ldrb	r2, [r7, #15]
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	4613      	mov	r3, r2
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	1a9b      	subs	r3, r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	440b      	add	r3, r1
 8003272:	3350      	adds	r3, #80	; 0x50
 8003274:	2200      	movs	r2, #0
 8003276:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003278:	7bfb      	ldrb	r3, [r7, #15]
 800327a:	3301      	adds	r3, #1
 800327c:	73fb      	strb	r3, [r7, #15]
 800327e:	7bfa      	ldrb	r2, [r7, #15]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	429a      	cmp	r2, r3
 8003286:	d3af      	bcc.n	80031e8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003288:	2300      	movs	r3, #0
 800328a:	73fb      	strb	r3, [r7, #15]
 800328c:	e044      	b.n	8003318 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800328e:	7bfa      	ldrb	r2, [r7, #15]
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	4613      	mov	r3, r2
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	1a9b      	subs	r3, r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	440b      	add	r3, r1
 800329c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80032a0:	2200      	movs	r2, #0
 80032a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80032a4:	7bfa      	ldrb	r2, [r7, #15]
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	4613      	mov	r3, r2
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	1a9b      	subs	r3, r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	440b      	add	r3, r1
 80032b2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80032b6:	7bfa      	ldrb	r2, [r7, #15]
 80032b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80032ba:	7bfa      	ldrb	r2, [r7, #15]
 80032bc:	6879      	ldr	r1, [r7, #4]
 80032be:	4613      	mov	r3, r2
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	1a9b      	subs	r3, r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	440b      	add	r3, r1
 80032c8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80032cc:	2200      	movs	r2, #0
 80032ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80032d0:	7bfa      	ldrb	r2, [r7, #15]
 80032d2:	6879      	ldr	r1, [r7, #4]
 80032d4:	4613      	mov	r3, r2
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	1a9b      	subs	r3, r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	440b      	add	r3, r1
 80032de:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80032e2:	2200      	movs	r2, #0
 80032e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80032e6:	7bfa      	ldrb	r2, [r7, #15]
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	4613      	mov	r3, r2
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	1a9b      	subs	r3, r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	440b      	add	r3, r1
 80032f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80032fc:	7bfa      	ldrb	r2, [r7, #15]
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	4613      	mov	r3, r2
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	1a9b      	subs	r3, r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	440b      	add	r3, r1
 800330a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800330e:	2200      	movs	r2, #0
 8003310:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003312:	7bfb      	ldrb	r3, [r7, #15]
 8003314:	3301      	adds	r3, #1
 8003316:	73fb      	strb	r3, [r7, #15]
 8003318:	7bfa      	ldrb	r2, [r7, #15]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	429a      	cmp	r2, r3
 8003320:	d3b5      	bcc.n	800328e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	603b      	str	r3, [r7, #0]
 8003328:	687e      	ldr	r6, [r7, #4]
 800332a:	466d      	mov	r5, sp
 800332c:	f106 0410 	add.w	r4, r6, #16
 8003330:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003332:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003334:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003336:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003338:	e894 0003 	ldmia.w	r4, {r0, r1}
 800333c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003340:	1d33      	adds	r3, r6, #4
 8003342:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003344:	6838      	ldr	r0, [r7, #0]
 8003346:	f002 fe07 	bl	8005f58 <USB_DevInit>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d005      	beq.n	800335c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2202      	movs	r2, #2
 8003354:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e00d      	b.n	8003378 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4618      	mov	r0, r3
 8003372:	f003 fe4f 	bl	8007014 <USB_DevDisconnect>

  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003380 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003394:	2b01      	cmp	r3, #1
 8003396:	d101      	bne.n	800339c <HAL_PCD_Start+0x1c>
 8003398:	2302      	movs	r3, #2
 800339a:	e020      	b.n	80033de <HAL_PCD_Start+0x5e>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d109      	bne.n	80033c0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d005      	beq.n	80033c0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f002 fd7b 	bl	8005ec0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f003 fdff 	bl	8006fd2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80033e6:	b590      	push	{r4, r7, lr}
 80033e8:	b08d      	sub	sp, #52	; 0x34
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033f4:	6a3b      	ldr	r3, [r7, #32]
 80033f6:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f003 febd 	bl	800717c <USB_GetMode>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	f040 839d 	bne.w	8003b44 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4618      	mov	r0, r3
 8003410:	f003 fe21 	bl	8007056 <USB_ReadInterrupts>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	f000 8393 	beq.w	8003b42 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4618      	mov	r0, r3
 8003422:	f003 fe18 	bl	8007056 <USB_ReadInterrupts>
 8003426:	4603      	mov	r3, r0
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b02      	cmp	r3, #2
 800342e:	d107      	bne.n	8003440 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	695a      	ldr	r2, [r3, #20]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f002 0202 	and.w	r2, r2, #2
 800343e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4618      	mov	r0, r3
 8003446:	f003 fe06 	bl	8007056 <USB_ReadInterrupts>
 800344a:	4603      	mov	r3, r0
 800344c:	f003 0310 	and.w	r3, r3, #16
 8003450:	2b10      	cmp	r3, #16
 8003452:	d161      	bne.n	8003518 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	699a      	ldr	r2, [r3, #24]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 0210 	bic.w	r2, r2, #16
 8003462:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003464:	6a3b      	ldr	r3, [r7, #32]
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	f003 020f 	and.w	r2, r3, #15
 8003470:	4613      	mov	r3, r2
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	1a9b      	subs	r3, r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	4413      	add	r3, r2
 8003480:	3304      	adds	r3, #4
 8003482:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	0c5b      	lsrs	r3, r3, #17
 8003488:	f003 030f 	and.w	r3, r3, #15
 800348c:	2b02      	cmp	r3, #2
 800348e:	d124      	bne.n	80034da <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003496:	4013      	ands	r3, r2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d035      	beq.n	8003508 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	091b      	lsrs	r3, r3, #4
 80034a4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80034a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	461a      	mov	r2, r3
 80034ae:	6a38      	ldr	r0, [r7, #32]
 80034b0:	f003 fc6c 	bl	8006d8c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	68da      	ldr	r2, [r3, #12]
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	091b      	lsrs	r3, r3, #4
 80034bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034c0:	441a      	add	r2, r3
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	699a      	ldr	r2, [r3, #24]
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	091b      	lsrs	r3, r3, #4
 80034ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034d2:	441a      	add	r2, r3
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	619a      	str	r2, [r3, #24]
 80034d8:	e016      	b.n	8003508 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	0c5b      	lsrs	r3, r3, #17
 80034de:	f003 030f 	and.w	r3, r3, #15
 80034e2:	2b06      	cmp	r3, #6
 80034e4:	d110      	bne.n	8003508 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80034ec:	2208      	movs	r2, #8
 80034ee:	4619      	mov	r1, r3
 80034f0:	6a38      	ldr	r0, [r7, #32]
 80034f2:	f003 fc4b 	bl	8006d8c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	699a      	ldr	r2, [r3, #24]
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	091b      	lsrs	r3, r3, #4
 80034fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003502:	441a      	add	r2, r3
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	699a      	ldr	r2, [r3, #24]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f042 0210 	orr.w	r2, r2, #16
 8003516:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4618      	mov	r0, r3
 800351e:	f003 fd9a 	bl	8007056 <USB_ReadInterrupts>
 8003522:	4603      	mov	r3, r0
 8003524:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003528:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800352c:	d16e      	bne.n	800360c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800352e:	2300      	movs	r3, #0
 8003530:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4618      	mov	r0, r3
 8003538:	f003 fda0 	bl	800707c <USB_ReadDevAllOutEpInterrupt>
 800353c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800353e:	e062      	b.n	8003606 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d057      	beq.n	80035fa <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003550:	b2d2      	uxtb	r2, r2
 8003552:	4611      	mov	r1, r2
 8003554:	4618      	mov	r0, r3
 8003556:	f003 fdc5 	bl	80070e4 <USB_ReadDevOutEPInterrupt>
 800355a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00c      	beq.n	8003580 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003568:	015a      	lsls	r2, r3, #5
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	4413      	add	r3, r2
 800356e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003572:	461a      	mov	r2, r3
 8003574:	2301      	movs	r3, #1
 8003576:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003578:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 fdb0 	bl	80040e0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	f003 0308 	and.w	r3, r3, #8
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00c      	beq.n	80035a4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	015a      	lsls	r2, r3, #5
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	4413      	add	r3, r2
 8003592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003596:	461a      	mov	r2, r3
 8003598:	2308      	movs	r3, #8
 800359a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800359c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 feaa 	bl	80042f8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	f003 0310 	and.w	r3, r3, #16
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d008      	beq.n	80035c0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	015a      	lsls	r2, r3, #5
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	4413      	add	r3, r2
 80035b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035ba:	461a      	mov	r2, r3
 80035bc:	2310      	movs	r3, #16
 80035be:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	f003 0320 	and.w	r3, r3, #32
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d008      	beq.n	80035dc <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035cc:	015a      	lsls	r2, r3, #5
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	4413      	add	r3, r2
 80035d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035d6:	461a      	mov	r2, r3
 80035d8:	2320      	movs	r3, #32
 80035da:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d009      	beq.n	80035fa <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80035e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e8:	015a      	lsls	r2, r3, #5
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	4413      	add	r3, r2
 80035ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035f2:	461a      	mov	r2, r3
 80035f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035f8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	3301      	adds	r3, #1
 80035fe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003602:	085b      	lsrs	r3, r3, #1
 8003604:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003608:	2b00      	cmp	r3, #0
 800360a:	d199      	bne.n	8003540 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4618      	mov	r0, r3
 8003612:	f003 fd20 	bl	8007056 <USB_ReadInterrupts>
 8003616:	4603      	mov	r3, r0
 8003618:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800361c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003620:	f040 80c0 	bne.w	80037a4 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4618      	mov	r0, r3
 800362a:	f003 fd41 	bl	80070b0 <USB_ReadDevAllInEpInterrupt>
 800362e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003630:	2300      	movs	r3, #0
 8003632:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003634:	e0b2      	b.n	800379c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b00      	cmp	r3, #0
 800363e:	f000 80a7 	beq.w	8003790 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003648:	b2d2      	uxtb	r2, r2
 800364a:	4611      	mov	r1, r2
 800364c:	4618      	mov	r0, r3
 800364e:	f003 fd67 	bl	8007120 <USB_ReadDevInEPInterrupt>
 8003652:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b00      	cmp	r3, #0
 800365c:	d057      	beq.n	800370e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	f003 030f 	and.w	r3, r3, #15
 8003664:	2201      	movs	r2, #1
 8003666:	fa02 f303 	lsl.w	r3, r2, r3
 800366a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003672:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	43db      	mvns	r3, r3
 8003678:	69f9      	ldr	r1, [r7, #28]
 800367a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800367e:	4013      	ands	r3, r2
 8003680:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	015a      	lsls	r2, r3, #5
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	4413      	add	r3, r2
 800368a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800368e:	461a      	mov	r2, r3
 8003690:	2301      	movs	r3, #1
 8003692:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d132      	bne.n	8003702 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800369c:	6879      	ldr	r1, [r7, #4]
 800369e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036a0:	4613      	mov	r3, r2
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	1a9b      	subs	r3, r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	440b      	add	r3, r1
 80036aa:	3348      	adds	r3, #72	; 0x48
 80036ac:	6819      	ldr	r1, [r3, #0]
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036b2:	4613      	mov	r3, r2
 80036b4:	00db      	lsls	r3, r3, #3
 80036b6:	1a9b      	subs	r3, r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	4403      	add	r3, r0
 80036bc:	3344      	adds	r3, #68	; 0x44
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4419      	add	r1, r3
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036c6:	4613      	mov	r3, r2
 80036c8:	00db      	lsls	r3, r3, #3
 80036ca:	1a9b      	subs	r3, r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	4403      	add	r3, r0
 80036d0:	3348      	adds	r3, #72	; 0x48
 80036d2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80036d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d113      	bne.n	8003702 <HAL_PCD_IRQHandler+0x31c>
 80036da:	6879      	ldr	r1, [r7, #4]
 80036dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036de:	4613      	mov	r3, r2
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	1a9b      	subs	r3, r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	440b      	add	r3, r1
 80036e8:	3350      	adds	r3, #80	; 0x50
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d108      	bne.n	8003702 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6818      	ldr	r0, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80036fa:	461a      	mov	r2, r3
 80036fc:	2101      	movs	r1, #1
 80036fe:	f003 fd6f 	bl	80071e0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003704:	b2db      	uxtb	r3, r3
 8003706:	4619      	mov	r1, r3
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f005 fd0e 	bl	800912a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	f003 0308 	and.w	r3, r3, #8
 8003714:	2b00      	cmp	r3, #0
 8003716:	d008      	beq.n	800372a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371a:	015a      	lsls	r2, r3, #5
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	4413      	add	r3, r2
 8003720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003724:	461a      	mov	r2, r3
 8003726:	2308      	movs	r3, #8
 8003728:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	f003 0310 	and.w	r3, r3, #16
 8003730:	2b00      	cmp	r3, #0
 8003732:	d008      	beq.n	8003746 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003736:	015a      	lsls	r2, r3, #5
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	4413      	add	r3, r2
 800373c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003740:	461a      	mov	r2, r3
 8003742:	2310      	movs	r3, #16
 8003744:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800374c:	2b00      	cmp	r3, #0
 800374e:	d008      	beq.n	8003762 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003752:	015a      	lsls	r2, r3, #5
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	4413      	add	r3, r2
 8003758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800375c:	461a      	mov	r2, r3
 800375e:	2340      	movs	r3, #64	; 0x40
 8003760:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d008      	beq.n	800377e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800376c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376e:	015a      	lsls	r2, r3, #5
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	4413      	add	r3, r2
 8003774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003778:	461a      	mov	r2, r3
 800377a:	2302      	movs	r3, #2
 800377c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003784:	2b00      	cmp	r3, #0
 8003786:	d003      	beq.n	8003790 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003788:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 fc1b 	bl	8003fc6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003792:	3301      	adds	r3, #1
 8003794:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003798:	085b      	lsrs	r3, r3, #1
 800379a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800379c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f47f af49 	bne.w	8003636 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f003 fc54 	bl	8007056 <USB_ReadInterrupts>
 80037ae:	4603      	mov	r3, r0
 80037b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037b8:	d122      	bne.n	8003800 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	69fa      	ldr	r2, [r7, #28]
 80037c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037c8:	f023 0301 	bic.w	r3, r3, #1
 80037cc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d108      	bne.n	80037ea <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80037e0:	2100      	movs	r1, #0
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 fe26 	bl	8004434 <HAL_PCDEx_LPM_Callback>
 80037e8:	e002      	b.n	80037f0 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f005 fd14 	bl	8009218 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	695a      	ldr	r2, [r3, #20]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80037fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4618      	mov	r0, r3
 8003806:	f003 fc26 	bl	8007056 <USB_ReadInterrupts>
 800380a:	4603      	mov	r3, r0
 800380c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003810:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003814:	d112      	bne.n	800383c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	2b01      	cmp	r3, #1
 8003824:	d102      	bne.n	800382c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f005 fcd0 	bl	80091cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	695a      	ldr	r2, [r3, #20]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800383a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4618      	mov	r0, r3
 8003842:	f003 fc08 	bl	8007056 <USB_ReadInterrupts>
 8003846:	4603      	mov	r3, r0
 8003848:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800384c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003850:	f040 80c7 	bne.w	80039e2 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	69fa      	ldr	r2, [r7, #28]
 800385e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003862:	f023 0301 	bic.w	r3, r3, #1
 8003866:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2110      	movs	r1, #16
 800386e:	4618      	mov	r0, r3
 8003870:	f002 fcd6 	bl	8006220 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003874:	2300      	movs	r3, #0
 8003876:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003878:	e056      	b.n	8003928 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800387a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800387c:	015a      	lsls	r2, r3, #5
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	4413      	add	r3, r2
 8003882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003886:	461a      	mov	r2, r3
 8003888:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800388c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800388e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003890:	015a      	lsls	r2, r3, #5
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	4413      	add	r3, r2
 8003896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800389e:	0151      	lsls	r1, r2, #5
 80038a0:	69fa      	ldr	r2, [r7, #28]
 80038a2:	440a      	add	r2, r1
 80038a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80038ac:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80038ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b0:	015a      	lsls	r2, r3, #5
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	4413      	add	r3, r2
 80038b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038be:	0151      	lsls	r1, r2, #5
 80038c0:	69fa      	ldr	r2, [r7, #28]
 80038c2:	440a      	add	r2, r1
 80038c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80038cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80038ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d0:	015a      	lsls	r2, r3, #5
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	4413      	add	r3, r2
 80038d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038da:	461a      	mov	r2, r3
 80038dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80038e0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80038e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e4:	015a      	lsls	r2, r3, #5
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	4413      	add	r3, r2
 80038ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038f2:	0151      	lsls	r1, r2, #5
 80038f4:	69fa      	ldr	r2, [r7, #28]
 80038f6:	440a      	add	r2, r1
 80038f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003900:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003904:	015a      	lsls	r2, r3, #5
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	4413      	add	r3, r2
 800390a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003912:	0151      	lsls	r1, r2, #5
 8003914:	69fa      	ldr	r2, [r7, #28]
 8003916:	440a      	add	r2, r1
 8003918:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800391c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003920:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003924:	3301      	adds	r3, #1
 8003926:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800392e:	429a      	cmp	r2, r3
 8003930:	d3a3      	bcc.n	800387a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	69fa      	ldr	r2, [r7, #28]
 800393c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003940:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003944:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394a:	2b00      	cmp	r3, #0
 800394c:	d016      	beq.n	800397c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003954:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003958:	69fa      	ldr	r2, [r7, #28]
 800395a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800395e:	f043 030b 	orr.w	r3, r3, #11
 8003962:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800396c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396e:	69fa      	ldr	r2, [r7, #28]
 8003970:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003974:	f043 030b 	orr.w	r3, r3, #11
 8003978:	6453      	str	r3, [r2, #68]	; 0x44
 800397a:	e015      	b.n	80039a8 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003982:	695b      	ldr	r3, [r3, #20]
 8003984:	69fa      	ldr	r2, [r7, #28]
 8003986:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800398a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800398e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003992:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	69fa      	ldr	r2, [r7, #28]
 800399e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039a2:	f043 030b 	orr.w	r3, r3, #11
 80039a6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	69fa      	ldr	r2, [r7, #28]
 80039b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039b6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80039ba:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6818      	ldr	r0, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80039cc:	461a      	mov	r2, r3
 80039ce:	f003 fc07 	bl	80071e0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	695a      	ldr	r2, [r3, #20]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80039e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f003 fb35 	bl	8007056 <USB_ReadInterrupts>
 80039ec:	4603      	mov	r3, r0
 80039ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039f6:	d124      	bne.n	8003a42 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f003 fbcb 	bl	8007198 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f002 fc6b 	bl	80062e2 <USB_GetDevSpeed>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	461a      	mov	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681c      	ldr	r4, [r3, #0]
 8003a18:	f001 f946 	bl	8004ca8 <HAL_RCC_GetHCLKFreq>
 8003a1c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	461a      	mov	r2, r3
 8003a26:	4620      	mov	r0, r4
 8003a28:	f002 f9a8 	bl	8005d7c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f005 fba4 	bl	800917a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	695a      	ldr	r2, [r3, #20]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003a40:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f003 fb05 	bl	8007056 <USB_ReadInterrupts>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	f003 0308 	and.w	r3, r3, #8
 8003a52:	2b08      	cmp	r3, #8
 8003a54:	d10a      	bne.n	8003a6c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f005 fb81 	bl	800915e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	695a      	ldr	r2, [r3, #20]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f002 0208 	and.w	r2, r2, #8
 8003a6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4618      	mov	r0, r3
 8003a72:	f003 faf0 	bl	8007056 <USB_ReadInterrupts>
 8003a76:	4603      	mov	r3, r0
 8003a78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a80:	d10f      	bne.n	8003aa2 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003a82:	2300      	movs	r3, #0
 8003a84:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f005 fbe3 	bl	8009258 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	695a      	ldr	r2, [r3, #20]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003aa0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f003 fad5 	bl	8007056 <USB_ReadInterrupts>
 8003aac:	4603      	mov	r3, r0
 8003aae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ab2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ab6:	d10f      	bne.n	8003ad8 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f005 fbb6 	bl	8009234 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	695a      	ldr	r2, [r3, #20]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003ad6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f003 faba 	bl	8007056 <USB_ReadInterrupts>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aec:	d10a      	bne.n	8003b04 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f005 fbc4 	bl	800927c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	695a      	ldr	r2, [r3, #20]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003b02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f003 faa4 	bl	8007056 <USB_ReadInterrupts>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b04      	cmp	r3, #4
 8003b16:	d115      	bne.n	8003b44 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	f003 0304 	and.w	r3, r3, #4
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d002      	beq.n	8003b30 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f005 fbb4 	bl	8009298 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6859      	ldr	r1, [r3, #4]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	69ba      	ldr	r2, [r7, #24]
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	605a      	str	r2, [r3, #4]
 8003b40:	e000      	b.n	8003b44 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003b42:	bf00      	nop
    }
  }
}
 8003b44:	3734      	adds	r7, #52	; 0x34
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd90      	pop	{r4, r7, pc}

08003b4a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b082      	sub	sp, #8
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
 8003b52:	460b      	mov	r3, r1
 8003b54:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d101      	bne.n	8003b64 <HAL_PCD_SetAddress+0x1a>
 8003b60:	2302      	movs	r3, #2
 8003b62:	e013      	b.n	8003b8c <HAL_PCD_SetAddress+0x42>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	78fa      	ldrb	r2, [r7, #3]
 8003b70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	78fa      	ldrb	r2, [r7, #3]
 8003b7a:	4611      	mov	r1, r2
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f003 fa02 	bl	8006f86 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3708      	adds	r7, #8
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	4608      	mov	r0, r1
 8003b9e:	4611      	mov	r1, r2
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	70fb      	strb	r3, [r7, #3]
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	803b      	strh	r3, [r7, #0]
 8003baa:	4613      	mov	r3, r2
 8003bac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003bb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	da0f      	bge.n	8003bda <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bba:	78fb      	ldrb	r3, [r7, #3]
 8003bbc:	f003 020f 	and.w	r2, r3, #15
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	1a9b      	subs	r3, r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	3338      	adds	r3, #56	; 0x38
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	4413      	add	r3, r2
 8003bce:	3304      	adds	r3, #4
 8003bd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	705a      	strb	r2, [r3, #1]
 8003bd8:	e00f      	b.n	8003bfa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bda:	78fb      	ldrb	r3, [r7, #3]
 8003bdc:	f003 020f 	and.w	r2, r3, #15
 8003be0:	4613      	mov	r3, r2
 8003be2:	00db      	lsls	r3, r3, #3
 8003be4:	1a9b      	subs	r3, r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	4413      	add	r3, r2
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003bfa:	78fb      	ldrb	r3, [r7, #3]
 8003bfc:	f003 030f 	and.w	r3, r3, #15
 8003c00:	b2da      	uxtb	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003c06:	883a      	ldrh	r2, [r7, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	78ba      	ldrb	r2, [r7, #2]
 8003c10:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	785b      	ldrb	r3, [r3, #1]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d004      	beq.n	8003c24 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003c24:	78bb      	ldrb	r3, [r7, #2]
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d102      	bne.n	8003c30 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d101      	bne.n	8003c3e <HAL_PCD_EP_Open+0xaa>
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	e00e      	b.n	8003c5c <HAL_PCD_EP_Open+0xc8>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68f9      	ldr	r1, [r7, #12]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f002 fb6d 	bl	800632c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003c5a:	7afb      	ldrb	r3, [r7, #11]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	da0f      	bge.n	8003c98 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c78:	78fb      	ldrb	r3, [r7, #3]
 8003c7a:	f003 020f 	and.w	r2, r3, #15
 8003c7e:	4613      	mov	r3, r2
 8003c80:	00db      	lsls	r3, r3, #3
 8003c82:	1a9b      	subs	r3, r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	3338      	adds	r3, #56	; 0x38
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	3304      	adds	r3, #4
 8003c8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2201      	movs	r2, #1
 8003c94:	705a      	strb	r2, [r3, #1]
 8003c96:	e00f      	b.n	8003cb8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c98:	78fb      	ldrb	r3, [r7, #3]
 8003c9a:	f003 020f 	and.w	r2, r3, #15
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	00db      	lsls	r3, r3, #3
 8003ca2:	1a9b      	subs	r3, r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	4413      	add	r3, r2
 8003cae:	3304      	adds	r3, #4
 8003cb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003cb8:	78fb      	ldrb	r3, [r7, #3]
 8003cba:	f003 030f 	and.w	r3, r3, #15
 8003cbe:	b2da      	uxtb	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d101      	bne.n	8003cd2 <HAL_PCD_EP_Close+0x6e>
 8003cce:	2302      	movs	r3, #2
 8003cd0:	e00e      	b.n	8003cf0 <HAL_PCD_EP_Close+0x8c>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68f9      	ldr	r1, [r7, #12]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f002 fbab 	bl	800643c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3710      	adds	r7, #16
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b086      	sub	sp, #24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	607a      	str	r2, [r7, #4]
 8003d02:	603b      	str	r3, [r7, #0]
 8003d04:	460b      	mov	r3, r1
 8003d06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d08:	7afb      	ldrb	r3, [r7, #11]
 8003d0a:	f003 020f 	and.w	r2, r3, #15
 8003d0e:	4613      	mov	r3, r2
 8003d10:	00db      	lsls	r3, r3, #3
 8003d12:	1a9b      	subs	r3, r3, r2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	3304      	adds	r3, #4
 8003d20:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	2200      	movs	r2, #0
 8003d32:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	2200      	movs	r2, #0
 8003d38:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d3a:	7afb      	ldrb	r3, [r7, #11]
 8003d3c:	f003 030f 	and.w	r3, r3, #15
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d102      	bne.n	8003d54 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d54:	7afb      	ldrb	r3, [r7, #11]
 8003d56:	f003 030f 	and.w	r3, r3, #15
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d109      	bne.n	8003d72 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6818      	ldr	r0, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	461a      	mov	r2, r3
 8003d6a:	6979      	ldr	r1, [r7, #20]
 8003d6c:	f002 fe86 	bl	8006a7c <USB_EP0StartXfer>
 8003d70:	e008      	b.n	8003d84 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6818      	ldr	r0, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	6979      	ldr	r1, [r7, #20]
 8003d80:	f002 fc38 	bl	80065f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3718      	adds	r7, #24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b083      	sub	sp, #12
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
 8003d96:	460b      	mov	r3, r1
 8003d98:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003d9a:	78fb      	ldrb	r3, [r7, #3]
 8003d9c:	f003 020f 	and.w	r2, r3, #15
 8003da0:	6879      	ldr	r1, [r7, #4]
 8003da2:	4613      	mov	r3, r2
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	1a9b      	subs	r3, r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	440b      	add	r3, r1
 8003dac:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003db0:	681b      	ldr	r3, [r3, #0]
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b086      	sub	sp, #24
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	60f8      	str	r0, [r7, #12]
 8003dc6:	607a      	str	r2, [r7, #4]
 8003dc8:	603b      	str	r3, [r7, #0]
 8003dca:	460b      	mov	r3, r1
 8003dcc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dce:	7afb      	ldrb	r3, [r7, #11]
 8003dd0:	f003 020f 	and.w	r2, r3, #15
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	1a9b      	subs	r3, r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	3338      	adds	r3, #56	; 0x38
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	4413      	add	r3, r2
 8003de2:	3304      	adds	r3, #4
 8003de4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	2200      	movs	r2, #0
 8003df6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dfe:	7afb      	ldrb	r3, [r7, #11]
 8003e00:	f003 030f 	and.w	r3, r3, #15
 8003e04:	b2da      	uxtb	r2, r3
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d102      	bne.n	8003e18 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e18:	7afb      	ldrb	r3, [r7, #11]
 8003e1a:	f003 030f 	and.w	r3, r3, #15
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d109      	bne.n	8003e36 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6818      	ldr	r0, [r3, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	6979      	ldr	r1, [r7, #20]
 8003e30:	f002 fe24 	bl	8006a7c <USB_EP0StartXfer>
 8003e34:	e008      	b.n	8003e48 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6818      	ldr	r0, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	461a      	mov	r2, r3
 8003e42:	6979      	ldr	r1, [r7, #20]
 8003e44:	f002 fbd6 	bl	80065f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3718      	adds	r7, #24
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b084      	sub	sp, #16
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003e5e:	78fb      	ldrb	r3, [r7, #3]
 8003e60:	f003 020f 	and.w	r2, r3, #15
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d901      	bls.n	8003e70 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e050      	b.n	8003f12 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	da0f      	bge.n	8003e98 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e78:	78fb      	ldrb	r3, [r7, #3]
 8003e7a:	f003 020f 	and.w	r2, r3, #15
 8003e7e:	4613      	mov	r3, r2
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	1a9b      	subs	r3, r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	3338      	adds	r3, #56	; 0x38
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	3304      	adds	r3, #4
 8003e8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2201      	movs	r2, #1
 8003e94:	705a      	strb	r2, [r3, #1]
 8003e96:	e00d      	b.n	8003eb4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e98:	78fa      	ldrb	r2, [r7, #3]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	1a9b      	subs	r3, r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	3304      	adds	r3, #4
 8003eac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003eba:	78fb      	ldrb	r3, [r7, #3]
 8003ebc:	f003 030f 	and.w	r3, r3, #15
 8003ec0:	b2da      	uxtb	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d101      	bne.n	8003ed4 <HAL_PCD_EP_SetStall+0x82>
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	e01e      	b.n	8003f12 <HAL_PCD_EP_SetStall+0xc0>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68f9      	ldr	r1, [r7, #12]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f002 ff7b 	bl	8006dde <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ee8:	78fb      	ldrb	r3, [r7, #3]
 8003eea:	f003 030f 	and.w	r3, r3, #15
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10a      	bne.n	8003f08 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6818      	ldr	r0, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	b2d9      	uxtb	r1, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003f02:	461a      	mov	r2, r3
 8003f04:	f003 f96c 	bl	80071e0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b084      	sub	sp, #16
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
 8003f22:	460b      	mov	r3, r1
 8003f24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003f26:	78fb      	ldrb	r3, [r7, #3]
 8003f28:	f003 020f 	and.w	r2, r3, #15
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d901      	bls.n	8003f38 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e042      	b.n	8003fbe <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	da0f      	bge.n	8003f60 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f40:	78fb      	ldrb	r3, [r7, #3]
 8003f42:	f003 020f 	and.w	r2, r3, #15
 8003f46:	4613      	mov	r3, r2
 8003f48:	00db      	lsls	r3, r3, #3
 8003f4a:	1a9b      	subs	r3, r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	3338      	adds	r3, #56	; 0x38
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	4413      	add	r3, r2
 8003f54:	3304      	adds	r3, #4
 8003f56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	705a      	strb	r2, [r3, #1]
 8003f5e:	e00f      	b.n	8003f80 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f60:	78fb      	ldrb	r3, [r7, #3]
 8003f62:	f003 020f 	and.w	r2, r3, #15
 8003f66:	4613      	mov	r3, r2
 8003f68:	00db      	lsls	r3, r3, #3
 8003f6a:	1a9b      	subs	r3, r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	4413      	add	r3, r2
 8003f76:	3304      	adds	r3, #4
 8003f78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f86:	78fb      	ldrb	r3, [r7, #3]
 8003f88:	f003 030f 	and.w	r3, r3, #15
 8003f8c:	b2da      	uxtb	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d101      	bne.n	8003fa0 <HAL_PCD_EP_ClrStall+0x86>
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	e00e      	b.n	8003fbe <HAL_PCD_EP_ClrStall+0xa4>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68f9      	ldr	r1, [r7, #12]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f002 ff83 	bl	8006eba <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b08a      	sub	sp, #40	; 0x28
 8003fca:	af02      	add	r7, sp, #8
 8003fcc:	6078      	str	r0, [r7, #4]
 8003fce:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003fda:	683a      	ldr	r2, [r7, #0]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	1a9b      	subs	r3, r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	3338      	adds	r3, #56	; 0x38
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	4413      	add	r3, r2
 8003fea:	3304      	adds	r3, #4
 8003fec:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	699a      	ldr	r2, [r3, #24]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d901      	bls.n	8003ffe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e06c      	b.n	80040d8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	695a      	ldr	r2, [r3, #20]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	69fa      	ldr	r2, [r7, #28]
 8004010:	429a      	cmp	r2, r3
 8004012:	d902      	bls.n	800401a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	3303      	adds	r3, #3
 800401e:	089b      	lsrs	r3, r3, #2
 8004020:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004022:	e02b      	b.n	800407c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	695a      	ldr	r2, [r3, #20]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	69fa      	ldr	r2, [r7, #28]
 8004036:	429a      	cmp	r2, r3
 8004038:	d902      	bls.n	8004040 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	3303      	adds	r3, #3
 8004044:	089b      	lsrs	r3, r3, #2
 8004046:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	68d9      	ldr	r1, [r3, #12]
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	b2da      	uxtb	r2, r3
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004058:	b2db      	uxtb	r3, r3
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	4603      	mov	r3, r0
 800405e:	6978      	ldr	r0, [r7, #20]
 8004060:	f002 fe5f 	bl	8006d22 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	68da      	ldr	r2, [r3, #12]
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	441a      	add	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	699a      	ldr	r2, [r3, #24]
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	441a      	add	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	015a      	lsls	r2, r3, #5
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	4413      	add	r3, r2
 8004084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	b29b      	uxth	r3, r3
 800408c:	69ba      	ldr	r2, [r7, #24]
 800408e:	429a      	cmp	r2, r3
 8004090:	d809      	bhi.n	80040a6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	699a      	ldr	r2, [r3, #24]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800409a:	429a      	cmp	r2, r3
 800409c:	d203      	bcs.n	80040a6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1be      	bne.n	8004024 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	695a      	ldr	r2, [r3, #20]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d811      	bhi.n	80040d6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	f003 030f 	and.w	r3, r3, #15
 80040b8:	2201      	movs	r2, #1
 80040ba:	fa02 f303 	lsl.w	r3, r2, r3
 80040be:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	43db      	mvns	r3, r3
 80040cc:	6939      	ldr	r1, [r7, #16]
 80040ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040d2:	4013      	ands	r3, r2
 80040d4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3720      	adds	r7, #32
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	333c      	adds	r3, #60	; 0x3c
 80040f8:	3304      	adds	r3, #4
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	015a      	lsls	r2, r3, #5
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	4413      	add	r3, r2
 8004106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	2b01      	cmp	r3, #1
 8004114:	f040 80a0 	bne.w	8004258 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	f003 0308 	and.w	r3, r3, #8
 800411e:	2b00      	cmp	r3, #0
 8004120:	d015      	beq.n	800414e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	4a72      	ldr	r2, [pc, #456]	; (80042f0 <PCD_EP_OutXfrComplete_int+0x210>)
 8004126:	4293      	cmp	r3, r2
 8004128:	f240 80dd 	bls.w	80042e6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004132:	2b00      	cmp	r3, #0
 8004134:	f000 80d7 	beq.w	80042e6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	015a      	lsls	r2, r3, #5
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	4413      	add	r3, r2
 8004140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004144:	461a      	mov	r2, r3
 8004146:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800414a:	6093      	str	r3, [r2, #8]
 800414c:	e0cb      	b.n	80042e6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	f003 0320 	and.w	r3, r3, #32
 8004154:	2b00      	cmp	r3, #0
 8004156:	d009      	beq.n	800416c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	015a      	lsls	r2, r3, #5
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	4413      	add	r3, r2
 8004160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004164:	461a      	mov	r2, r3
 8004166:	2320      	movs	r3, #32
 8004168:	6093      	str	r3, [r2, #8]
 800416a:	e0bc      	b.n	80042e6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004172:	2b00      	cmp	r3, #0
 8004174:	f040 80b7 	bne.w	80042e6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	4a5d      	ldr	r2, [pc, #372]	; (80042f0 <PCD_EP_OutXfrComplete_int+0x210>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d90f      	bls.n	80041a0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00a      	beq.n	80041a0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	015a      	lsls	r2, r3, #5
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	4413      	add	r3, r2
 8004192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004196:	461a      	mov	r2, r3
 8004198:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800419c:	6093      	str	r3, [r2, #8]
 800419e:	e0a2      	b.n	80042e6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80041a0:	6879      	ldr	r1, [r7, #4]
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	4613      	mov	r3, r2
 80041a6:	00db      	lsls	r3, r3, #3
 80041a8:	1a9b      	subs	r3, r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	440b      	add	r3, r1
 80041ae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80041b2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	0159      	lsls	r1, r3, #5
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	440b      	add	r3, r1
 80041bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80041c6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	4613      	mov	r3, r2
 80041ce:	00db      	lsls	r3, r3, #3
 80041d0:	1a9b      	subs	r3, r3, r2
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	4403      	add	r3, r0
 80041d6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80041da:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80041dc:	6879      	ldr	r1, [r7, #4]
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	4613      	mov	r3, r2
 80041e2:	00db      	lsls	r3, r3, #3
 80041e4:	1a9b      	subs	r3, r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	440b      	add	r3, r1
 80041ea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80041ee:	6819      	ldr	r1, [r3, #0]
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	683a      	ldr	r2, [r7, #0]
 80041f4:	4613      	mov	r3, r2
 80041f6:	00db      	lsls	r3, r3, #3
 80041f8:	1a9b      	subs	r3, r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	4403      	add	r3, r0
 80041fe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4419      	add	r1, r3
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	683a      	ldr	r2, [r7, #0]
 800420a:	4613      	mov	r3, r2
 800420c:	00db      	lsls	r3, r3, #3
 800420e:	1a9b      	subs	r3, r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	4403      	add	r3, r0
 8004214:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004218:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d114      	bne.n	800424a <PCD_EP_OutXfrComplete_int+0x16a>
 8004220:	6879      	ldr	r1, [r7, #4]
 8004222:	683a      	ldr	r2, [r7, #0]
 8004224:	4613      	mov	r3, r2
 8004226:	00db      	lsls	r3, r3, #3
 8004228:	1a9b      	subs	r3, r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	440b      	add	r3, r1
 800422e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d108      	bne.n	800424a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6818      	ldr	r0, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004242:	461a      	mov	r2, r3
 8004244:	2101      	movs	r1, #1
 8004246:	f002 ffcb 	bl	80071e0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	b2db      	uxtb	r3, r3
 800424e:	4619      	mov	r1, r3
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f004 ff4f 	bl	80090f4 <HAL_PCD_DataOutStageCallback>
 8004256:	e046      	b.n	80042e6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	4a26      	ldr	r2, [pc, #152]	; (80042f4 <PCD_EP_OutXfrComplete_int+0x214>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d124      	bne.n	80042aa <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00a      	beq.n	8004280 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	015a      	lsls	r2, r3, #5
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	4413      	add	r3, r2
 8004272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004276:	461a      	mov	r2, r3
 8004278:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800427c:	6093      	str	r3, [r2, #8]
 800427e:	e032      	b.n	80042e6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	f003 0320 	and.w	r3, r3, #32
 8004286:	2b00      	cmp	r3, #0
 8004288:	d008      	beq.n	800429c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	015a      	lsls	r2, r3, #5
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	4413      	add	r3, r2
 8004292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004296:	461a      	mov	r2, r3
 8004298:	2320      	movs	r3, #32
 800429a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	4619      	mov	r1, r3
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f004 ff26 	bl	80090f4 <HAL_PCD_DataOutStageCallback>
 80042a8:	e01d      	b.n	80042e6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d114      	bne.n	80042da <PCD_EP_OutXfrComplete_int+0x1fa>
 80042b0:	6879      	ldr	r1, [r7, #4]
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	4613      	mov	r3, r2
 80042b6:	00db      	lsls	r3, r3, #3
 80042b8:	1a9b      	subs	r3, r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	440b      	add	r3, r1
 80042be:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d108      	bne.n	80042da <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6818      	ldr	r0, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80042d2:	461a      	mov	r2, r3
 80042d4:	2100      	movs	r1, #0
 80042d6:	f002 ff83 	bl	80071e0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	4619      	mov	r1, r3
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f004 ff07 	bl	80090f4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3718      	adds	r7, #24
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	4f54300a 	.word	0x4f54300a
 80042f4:	4f54310a 	.word	0x4f54310a

080042f8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b086      	sub	sp, #24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	333c      	adds	r3, #60	; 0x3c
 8004310:	3304      	adds	r3, #4
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	015a      	lsls	r2, r3, #5
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	4413      	add	r3, r2
 800431e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	4a15      	ldr	r2, [pc, #84]	; (8004380 <PCD_EP_OutSetupPacket_int+0x88>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d90e      	bls.n	800434c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004334:	2b00      	cmp	r3, #0
 8004336:	d009      	beq.n	800434c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	015a      	lsls	r2, r3, #5
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	4413      	add	r3, r2
 8004340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004344:	461a      	mov	r2, r3
 8004346:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800434a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f004 febf 	bl	80090d0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	4a0a      	ldr	r2, [pc, #40]	; (8004380 <PCD_EP_OutSetupPacket_int+0x88>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d90c      	bls.n	8004374 <PCD_EP_OutSetupPacket_int+0x7c>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d108      	bne.n	8004374 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6818      	ldr	r0, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800436c:	461a      	mov	r2, r3
 800436e:	2101      	movs	r1, #1
 8004370:	f002 ff36 	bl	80071e0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3718      	adds	r7, #24
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	4f54300a 	.word	0x4f54300a

08004384 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	460b      	mov	r3, r1
 800438e:	70fb      	strb	r3, [r7, #3]
 8004390:	4613      	mov	r3, r2
 8004392:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800439c:	78fb      	ldrb	r3, [r7, #3]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d107      	bne.n	80043b2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80043a2:	883b      	ldrh	r3, [r7, #0]
 80043a4:	0419      	lsls	r1, r3, #16
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	430a      	orrs	r2, r1
 80043ae:	629a      	str	r2, [r3, #40]	; 0x28
 80043b0:	e028      	b.n	8004404 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b8:	0c1b      	lsrs	r3, r3, #16
 80043ba:	68ba      	ldr	r2, [r7, #8]
 80043bc:	4413      	add	r3, r2
 80043be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80043c0:	2300      	movs	r3, #0
 80043c2:	73fb      	strb	r3, [r7, #15]
 80043c4:	e00d      	b.n	80043e2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	7bfb      	ldrb	r3, [r7, #15]
 80043cc:	3340      	adds	r3, #64	; 0x40
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	4413      	add	r3, r2
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	0c1b      	lsrs	r3, r3, #16
 80043d6:	68ba      	ldr	r2, [r7, #8]
 80043d8:	4413      	add	r3, r2
 80043da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80043dc:	7bfb      	ldrb	r3, [r7, #15]
 80043de:	3301      	adds	r3, #1
 80043e0:	73fb      	strb	r3, [r7, #15]
 80043e2:	7bfa      	ldrb	r2, [r7, #15]
 80043e4:	78fb      	ldrb	r3, [r7, #3]
 80043e6:	3b01      	subs	r3, #1
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d3ec      	bcc.n	80043c6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80043ec:	883b      	ldrh	r3, [r7, #0]
 80043ee:	0418      	lsls	r0, r3, #16
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6819      	ldr	r1, [r3, #0]
 80043f4:	78fb      	ldrb	r3, [r7, #3]
 80043f6:	3b01      	subs	r3, #1
 80043f8:	68ba      	ldr	r2, [r7, #8]
 80043fa:	4302      	orrs	r2, r0
 80043fc:	3340      	adds	r3, #64	; 0x40
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	440b      	add	r3, r1
 8004402:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3714      	adds	r7, #20
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr

08004412 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004412:	b480      	push	{r7}
 8004414:	b083      	sub	sp, #12
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
 800441a:	460b      	mov	r3, r1
 800441c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	887a      	ldrh	r2, [r7, #2]
 8004424:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	460b      	mov	r3, r1
 800443e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e25b      	b.n	8004916 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	2b00      	cmp	r3, #0
 8004468:	d075      	beq.n	8004556 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800446a:	4ba3      	ldr	r3, [pc, #652]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f003 030c 	and.w	r3, r3, #12
 8004472:	2b04      	cmp	r3, #4
 8004474:	d00c      	beq.n	8004490 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004476:	4ba0      	ldr	r3, [pc, #640]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800447e:	2b08      	cmp	r3, #8
 8004480:	d112      	bne.n	80044a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004482:	4b9d      	ldr	r3, [pc, #628]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800448a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800448e:	d10b      	bne.n	80044a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004490:	4b99      	ldr	r3, [pc, #612]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d05b      	beq.n	8004554 <HAL_RCC_OscConfig+0x108>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d157      	bne.n	8004554 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e236      	b.n	8004916 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044b0:	d106      	bne.n	80044c0 <HAL_RCC_OscConfig+0x74>
 80044b2:	4b91      	ldr	r3, [pc, #580]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a90      	ldr	r2, [pc, #576]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 80044b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044bc:	6013      	str	r3, [r2, #0]
 80044be:	e01d      	b.n	80044fc <HAL_RCC_OscConfig+0xb0>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044c8:	d10c      	bne.n	80044e4 <HAL_RCC_OscConfig+0x98>
 80044ca:	4b8b      	ldr	r3, [pc, #556]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a8a      	ldr	r2, [pc, #552]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 80044d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044d4:	6013      	str	r3, [r2, #0]
 80044d6:	4b88      	ldr	r3, [pc, #544]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a87      	ldr	r2, [pc, #540]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 80044dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044e0:	6013      	str	r3, [r2, #0]
 80044e2:	e00b      	b.n	80044fc <HAL_RCC_OscConfig+0xb0>
 80044e4:	4b84      	ldr	r3, [pc, #528]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a83      	ldr	r2, [pc, #524]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 80044ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ee:	6013      	str	r3, [r2, #0]
 80044f0:	4b81      	ldr	r3, [pc, #516]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a80      	ldr	r2, [pc, #512]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 80044f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d013      	beq.n	800452c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004504:	f7fd fa78 	bl	80019f8 <HAL_GetTick>
 8004508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800450a:	e008      	b.n	800451e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800450c:	f7fd fa74 	bl	80019f8 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b64      	cmp	r3, #100	; 0x64
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e1fb      	b.n	8004916 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800451e:	4b76      	ldr	r3, [pc, #472]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d0f0      	beq.n	800450c <HAL_RCC_OscConfig+0xc0>
 800452a:	e014      	b.n	8004556 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800452c:	f7fd fa64 	bl	80019f8 <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004534:	f7fd fa60 	bl	80019f8 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b64      	cmp	r3, #100	; 0x64
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e1e7      	b.n	8004916 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004546:	4b6c      	ldr	r3, [pc, #432]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1f0      	bne.n	8004534 <HAL_RCC_OscConfig+0xe8>
 8004552:	e000      	b.n	8004556 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004554:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d063      	beq.n	800462a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004562:	4b65      	ldr	r3, [pc, #404]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f003 030c 	and.w	r3, r3, #12
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00b      	beq.n	8004586 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800456e:	4b62      	ldr	r3, [pc, #392]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004576:	2b08      	cmp	r3, #8
 8004578:	d11c      	bne.n	80045b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800457a:	4b5f      	ldr	r3, [pc, #380]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d116      	bne.n	80045b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004586:	4b5c      	ldr	r3, [pc, #368]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d005      	beq.n	800459e <HAL_RCC_OscConfig+0x152>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d001      	beq.n	800459e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e1bb      	b.n	8004916 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800459e:	4b56      	ldr	r3, [pc, #344]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	00db      	lsls	r3, r3, #3
 80045ac:	4952      	ldr	r1, [pc, #328]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045b2:	e03a      	b.n	800462a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d020      	beq.n	80045fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045bc:	4b4f      	ldr	r3, [pc, #316]	; (80046fc <HAL_RCC_OscConfig+0x2b0>)
 80045be:	2201      	movs	r2, #1
 80045c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c2:	f7fd fa19 	bl	80019f8 <HAL_GetTick>
 80045c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045c8:	e008      	b.n	80045dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045ca:	f7fd fa15 	bl	80019f8 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d901      	bls.n	80045dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e19c      	b.n	8004916 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045dc:	4b46      	ldr	r3, [pc, #280]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0302 	and.w	r3, r3, #2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d0f0      	beq.n	80045ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045e8:	4b43      	ldr	r3, [pc, #268]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	00db      	lsls	r3, r3, #3
 80045f6:	4940      	ldr	r1, [pc, #256]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	600b      	str	r3, [r1, #0]
 80045fc:	e015      	b.n	800462a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045fe:	4b3f      	ldr	r3, [pc, #252]	; (80046fc <HAL_RCC_OscConfig+0x2b0>)
 8004600:	2200      	movs	r2, #0
 8004602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004604:	f7fd f9f8 	bl	80019f8 <HAL_GetTick>
 8004608:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800460a:	e008      	b.n	800461e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800460c:	f7fd f9f4 	bl	80019f8 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b02      	cmp	r3, #2
 8004618:	d901      	bls.n	800461e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e17b      	b.n	8004916 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800461e:	4b36      	ldr	r3, [pc, #216]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1f0      	bne.n	800460c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0308 	and.w	r3, r3, #8
 8004632:	2b00      	cmp	r3, #0
 8004634:	d030      	beq.n	8004698 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d016      	beq.n	800466c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800463e:	4b30      	ldr	r3, [pc, #192]	; (8004700 <HAL_RCC_OscConfig+0x2b4>)
 8004640:	2201      	movs	r2, #1
 8004642:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004644:	f7fd f9d8 	bl	80019f8 <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800464c:	f7fd f9d4 	bl	80019f8 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e15b      	b.n	8004916 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800465e:	4b26      	ldr	r3, [pc, #152]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 8004660:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d0f0      	beq.n	800464c <HAL_RCC_OscConfig+0x200>
 800466a:	e015      	b.n	8004698 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800466c:	4b24      	ldr	r3, [pc, #144]	; (8004700 <HAL_RCC_OscConfig+0x2b4>)
 800466e:	2200      	movs	r2, #0
 8004670:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004672:	f7fd f9c1 	bl	80019f8 <HAL_GetTick>
 8004676:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004678:	e008      	b.n	800468c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800467a:	f7fd f9bd 	bl	80019f8 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b02      	cmp	r3, #2
 8004686:	d901      	bls.n	800468c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e144      	b.n	8004916 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800468c:	4b1a      	ldr	r3, [pc, #104]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 800468e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004690:	f003 0302 	and.w	r3, r3, #2
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1f0      	bne.n	800467a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0304 	and.w	r3, r3, #4
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 80a0 	beq.w	80047e6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046a6:	2300      	movs	r3, #0
 80046a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046aa:	4b13      	ldr	r3, [pc, #76]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 80046ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10f      	bne.n	80046d6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046b6:	2300      	movs	r3, #0
 80046b8:	60bb      	str	r3, [r7, #8]
 80046ba:	4b0f      	ldr	r3, [pc, #60]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 80046bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046be:	4a0e      	ldr	r2, [pc, #56]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 80046c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046c4:	6413      	str	r3, [r2, #64]	; 0x40
 80046c6:	4b0c      	ldr	r3, [pc, #48]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 80046c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ce:	60bb      	str	r3, [r7, #8]
 80046d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046d2:	2301      	movs	r3, #1
 80046d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046d6:	4b0b      	ldr	r3, [pc, #44]	; (8004704 <HAL_RCC_OscConfig+0x2b8>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d121      	bne.n	8004726 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046e2:	4b08      	ldr	r3, [pc, #32]	; (8004704 <HAL_RCC_OscConfig+0x2b8>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a07      	ldr	r2, [pc, #28]	; (8004704 <HAL_RCC_OscConfig+0x2b8>)
 80046e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046ee:	f7fd f983 	bl	80019f8 <HAL_GetTick>
 80046f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046f4:	e011      	b.n	800471a <HAL_RCC_OscConfig+0x2ce>
 80046f6:	bf00      	nop
 80046f8:	40023800 	.word	0x40023800
 80046fc:	42470000 	.word	0x42470000
 8004700:	42470e80 	.word	0x42470e80
 8004704:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004708:	f7fd f976 	bl	80019f8 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b02      	cmp	r3, #2
 8004714:	d901      	bls.n	800471a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e0fd      	b.n	8004916 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800471a:	4b81      	ldr	r3, [pc, #516]	; (8004920 <HAL_RCC_OscConfig+0x4d4>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004722:	2b00      	cmp	r3, #0
 8004724:	d0f0      	beq.n	8004708 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d106      	bne.n	800473c <HAL_RCC_OscConfig+0x2f0>
 800472e:	4b7d      	ldr	r3, [pc, #500]	; (8004924 <HAL_RCC_OscConfig+0x4d8>)
 8004730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004732:	4a7c      	ldr	r2, [pc, #496]	; (8004924 <HAL_RCC_OscConfig+0x4d8>)
 8004734:	f043 0301 	orr.w	r3, r3, #1
 8004738:	6713      	str	r3, [r2, #112]	; 0x70
 800473a:	e01c      	b.n	8004776 <HAL_RCC_OscConfig+0x32a>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	2b05      	cmp	r3, #5
 8004742:	d10c      	bne.n	800475e <HAL_RCC_OscConfig+0x312>
 8004744:	4b77      	ldr	r3, [pc, #476]	; (8004924 <HAL_RCC_OscConfig+0x4d8>)
 8004746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004748:	4a76      	ldr	r2, [pc, #472]	; (8004924 <HAL_RCC_OscConfig+0x4d8>)
 800474a:	f043 0304 	orr.w	r3, r3, #4
 800474e:	6713      	str	r3, [r2, #112]	; 0x70
 8004750:	4b74      	ldr	r3, [pc, #464]	; (8004924 <HAL_RCC_OscConfig+0x4d8>)
 8004752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004754:	4a73      	ldr	r2, [pc, #460]	; (8004924 <HAL_RCC_OscConfig+0x4d8>)
 8004756:	f043 0301 	orr.w	r3, r3, #1
 800475a:	6713      	str	r3, [r2, #112]	; 0x70
 800475c:	e00b      	b.n	8004776 <HAL_RCC_OscConfig+0x32a>
 800475e:	4b71      	ldr	r3, [pc, #452]	; (8004924 <HAL_RCC_OscConfig+0x4d8>)
 8004760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004762:	4a70      	ldr	r2, [pc, #448]	; (8004924 <HAL_RCC_OscConfig+0x4d8>)
 8004764:	f023 0301 	bic.w	r3, r3, #1
 8004768:	6713      	str	r3, [r2, #112]	; 0x70
 800476a:	4b6e      	ldr	r3, [pc, #440]	; (8004924 <HAL_RCC_OscConfig+0x4d8>)
 800476c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800476e:	4a6d      	ldr	r2, [pc, #436]	; (8004924 <HAL_RCC_OscConfig+0x4d8>)
 8004770:	f023 0304 	bic.w	r3, r3, #4
 8004774:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d015      	beq.n	80047aa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800477e:	f7fd f93b 	bl	80019f8 <HAL_GetTick>
 8004782:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004784:	e00a      	b.n	800479c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004786:	f7fd f937 	bl	80019f8 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	f241 3288 	movw	r2, #5000	; 0x1388
 8004794:	4293      	cmp	r3, r2
 8004796:	d901      	bls.n	800479c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e0bc      	b.n	8004916 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800479c:	4b61      	ldr	r3, [pc, #388]	; (8004924 <HAL_RCC_OscConfig+0x4d8>)
 800479e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d0ee      	beq.n	8004786 <HAL_RCC_OscConfig+0x33a>
 80047a8:	e014      	b.n	80047d4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047aa:	f7fd f925 	bl	80019f8 <HAL_GetTick>
 80047ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047b0:	e00a      	b.n	80047c8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047b2:	f7fd f921 	bl	80019f8 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d901      	bls.n	80047c8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e0a6      	b.n	8004916 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047c8:	4b56      	ldr	r3, [pc, #344]	; (8004924 <HAL_RCC_OscConfig+0x4d8>)
 80047ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1ee      	bne.n	80047b2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047d4:	7dfb      	ldrb	r3, [r7, #23]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d105      	bne.n	80047e6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047da:	4b52      	ldr	r3, [pc, #328]	; (8004924 <HAL_RCC_OscConfig+0x4d8>)
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047de:	4a51      	ldr	r2, [pc, #324]	; (8004924 <HAL_RCC_OscConfig+0x4d8>)
 80047e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f000 8092 	beq.w	8004914 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047f0:	4b4c      	ldr	r3, [pc, #304]	; (8004924 <HAL_RCC_OscConfig+0x4d8>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f003 030c 	and.w	r3, r3, #12
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	d05c      	beq.n	80048b6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	2b02      	cmp	r3, #2
 8004802:	d141      	bne.n	8004888 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004804:	4b48      	ldr	r3, [pc, #288]	; (8004928 <HAL_RCC_OscConfig+0x4dc>)
 8004806:	2200      	movs	r2, #0
 8004808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800480a:	f7fd f8f5 	bl	80019f8 <HAL_GetTick>
 800480e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004810:	e008      	b.n	8004824 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004812:	f7fd f8f1 	bl	80019f8 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	2b02      	cmp	r3, #2
 800481e:	d901      	bls.n	8004824 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e078      	b.n	8004916 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004824:	4b3f      	ldr	r3, [pc, #252]	; (8004924 <HAL_RCC_OscConfig+0x4d8>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1f0      	bne.n	8004812 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	69da      	ldr	r2, [r3, #28]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a1b      	ldr	r3, [r3, #32]
 8004838:	431a      	orrs	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483e:	019b      	lsls	r3, r3, #6
 8004840:	431a      	orrs	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004846:	085b      	lsrs	r3, r3, #1
 8004848:	3b01      	subs	r3, #1
 800484a:	041b      	lsls	r3, r3, #16
 800484c:	431a      	orrs	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004852:	061b      	lsls	r3, r3, #24
 8004854:	4933      	ldr	r1, [pc, #204]	; (8004924 <HAL_RCC_OscConfig+0x4d8>)
 8004856:	4313      	orrs	r3, r2
 8004858:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800485a:	4b33      	ldr	r3, [pc, #204]	; (8004928 <HAL_RCC_OscConfig+0x4dc>)
 800485c:	2201      	movs	r2, #1
 800485e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004860:	f7fd f8ca 	bl	80019f8 <HAL_GetTick>
 8004864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004866:	e008      	b.n	800487a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004868:	f7fd f8c6 	bl	80019f8 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e04d      	b.n	8004916 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800487a:	4b2a      	ldr	r3, [pc, #168]	; (8004924 <HAL_RCC_OscConfig+0x4d8>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d0f0      	beq.n	8004868 <HAL_RCC_OscConfig+0x41c>
 8004886:	e045      	b.n	8004914 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004888:	4b27      	ldr	r3, [pc, #156]	; (8004928 <HAL_RCC_OscConfig+0x4dc>)
 800488a:	2200      	movs	r2, #0
 800488c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800488e:	f7fd f8b3 	bl	80019f8 <HAL_GetTick>
 8004892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004894:	e008      	b.n	80048a8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004896:	f7fd f8af 	bl	80019f8 <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d901      	bls.n	80048a8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e036      	b.n	8004916 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048a8:	4b1e      	ldr	r3, [pc, #120]	; (8004924 <HAL_RCC_OscConfig+0x4d8>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1f0      	bne.n	8004896 <HAL_RCC_OscConfig+0x44a>
 80048b4:	e02e      	b.n	8004914 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d101      	bne.n	80048c2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e029      	b.n	8004916 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048c2:	4b18      	ldr	r3, [pc, #96]	; (8004924 <HAL_RCC_OscConfig+0x4d8>)
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	69db      	ldr	r3, [r3, #28]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d11c      	bne.n	8004910 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d115      	bne.n	8004910 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048ea:	4013      	ands	r3, r2
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d10d      	bne.n	8004910 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80048fe:	429a      	cmp	r2, r3
 8004900:	d106      	bne.n	8004910 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800490c:	429a      	cmp	r2, r3
 800490e:	d001      	beq.n	8004914 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e000      	b.n	8004916 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3718      	adds	r7, #24
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	40007000 	.word	0x40007000
 8004924:	40023800 	.word	0x40023800
 8004928:	42470060 	.word	0x42470060

0800492c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d101      	bne.n	8004940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e0cc      	b.n	8004ada <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004940:	4b68      	ldr	r3, [pc, #416]	; (8004ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 030f 	and.w	r3, r3, #15
 8004948:	683a      	ldr	r2, [r7, #0]
 800494a:	429a      	cmp	r2, r3
 800494c:	d90c      	bls.n	8004968 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800494e:	4b65      	ldr	r3, [pc, #404]	; (8004ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	b2d2      	uxtb	r2, r2
 8004954:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004956:	4b63      	ldr	r3, [pc, #396]	; (8004ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 030f 	and.w	r3, r3, #15
 800495e:	683a      	ldr	r2, [r7, #0]
 8004960:	429a      	cmp	r2, r3
 8004962:	d001      	beq.n	8004968 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e0b8      	b.n	8004ada <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d020      	beq.n	80049b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0304 	and.w	r3, r3, #4
 800497c:	2b00      	cmp	r3, #0
 800497e:	d005      	beq.n	800498c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004980:	4b59      	ldr	r3, [pc, #356]	; (8004ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	4a58      	ldr	r2, [pc, #352]	; (8004ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8004986:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800498a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0308 	and.w	r3, r3, #8
 8004994:	2b00      	cmp	r3, #0
 8004996:	d005      	beq.n	80049a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004998:	4b53      	ldr	r3, [pc, #332]	; (8004ae8 <HAL_RCC_ClockConfig+0x1bc>)
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	4a52      	ldr	r2, [pc, #328]	; (8004ae8 <HAL_RCC_ClockConfig+0x1bc>)
 800499e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80049a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049a4:	4b50      	ldr	r3, [pc, #320]	; (8004ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	494d      	ldr	r1, [pc, #308]	; (8004ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d044      	beq.n	8004a4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d107      	bne.n	80049da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ca:	4b47      	ldr	r3, [pc, #284]	; (8004ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d119      	bne.n	8004a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e07f      	b.n	8004ada <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d003      	beq.n	80049ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049e6:	2b03      	cmp	r3, #3
 80049e8:	d107      	bne.n	80049fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049ea:	4b3f      	ldr	r3, [pc, #252]	; (8004ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d109      	bne.n	8004a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e06f      	b.n	8004ada <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049fa:	4b3b      	ldr	r3, [pc, #236]	; (8004ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e067      	b.n	8004ada <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a0a:	4b37      	ldr	r3, [pc, #220]	; (8004ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f023 0203 	bic.w	r2, r3, #3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	4934      	ldr	r1, [pc, #208]	; (8004ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a1c:	f7fc ffec 	bl	80019f8 <HAL_GetTick>
 8004a20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a22:	e00a      	b.n	8004a3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a24:	f7fc ffe8 	bl	80019f8 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e04f      	b.n	8004ada <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a3a:	4b2b      	ldr	r3, [pc, #172]	; (8004ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f003 020c 	and.w	r2, r3, #12
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d1eb      	bne.n	8004a24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a4c:	4b25      	ldr	r3, [pc, #148]	; (8004ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 030f 	and.w	r3, r3, #15
 8004a54:	683a      	ldr	r2, [r7, #0]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d20c      	bcs.n	8004a74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a5a:	4b22      	ldr	r3, [pc, #136]	; (8004ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a5c:	683a      	ldr	r2, [r7, #0]
 8004a5e:	b2d2      	uxtb	r2, r2
 8004a60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a62:	4b20      	ldr	r3, [pc, #128]	; (8004ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 030f 	and.w	r3, r3, #15
 8004a6a:	683a      	ldr	r2, [r7, #0]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d001      	beq.n	8004a74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e032      	b.n	8004ada <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0304 	and.w	r3, r3, #4
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d008      	beq.n	8004a92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a80:	4b19      	ldr	r3, [pc, #100]	; (8004ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	4916      	ldr	r1, [pc, #88]	; (8004ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0308 	and.w	r3, r3, #8
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d009      	beq.n	8004ab2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a9e:	4b12      	ldr	r3, [pc, #72]	; (8004ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	00db      	lsls	r3, r3, #3
 8004aac:	490e      	ldr	r1, [pc, #56]	; (8004ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ab2:	f000 f821 	bl	8004af8 <HAL_RCC_GetSysClockFreq>
 8004ab6:	4601      	mov	r1, r0
 8004ab8:	4b0b      	ldr	r3, [pc, #44]	; (8004ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	091b      	lsrs	r3, r3, #4
 8004abe:	f003 030f 	and.w	r3, r3, #15
 8004ac2:	4a0a      	ldr	r2, [pc, #40]	; (8004aec <HAL_RCC_ClockConfig+0x1c0>)
 8004ac4:	5cd3      	ldrb	r3, [r2, r3]
 8004ac6:	fa21 f303 	lsr.w	r3, r1, r3
 8004aca:	4a09      	ldr	r2, [pc, #36]	; (8004af0 <HAL_RCC_ClockConfig+0x1c4>)
 8004acc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ace:	4b09      	ldr	r3, [pc, #36]	; (8004af4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7fc ff4c 	bl	8001970 <HAL_InitTick>

  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3710      	adds	r7, #16
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	40023c00 	.word	0x40023c00
 8004ae8:	40023800 	.word	0x40023800
 8004aec:	08009858 	.word	0x08009858
 8004af0:	20000000 	.word	0x20000000
 8004af4:	20000004 	.word	0x20000004

08004af8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004afe:	2300      	movs	r3, #0
 8004b00:	607b      	str	r3, [r7, #4]
 8004b02:	2300      	movs	r3, #0
 8004b04:	60fb      	str	r3, [r7, #12]
 8004b06:	2300      	movs	r3, #0
 8004b08:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b0e:	4b63      	ldr	r3, [pc, #396]	; (8004c9c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f003 030c 	and.w	r3, r3, #12
 8004b16:	2b04      	cmp	r3, #4
 8004b18:	d007      	beq.n	8004b2a <HAL_RCC_GetSysClockFreq+0x32>
 8004b1a:	2b08      	cmp	r3, #8
 8004b1c:	d008      	beq.n	8004b30 <HAL_RCC_GetSysClockFreq+0x38>
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f040 80b4 	bne.w	8004c8c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b24:	4b5e      	ldr	r3, [pc, #376]	; (8004ca0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004b26:	60bb      	str	r3, [r7, #8]
       break;
 8004b28:	e0b3      	b.n	8004c92 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b2a:	4b5e      	ldr	r3, [pc, #376]	; (8004ca4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004b2c:	60bb      	str	r3, [r7, #8]
      break;
 8004b2e:	e0b0      	b.n	8004c92 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b30:	4b5a      	ldr	r3, [pc, #360]	; (8004c9c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b38:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b3a:	4b58      	ldr	r3, [pc, #352]	; (8004c9c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d04a      	beq.n	8004bdc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b46:	4b55      	ldr	r3, [pc, #340]	; (8004c9c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	099b      	lsrs	r3, r3, #6
 8004b4c:	f04f 0400 	mov.w	r4, #0
 8004b50:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004b54:	f04f 0200 	mov.w	r2, #0
 8004b58:	ea03 0501 	and.w	r5, r3, r1
 8004b5c:	ea04 0602 	and.w	r6, r4, r2
 8004b60:	4629      	mov	r1, r5
 8004b62:	4632      	mov	r2, r6
 8004b64:	f04f 0300 	mov.w	r3, #0
 8004b68:	f04f 0400 	mov.w	r4, #0
 8004b6c:	0154      	lsls	r4, r2, #5
 8004b6e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004b72:	014b      	lsls	r3, r1, #5
 8004b74:	4619      	mov	r1, r3
 8004b76:	4622      	mov	r2, r4
 8004b78:	1b49      	subs	r1, r1, r5
 8004b7a:	eb62 0206 	sbc.w	r2, r2, r6
 8004b7e:	f04f 0300 	mov.w	r3, #0
 8004b82:	f04f 0400 	mov.w	r4, #0
 8004b86:	0194      	lsls	r4, r2, #6
 8004b88:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004b8c:	018b      	lsls	r3, r1, #6
 8004b8e:	1a5b      	subs	r3, r3, r1
 8004b90:	eb64 0402 	sbc.w	r4, r4, r2
 8004b94:	f04f 0100 	mov.w	r1, #0
 8004b98:	f04f 0200 	mov.w	r2, #0
 8004b9c:	00e2      	lsls	r2, r4, #3
 8004b9e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004ba2:	00d9      	lsls	r1, r3, #3
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	4614      	mov	r4, r2
 8004ba8:	195b      	adds	r3, r3, r5
 8004baa:	eb44 0406 	adc.w	r4, r4, r6
 8004bae:	f04f 0100 	mov.w	r1, #0
 8004bb2:	f04f 0200 	mov.w	r2, #0
 8004bb6:	0262      	lsls	r2, r4, #9
 8004bb8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004bbc:	0259      	lsls	r1, r3, #9
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	4614      	mov	r4, r2
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	4621      	mov	r1, r4
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f04f 0400 	mov.w	r4, #0
 8004bcc:	461a      	mov	r2, r3
 8004bce:	4623      	mov	r3, r4
 8004bd0:	f7fb ff18 	bl	8000a04 <__aeabi_uldivmod>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	460c      	mov	r4, r1
 8004bd8:	60fb      	str	r3, [r7, #12]
 8004bda:	e049      	b.n	8004c70 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bdc:	4b2f      	ldr	r3, [pc, #188]	; (8004c9c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	099b      	lsrs	r3, r3, #6
 8004be2:	f04f 0400 	mov.w	r4, #0
 8004be6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004bea:	f04f 0200 	mov.w	r2, #0
 8004bee:	ea03 0501 	and.w	r5, r3, r1
 8004bf2:	ea04 0602 	and.w	r6, r4, r2
 8004bf6:	4629      	mov	r1, r5
 8004bf8:	4632      	mov	r2, r6
 8004bfa:	f04f 0300 	mov.w	r3, #0
 8004bfe:	f04f 0400 	mov.w	r4, #0
 8004c02:	0154      	lsls	r4, r2, #5
 8004c04:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004c08:	014b      	lsls	r3, r1, #5
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	4622      	mov	r2, r4
 8004c0e:	1b49      	subs	r1, r1, r5
 8004c10:	eb62 0206 	sbc.w	r2, r2, r6
 8004c14:	f04f 0300 	mov.w	r3, #0
 8004c18:	f04f 0400 	mov.w	r4, #0
 8004c1c:	0194      	lsls	r4, r2, #6
 8004c1e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004c22:	018b      	lsls	r3, r1, #6
 8004c24:	1a5b      	subs	r3, r3, r1
 8004c26:	eb64 0402 	sbc.w	r4, r4, r2
 8004c2a:	f04f 0100 	mov.w	r1, #0
 8004c2e:	f04f 0200 	mov.w	r2, #0
 8004c32:	00e2      	lsls	r2, r4, #3
 8004c34:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004c38:	00d9      	lsls	r1, r3, #3
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	4614      	mov	r4, r2
 8004c3e:	195b      	adds	r3, r3, r5
 8004c40:	eb44 0406 	adc.w	r4, r4, r6
 8004c44:	f04f 0100 	mov.w	r1, #0
 8004c48:	f04f 0200 	mov.w	r2, #0
 8004c4c:	02a2      	lsls	r2, r4, #10
 8004c4e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004c52:	0299      	lsls	r1, r3, #10
 8004c54:	460b      	mov	r3, r1
 8004c56:	4614      	mov	r4, r2
 8004c58:	4618      	mov	r0, r3
 8004c5a:	4621      	mov	r1, r4
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f04f 0400 	mov.w	r4, #0
 8004c62:	461a      	mov	r2, r3
 8004c64:	4623      	mov	r3, r4
 8004c66:	f7fb fecd 	bl	8000a04 <__aeabi_uldivmod>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	460c      	mov	r4, r1
 8004c6e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c70:	4b0a      	ldr	r3, [pc, #40]	; (8004c9c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	0c1b      	lsrs	r3, r3, #16
 8004c76:	f003 0303 	and.w	r3, r3, #3
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	005b      	lsls	r3, r3, #1
 8004c7e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c88:	60bb      	str	r3, [r7, #8]
      break;
 8004c8a:	e002      	b.n	8004c92 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c8c:	4b04      	ldr	r3, [pc, #16]	; (8004ca0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004c8e:	60bb      	str	r3, [r7, #8]
      break;
 8004c90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c92:	68bb      	ldr	r3, [r7, #8]
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3714      	adds	r7, #20
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c9c:	40023800 	.word	0x40023800
 8004ca0:	00f42400 	.word	0x00f42400
 8004ca4:	007a1200 	.word	0x007a1200

08004ca8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cac:	4b03      	ldr	r3, [pc, #12]	; (8004cbc <HAL_RCC_GetHCLKFreq+0x14>)
 8004cae:	681b      	ldr	r3, [r3, #0]
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	20000000 	.word	0x20000000

08004cc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004cc4:	f7ff fff0 	bl	8004ca8 <HAL_RCC_GetHCLKFreq>
 8004cc8:	4601      	mov	r1, r0
 8004cca:	4b05      	ldr	r3, [pc, #20]	; (8004ce0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	0a9b      	lsrs	r3, r3, #10
 8004cd0:	f003 0307 	and.w	r3, r3, #7
 8004cd4:	4a03      	ldr	r2, [pc, #12]	; (8004ce4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cd6:	5cd3      	ldrb	r3, [r2, r3]
 8004cd8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	40023800 	.word	0x40023800
 8004ce4:	08009868 	.word	0x08009868

08004ce8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004cec:	f7ff ffdc 	bl	8004ca8 <HAL_RCC_GetHCLKFreq>
 8004cf0:	4601      	mov	r1, r0
 8004cf2:	4b05      	ldr	r3, [pc, #20]	; (8004d08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	0b5b      	lsrs	r3, r3, #13
 8004cf8:	f003 0307 	and.w	r3, r3, #7
 8004cfc:	4a03      	ldr	r2, [pc, #12]	; (8004d0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cfe:	5cd3      	ldrb	r3, [r2, r3]
 8004d00:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	40023800 	.word	0x40023800
 8004d0c:	08009868 	.word	0x08009868

08004d10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d101      	bne.n	8004d22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e01d      	b.n	8004d5e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d106      	bne.n	8004d3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f7fc fc78 	bl	800162c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2202      	movs	r2, #2
 8004d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	3304      	adds	r3, #4
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	4610      	mov	r0, r2
 8004d50:	f000 fa1e 	bl	8005190 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3708      	adds	r7, #8
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004d66:	b480      	push	{r7}
 8004d68:	b085      	sub	sp, #20
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2202      	movs	r2, #2
 8004d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f003 0307 	and.w	r3, r3, #7
 8004d80:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2b06      	cmp	r3, #6
 8004d86:	d007      	beq.n	8004d98 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f042 0201 	orr.w	r2, r2, #1
 8004d96:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3714      	adds	r7, #20
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr

08004dae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b082      	sub	sp, #8
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d122      	bne.n	8004e0a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d11b      	bne.n	8004e0a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f06f 0202 	mvn.w	r2, #2
 8004dda:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	f003 0303 	and.w	r3, r3, #3
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d003      	beq.n	8004df8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 f9af 	bl	8005154 <HAL_TIM_IC_CaptureCallback>
 8004df6:	e005      	b.n	8004e04 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 f9a1 	bl	8005140 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 f9b2 	bl	8005168 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	f003 0304 	and.w	r3, r3, #4
 8004e14:	2b04      	cmp	r3, #4
 8004e16:	d122      	bne.n	8004e5e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	f003 0304 	and.w	r3, r3, #4
 8004e22:	2b04      	cmp	r3, #4
 8004e24:	d11b      	bne.n	8004e5e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f06f 0204 	mvn.w	r2, #4
 8004e2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2202      	movs	r2, #2
 8004e34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d003      	beq.n	8004e4c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 f985 	bl	8005154 <HAL_TIM_IC_CaptureCallback>
 8004e4a:	e005      	b.n	8004e58 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 f977 	bl	8005140 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 f988 	bl	8005168 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	f003 0308 	and.w	r3, r3, #8
 8004e68:	2b08      	cmp	r3, #8
 8004e6a:	d122      	bne.n	8004eb2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	f003 0308 	and.w	r3, r3, #8
 8004e76:	2b08      	cmp	r3, #8
 8004e78:	d11b      	bne.n	8004eb2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f06f 0208 	mvn.w	r2, #8
 8004e82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2204      	movs	r2, #4
 8004e88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	69db      	ldr	r3, [r3, #28]
 8004e90:	f003 0303 	and.w	r3, r3, #3
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d003      	beq.n	8004ea0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 f95b 	bl	8005154 <HAL_TIM_IC_CaptureCallback>
 8004e9e:	e005      	b.n	8004eac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 f94d 	bl	8005140 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f95e 	bl	8005168 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	f003 0310 	and.w	r3, r3, #16
 8004ebc:	2b10      	cmp	r3, #16
 8004ebe:	d122      	bne.n	8004f06 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	f003 0310 	and.w	r3, r3, #16
 8004eca:	2b10      	cmp	r3, #16
 8004ecc:	d11b      	bne.n	8004f06 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f06f 0210 	mvn.w	r2, #16
 8004ed6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2208      	movs	r2, #8
 8004edc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	69db      	ldr	r3, [r3, #28]
 8004ee4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d003      	beq.n	8004ef4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 f931 	bl	8005154 <HAL_TIM_IC_CaptureCallback>
 8004ef2:	e005      	b.n	8004f00 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 f923 	bl	8005140 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 f934 	bl	8005168 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d10e      	bne.n	8004f32 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d107      	bne.n	8004f32 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f06f 0201 	mvn.w	r2, #1
 8004f2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 f8fd 	bl	800512c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f3c:	2b80      	cmp	r3, #128	; 0x80
 8004f3e:	d10e      	bne.n	8004f5e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f4a:	2b80      	cmp	r3, #128	; 0x80
 8004f4c:	d107      	bne.n	8004f5e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 fad9 	bl	8005510 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f68:	2b40      	cmp	r3, #64	; 0x40
 8004f6a:	d10e      	bne.n	8004f8a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f76:	2b40      	cmp	r3, #64	; 0x40
 8004f78:	d107      	bne.n	8004f8a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 f8f9 	bl	800517c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	f003 0320 	and.w	r3, r3, #32
 8004f94:	2b20      	cmp	r3, #32
 8004f96:	d10e      	bne.n	8004fb6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	f003 0320 	and.w	r3, r3, #32
 8004fa2:	2b20      	cmp	r3, #32
 8004fa4:	d107      	bne.n	8004fb6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f06f 0220 	mvn.w	r2, #32
 8004fae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 faa3 	bl	80054fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fb6:	bf00      	nop
 8004fb8:	3708      	adds	r7, #8
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b084      	sub	sp, #16
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
 8004fc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d101      	bne.n	8004fd6 <HAL_TIM_ConfigClockSource+0x18>
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	e0a6      	b.n	8005124 <HAL_TIM_ConfigClockSource+0x166>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2202      	movs	r2, #2
 8004fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ff4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ffc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2b40      	cmp	r3, #64	; 0x40
 800500c:	d067      	beq.n	80050de <HAL_TIM_ConfigClockSource+0x120>
 800500e:	2b40      	cmp	r3, #64	; 0x40
 8005010:	d80b      	bhi.n	800502a <HAL_TIM_ConfigClockSource+0x6c>
 8005012:	2b10      	cmp	r3, #16
 8005014:	d073      	beq.n	80050fe <HAL_TIM_ConfigClockSource+0x140>
 8005016:	2b10      	cmp	r3, #16
 8005018:	d802      	bhi.n	8005020 <HAL_TIM_ConfigClockSource+0x62>
 800501a:	2b00      	cmp	r3, #0
 800501c:	d06f      	beq.n	80050fe <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800501e:	e078      	b.n	8005112 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005020:	2b20      	cmp	r3, #32
 8005022:	d06c      	beq.n	80050fe <HAL_TIM_ConfigClockSource+0x140>
 8005024:	2b30      	cmp	r3, #48	; 0x30
 8005026:	d06a      	beq.n	80050fe <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005028:	e073      	b.n	8005112 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800502a:	2b70      	cmp	r3, #112	; 0x70
 800502c:	d00d      	beq.n	800504a <HAL_TIM_ConfigClockSource+0x8c>
 800502e:	2b70      	cmp	r3, #112	; 0x70
 8005030:	d804      	bhi.n	800503c <HAL_TIM_ConfigClockSource+0x7e>
 8005032:	2b50      	cmp	r3, #80	; 0x50
 8005034:	d033      	beq.n	800509e <HAL_TIM_ConfigClockSource+0xe0>
 8005036:	2b60      	cmp	r3, #96	; 0x60
 8005038:	d041      	beq.n	80050be <HAL_TIM_ConfigClockSource+0x100>
      break;
 800503a:	e06a      	b.n	8005112 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800503c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005040:	d066      	beq.n	8005110 <HAL_TIM_ConfigClockSource+0x152>
 8005042:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005046:	d017      	beq.n	8005078 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005048:	e063      	b.n	8005112 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6818      	ldr	r0, [r3, #0]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	6899      	ldr	r1, [r3, #8]
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	685a      	ldr	r2, [r3, #4]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	f000 f9b3 	bl	80053c4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800506c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	609a      	str	r2, [r3, #8]
      break;
 8005076:	e04c      	b.n	8005112 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6818      	ldr	r0, [r3, #0]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	6899      	ldr	r1, [r3, #8]
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	685a      	ldr	r2, [r3, #4]
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	f000 f99c 	bl	80053c4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	689a      	ldr	r2, [r3, #8]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800509a:	609a      	str	r2, [r3, #8]
      break;
 800509c:	e039      	b.n	8005112 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6818      	ldr	r0, [r3, #0]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	6859      	ldr	r1, [r3, #4]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	461a      	mov	r2, r3
 80050ac:	f000 f910 	bl	80052d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2150      	movs	r1, #80	; 0x50
 80050b6:	4618      	mov	r0, r3
 80050b8:	f000 f969 	bl	800538e <TIM_ITRx_SetConfig>
      break;
 80050bc:	e029      	b.n	8005112 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6818      	ldr	r0, [r3, #0]
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	6859      	ldr	r1, [r3, #4]
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	461a      	mov	r2, r3
 80050cc:	f000 f92f 	bl	800532e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2160      	movs	r1, #96	; 0x60
 80050d6:	4618      	mov	r0, r3
 80050d8:	f000 f959 	bl	800538e <TIM_ITRx_SetConfig>
      break;
 80050dc:	e019      	b.n	8005112 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6818      	ldr	r0, [r3, #0]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	6859      	ldr	r1, [r3, #4]
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	461a      	mov	r2, r3
 80050ec:	f000 f8f0 	bl	80052d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2140      	movs	r1, #64	; 0x40
 80050f6:	4618      	mov	r0, r3
 80050f8:	f000 f949 	bl	800538e <TIM_ITRx_SetConfig>
      break;
 80050fc:	e009      	b.n	8005112 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4619      	mov	r1, r3
 8005108:	4610      	mov	r0, r2
 800510a:	f000 f940 	bl	800538e <TIM_ITRx_SetConfig>
      break;
 800510e:	e000      	b.n	8005112 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005110:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005134:	bf00      	nop
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800515c:	bf00      	nop
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005184:	bf00      	nop
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a40      	ldr	r2, [pc, #256]	; (80052a4 <TIM_Base_SetConfig+0x114>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d013      	beq.n	80051d0 <TIM_Base_SetConfig+0x40>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ae:	d00f      	beq.n	80051d0 <TIM_Base_SetConfig+0x40>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a3d      	ldr	r2, [pc, #244]	; (80052a8 <TIM_Base_SetConfig+0x118>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d00b      	beq.n	80051d0 <TIM_Base_SetConfig+0x40>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a3c      	ldr	r2, [pc, #240]	; (80052ac <TIM_Base_SetConfig+0x11c>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d007      	beq.n	80051d0 <TIM_Base_SetConfig+0x40>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a3b      	ldr	r2, [pc, #236]	; (80052b0 <TIM_Base_SetConfig+0x120>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d003      	beq.n	80051d0 <TIM_Base_SetConfig+0x40>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a3a      	ldr	r2, [pc, #232]	; (80052b4 <TIM_Base_SetConfig+0x124>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d108      	bne.n	80051e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	4313      	orrs	r3, r2
 80051e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a2f      	ldr	r2, [pc, #188]	; (80052a4 <TIM_Base_SetConfig+0x114>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d02b      	beq.n	8005242 <TIM_Base_SetConfig+0xb2>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051f0:	d027      	beq.n	8005242 <TIM_Base_SetConfig+0xb2>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a2c      	ldr	r2, [pc, #176]	; (80052a8 <TIM_Base_SetConfig+0x118>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d023      	beq.n	8005242 <TIM_Base_SetConfig+0xb2>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a2b      	ldr	r2, [pc, #172]	; (80052ac <TIM_Base_SetConfig+0x11c>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d01f      	beq.n	8005242 <TIM_Base_SetConfig+0xb2>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a2a      	ldr	r2, [pc, #168]	; (80052b0 <TIM_Base_SetConfig+0x120>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d01b      	beq.n	8005242 <TIM_Base_SetConfig+0xb2>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a29      	ldr	r2, [pc, #164]	; (80052b4 <TIM_Base_SetConfig+0x124>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d017      	beq.n	8005242 <TIM_Base_SetConfig+0xb2>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a28      	ldr	r2, [pc, #160]	; (80052b8 <TIM_Base_SetConfig+0x128>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d013      	beq.n	8005242 <TIM_Base_SetConfig+0xb2>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a27      	ldr	r2, [pc, #156]	; (80052bc <TIM_Base_SetConfig+0x12c>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d00f      	beq.n	8005242 <TIM_Base_SetConfig+0xb2>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a26      	ldr	r2, [pc, #152]	; (80052c0 <TIM_Base_SetConfig+0x130>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d00b      	beq.n	8005242 <TIM_Base_SetConfig+0xb2>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a25      	ldr	r2, [pc, #148]	; (80052c4 <TIM_Base_SetConfig+0x134>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d007      	beq.n	8005242 <TIM_Base_SetConfig+0xb2>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a24      	ldr	r2, [pc, #144]	; (80052c8 <TIM_Base_SetConfig+0x138>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d003      	beq.n	8005242 <TIM_Base_SetConfig+0xb2>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a23      	ldr	r2, [pc, #140]	; (80052cc <TIM_Base_SetConfig+0x13c>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d108      	bne.n	8005254 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005248:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	4313      	orrs	r3, r2
 8005252:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	695b      	ldr	r3, [r3, #20]
 800525e:	4313      	orrs	r3, r2
 8005260:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	689a      	ldr	r2, [r3, #8]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a0a      	ldr	r2, [pc, #40]	; (80052a4 <TIM_Base_SetConfig+0x114>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d003      	beq.n	8005288 <TIM_Base_SetConfig+0xf8>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a0c      	ldr	r2, [pc, #48]	; (80052b4 <TIM_Base_SetConfig+0x124>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d103      	bne.n	8005290 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	691a      	ldr	r2, [r3, #16]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	615a      	str	r2, [r3, #20]
}
 8005296:	bf00      	nop
 8005298:	3714      	adds	r7, #20
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	40010000 	.word	0x40010000
 80052a8:	40000400 	.word	0x40000400
 80052ac:	40000800 	.word	0x40000800
 80052b0:	40000c00 	.word	0x40000c00
 80052b4:	40010400 	.word	0x40010400
 80052b8:	40014000 	.word	0x40014000
 80052bc:	40014400 	.word	0x40014400
 80052c0:	40014800 	.word	0x40014800
 80052c4:	40001800 	.word	0x40001800
 80052c8:	40001c00 	.word	0x40001c00
 80052cc:	40002000 	.word	0x40002000

080052d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b087      	sub	sp, #28
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6a1b      	ldr	r3, [r3, #32]
 80052e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	f023 0201 	bic.w	r2, r3, #1
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	011b      	lsls	r3, r3, #4
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	4313      	orrs	r3, r2
 8005304:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	f023 030a 	bic.w	r3, r3, #10
 800530c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	4313      	orrs	r3, r2
 8005314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	621a      	str	r2, [r3, #32]
}
 8005322:	bf00      	nop
 8005324:	371c      	adds	r7, #28
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr

0800532e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800532e:	b480      	push	{r7}
 8005330:	b087      	sub	sp, #28
 8005332:	af00      	add	r7, sp, #0
 8005334:	60f8      	str	r0, [r7, #12]
 8005336:	60b9      	str	r1, [r7, #8]
 8005338:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	f023 0210 	bic.w	r2, r3, #16
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6a1b      	ldr	r3, [r3, #32]
 8005350:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005358:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	031b      	lsls	r3, r3, #12
 800535e:	697a      	ldr	r2, [r7, #20]
 8005360:	4313      	orrs	r3, r2
 8005362:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800536a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	011b      	lsls	r3, r3, #4
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	4313      	orrs	r3, r2
 8005374:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	693a      	ldr	r2, [r7, #16]
 8005380:	621a      	str	r2, [r3, #32]
}
 8005382:	bf00      	nop
 8005384:	371c      	adds	r7, #28
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr

0800538e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800538e:	b480      	push	{r7}
 8005390:	b085      	sub	sp, #20
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
 8005396:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053a6:	683a      	ldr	r2, [r7, #0]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	f043 0307 	orr.w	r3, r3, #7
 80053b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	609a      	str	r2, [r3, #8]
}
 80053b8:	bf00      	nop
 80053ba:	3714      	adds	r7, #20
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b087      	sub	sp, #28
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	607a      	str	r2, [r7, #4]
 80053d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	021a      	lsls	r2, r3, #8
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	431a      	orrs	r2, r3
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	609a      	str	r2, [r3, #8]
}
 80053f8:	bf00      	nop
 80053fa:	371c      	adds	r7, #28
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005414:	2b01      	cmp	r3, #1
 8005416:	d101      	bne.n	800541c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005418:	2302      	movs	r3, #2
 800541a:	e05a      	b.n	80054d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2202      	movs	r2, #2
 8005428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005442:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	4313      	orrs	r3, r2
 800544c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a21      	ldr	r2, [pc, #132]	; (80054e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d022      	beq.n	80054a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005468:	d01d      	beq.n	80054a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a1d      	ldr	r2, [pc, #116]	; (80054e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d018      	beq.n	80054a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a1b      	ldr	r2, [pc, #108]	; (80054e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d013      	beq.n	80054a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a1a      	ldr	r2, [pc, #104]	; (80054ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d00e      	beq.n	80054a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a18      	ldr	r2, [pc, #96]	; (80054f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d009      	beq.n	80054a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a17      	ldr	r2, [pc, #92]	; (80054f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d004      	beq.n	80054a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a15      	ldr	r2, [pc, #84]	; (80054f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d10c      	bne.n	80054c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	68ba      	ldr	r2, [r7, #8]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68ba      	ldr	r2, [r7, #8]
 80054be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3714      	adds	r7, #20
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	40010000 	.word	0x40010000
 80054e4:	40000400 	.word	0x40000400
 80054e8:	40000800 	.word	0x40000800
 80054ec:	40000c00 	.word	0x40000c00
 80054f0:	40010400 	.word	0x40010400
 80054f4:	40014000 	.word	0x40014000
 80054f8:	40001800 	.word	0x40001800

080054fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005518:	bf00      	nop
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d101      	bne.n	8005536 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e03f      	b.n	80055b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d106      	bne.n	8005550 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f7fc f894 	bl	8001678 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2224      	movs	r2, #36	; 0x24
 8005554:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68da      	ldr	r2, [r3, #12]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005566:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 f829 	bl	80055c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	691a      	ldr	r2, [r3, #16]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800557c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	695a      	ldr	r2, [r3, #20]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800558c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68da      	ldr	r2, [r3, #12]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800559c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2220      	movs	r2, #32
 80055a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2220      	movs	r2, #32
 80055b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3708      	adds	r7, #8
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
	...

080055c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055c4:	b085      	sub	sp, #20
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	68da      	ldr	r2, [r3, #12]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	430a      	orrs	r2, r1
 80055de:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689a      	ldr	r2, [r3, #8]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	431a      	orrs	r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	431a      	orrs	r2, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	69db      	ldr	r3, [r3, #28]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005602:	f023 030c 	bic.w	r3, r3, #12
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	6812      	ldr	r2, [r2, #0]
 800560a:	68f9      	ldr	r1, [r7, #12]
 800560c:	430b      	orrs	r3, r1
 800560e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	695b      	ldr	r3, [r3, #20]
 8005616:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	699a      	ldr	r2, [r3, #24]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	430a      	orrs	r2, r1
 8005624:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	69db      	ldr	r3, [r3, #28]
 800562a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800562e:	f040 818b 	bne.w	8005948 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4ac1      	ldr	r2, [pc, #772]	; (800593c <UART_SetConfig+0x37c>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d005      	beq.n	8005648 <UART_SetConfig+0x88>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4abf      	ldr	r2, [pc, #764]	; (8005940 <UART_SetConfig+0x380>)
 8005642:	4293      	cmp	r3, r2
 8005644:	f040 80bd 	bne.w	80057c2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005648:	f7ff fb4e 	bl	8004ce8 <HAL_RCC_GetPCLK2Freq>
 800564c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	461d      	mov	r5, r3
 8005652:	f04f 0600 	mov.w	r6, #0
 8005656:	46a8      	mov	r8, r5
 8005658:	46b1      	mov	r9, r6
 800565a:	eb18 0308 	adds.w	r3, r8, r8
 800565e:	eb49 0409 	adc.w	r4, r9, r9
 8005662:	4698      	mov	r8, r3
 8005664:	46a1      	mov	r9, r4
 8005666:	eb18 0805 	adds.w	r8, r8, r5
 800566a:	eb49 0906 	adc.w	r9, r9, r6
 800566e:	f04f 0100 	mov.w	r1, #0
 8005672:	f04f 0200 	mov.w	r2, #0
 8005676:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800567a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800567e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005682:	4688      	mov	r8, r1
 8005684:	4691      	mov	r9, r2
 8005686:	eb18 0005 	adds.w	r0, r8, r5
 800568a:	eb49 0106 	adc.w	r1, r9, r6
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	461d      	mov	r5, r3
 8005694:	f04f 0600 	mov.w	r6, #0
 8005698:	196b      	adds	r3, r5, r5
 800569a:	eb46 0406 	adc.w	r4, r6, r6
 800569e:	461a      	mov	r2, r3
 80056a0:	4623      	mov	r3, r4
 80056a2:	f7fb f9af 	bl	8000a04 <__aeabi_uldivmod>
 80056a6:	4603      	mov	r3, r0
 80056a8:	460c      	mov	r4, r1
 80056aa:	461a      	mov	r2, r3
 80056ac:	4ba5      	ldr	r3, [pc, #660]	; (8005944 <UART_SetConfig+0x384>)
 80056ae:	fba3 2302 	umull	r2, r3, r3, r2
 80056b2:	095b      	lsrs	r3, r3, #5
 80056b4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	461d      	mov	r5, r3
 80056bc:	f04f 0600 	mov.w	r6, #0
 80056c0:	46a9      	mov	r9, r5
 80056c2:	46b2      	mov	sl, r6
 80056c4:	eb19 0309 	adds.w	r3, r9, r9
 80056c8:	eb4a 040a 	adc.w	r4, sl, sl
 80056cc:	4699      	mov	r9, r3
 80056ce:	46a2      	mov	sl, r4
 80056d0:	eb19 0905 	adds.w	r9, r9, r5
 80056d4:	eb4a 0a06 	adc.w	sl, sl, r6
 80056d8:	f04f 0100 	mov.w	r1, #0
 80056dc:	f04f 0200 	mov.w	r2, #0
 80056e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80056e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80056ec:	4689      	mov	r9, r1
 80056ee:	4692      	mov	sl, r2
 80056f0:	eb19 0005 	adds.w	r0, r9, r5
 80056f4:	eb4a 0106 	adc.w	r1, sl, r6
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	461d      	mov	r5, r3
 80056fe:	f04f 0600 	mov.w	r6, #0
 8005702:	196b      	adds	r3, r5, r5
 8005704:	eb46 0406 	adc.w	r4, r6, r6
 8005708:	461a      	mov	r2, r3
 800570a:	4623      	mov	r3, r4
 800570c:	f7fb f97a 	bl	8000a04 <__aeabi_uldivmod>
 8005710:	4603      	mov	r3, r0
 8005712:	460c      	mov	r4, r1
 8005714:	461a      	mov	r2, r3
 8005716:	4b8b      	ldr	r3, [pc, #556]	; (8005944 <UART_SetConfig+0x384>)
 8005718:	fba3 1302 	umull	r1, r3, r3, r2
 800571c:	095b      	lsrs	r3, r3, #5
 800571e:	2164      	movs	r1, #100	; 0x64
 8005720:	fb01 f303 	mul.w	r3, r1, r3
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	00db      	lsls	r3, r3, #3
 8005728:	3332      	adds	r3, #50	; 0x32
 800572a:	4a86      	ldr	r2, [pc, #536]	; (8005944 <UART_SetConfig+0x384>)
 800572c:	fba2 2303 	umull	r2, r3, r2, r3
 8005730:	095b      	lsrs	r3, r3, #5
 8005732:	005b      	lsls	r3, r3, #1
 8005734:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005738:	4498      	add	r8, r3
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	461d      	mov	r5, r3
 800573e:	f04f 0600 	mov.w	r6, #0
 8005742:	46a9      	mov	r9, r5
 8005744:	46b2      	mov	sl, r6
 8005746:	eb19 0309 	adds.w	r3, r9, r9
 800574a:	eb4a 040a 	adc.w	r4, sl, sl
 800574e:	4699      	mov	r9, r3
 8005750:	46a2      	mov	sl, r4
 8005752:	eb19 0905 	adds.w	r9, r9, r5
 8005756:	eb4a 0a06 	adc.w	sl, sl, r6
 800575a:	f04f 0100 	mov.w	r1, #0
 800575e:	f04f 0200 	mov.w	r2, #0
 8005762:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005766:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800576a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800576e:	4689      	mov	r9, r1
 8005770:	4692      	mov	sl, r2
 8005772:	eb19 0005 	adds.w	r0, r9, r5
 8005776:	eb4a 0106 	adc.w	r1, sl, r6
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	461d      	mov	r5, r3
 8005780:	f04f 0600 	mov.w	r6, #0
 8005784:	196b      	adds	r3, r5, r5
 8005786:	eb46 0406 	adc.w	r4, r6, r6
 800578a:	461a      	mov	r2, r3
 800578c:	4623      	mov	r3, r4
 800578e:	f7fb f939 	bl	8000a04 <__aeabi_uldivmod>
 8005792:	4603      	mov	r3, r0
 8005794:	460c      	mov	r4, r1
 8005796:	461a      	mov	r2, r3
 8005798:	4b6a      	ldr	r3, [pc, #424]	; (8005944 <UART_SetConfig+0x384>)
 800579a:	fba3 1302 	umull	r1, r3, r3, r2
 800579e:	095b      	lsrs	r3, r3, #5
 80057a0:	2164      	movs	r1, #100	; 0x64
 80057a2:	fb01 f303 	mul.w	r3, r1, r3
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	00db      	lsls	r3, r3, #3
 80057aa:	3332      	adds	r3, #50	; 0x32
 80057ac:	4a65      	ldr	r2, [pc, #404]	; (8005944 <UART_SetConfig+0x384>)
 80057ae:	fba2 2303 	umull	r2, r3, r2, r3
 80057b2:	095b      	lsrs	r3, r3, #5
 80057b4:	f003 0207 	and.w	r2, r3, #7
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4442      	add	r2, r8
 80057be:	609a      	str	r2, [r3, #8]
 80057c0:	e26f      	b.n	8005ca2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80057c2:	f7ff fa7d 	bl	8004cc0 <HAL_RCC_GetPCLK1Freq>
 80057c6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	461d      	mov	r5, r3
 80057cc:	f04f 0600 	mov.w	r6, #0
 80057d0:	46a8      	mov	r8, r5
 80057d2:	46b1      	mov	r9, r6
 80057d4:	eb18 0308 	adds.w	r3, r8, r8
 80057d8:	eb49 0409 	adc.w	r4, r9, r9
 80057dc:	4698      	mov	r8, r3
 80057de:	46a1      	mov	r9, r4
 80057e0:	eb18 0805 	adds.w	r8, r8, r5
 80057e4:	eb49 0906 	adc.w	r9, r9, r6
 80057e8:	f04f 0100 	mov.w	r1, #0
 80057ec:	f04f 0200 	mov.w	r2, #0
 80057f0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80057f4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80057f8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80057fc:	4688      	mov	r8, r1
 80057fe:	4691      	mov	r9, r2
 8005800:	eb18 0005 	adds.w	r0, r8, r5
 8005804:	eb49 0106 	adc.w	r1, r9, r6
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	461d      	mov	r5, r3
 800580e:	f04f 0600 	mov.w	r6, #0
 8005812:	196b      	adds	r3, r5, r5
 8005814:	eb46 0406 	adc.w	r4, r6, r6
 8005818:	461a      	mov	r2, r3
 800581a:	4623      	mov	r3, r4
 800581c:	f7fb f8f2 	bl	8000a04 <__aeabi_uldivmod>
 8005820:	4603      	mov	r3, r0
 8005822:	460c      	mov	r4, r1
 8005824:	461a      	mov	r2, r3
 8005826:	4b47      	ldr	r3, [pc, #284]	; (8005944 <UART_SetConfig+0x384>)
 8005828:	fba3 2302 	umull	r2, r3, r3, r2
 800582c:	095b      	lsrs	r3, r3, #5
 800582e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	461d      	mov	r5, r3
 8005836:	f04f 0600 	mov.w	r6, #0
 800583a:	46a9      	mov	r9, r5
 800583c:	46b2      	mov	sl, r6
 800583e:	eb19 0309 	adds.w	r3, r9, r9
 8005842:	eb4a 040a 	adc.w	r4, sl, sl
 8005846:	4699      	mov	r9, r3
 8005848:	46a2      	mov	sl, r4
 800584a:	eb19 0905 	adds.w	r9, r9, r5
 800584e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005852:	f04f 0100 	mov.w	r1, #0
 8005856:	f04f 0200 	mov.w	r2, #0
 800585a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800585e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005862:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005866:	4689      	mov	r9, r1
 8005868:	4692      	mov	sl, r2
 800586a:	eb19 0005 	adds.w	r0, r9, r5
 800586e:	eb4a 0106 	adc.w	r1, sl, r6
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	461d      	mov	r5, r3
 8005878:	f04f 0600 	mov.w	r6, #0
 800587c:	196b      	adds	r3, r5, r5
 800587e:	eb46 0406 	adc.w	r4, r6, r6
 8005882:	461a      	mov	r2, r3
 8005884:	4623      	mov	r3, r4
 8005886:	f7fb f8bd 	bl	8000a04 <__aeabi_uldivmod>
 800588a:	4603      	mov	r3, r0
 800588c:	460c      	mov	r4, r1
 800588e:	461a      	mov	r2, r3
 8005890:	4b2c      	ldr	r3, [pc, #176]	; (8005944 <UART_SetConfig+0x384>)
 8005892:	fba3 1302 	umull	r1, r3, r3, r2
 8005896:	095b      	lsrs	r3, r3, #5
 8005898:	2164      	movs	r1, #100	; 0x64
 800589a:	fb01 f303 	mul.w	r3, r1, r3
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	00db      	lsls	r3, r3, #3
 80058a2:	3332      	adds	r3, #50	; 0x32
 80058a4:	4a27      	ldr	r2, [pc, #156]	; (8005944 <UART_SetConfig+0x384>)
 80058a6:	fba2 2303 	umull	r2, r3, r2, r3
 80058aa:	095b      	lsrs	r3, r3, #5
 80058ac:	005b      	lsls	r3, r3, #1
 80058ae:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80058b2:	4498      	add	r8, r3
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	461d      	mov	r5, r3
 80058b8:	f04f 0600 	mov.w	r6, #0
 80058bc:	46a9      	mov	r9, r5
 80058be:	46b2      	mov	sl, r6
 80058c0:	eb19 0309 	adds.w	r3, r9, r9
 80058c4:	eb4a 040a 	adc.w	r4, sl, sl
 80058c8:	4699      	mov	r9, r3
 80058ca:	46a2      	mov	sl, r4
 80058cc:	eb19 0905 	adds.w	r9, r9, r5
 80058d0:	eb4a 0a06 	adc.w	sl, sl, r6
 80058d4:	f04f 0100 	mov.w	r1, #0
 80058d8:	f04f 0200 	mov.w	r2, #0
 80058dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80058e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80058e8:	4689      	mov	r9, r1
 80058ea:	4692      	mov	sl, r2
 80058ec:	eb19 0005 	adds.w	r0, r9, r5
 80058f0:	eb4a 0106 	adc.w	r1, sl, r6
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	461d      	mov	r5, r3
 80058fa:	f04f 0600 	mov.w	r6, #0
 80058fe:	196b      	adds	r3, r5, r5
 8005900:	eb46 0406 	adc.w	r4, r6, r6
 8005904:	461a      	mov	r2, r3
 8005906:	4623      	mov	r3, r4
 8005908:	f7fb f87c 	bl	8000a04 <__aeabi_uldivmod>
 800590c:	4603      	mov	r3, r0
 800590e:	460c      	mov	r4, r1
 8005910:	461a      	mov	r2, r3
 8005912:	4b0c      	ldr	r3, [pc, #48]	; (8005944 <UART_SetConfig+0x384>)
 8005914:	fba3 1302 	umull	r1, r3, r3, r2
 8005918:	095b      	lsrs	r3, r3, #5
 800591a:	2164      	movs	r1, #100	; 0x64
 800591c:	fb01 f303 	mul.w	r3, r1, r3
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	00db      	lsls	r3, r3, #3
 8005924:	3332      	adds	r3, #50	; 0x32
 8005926:	4a07      	ldr	r2, [pc, #28]	; (8005944 <UART_SetConfig+0x384>)
 8005928:	fba2 2303 	umull	r2, r3, r2, r3
 800592c:	095b      	lsrs	r3, r3, #5
 800592e:	f003 0207 	and.w	r2, r3, #7
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4442      	add	r2, r8
 8005938:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800593a:	e1b2      	b.n	8005ca2 <UART_SetConfig+0x6e2>
 800593c:	40011000 	.word	0x40011000
 8005940:	40011400 	.word	0x40011400
 8005944:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4ad7      	ldr	r2, [pc, #860]	; (8005cac <UART_SetConfig+0x6ec>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d005      	beq.n	800595e <UART_SetConfig+0x39e>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4ad6      	ldr	r2, [pc, #856]	; (8005cb0 <UART_SetConfig+0x6f0>)
 8005958:	4293      	cmp	r3, r2
 800595a:	f040 80d1 	bne.w	8005b00 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800595e:	f7ff f9c3 	bl	8004ce8 <HAL_RCC_GetPCLK2Freq>
 8005962:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	469a      	mov	sl, r3
 8005968:	f04f 0b00 	mov.w	fp, #0
 800596c:	46d0      	mov	r8, sl
 800596e:	46d9      	mov	r9, fp
 8005970:	eb18 0308 	adds.w	r3, r8, r8
 8005974:	eb49 0409 	adc.w	r4, r9, r9
 8005978:	4698      	mov	r8, r3
 800597a:	46a1      	mov	r9, r4
 800597c:	eb18 080a 	adds.w	r8, r8, sl
 8005980:	eb49 090b 	adc.w	r9, r9, fp
 8005984:	f04f 0100 	mov.w	r1, #0
 8005988:	f04f 0200 	mov.w	r2, #0
 800598c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005990:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005994:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005998:	4688      	mov	r8, r1
 800599a:	4691      	mov	r9, r2
 800599c:	eb1a 0508 	adds.w	r5, sl, r8
 80059a0:	eb4b 0609 	adc.w	r6, fp, r9
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	4619      	mov	r1, r3
 80059aa:	f04f 0200 	mov.w	r2, #0
 80059ae:	f04f 0300 	mov.w	r3, #0
 80059b2:	f04f 0400 	mov.w	r4, #0
 80059b6:	0094      	lsls	r4, r2, #2
 80059b8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80059bc:	008b      	lsls	r3, r1, #2
 80059be:	461a      	mov	r2, r3
 80059c0:	4623      	mov	r3, r4
 80059c2:	4628      	mov	r0, r5
 80059c4:	4631      	mov	r1, r6
 80059c6:	f7fb f81d 	bl	8000a04 <__aeabi_uldivmod>
 80059ca:	4603      	mov	r3, r0
 80059cc:	460c      	mov	r4, r1
 80059ce:	461a      	mov	r2, r3
 80059d0:	4bb8      	ldr	r3, [pc, #736]	; (8005cb4 <UART_SetConfig+0x6f4>)
 80059d2:	fba3 2302 	umull	r2, r3, r3, r2
 80059d6:	095b      	lsrs	r3, r3, #5
 80059d8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	469b      	mov	fp, r3
 80059e0:	f04f 0c00 	mov.w	ip, #0
 80059e4:	46d9      	mov	r9, fp
 80059e6:	46e2      	mov	sl, ip
 80059e8:	eb19 0309 	adds.w	r3, r9, r9
 80059ec:	eb4a 040a 	adc.w	r4, sl, sl
 80059f0:	4699      	mov	r9, r3
 80059f2:	46a2      	mov	sl, r4
 80059f4:	eb19 090b 	adds.w	r9, r9, fp
 80059f8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80059fc:	f04f 0100 	mov.w	r1, #0
 8005a00:	f04f 0200 	mov.w	r2, #0
 8005a04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a08:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a0c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a10:	4689      	mov	r9, r1
 8005a12:	4692      	mov	sl, r2
 8005a14:	eb1b 0509 	adds.w	r5, fp, r9
 8005a18:	eb4c 060a 	adc.w	r6, ip, sl
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	4619      	mov	r1, r3
 8005a22:	f04f 0200 	mov.w	r2, #0
 8005a26:	f04f 0300 	mov.w	r3, #0
 8005a2a:	f04f 0400 	mov.w	r4, #0
 8005a2e:	0094      	lsls	r4, r2, #2
 8005a30:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005a34:	008b      	lsls	r3, r1, #2
 8005a36:	461a      	mov	r2, r3
 8005a38:	4623      	mov	r3, r4
 8005a3a:	4628      	mov	r0, r5
 8005a3c:	4631      	mov	r1, r6
 8005a3e:	f7fa ffe1 	bl	8000a04 <__aeabi_uldivmod>
 8005a42:	4603      	mov	r3, r0
 8005a44:	460c      	mov	r4, r1
 8005a46:	461a      	mov	r2, r3
 8005a48:	4b9a      	ldr	r3, [pc, #616]	; (8005cb4 <UART_SetConfig+0x6f4>)
 8005a4a:	fba3 1302 	umull	r1, r3, r3, r2
 8005a4e:	095b      	lsrs	r3, r3, #5
 8005a50:	2164      	movs	r1, #100	; 0x64
 8005a52:	fb01 f303 	mul.w	r3, r1, r3
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	011b      	lsls	r3, r3, #4
 8005a5a:	3332      	adds	r3, #50	; 0x32
 8005a5c:	4a95      	ldr	r2, [pc, #596]	; (8005cb4 <UART_SetConfig+0x6f4>)
 8005a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a62:	095b      	lsrs	r3, r3, #5
 8005a64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a68:	4498      	add	r8, r3
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	469b      	mov	fp, r3
 8005a6e:	f04f 0c00 	mov.w	ip, #0
 8005a72:	46d9      	mov	r9, fp
 8005a74:	46e2      	mov	sl, ip
 8005a76:	eb19 0309 	adds.w	r3, r9, r9
 8005a7a:	eb4a 040a 	adc.w	r4, sl, sl
 8005a7e:	4699      	mov	r9, r3
 8005a80:	46a2      	mov	sl, r4
 8005a82:	eb19 090b 	adds.w	r9, r9, fp
 8005a86:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005a8a:	f04f 0100 	mov.w	r1, #0
 8005a8e:	f04f 0200 	mov.w	r2, #0
 8005a92:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a96:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a9a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a9e:	4689      	mov	r9, r1
 8005aa0:	4692      	mov	sl, r2
 8005aa2:	eb1b 0509 	adds.w	r5, fp, r9
 8005aa6:	eb4c 060a 	adc.w	r6, ip, sl
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	4619      	mov	r1, r3
 8005ab0:	f04f 0200 	mov.w	r2, #0
 8005ab4:	f04f 0300 	mov.w	r3, #0
 8005ab8:	f04f 0400 	mov.w	r4, #0
 8005abc:	0094      	lsls	r4, r2, #2
 8005abe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005ac2:	008b      	lsls	r3, r1, #2
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	4623      	mov	r3, r4
 8005ac8:	4628      	mov	r0, r5
 8005aca:	4631      	mov	r1, r6
 8005acc:	f7fa ff9a 	bl	8000a04 <__aeabi_uldivmod>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	460c      	mov	r4, r1
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	4b77      	ldr	r3, [pc, #476]	; (8005cb4 <UART_SetConfig+0x6f4>)
 8005ad8:	fba3 1302 	umull	r1, r3, r3, r2
 8005adc:	095b      	lsrs	r3, r3, #5
 8005ade:	2164      	movs	r1, #100	; 0x64
 8005ae0:	fb01 f303 	mul.w	r3, r1, r3
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	011b      	lsls	r3, r3, #4
 8005ae8:	3332      	adds	r3, #50	; 0x32
 8005aea:	4a72      	ldr	r2, [pc, #456]	; (8005cb4 <UART_SetConfig+0x6f4>)
 8005aec:	fba2 2303 	umull	r2, r3, r2, r3
 8005af0:	095b      	lsrs	r3, r3, #5
 8005af2:	f003 020f 	and.w	r2, r3, #15
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4442      	add	r2, r8
 8005afc:	609a      	str	r2, [r3, #8]
 8005afe:	e0d0      	b.n	8005ca2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b00:	f7ff f8de 	bl	8004cc0 <HAL_RCC_GetPCLK1Freq>
 8005b04:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	469a      	mov	sl, r3
 8005b0a:	f04f 0b00 	mov.w	fp, #0
 8005b0e:	46d0      	mov	r8, sl
 8005b10:	46d9      	mov	r9, fp
 8005b12:	eb18 0308 	adds.w	r3, r8, r8
 8005b16:	eb49 0409 	adc.w	r4, r9, r9
 8005b1a:	4698      	mov	r8, r3
 8005b1c:	46a1      	mov	r9, r4
 8005b1e:	eb18 080a 	adds.w	r8, r8, sl
 8005b22:	eb49 090b 	adc.w	r9, r9, fp
 8005b26:	f04f 0100 	mov.w	r1, #0
 8005b2a:	f04f 0200 	mov.w	r2, #0
 8005b2e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005b32:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005b36:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005b3a:	4688      	mov	r8, r1
 8005b3c:	4691      	mov	r9, r2
 8005b3e:	eb1a 0508 	adds.w	r5, sl, r8
 8005b42:	eb4b 0609 	adc.w	r6, fp, r9
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	f04f 0200 	mov.w	r2, #0
 8005b50:	f04f 0300 	mov.w	r3, #0
 8005b54:	f04f 0400 	mov.w	r4, #0
 8005b58:	0094      	lsls	r4, r2, #2
 8005b5a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005b5e:	008b      	lsls	r3, r1, #2
 8005b60:	461a      	mov	r2, r3
 8005b62:	4623      	mov	r3, r4
 8005b64:	4628      	mov	r0, r5
 8005b66:	4631      	mov	r1, r6
 8005b68:	f7fa ff4c 	bl	8000a04 <__aeabi_uldivmod>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	460c      	mov	r4, r1
 8005b70:	461a      	mov	r2, r3
 8005b72:	4b50      	ldr	r3, [pc, #320]	; (8005cb4 <UART_SetConfig+0x6f4>)
 8005b74:	fba3 2302 	umull	r2, r3, r3, r2
 8005b78:	095b      	lsrs	r3, r3, #5
 8005b7a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	469b      	mov	fp, r3
 8005b82:	f04f 0c00 	mov.w	ip, #0
 8005b86:	46d9      	mov	r9, fp
 8005b88:	46e2      	mov	sl, ip
 8005b8a:	eb19 0309 	adds.w	r3, r9, r9
 8005b8e:	eb4a 040a 	adc.w	r4, sl, sl
 8005b92:	4699      	mov	r9, r3
 8005b94:	46a2      	mov	sl, r4
 8005b96:	eb19 090b 	adds.w	r9, r9, fp
 8005b9a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005b9e:	f04f 0100 	mov.w	r1, #0
 8005ba2:	f04f 0200 	mov.w	r2, #0
 8005ba6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005baa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005bae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005bb2:	4689      	mov	r9, r1
 8005bb4:	4692      	mov	sl, r2
 8005bb6:	eb1b 0509 	adds.w	r5, fp, r9
 8005bba:	eb4c 060a 	adc.w	r6, ip, sl
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	f04f 0200 	mov.w	r2, #0
 8005bc8:	f04f 0300 	mov.w	r3, #0
 8005bcc:	f04f 0400 	mov.w	r4, #0
 8005bd0:	0094      	lsls	r4, r2, #2
 8005bd2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005bd6:	008b      	lsls	r3, r1, #2
 8005bd8:	461a      	mov	r2, r3
 8005bda:	4623      	mov	r3, r4
 8005bdc:	4628      	mov	r0, r5
 8005bde:	4631      	mov	r1, r6
 8005be0:	f7fa ff10 	bl	8000a04 <__aeabi_uldivmod>
 8005be4:	4603      	mov	r3, r0
 8005be6:	460c      	mov	r4, r1
 8005be8:	461a      	mov	r2, r3
 8005bea:	4b32      	ldr	r3, [pc, #200]	; (8005cb4 <UART_SetConfig+0x6f4>)
 8005bec:	fba3 1302 	umull	r1, r3, r3, r2
 8005bf0:	095b      	lsrs	r3, r3, #5
 8005bf2:	2164      	movs	r1, #100	; 0x64
 8005bf4:	fb01 f303 	mul.w	r3, r1, r3
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	011b      	lsls	r3, r3, #4
 8005bfc:	3332      	adds	r3, #50	; 0x32
 8005bfe:	4a2d      	ldr	r2, [pc, #180]	; (8005cb4 <UART_SetConfig+0x6f4>)
 8005c00:	fba2 2303 	umull	r2, r3, r2, r3
 8005c04:	095b      	lsrs	r3, r3, #5
 8005c06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c0a:	4498      	add	r8, r3
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	469b      	mov	fp, r3
 8005c10:	f04f 0c00 	mov.w	ip, #0
 8005c14:	46d9      	mov	r9, fp
 8005c16:	46e2      	mov	sl, ip
 8005c18:	eb19 0309 	adds.w	r3, r9, r9
 8005c1c:	eb4a 040a 	adc.w	r4, sl, sl
 8005c20:	4699      	mov	r9, r3
 8005c22:	46a2      	mov	sl, r4
 8005c24:	eb19 090b 	adds.w	r9, r9, fp
 8005c28:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005c2c:	f04f 0100 	mov.w	r1, #0
 8005c30:	f04f 0200 	mov.w	r2, #0
 8005c34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c38:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c3c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c40:	4689      	mov	r9, r1
 8005c42:	4692      	mov	sl, r2
 8005c44:	eb1b 0509 	adds.w	r5, fp, r9
 8005c48:	eb4c 060a 	adc.w	r6, ip, sl
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	4619      	mov	r1, r3
 8005c52:	f04f 0200 	mov.w	r2, #0
 8005c56:	f04f 0300 	mov.w	r3, #0
 8005c5a:	f04f 0400 	mov.w	r4, #0
 8005c5e:	0094      	lsls	r4, r2, #2
 8005c60:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005c64:	008b      	lsls	r3, r1, #2
 8005c66:	461a      	mov	r2, r3
 8005c68:	4623      	mov	r3, r4
 8005c6a:	4628      	mov	r0, r5
 8005c6c:	4631      	mov	r1, r6
 8005c6e:	f7fa fec9 	bl	8000a04 <__aeabi_uldivmod>
 8005c72:	4603      	mov	r3, r0
 8005c74:	460c      	mov	r4, r1
 8005c76:	461a      	mov	r2, r3
 8005c78:	4b0e      	ldr	r3, [pc, #56]	; (8005cb4 <UART_SetConfig+0x6f4>)
 8005c7a:	fba3 1302 	umull	r1, r3, r3, r2
 8005c7e:	095b      	lsrs	r3, r3, #5
 8005c80:	2164      	movs	r1, #100	; 0x64
 8005c82:	fb01 f303 	mul.w	r3, r1, r3
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	011b      	lsls	r3, r3, #4
 8005c8a:	3332      	adds	r3, #50	; 0x32
 8005c8c:	4a09      	ldr	r2, [pc, #36]	; (8005cb4 <UART_SetConfig+0x6f4>)
 8005c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c92:	095b      	lsrs	r3, r3, #5
 8005c94:	f003 020f 	and.w	r2, r3, #15
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4442      	add	r2, r8
 8005c9e:	609a      	str	r2, [r3, #8]
}
 8005ca0:	e7ff      	b.n	8005ca2 <UART_SetConfig+0x6e2>
 8005ca2:	bf00      	nop
 8005ca4:	3714      	adds	r7, #20
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cac:	40011000 	.word	0x40011000
 8005cb0:	40011400 	.word	0x40011400
 8005cb4:	51eb851f 	.word	0x51eb851f

08005cb8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005cb8:	b084      	sub	sp, #16
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	b084      	sub	sp, #16
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
 8005cc2:	f107 001c 	add.w	r0, r7, #28
 8005cc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d122      	bne.n	8005d16 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005ce4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d105      	bne.n	8005d0a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f001 fac6 	bl	800729c <USB_CoreReset>
 8005d10:	4603      	mov	r3, r0
 8005d12:	73fb      	strb	r3, [r7, #15]
 8005d14:	e01a      	b.n	8005d4c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f001 faba 	bl	800729c <USB_CoreReset>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005d2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d106      	bne.n	8005d40 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d36:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	639a      	str	r2, [r3, #56]	; 0x38
 8005d3e:	e005      	b.n	8005d4c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d10b      	bne.n	8005d6a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	f043 0206 	orr.w	r2, r3, #6
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	f043 0220 	orr.w	r2, r3, #32
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d76:	b004      	add	sp, #16
 8005d78:	4770      	bx	lr
	...

08005d7c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b087      	sub	sp, #28
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	4613      	mov	r3, r2
 8005d88:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005d8a:	79fb      	ldrb	r3, [r7, #7]
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d165      	bne.n	8005e5c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	4a41      	ldr	r2, [pc, #260]	; (8005e98 <USB_SetTurnaroundTime+0x11c>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d906      	bls.n	8005da6 <USB_SetTurnaroundTime+0x2a>
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	4a40      	ldr	r2, [pc, #256]	; (8005e9c <USB_SetTurnaroundTime+0x120>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d802      	bhi.n	8005da6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005da0:	230f      	movs	r3, #15
 8005da2:	617b      	str	r3, [r7, #20]
 8005da4:	e062      	b.n	8005e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	4a3c      	ldr	r2, [pc, #240]	; (8005e9c <USB_SetTurnaroundTime+0x120>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d906      	bls.n	8005dbc <USB_SetTurnaroundTime+0x40>
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	4a3b      	ldr	r2, [pc, #236]	; (8005ea0 <USB_SetTurnaroundTime+0x124>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d802      	bhi.n	8005dbc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005db6:	230e      	movs	r3, #14
 8005db8:	617b      	str	r3, [r7, #20]
 8005dba:	e057      	b.n	8005e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	4a38      	ldr	r2, [pc, #224]	; (8005ea0 <USB_SetTurnaroundTime+0x124>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d906      	bls.n	8005dd2 <USB_SetTurnaroundTime+0x56>
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	4a37      	ldr	r2, [pc, #220]	; (8005ea4 <USB_SetTurnaroundTime+0x128>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d802      	bhi.n	8005dd2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005dcc:	230d      	movs	r3, #13
 8005dce:	617b      	str	r3, [r7, #20]
 8005dd0:	e04c      	b.n	8005e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	4a33      	ldr	r2, [pc, #204]	; (8005ea4 <USB_SetTurnaroundTime+0x128>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d906      	bls.n	8005de8 <USB_SetTurnaroundTime+0x6c>
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	4a32      	ldr	r2, [pc, #200]	; (8005ea8 <USB_SetTurnaroundTime+0x12c>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d802      	bhi.n	8005de8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005de2:	230c      	movs	r3, #12
 8005de4:	617b      	str	r3, [r7, #20]
 8005de6:	e041      	b.n	8005e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	4a2f      	ldr	r2, [pc, #188]	; (8005ea8 <USB_SetTurnaroundTime+0x12c>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d906      	bls.n	8005dfe <USB_SetTurnaroundTime+0x82>
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	4a2e      	ldr	r2, [pc, #184]	; (8005eac <USB_SetTurnaroundTime+0x130>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d802      	bhi.n	8005dfe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005df8:	230b      	movs	r3, #11
 8005dfa:	617b      	str	r3, [r7, #20]
 8005dfc:	e036      	b.n	8005e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	4a2a      	ldr	r2, [pc, #168]	; (8005eac <USB_SetTurnaroundTime+0x130>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d906      	bls.n	8005e14 <USB_SetTurnaroundTime+0x98>
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	4a29      	ldr	r2, [pc, #164]	; (8005eb0 <USB_SetTurnaroundTime+0x134>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d802      	bhi.n	8005e14 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005e0e:	230a      	movs	r3, #10
 8005e10:	617b      	str	r3, [r7, #20]
 8005e12:	e02b      	b.n	8005e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	4a26      	ldr	r2, [pc, #152]	; (8005eb0 <USB_SetTurnaroundTime+0x134>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d906      	bls.n	8005e2a <USB_SetTurnaroundTime+0xae>
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	4a25      	ldr	r2, [pc, #148]	; (8005eb4 <USB_SetTurnaroundTime+0x138>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d802      	bhi.n	8005e2a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005e24:	2309      	movs	r3, #9
 8005e26:	617b      	str	r3, [r7, #20]
 8005e28:	e020      	b.n	8005e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	4a21      	ldr	r2, [pc, #132]	; (8005eb4 <USB_SetTurnaroundTime+0x138>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d906      	bls.n	8005e40 <USB_SetTurnaroundTime+0xc4>
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	4a20      	ldr	r2, [pc, #128]	; (8005eb8 <USB_SetTurnaroundTime+0x13c>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d802      	bhi.n	8005e40 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005e3a:	2308      	movs	r3, #8
 8005e3c:	617b      	str	r3, [r7, #20]
 8005e3e:	e015      	b.n	8005e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	4a1d      	ldr	r2, [pc, #116]	; (8005eb8 <USB_SetTurnaroundTime+0x13c>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d906      	bls.n	8005e56 <USB_SetTurnaroundTime+0xda>
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	4a1c      	ldr	r2, [pc, #112]	; (8005ebc <USB_SetTurnaroundTime+0x140>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d802      	bhi.n	8005e56 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005e50:	2307      	movs	r3, #7
 8005e52:	617b      	str	r3, [r7, #20]
 8005e54:	e00a      	b.n	8005e6c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005e56:	2306      	movs	r3, #6
 8005e58:	617b      	str	r3, [r7, #20]
 8005e5a:	e007      	b.n	8005e6c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005e5c:	79fb      	ldrb	r3, [r7, #7]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d102      	bne.n	8005e68 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005e62:	2309      	movs	r3, #9
 8005e64:	617b      	str	r3, [r7, #20]
 8005e66:	e001      	b.n	8005e6c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005e68:	2309      	movs	r3, #9
 8005e6a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	68da      	ldr	r2, [r3, #12]
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	029b      	lsls	r3, r3, #10
 8005e80:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005e84:	431a      	orrs	r2, r3
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005e8a:	2300      	movs	r3, #0
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	371c      	adds	r7, #28
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr
 8005e98:	00d8acbf 	.word	0x00d8acbf
 8005e9c:	00e4e1bf 	.word	0x00e4e1bf
 8005ea0:	00f423ff 	.word	0x00f423ff
 8005ea4:	0106737f 	.word	0x0106737f
 8005ea8:	011a499f 	.word	0x011a499f
 8005eac:	01312cff 	.word	0x01312cff
 8005eb0:	014ca43f 	.word	0x014ca43f
 8005eb4:	016e35ff 	.word	0x016e35ff
 8005eb8:	01a6ab1f 	.word	0x01a6ab1f
 8005ebc:	01e847ff 	.word	0x01e847ff

08005ec0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	f043 0201 	orr.w	r2, r3, #1
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	370c      	adds	r7, #12
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr

08005ee2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ee2:	b480      	push	{r7}
 8005ee4:	b083      	sub	sp, #12
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	f023 0201 	bic.w	r2, r3, #1
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005f1c:	78fb      	ldrb	r3, [r7, #3]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d106      	bne.n	8005f30 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	60da      	str	r2, [r3, #12]
 8005f2e:	e00b      	b.n	8005f48 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005f30:	78fb      	ldrb	r3, [r7, #3]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d106      	bne.n	8005f44 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	60da      	str	r2, [r3, #12]
 8005f42:	e001      	b.n	8005f48 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e003      	b.n	8005f50 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005f48:	2032      	movs	r0, #50	; 0x32
 8005f4a:	f7fb fd61 	bl	8001a10 <HAL_Delay>

  return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3708      	adds	r7, #8
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f58:	b084      	sub	sp, #16
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b086      	sub	sp, #24
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
 8005f62:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005f66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005f72:	2300      	movs	r3, #0
 8005f74:	613b      	str	r3, [r7, #16]
 8005f76:	e009      	b.n	8005f8c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	3340      	adds	r3, #64	; 0x40
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	4413      	add	r3, r2
 8005f82:	2200      	movs	r2, #0
 8005f84:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	3301      	adds	r3, #1
 8005f8a:	613b      	str	r3, [r7, #16]
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	2b0e      	cmp	r3, #14
 8005f90:	d9f2      	bls.n	8005f78 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005f92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d11c      	bne.n	8005fd2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fa6:	f043 0302 	orr.w	r3, r3, #2
 8005faa:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fbc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	639a      	str	r2, [r3, #56]	; 0x38
 8005fd0:	e00b      	b.n	8005fea <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006004:	461a      	mov	r2, r3
 8006006:	680b      	ldr	r3, [r1, #0]
 8006008:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800600a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800600c:	2b01      	cmp	r3, #1
 800600e:	d10c      	bne.n	800602a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006012:	2b00      	cmp	r3, #0
 8006014:	d104      	bne.n	8006020 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006016:	2100      	movs	r1, #0
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 f949 	bl	80062b0 <USB_SetDevSpeed>
 800601e:	e008      	b.n	8006032 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006020:	2101      	movs	r1, #1
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 f944 	bl	80062b0 <USB_SetDevSpeed>
 8006028:	e003      	b.n	8006032 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800602a:	2103      	movs	r1, #3
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 f93f 	bl	80062b0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006032:	2110      	movs	r1, #16
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 f8f3 	bl	8006220 <USB_FlushTxFifo>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d001      	beq.n	8006044 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 f911 	bl	800626c <USB_FlushRxFifo>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d001      	beq.n	8006054 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800605a:	461a      	mov	r2, r3
 800605c:	2300      	movs	r3, #0
 800605e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006066:	461a      	mov	r2, r3
 8006068:	2300      	movs	r3, #0
 800606a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006072:	461a      	mov	r2, r3
 8006074:	2300      	movs	r3, #0
 8006076:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006078:	2300      	movs	r3, #0
 800607a:	613b      	str	r3, [r7, #16]
 800607c:	e043      	b.n	8006106 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	015a      	lsls	r2, r3, #5
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	4413      	add	r3, r2
 8006086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006090:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006094:	d118      	bne.n	80060c8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d10a      	bne.n	80060b2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	015a      	lsls	r2, r3, #5
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	4413      	add	r3, r2
 80060a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a8:	461a      	mov	r2, r3
 80060aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80060ae:	6013      	str	r3, [r2, #0]
 80060b0:	e013      	b.n	80060da <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	015a      	lsls	r2, r3, #5
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	4413      	add	r3, r2
 80060ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060be:	461a      	mov	r2, r3
 80060c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80060c4:	6013      	str	r3, [r2, #0]
 80060c6:	e008      	b.n	80060da <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	015a      	lsls	r2, r3, #5
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	4413      	add	r3, r2
 80060d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d4:	461a      	mov	r2, r3
 80060d6:	2300      	movs	r3, #0
 80060d8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	015a      	lsls	r2, r3, #5
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	4413      	add	r3, r2
 80060e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e6:	461a      	mov	r2, r3
 80060e8:	2300      	movs	r3, #0
 80060ea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	015a      	lsls	r2, r3, #5
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	4413      	add	r3, r2
 80060f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060f8:	461a      	mov	r2, r3
 80060fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80060fe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	3301      	adds	r3, #1
 8006104:	613b      	str	r3, [r7, #16]
 8006106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006108:	693a      	ldr	r2, [r7, #16]
 800610a:	429a      	cmp	r2, r3
 800610c:	d3b7      	bcc.n	800607e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800610e:	2300      	movs	r3, #0
 8006110:	613b      	str	r3, [r7, #16]
 8006112:	e043      	b.n	800619c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	015a      	lsls	r2, r3, #5
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	4413      	add	r3, r2
 800611c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006126:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800612a:	d118      	bne.n	800615e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d10a      	bne.n	8006148 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	015a      	lsls	r2, r3, #5
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	4413      	add	r3, r2
 800613a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800613e:	461a      	mov	r2, r3
 8006140:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006144:	6013      	str	r3, [r2, #0]
 8006146:	e013      	b.n	8006170 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	015a      	lsls	r2, r3, #5
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	4413      	add	r3, r2
 8006150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006154:	461a      	mov	r2, r3
 8006156:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800615a:	6013      	str	r3, [r2, #0]
 800615c:	e008      	b.n	8006170 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	015a      	lsls	r2, r3, #5
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	4413      	add	r3, r2
 8006166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800616a:	461a      	mov	r2, r3
 800616c:	2300      	movs	r3, #0
 800616e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	015a      	lsls	r2, r3, #5
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	4413      	add	r3, r2
 8006178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800617c:	461a      	mov	r2, r3
 800617e:	2300      	movs	r3, #0
 8006180:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	015a      	lsls	r2, r3, #5
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	4413      	add	r3, r2
 800618a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800618e:	461a      	mov	r2, r3
 8006190:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006194:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	3301      	adds	r3, #1
 800619a:	613b      	str	r3, [r7, #16]
 800619c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619e:	693a      	ldr	r2, [r7, #16]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d3b7      	bcc.n	8006114 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061b6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80061c4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80061c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d105      	bne.n	80061d8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	699b      	ldr	r3, [r3, #24]
 80061d0:	f043 0210 	orr.w	r2, r3, #16
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	699a      	ldr	r2, [r3, #24]
 80061dc:	4b0f      	ldr	r3, [pc, #60]	; (800621c <USB_DevInit+0x2c4>)
 80061de:	4313      	orrs	r3, r2
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80061e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d005      	beq.n	80061f6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	699b      	ldr	r3, [r3, #24]
 80061ee:	f043 0208 	orr.w	r2, r3, #8
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80061f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d107      	bne.n	800620c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	699b      	ldr	r3, [r3, #24]
 8006200:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006204:	f043 0304 	orr.w	r3, r3, #4
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800620c:	7dfb      	ldrb	r3, [r7, #23]
}
 800620e:	4618      	mov	r0, r3
 8006210:	3718      	adds	r7, #24
 8006212:	46bd      	mov	sp, r7
 8006214:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006218:	b004      	add	sp, #16
 800621a:	4770      	bx	lr
 800621c:	803c3800 	.word	0x803c3800

08006220 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800622a:	2300      	movs	r3, #0
 800622c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	019b      	lsls	r3, r3, #6
 8006232:	f043 0220 	orr.w	r2, r3, #32
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	3301      	adds	r3, #1
 800623e:	60fb      	str	r3, [r7, #12]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	4a09      	ldr	r2, [pc, #36]	; (8006268 <USB_FlushTxFifo+0x48>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d901      	bls.n	800624c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e006      	b.n	800625a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	f003 0320 	and.w	r3, r3, #32
 8006254:	2b20      	cmp	r3, #32
 8006256:	d0f0      	beq.n	800623a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3714      	adds	r7, #20
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	00030d40 	.word	0x00030d40

0800626c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006274:	2300      	movs	r3, #0
 8006276:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2210      	movs	r2, #16
 800627c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	3301      	adds	r3, #1
 8006282:	60fb      	str	r3, [r7, #12]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	4a09      	ldr	r2, [pc, #36]	; (80062ac <USB_FlushRxFifo+0x40>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d901      	bls.n	8006290 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800628c:	2303      	movs	r3, #3
 800628e:	e006      	b.n	800629e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	f003 0310 	and.w	r3, r3, #16
 8006298:	2b10      	cmp	r3, #16
 800629a:	d0f0      	beq.n	800627e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3714      	adds	r7, #20
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr
 80062aa:	bf00      	nop
 80062ac:	00030d40 	.word	0x00030d40

080062b0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b085      	sub	sp, #20
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	460b      	mov	r3, r1
 80062ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	78fb      	ldrb	r3, [r7, #3]
 80062ca:	68f9      	ldr	r1, [r7, #12]
 80062cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062d0:	4313      	orrs	r3, r2
 80062d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3714      	adds	r7, #20
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr

080062e2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80062e2:	b480      	push	{r7}
 80062e4:	b087      	sub	sp, #28
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	f003 0306 	and.w	r3, r3, #6
 80062fa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d102      	bne.n	8006308 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006302:	2300      	movs	r3, #0
 8006304:	75fb      	strb	r3, [r7, #23]
 8006306:	e00a      	b.n	800631e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2b02      	cmp	r3, #2
 800630c:	d002      	beq.n	8006314 <USB_GetDevSpeed+0x32>
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2b06      	cmp	r3, #6
 8006312:	d102      	bne.n	800631a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006314:	2302      	movs	r3, #2
 8006316:	75fb      	strb	r3, [r7, #23]
 8006318:	e001      	b.n	800631e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800631a:	230f      	movs	r3, #15
 800631c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800631e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006320:	4618      	mov	r0, r3
 8006322:	371c      	adds	r7, #28
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800632c:	b480      	push	{r7}
 800632e:	b085      	sub	sp, #20
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	785b      	ldrb	r3, [r3, #1]
 8006344:	2b01      	cmp	r3, #1
 8006346:	d13a      	bne.n	80063be <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800634e:	69da      	ldr	r2, [r3, #28]
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	f003 030f 	and.w	r3, r3, #15
 8006358:	2101      	movs	r1, #1
 800635a:	fa01 f303 	lsl.w	r3, r1, r3
 800635e:	b29b      	uxth	r3, r3
 8006360:	68f9      	ldr	r1, [r7, #12]
 8006362:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006366:	4313      	orrs	r3, r2
 8006368:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	015a      	lsls	r2, r3, #5
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	4413      	add	r3, r2
 8006372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800637c:	2b00      	cmp	r3, #0
 800637e:	d155      	bne.n	800642c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	015a      	lsls	r2, r3, #5
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	4413      	add	r3, r2
 8006388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	78db      	ldrb	r3, [r3, #3]
 800639a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800639c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	059b      	lsls	r3, r3, #22
 80063a2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80063a4:	4313      	orrs	r3, r2
 80063a6:	68ba      	ldr	r2, [r7, #8]
 80063a8:	0151      	lsls	r1, r2, #5
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	440a      	add	r2, r1
 80063ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063ba:	6013      	str	r3, [r2, #0]
 80063bc:	e036      	b.n	800642c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063c4:	69da      	ldr	r2, [r3, #28]
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	f003 030f 	and.w	r3, r3, #15
 80063ce:	2101      	movs	r1, #1
 80063d0:	fa01 f303 	lsl.w	r3, r1, r3
 80063d4:	041b      	lsls	r3, r3, #16
 80063d6:	68f9      	ldr	r1, [r7, #12]
 80063d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063dc:	4313      	orrs	r3, r2
 80063de:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	015a      	lsls	r2, r3, #5
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	4413      	add	r3, r2
 80063e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d11a      	bne.n	800642c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	015a      	lsls	r2, r3, #5
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	4413      	add	r3, r2
 80063fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	78db      	ldrb	r3, [r3, #3]
 8006410:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006412:	430b      	orrs	r3, r1
 8006414:	4313      	orrs	r3, r2
 8006416:	68ba      	ldr	r2, [r7, #8]
 8006418:	0151      	lsls	r1, r2, #5
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	440a      	add	r2, r1
 800641e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006422:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006426:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800642a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	3714      	adds	r7, #20
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
	...

0800643c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800643c:	b480      	push	{r7}
 800643e:	b085      	sub	sp, #20
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	785b      	ldrb	r3, [r3, #1]
 8006454:	2b01      	cmp	r3, #1
 8006456:	d161      	bne.n	800651c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	015a      	lsls	r2, r3, #5
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	4413      	add	r3, r2
 8006460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800646a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800646e:	d11f      	bne.n	80064b0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	015a      	lsls	r2, r3, #5
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	4413      	add	r3, r2
 8006478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	0151      	lsls	r1, r2, #5
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	440a      	add	r2, r1
 8006486:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800648a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800648e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	015a      	lsls	r2, r3, #5
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	4413      	add	r3, r2
 8006498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68ba      	ldr	r2, [r7, #8]
 80064a0:	0151      	lsls	r1, r2, #5
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	440a      	add	r2, r1
 80064a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	f003 030f 	and.w	r3, r3, #15
 80064c0:	2101      	movs	r1, #1
 80064c2:	fa01 f303 	lsl.w	r3, r1, r3
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	43db      	mvns	r3, r3
 80064ca:	68f9      	ldr	r1, [r7, #12]
 80064cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064d0:	4013      	ands	r3, r2
 80064d2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064da:	69da      	ldr	r2, [r3, #28]
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	f003 030f 	and.w	r3, r3, #15
 80064e4:	2101      	movs	r1, #1
 80064e6:	fa01 f303 	lsl.w	r3, r1, r3
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	43db      	mvns	r3, r3
 80064ee:	68f9      	ldr	r1, [r7, #12]
 80064f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064f4:	4013      	ands	r3, r2
 80064f6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	015a      	lsls	r2, r3, #5
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	4413      	add	r3, r2
 8006500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	0159      	lsls	r1, r3, #5
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	440b      	add	r3, r1
 800650e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006512:	4619      	mov	r1, r3
 8006514:	4b35      	ldr	r3, [pc, #212]	; (80065ec <USB_DeactivateEndpoint+0x1b0>)
 8006516:	4013      	ands	r3, r2
 8006518:	600b      	str	r3, [r1, #0]
 800651a:	e060      	b.n	80065de <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	015a      	lsls	r2, r3, #5
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	4413      	add	r3, r2
 8006524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800652e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006532:	d11f      	bne.n	8006574 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	015a      	lsls	r2, r3, #5
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	4413      	add	r3, r2
 800653c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68ba      	ldr	r2, [r7, #8]
 8006544:	0151      	lsls	r1, r2, #5
 8006546:	68fa      	ldr	r2, [r7, #12]
 8006548:	440a      	add	r2, r1
 800654a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800654e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006552:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	015a      	lsls	r2, r3, #5
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	4413      	add	r3, r2
 800655c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68ba      	ldr	r2, [r7, #8]
 8006564:	0151      	lsls	r1, r2, #5
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	440a      	add	r2, r1
 800656a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800656e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006572:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800657a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	f003 030f 	and.w	r3, r3, #15
 8006584:	2101      	movs	r1, #1
 8006586:	fa01 f303 	lsl.w	r3, r1, r3
 800658a:	041b      	lsls	r3, r3, #16
 800658c:	43db      	mvns	r3, r3
 800658e:	68f9      	ldr	r1, [r7, #12]
 8006590:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006594:	4013      	ands	r3, r2
 8006596:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800659e:	69da      	ldr	r2, [r3, #28]
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	f003 030f 	and.w	r3, r3, #15
 80065a8:	2101      	movs	r1, #1
 80065aa:	fa01 f303 	lsl.w	r3, r1, r3
 80065ae:	041b      	lsls	r3, r3, #16
 80065b0:	43db      	mvns	r3, r3
 80065b2:	68f9      	ldr	r1, [r7, #12]
 80065b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065b8:	4013      	ands	r3, r2
 80065ba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	015a      	lsls	r2, r3, #5
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	4413      	add	r3, r2
 80065c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	0159      	lsls	r1, r3, #5
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	440b      	add	r3, r1
 80065d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d6:	4619      	mov	r1, r3
 80065d8:	4b05      	ldr	r3, [pc, #20]	; (80065f0 <USB_DeactivateEndpoint+0x1b4>)
 80065da:	4013      	ands	r3, r2
 80065dc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80065de:	2300      	movs	r3, #0
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3714      	adds	r7, #20
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr
 80065ec:	ec337800 	.word	0xec337800
 80065f0:	eff37800 	.word	0xeff37800

080065f4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b08a      	sub	sp, #40	; 0x28
 80065f8:	af02      	add	r7, sp, #8
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	4613      	mov	r3, r2
 8006600:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	785b      	ldrb	r3, [r3, #1]
 8006610:	2b01      	cmp	r3, #1
 8006612:	f040 815c 	bne.w	80068ce <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d132      	bne.n	8006684 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	015a      	lsls	r2, r3, #5
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	4413      	add	r3, r2
 8006626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	69ba      	ldr	r2, [r7, #24]
 800662e:	0151      	lsls	r1, r2, #5
 8006630:	69fa      	ldr	r2, [r7, #28]
 8006632:	440a      	add	r2, r1
 8006634:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006638:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800663c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006640:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	015a      	lsls	r2, r3, #5
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	4413      	add	r3, r2
 800664a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	69ba      	ldr	r2, [r7, #24]
 8006652:	0151      	lsls	r1, r2, #5
 8006654:	69fa      	ldr	r2, [r7, #28]
 8006656:	440a      	add	r2, r1
 8006658:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800665c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006660:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	015a      	lsls	r2, r3, #5
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	4413      	add	r3, r2
 800666a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	69ba      	ldr	r2, [r7, #24]
 8006672:	0151      	lsls	r1, r2, #5
 8006674:	69fa      	ldr	r2, [r7, #28]
 8006676:	440a      	add	r2, r1
 8006678:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800667c:	0cdb      	lsrs	r3, r3, #19
 800667e:	04db      	lsls	r3, r3, #19
 8006680:	6113      	str	r3, [r2, #16]
 8006682:	e074      	b.n	800676e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	015a      	lsls	r2, r3, #5
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	4413      	add	r3, r2
 800668c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	69ba      	ldr	r2, [r7, #24]
 8006694:	0151      	lsls	r1, r2, #5
 8006696:	69fa      	ldr	r2, [r7, #28]
 8006698:	440a      	add	r2, r1
 800669a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800669e:	0cdb      	lsrs	r3, r3, #19
 80066a0:	04db      	lsls	r3, r3, #19
 80066a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	015a      	lsls	r2, r3, #5
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	4413      	add	r3, r2
 80066ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	69ba      	ldr	r2, [r7, #24]
 80066b4:	0151      	lsls	r1, r2, #5
 80066b6:	69fa      	ldr	r2, [r7, #28]
 80066b8:	440a      	add	r2, r1
 80066ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066be:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80066c2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80066c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	015a      	lsls	r2, r3, #5
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	4413      	add	r3, r2
 80066d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066d4:	691a      	ldr	r2, [r3, #16]
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	6959      	ldr	r1, [r3, #20]
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	440b      	add	r3, r1
 80066e0:	1e59      	subs	r1, r3, #1
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80066ea:	04d9      	lsls	r1, r3, #19
 80066ec:	4b9d      	ldr	r3, [pc, #628]	; (8006964 <USB_EPStartXfer+0x370>)
 80066ee:	400b      	ands	r3, r1
 80066f0:	69b9      	ldr	r1, [r7, #24]
 80066f2:	0148      	lsls	r0, r1, #5
 80066f4:	69f9      	ldr	r1, [r7, #28]
 80066f6:	4401      	add	r1, r0
 80066f8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80066fc:	4313      	orrs	r3, r2
 80066fe:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	015a      	lsls	r2, r3, #5
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	4413      	add	r3, r2
 8006708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800670c:	691a      	ldr	r2, [r3, #16]
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	695b      	ldr	r3, [r3, #20]
 8006712:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006716:	69b9      	ldr	r1, [r7, #24]
 8006718:	0148      	lsls	r0, r1, #5
 800671a:	69f9      	ldr	r1, [r7, #28]
 800671c:	4401      	add	r1, r0
 800671e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006722:	4313      	orrs	r3, r2
 8006724:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	78db      	ldrb	r3, [r3, #3]
 800672a:	2b01      	cmp	r3, #1
 800672c:	d11f      	bne.n	800676e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	015a      	lsls	r2, r3, #5
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	4413      	add	r3, r2
 8006736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	69ba      	ldr	r2, [r7, #24]
 800673e:	0151      	lsls	r1, r2, #5
 8006740:	69fa      	ldr	r2, [r7, #28]
 8006742:	440a      	add	r2, r1
 8006744:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006748:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800674c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	015a      	lsls	r2, r3, #5
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	4413      	add	r3, r2
 8006756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	69ba      	ldr	r2, [r7, #24]
 800675e:	0151      	lsls	r1, r2, #5
 8006760:	69fa      	ldr	r2, [r7, #28]
 8006762:	440a      	add	r2, r1
 8006764:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006768:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800676c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800676e:	79fb      	ldrb	r3, [r7, #7]
 8006770:	2b01      	cmp	r3, #1
 8006772:	d14b      	bne.n	800680c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d009      	beq.n	8006790 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	015a      	lsls	r2, r3, #5
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	4413      	add	r3, r2
 8006784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006788:	461a      	mov	r2, r3
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	78db      	ldrb	r3, [r3, #3]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d128      	bne.n	80067ea <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d110      	bne.n	80067ca <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	015a      	lsls	r2, r3, #5
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	4413      	add	r3, r2
 80067b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	69ba      	ldr	r2, [r7, #24]
 80067b8:	0151      	lsls	r1, r2, #5
 80067ba:	69fa      	ldr	r2, [r7, #28]
 80067bc:	440a      	add	r2, r1
 80067be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80067c6:	6013      	str	r3, [r2, #0]
 80067c8:	e00f      	b.n	80067ea <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	015a      	lsls	r2, r3, #5
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	4413      	add	r3, r2
 80067d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	69ba      	ldr	r2, [r7, #24]
 80067da:	0151      	lsls	r1, r2, #5
 80067dc:	69fa      	ldr	r2, [r7, #28]
 80067de:	440a      	add	r2, r1
 80067e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067e8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	015a      	lsls	r2, r3, #5
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	4413      	add	r3, r2
 80067f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	69ba      	ldr	r2, [r7, #24]
 80067fa:	0151      	lsls	r1, r2, #5
 80067fc:	69fa      	ldr	r2, [r7, #28]
 80067fe:	440a      	add	r2, r1
 8006800:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006804:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006808:	6013      	str	r3, [r2, #0]
 800680a:	e12f      	b.n	8006a6c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	015a      	lsls	r2, r3, #5
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	4413      	add	r3, r2
 8006814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	69ba      	ldr	r2, [r7, #24]
 800681c:	0151      	lsls	r1, r2, #5
 800681e:	69fa      	ldr	r2, [r7, #28]
 8006820:	440a      	add	r2, r1
 8006822:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006826:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800682a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	78db      	ldrb	r3, [r3, #3]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d015      	beq.n	8006860 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	695b      	ldr	r3, [r3, #20]
 8006838:	2b00      	cmp	r3, #0
 800683a:	f000 8117 	beq.w	8006a6c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006844:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	f003 030f 	and.w	r3, r3, #15
 800684e:	2101      	movs	r1, #1
 8006850:	fa01 f303 	lsl.w	r3, r1, r3
 8006854:	69f9      	ldr	r1, [r7, #28]
 8006856:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800685a:	4313      	orrs	r3, r2
 800685c:	634b      	str	r3, [r1, #52]	; 0x34
 800685e:	e105      	b.n	8006a6c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800686c:	2b00      	cmp	r3, #0
 800686e:	d110      	bne.n	8006892 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	015a      	lsls	r2, r3, #5
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	4413      	add	r3, r2
 8006878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	69ba      	ldr	r2, [r7, #24]
 8006880:	0151      	lsls	r1, r2, #5
 8006882:	69fa      	ldr	r2, [r7, #28]
 8006884:	440a      	add	r2, r1
 8006886:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800688a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800688e:	6013      	str	r3, [r2, #0]
 8006890:	e00f      	b.n	80068b2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	015a      	lsls	r2, r3, #5
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	4413      	add	r3, r2
 800689a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	69ba      	ldr	r2, [r7, #24]
 80068a2:	0151      	lsls	r1, r2, #5
 80068a4:	69fa      	ldr	r2, [r7, #28]
 80068a6:	440a      	add	r2, r1
 80068a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068b0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	68d9      	ldr	r1, [r3, #12]
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	781a      	ldrb	r2, [r3, #0]
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	695b      	ldr	r3, [r3, #20]
 80068be:	b298      	uxth	r0, r3
 80068c0:	79fb      	ldrb	r3, [r7, #7]
 80068c2:	9300      	str	r3, [sp, #0]
 80068c4:	4603      	mov	r3, r0
 80068c6:	68f8      	ldr	r0, [r7, #12]
 80068c8:	f000 fa2b 	bl	8006d22 <USB_WritePacket>
 80068cc:	e0ce      	b.n	8006a6c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	015a      	lsls	r2, r3, #5
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	4413      	add	r3, r2
 80068d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068da:	691b      	ldr	r3, [r3, #16]
 80068dc:	69ba      	ldr	r2, [r7, #24]
 80068de:	0151      	lsls	r1, r2, #5
 80068e0:	69fa      	ldr	r2, [r7, #28]
 80068e2:	440a      	add	r2, r1
 80068e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068e8:	0cdb      	lsrs	r3, r3, #19
 80068ea:	04db      	lsls	r3, r3, #19
 80068ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	015a      	lsls	r2, r3, #5
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	4413      	add	r3, r2
 80068f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	69ba      	ldr	r2, [r7, #24]
 80068fe:	0151      	lsls	r1, r2, #5
 8006900:	69fa      	ldr	r2, [r7, #28]
 8006902:	440a      	add	r2, r1
 8006904:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006908:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800690c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006910:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	695b      	ldr	r3, [r3, #20]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d126      	bne.n	8006968 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	015a      	lsls	r2, r3, #5
 800691e:	69fb      	ldr	r3, [r7, #28]
 8006920:	4413      	add	r3, r2
 8006922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006926:	691a      	ldr	r2, [r3, #16]
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006930:	69b9      	ldr	r1, [r7, #24]
 8006932:	0148      	lsls	r0, r1, #5
 8006934:	69f9      	ldr	r1, [r7, #28]
 8006936:	4401      	add	r1, r0
 8006938:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800693c:	4313      	orrs	r3, r2
 800693e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	015a      	lsls	r2, r3, #5
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	4413      	add	r3, r2
 8006948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	69ba      	ldr	r2, [r7, #24]
 8006950:	0151      	lsls	r1, r2, #5
 8006952:	69fa      	ldr	r2, [r7, #28]
 8006954:	440a      	add	r2, r1
 8006956:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800695a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800695e:	6113      	str	r3, [r2, #16]
 8006960:	e036      	b.n	80069d0 <USB_EPStartXfer+0x3dc>
 8006962:	bf00      	nop
 8006964:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	695a      	ldr	r2, [r3, #20]
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	4413      	add	r3, r2
 8006972:	1e5a      	subs	r2, r3, #1
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	fbb2 f3f3 	udiv	r3, r2, r3
 800697c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	015a      	lsls	r2, r3, #5
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	4413      	add	r3, r2
 8006986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800698a:	691a      	ldr	r2, [r3, #16]
 800698c:	8afb      	ldrh	r3, [r7, #22]
 800698e:	04d9      	lsls	r1, r3, #19
 8006990:	4b39      	ldr	r3, [pc, #228]	; (8006a78 <USB_EPStartXfer+0x484>)
 8006992:	400b      	ands	r3, r1
 8006994:	69b9      	ldr	r1, [r7, #24]
 8006996:	0148      	lsls	r0, r1, #5
 8006998:	69f9      	ldr	r1, [r7, #28]
 800699a:	4401      	add	r1, r0
 800699c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80069a0:	4313      	orrs	r3, r2
 80069a2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80069a4:	69bb      	ldr	r3, [r7, #24]
 80069a6:	015a      	lsls	r2, r3, #5
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	4413      	add	r3, r2
 80069ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b0:	691a      	ldr	r2, [r3, #16]
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	8af9      	ldrh	r1, [r7, #22]
 80069b8:	fb01 f303 	mul.w	r3, r1, r3
 80069bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069c0:	69b9      	ldr	r1, [r7, #24]
 80069c2:	0148      	lsls	r0, r1, #5
 80069c4:	69f9      	ldr	r1, [r7, #28]
 80069c6:	4401      	add	r1, r0
 80069c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80069cc:	4313      	orrs	r3, r2
 80069ce:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80069d0:	79fb      	ldrb	r3, [r7, #7]
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d10d      	bne.n	80069f2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d009      	beq.n	80069f2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	68d9      	ldr	r1, [r3, #12]
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	015a      	lsls	r2, r3, #5
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	4413      	add	r3, r2
 80069ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ee:	460a      	mov	r2, r1
 80069f0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	78db      	ldrb	r3, [r3, #3]
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d128      	bne.n	8006a4c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d110      	bne.n	8006a2c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	015a      	lsls	r2, r3, #5
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	4413      	add	r3, r2
 8006a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	69ba      	ldr	r2, [r7, #24]
 8006a1a:	0151      	lsls	r1, r2, #5
 8006a1c:	69fa      	ldr	r2, [r7, #28]
 8006a1e:	440a      	add	r2, r1
 8006a20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a28:	6013      	str	r3, [r2, #0]
 8006a2a:	e00f      	b.n	8006a4c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	015a      	lsls	r2, r3, #5
 8006a30:	69fb      	ldr	r3, [r7, #28]
 8006a32:	4413      	add	r3, r2
 8006a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	69ba      	ldr	r2, [r7, #24]
 8006a3c:	0151      	lsls	r1, r2, #5
 8006a3e:	69fa      	ldr	r2, [r7, #28]
 8006a40:	440a      	add	r2, r1
 8006a42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a4a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	015a      	lsls	r2, r3, #5
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	4413      	add	r3, r2
 8006a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	69ba      	ldr	r2, [r7, #24]
 8006a5c:	0151      	lsls	r1, r2, #5
 8006a5e:	69fa      	ldr	r2, [r7, #28]
 8006a60:	440a      	add	r2, r1
 8006a62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a66:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3720      	adds	r7, #32
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	1ff80000 	.word	0x1ff80000

08006a7c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b087      	sub	sp, #28
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	4613      	mov	r3, r2
 8006a88:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	785b      	ldrb	r3, [r3, #1]
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	f040 80cd 	bne.w	8006c38 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	695b      	ldr	r3, [r3, #20]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d132      	bne.n	8006b0c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	015a      	lsls	r2, r3, #5
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	4413      	add	r3, r2
 8006aae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	693a      	ldr	r2, [r7, #16]
 8006ab6:	0151      	lsls	r1, r2, #5
 8006ab8:	697a      	ldr	r2, [r7, #20]
 8006aba:	440a      	add	r2, r1
 8006abc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ac0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ac4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ac8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	015a      	lsls	r2, r3, #5
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	693a      	ldr	r2, [r7, #16]
 8006ada:	0151      	lsls	r1, r2, #5
 8006adc:	697a      	ldr	r2, [r7, #20]
 8006ade:	440a      	add	r2, r1
 8006ae0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ae4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ae8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	015a      	lsls	r2, r3, #5
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	4413      	add	r3, r2
 8006af2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	693a      	ldr	r2, [r7, #16]
 8006afa:	0151      	lsls	r1, r2, #5
 8006afc:	697a      	ldr	r2, [r7, #20]
 8006afe:	440a      	add	r2, r1
 8006b00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b04:	0cdb      	lsrs	r3, r3, #19
 8006b06:	04db      	lsls	r3, r3, #19
 8006b08:	6113      	str	r3, [r2, #16]
 8006b0a:	e04e      	b.n	8006baa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	015a      	lsls	r2, r3, #5
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	4413      	add	r3, r2
 8006b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	693a      	ldr	r2, [r7, #16]
 8006b1c:	0151      	lsls	r1, r2, #5
 8006b1e:	697a      	ldr	r2, [r7, #20]
 8006b20:	440a      	add	r2, r1
 8006b22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b26:	0cdb      	lsrs	r3, r3, #19
 8006b28:	04db      	lsls	r3, r3, #19
 8006b2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	015a      	lsls	r2, r3, #5
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	4413      	add	r3, r2
 8006b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	693a      	ldr	r2, [r7, #16]
 8006b3c:	0151      	lsls	r1, r2, #5
 8006b3e:	697a      	ldr	r2, [r7, #20]
 8006b40:	440a      	add	r2, r1
 8006b42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b46:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b4a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b4e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	695a      	ldr	r2, [r3, #20]
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d903      	bls.n	8006b64 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	689a      	ldr	r2, [r3, #8]
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	015a      	lsls	r2, r3, #5
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	693a      	ldr	r2, [r7, #16]
 8006b74:	0151      	lsls	r1, r2, #5
 8006b76:	697a      	ldr	r2, [r7, #20]
 8006b78:	440a      	add	r2, r1
 8006b7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	015a      	lsls	r2, r3, #5
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	4413      	add	r3, r2
 8006b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b90:	691a      	ldr	r2, [r3, #16]
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	695b      	ldr	r3, [r3, #20]
 8006b96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b9a:	6939      	ldr	r1, [r7, #16]
 8006b9c:	0148      	lsls	r0, r1, #5
 8006b9e:	6979      	ldr	r1, [r7, #20]
 8006ba0:	4401      	add	r1, r0
 8006ba2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006baa:	79fb      	ldrb	r3, [r7, #7]
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d11e      	bne.n	8006bee <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	691b      	ldr	r3, [r3, #16]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d009      	beq.n	8006bcc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	015a      	lsls	r2, r3, #5
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	4413      	add	r3, r2
 8006bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	015a      	lsls	r2, r3, #5
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	693a      	ldr	r2, [r7, #16]
 8006bdc:	0151      	lsls	r1, r2, #5
 8006bde:	697a      	ldr	r2, [r7, #20]
 8006be0:	440a      	add	r2, r1
 8006be2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006be6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006bea:	6013      	str	r3, [r2, #0]
 8006bec:	e092      	b.n	8006d14 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	015a      	lsls	r2, r3, #5
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	693a      	ldr	r2, [r7, #16]
 8006bfe:	0151      	lsls	r1, r2, #5
 8006c00:	697a      	ldr	r2, [r7, #20]
 8006c02:	440a      	add	r2, r1
 8006c04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c08:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c0c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	695b      	ldr	r3, [r3, #20]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d07e      	beq.n	8006d14 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	f003 030f 	and.w	r3, r3, #15
 8006c26:	2101      	movs	r1, #1
 8006c28:	fa01 f303 	lsl.w	r3, r1, r3
 8006c2c:	6979      	ldr	r1, [r7, #20]
 8006c2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c32:	4313      	orrs	r3, r2
 8006c34:	634b      	str	r3, [r1, #52]	; 0x34
 8006c36:	e06d      	b.n	8006d14 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	015a      	lsls	r2, r3, #5
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	4413      	add	r3, r2
 8006c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	693a      	ldr	r2, [r7, #16]
 8006c48:	0151      	lsls	r1, r2, #5
 8006c4a:	697a      	ldr	r2, [r7, #20]
 8006c4c:	440a      	add	r2, r1
 8006c4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c52:	0cdb      	lsrs	r3, r3, #19
 8006c54:	04db      	lsls	r3, r3, #19
 8006c56:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	015a      	lsls	r2, r3, #5
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	4413      	add	r3, r2
 8006c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	693a      	ldr	r2, [r7, #16]
 8006c68:	0151      	lsls	r1, r2, #5
 8006c6a:	697a      	ldr	r2, [r7, #20]
 8006c6c:	440a      	add	r2, r1
 8006c6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c72:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c76:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c7a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	695b      	ldr	r3, [r3, #20]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d003      	beq.n	8006c8c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	689a      	ldr	r2, [r3, #8]
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	015a      	lsls	r2, r3, #5
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	4413      	add	r3, r2
 8006c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c98:	691b      	ldr	r3, [r3, #16]
 8006c9a:	693a      	ldr	r2, [r7, #16]
 8006c9c:	0151      	lsls	r1, r2, #5
 8006c9e:	697a      	ldr	r2, [r7, #20]
 8006ca0:	440a      	add	r2, r1
 8006ca2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ca6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006caa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	015a      	lsls	r2, r3, #5
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cb8:	691a      	ldr	r2, [r3, #16]
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cc2:	6939      	ldr	r1, [r7, #16]
 8006cc4:	0148      	lsls	r0, r1, #5
 8006cc6:	6979      	ldr	r1, [r7, #20]
 8006cc8:	4401      	add	r1, r0
 8006cca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006cd2:	79fb      	ldrb	r3, [r7, #7]
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d10d      	bne.n	8006cf4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d009      	beq.n	8006cf4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	68d9      	ldr	r1, [r3, #12]
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	015a      	lsls	r2, r3, #5
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	4413      	add	r3, r2
 8006cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cf0:	460a      	mov	r2, r1
 8006cf2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	015a      	lsls	r2, r3, #5
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	693a      	ldr	r2, [r7, #16]
 8006d04:	0151      	lsls	r1, r2, #5
 8006d06:	697a      	ldr	r2, [r7, #20]
 8006d08:	440a      	add	r2, r1
 8006d0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d0e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d12:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	371c      	adds	r7, #28
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr

08006d22 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006d22:	b480      	push	{r7}
 8006d24:	b089      	sub	sp, #36	; 0x24
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	60f8      	str	r0, [r7, #12]
 8006d2a:	60b9      	str	r1, [r7, #8]
 8006d2c:	4611      	mov	r1, r2
 8006d2e:	461a      	mov	r2, r3
 8006d30:	460b      	mov	r3, r1
 8006d32:	71fb      	strb	r3, [r7, #7]
 8006d34:	4613      	mov	r3, r2
 8006d36:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006d40:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d11a      	bne.n	8006d7e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006d48:	88bb      	ldrh	r3, [r7, #4]
 8006d4a:	3303      	adds	r3, #3
 8006d4c:	089b      	lsrs	r3, r3, #2
 8006d4e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006d50:	2300      	movs	r3, #0
 8006d52:	61bb      	str	r3, [r7, #24]
 8006d54:	e00f      	b.n	8006d76 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006d56:	79fb      	ldrb	r3, [r7, #7]
 8006d58:	031a      	lsls	r2, r3, #12
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d62:	461a      	mov	r2, r3
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	3304      	adds	r3, #4
 8006d6e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	3301      	adds	r3, #1
 8006d74:	61bb      	str	r3, [r7, #24]
 8006d76:	69ba      	ldr	r2, [r7, #24]
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d3eb      	bcc.n	8006d56 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006d7e:	2300      	movs	r3, #0
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3724      	adds	r7, #36	; 0x24
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr

08006d8c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b089      	sub	sp, #36	; 0x24
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	60f8      	str	r0, [r7, #12]
 8006d94:	60b9      	str	r1, [r7, #8]
 8006d96:	4613      	mov	r3, r2
 8006d98:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006da2:	88fb      	ldrh	r3, [r7, #6]
 8006da4:	3303      	adds	r3, #3
 8006da6:	089b      	lsrs	r3, r3, #2
 8006da8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006daa:	2300      	movs	r3, #0
 8006dac:	61bb      	str	r3, [r7, #24]
 8006dae:	e00b      	b.n	8006dc8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	601a      	str	r2, [r3, #0]
    pDest++;
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	3304      	adds	r3, #4
 8006dc0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	61bb      	str	r3, [r7, #24]
 8006dc8:	69ba      	ldr	r2, [r7, #24]
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d3ef      	bcc.n	8006db0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006dd0:	69fb      	ldr	r3, [r7, #28]
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3724      	adds	r7, #36	; 0x24
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr

08006dde <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006dde:	b480      	push	{r7}
 8006de0:	b085      	sub	sp, #20
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
 8006de6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	785b      	ldrb	r3, [r3, #1]
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d12c      	bne.n	8006e54 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	015a      	lsls	r2, r3, #5
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	4413      	add	r3, r2
 8006e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	db12      	blt.n	8006e32 <USB_EPSetStall+0x54>
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00f      	beq.n	8006e32 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	015a      	lsls	r2, r3, #5
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	4413      	add	r3, r2
 8006e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	68ba      	ldr	r2, [r7, #8]
 8006e22:	0151      	lsls	r1, r2, #5
 8006e24:	68fa      	ldr	r2, [r7, #12]
 8006e26:	440a      	add	r2, r1
 8006e28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e2c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006e30:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	015a      	lsls	r2, r3, #5
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	4413      	add	r3, r2
 8006e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68ba      	ldr	r2, [r7, #8]
 8006e42:	0151      	lsls	r1, r2, #5
 8006e44:	68fa      	ldr	r2, [r7, #12]
 8006e46:	440a      	add	r2, r1
 8006e48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e50:	6013      	str	r3, [r2, #0]
 8006e52:	e02b      	b.n	8006eac <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	015a      	lsls	r2, r3, #5
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	4413      	add	r3, r2
 8006e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	db12      	blt.n	8006e8c <USB_EPSetStall+0xae>
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d00f      	beq.n	8006e8c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	015a      	lsls	r2, r3, #5
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	4413      	add	r3, r2
 8006e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68ba      	ldr	r2, [r7, #8]
 8006e7c:	0151      	lsls	r1, r2, #5
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	440a      	add	r2, r1
 8006e82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e86:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006e8a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	015a      	lsls	r2, r3, #5
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	4413      	add	r3, r2
 8006e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	68ba      	ldr	r2, [r7, #8]
 8006e9c:	0151      	lsls	r1, r2, #5
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	440a      	add	r2, r1
 8006ea2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ea6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006eaa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3714      	adds	r7, #20
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr

08006eba <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006eba:	b480      	push	{r7}
 8006ebc:	b085      	sub	sp, #20
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
 8006ec2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	785b      	ldrb	r3, [r3, #1]
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d128      	bne.n	8006f28 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	015a      	lsls	r2, r3, #5
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	4413      	add	r3, r2
 8006ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	68ba      	ldr	r2, [r7, #8]
 8006ee6:	0151      	lsls	r1, r2, #5
 8006ee8:	68fa      	ldr	r2, [r7, #12]
 8006eea:	440a      	add	r2, r1
 8006eec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ef0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ef4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	78db      	ldrb	r3, [r3, #3]
 8006efa:	2b03      	cmp	r3, #3
 8006efc:	d003      	beq.n	8006f06 <USB_EPClearStall+0x4c>
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	78db      	ldrb	r3, [r3, #3]
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	d138      	bne.n	8006f78 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	015a      	lsls	r2, r3, #5
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	68ba      	ldr	r2, [r7, #8]
 8006f16:	0151      	lsls	r1, r2, #5
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	440a      	add	r2, r1
 8006f1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f24:	6013      	str	r3, [r2, #0]
 8006f26:	e027      	b.n	8006f78 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	015a      	lsls	r2, r3, #5
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	4413      	add	r3, r2
 8006f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	68ba      	ldr	r2, [r7, #8]
 8006f38:	0151      	lsls	r1, r2, #5
 8006f3a:	68fa      	ldr	r2, [r7, #12]
 8006f3c:	440a      	add	r2, r1
 8006f3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f46:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	78db      	ldrb	r3, [r3, #3]
 8006f4c:	2b03      	cmp	r3, #3
 8006f4e:	d003      	beq.n	8006f58 <USB_EPClearStall+0x9e>
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	78db      	ldrb	r3, [r3, #3]
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	d10f      	bne.n	8006f78 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	015a      	lsls	r2, r3, #5
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	4413      	add	r3, r2
 8006f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68ba      	ldr	r2, [r7, #8]
 8006f68:	0151      	lsls	r1, r2, #5
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	440a      	add	r2, r1
 8006f6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f76:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3714      	adds	r7, #20
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr

08006f86 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006f86:	b480      	push	{r7}
 8006f88:	b085      	sub	sp, #20
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
 8006f8e:	460b      	mov	r3, r1
 8006f90:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	68fa      	ldr	r2, [r7, #12]
 8006fa0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fa4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006fa8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	78fb      	ldrb	r3, [r7, #3]
 8006fb4:	011b      	lsls	r3, r3, #4
 8006fb6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006fba:	68f9      	ldr	r1, [r7, #12]
 8006fbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3714      	adds	r7, #20
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr

08006fd2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006fd2:	b480      	push	{r7}
 8006fd4:	b085      	sub	sp, #20
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	68fa      	ldr	r2, [r7, #12]
 8006fe8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006fec:	f023 0303 	bic.w	r3, r3, #3
 8006ff0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	68fa      	ldr	r2, [r7, #12]
 8006ffc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007000:	f023 0302 	bic.w	r3, r3, #2
 8007004:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007006:	2300      	movs	r3, #0
}
 8007008:	4618      	mov	r0, r3
 800700a:	3714      	adds	r7, #20
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	68fa      	ldr	r2, [r7, #12]
 800702a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800702e:	f023 0303 	bic.w	r3, r3, #3
 8007032:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007042:	f043 0302 	orr.w	r3, r3, #2
 8007046:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3714      	adds	r7, #20
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr

08007056 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007056:	b480      	push	{r7}
 8007058:	b085      	sub	sp, #20
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	695b      	ldr	r3, [r3, #20]
 8007062:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	699b      	ldr	r3, [r3, #24]
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	4013      	ands	r3, r2
 800706c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800706e:	68fb      	ldr	r3, [r7, #12]
}
 8007070:	4618      	mov	r0, r3
 8007072:	3714      	adds	r7, #20
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800708e:	699b      	ldr	r3, [r3, #24]
 8007090:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007098:	69db      	ldr	r3, [r3, #28]
 800709a:	68ba      	ldr	r2, [r7, #8]
 800709c:	4013      	ands	r3, r2
 800709e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	0c1b      	lsrs	r3, r3, #16
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3714      	adds	r7, #20
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b085      	sub	sp, #20
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070c2:	699b      	ldr	r3, [r3, #24]
 80070c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070cc:	69db      	ldr	r3, [r3, #28]
 80070ce:	68ba      	ldr	r2, [r7, #8]
 80070d0:	4013      	ands	r3, r2
 80070d2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	b29b      	uxth	r3, r3
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3714      	adds	r7, #20
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b085      	sub	sp, #20
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	460b      	mov	r3, r1
 80070ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80070f4:	78fb      	ldrb	r3, [r7, #3]
 80070f6:	015a      	lsls	r2, r3, #5
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	4413      	add	r3, r2
 80070fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800710a:	695b      	ldr	r3, [r3, #20]
 800710c:	68ba      	ldr	r2, [r7, #8]
 800710e:	4013      	ands	r3, r2
 8007110:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007112:	68bb      	ldr	r3, [r7, #8]
}
 8007114:	4618      	mov	r0, r3
 8007116:	3714      	adds	r7, #20
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007120:	b480      	push	{r7}
 8007122:	b087      	sub	sp, #28
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	460b      	mov	r3, r1
 800712a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007142:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007144:	78fb      	ldrb	r3, [r7, #3]
 8007146:	f003 030f 	and.w	r3, r3, #15
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	fa22 f303 	lsr.w	r3, r2, r3
 8007150:	01db      	lsls	r3, r3, #7
 8007152:	b2db      	uxtb	r3, r3
 8007154:	693a      	ldr	r2, [r7, #16]
 8007156:	4313      	orrs	r3, r2
 8007158:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800715a:	78fb      	ldrb	r3, [r7, #3]
 800715c:	015a      	lsls	r2, r3, #5
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	4413      	add	r3, r2
 8007162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	693a      	ldr	r2, [r7, #16]
 800716a:	4013      	ands	r3, r2
 800716c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800716e:	68bb      	ldr	r3, [r7, #8]
}
 8007170:	4618      	mov	r0, r3
 8007172:	371c      	adds	r7, #28
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	695b      	ldr	r3, [r3, #20]
 8007188:	f003 0301 	and.w	r3, r3, #1
}
 800718c:	4618      	mov	r0, r3
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007198:	b480      	push	{r7}
 800719a:	b085      	sub	sp, #20
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071b2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80071b6:	f023 0307 	bic.w	r3, r3, #7
 80071ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	68fa      	ldr	r2, [r7, #12]
 80071c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3714      	adds	r7, #20
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr
	...

080071e0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b087      	sub	sp, #28
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	460b      	mov	r3, r1
 80071ea:	607a      	str	r2, [r7, #4]
 80071ec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	333c      	adds	r3, #60	; 0x3c
 80071f6:	3304      	adds	r3, #4
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	4a26      	ldr	r2, [pc, #152]	; (8007298 <USB_EP0_OutStart+0xb8>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d90a      	bls.n	800721a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007210:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007214:	d101      	bne.n	800721a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007216:	2300      	movs	r3, #0
 8007218:	e037      	b.n	800728a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007220:	461a      	mov	r2, r3
 8007222:	2300      	movs	r3, #0
 8007224:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	697a      	ldr	r2, [r7, #20]
 8007230:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007234:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007238:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	697a      	ldr	r2, [r7, #20]
 8007244:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007248:	f043 0318 	orr.w	r3, r3, #24
 800724c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	697a      	ldr	r2, [r7, #20]
 8007258:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800725c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007260:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007262:	7afb      	ldrb	r3, [r7, #11]
 8007264:	2b01      	cmp	r3, #1
 8007266:	d10f      	bne.n	8007288 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800726e:	461a      	mov	r2, r3
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	697a      	ldr	r2, [r7, #20]
 800727e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007282:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007286:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	371c      	adds	r7, #28
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr
 8007296:	bf00      	nop
 8007298:	4f54300a 	.word	0x4f54300a

0800729c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800729c:	b480      	push	{r7}
 800729e:	b085      	sub	sp, #20
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80072a4:	2300      	movs	r3, #0
 80072a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	3301      	adds	r3, #1
 80072ac:	60fb      	str	r3, [r7, #12]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	4a13      	ldr	r2, [pc, #76]	; (8007300 <USB_CoreReset+0x64>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d901      	bls.n	80072ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80072b6:	2303      	movs	r3, #3
 80072b8:	e01b      	b.n	80072f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	daf2      	bge.n	80072a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80072c2:	2300      	movs	r3, #0
 80072c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	f043 0201 	orr.w	r2, r3, #1
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	3301      	adds	r3, #1
 80072d6:	60fb      	str	r3, [r7, #12]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	4a09      	ldr	r2, [pc, #36]	; (8007300 <USB_CoreReset+0x64>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d901      	bls.n	80072e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80072e0:	2303      	movs	r3, #3
 80072e2:	e006      	b.n	80072f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	f003 0301 	and.w	r3, r3, #1
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d0f0      	beq.n	80072d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3714      	adds	r7, #20
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr
 80072fe:	bf00      	nop
 8007300:	00030d40 	.word	0x00030d40

08007304 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	460b      	mov	r3, r1
 800730e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007310:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007314:	f002 f9ae 	bl	8009674 <malloc>
 8007318:	4603      	mov	r3, r0
 800731a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d105      	bne.n	800732e <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800732a:	2302      	movs	r3, #2
 800732c:	e066      	b.n	80073fc <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	7c1b      	ldrb	r3, [r3, #16]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d119      	bne.n	8007372 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800733e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007342:	2202      	movs	r2, #2
 8007344:	2181      	movs	r1, #129	; 0x81
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f002 f81b 	bl	8009382 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007352:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007356:	2202      	movs	r2, #2
 8007358:	2101      	movs	r1, #1
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f002 f811 	bl	8009382 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2201      	movs	r2, #1
 8007364:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2210      	movs	r2, #16
 800736c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007370:	e016      	b.n	80073a0 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007372:	2340      	movs	r3, #64	; 0x40
 8007374:	2202      	movs	r2, #2
 8007376:	2181      	movs	r1, #129	; 0x81
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f002 f802 	bl	8009382 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2201      	movs	r2, #1
 8007382:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007384:	2340      	movs	r3, #64	; 0x40
 8007386:	2202      	movs	r2, #2
 8007388:	2101      	movs	r1, #1
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f001 fff9 	bl	8009382 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2201      	movs	r2, #1
 8007394:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2210      	movs	r2, #16
 800739c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80073a0:	2308      	movs	r3, #8
 80073a2:	2203      	movs	r2, #3
 80073a4:	2182      	movs	r1, #130	; 0x82
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f001 ffeb 	bl	8009382 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2200      	movs	r2, #0
 80073c2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2200      	movs	r2, #0
 80073ca:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	7c1b      	ldrb	r3, [r3, #16]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d109      	bne.n	80073ea <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073e0:	2101      	movs	r1, #1
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f002 f8bc 	bl	8009560 <USBD_LL_PrepareReceive>
 80073e8:	e007      	b.n	80073fa <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073f0:	2340      	movs	r3, #64	; 0x40
 80073f2:	2101      	movs	r1, #1
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f002 f8b3 	bl	8009560 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80073fa:	2300      	movs	r3, #0
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3710      	adds	r7, #16
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	460b      	mov	r3, r1
 800740e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8007410:	2300      	movs	r3, #0
 8007412:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007414:	2181      	movs	r1, #129	; 0x81
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f001 ffd9 	bl	80093ce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007422:	2101      	movs	r1, #1
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f001 ffd2 	bl	80093ce <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007432:	2182      	movs	r1, #130	; 0x82
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f001 ffca 	bl	80093ce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007450:	2b00      	cmp	r3, #0
 8007452:	d00e      	beq.n	8007472 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007464:	4618      	mov	r0, r3
 8007466:	f002 f90d 	bl	8009684 <free>
    pdev->pClassData = NULL;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8007472:	7bfb      	ldrb	r3, [r7, #15]
}
 8007474:	4618      	mov	r0, r3
 8007476:	3710      	adds	r7, #16
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b086      	sub	sp, #24
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800748c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800748e:	2300      	movs	r3, #0
 8007490:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007492:	2300      	movs	r3, #0
 8007494:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007496:	2300      	movs	r3, #0
 8007498:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d03a      	beq.n	800751c <USBD_CDC_Setup+0xa0>
 80074a6:	2b20      	cmp	r3, #32
 80074a8:	f040 8097 	bne.w	80075da <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	88db      	ldrh	r3, [r3, #6]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d029      	beq.n	8007508 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	b25b      	sxtb	r3, r3
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	da11      	bge.n	80074e2 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	683a      	ldr	r2, [r7, #0]
 80074c8:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80074ca:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80074cc:	683a      	ldr	r2, [r7, #0]
 80074ce:	88d2      	ldrh	r2, [r2, #6]
 80074d0:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80074d2:	6939      	ldr	r1, [r7, #16]
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	88db      	ldrh	r3, [r3, #6]
 80074d8:	461a      	mov	r2, r3
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f001 fa9d 	bl	8008a1a <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 80074e0:	e082      	b.n	80075e8 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	785a      	ldrb	r2, [r3, #1]
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	88db      	ldrh	r3, [r3, #6]
 80074f0:	b2da      	uxtb	r2, r3
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80074f8:	6939      	ldr	r1, [r7, #16]
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	88db      	ldrh	r3, [r3, #6]
 80074fe:	461a      	mov	r2, r3
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f001 fab6 	bl	8008a72 <USBD_CtlPrepareRx>
    break;
 8007506:	e06f      	b.n	80075e8 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	683a      	ldr	r2, [r7, #0]
 8007512:	7850      	ldrb	r0, [r2, #1]
 8007514:	2200      	movs	r2, #0
 8007516:	6839      	ldr	r1, [r7, #0]
 8007518:	4798      	blx	r3
    break;
 800751a:	e065      	b.n	80075e8 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	785b      	ldrb	r3, [r3, #1]
 8007520:	2b0b      	cmp	r3, #11
 8007522:	d84f      	bhi.n	80075c4 <USBD_CDC_Setup+0x148>
 8007524:	a201      	add	r2, pc, #4	; (adr r2, 800752c <USBD_CDC_Setup+0xb0>)
 8007526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800752a:	bf00      	nop
 800752c:	0800755d 	.word	0x0800755d
 8007530:	080075d3 	.word	0x080075d3
 8007534:	080075c5 	.word	0x080075c5
 8007538:	080075c5 	.word	0x080075c5
 800753c:	080075c5 	.word	0x080075c5
 8007540:	080075c5 	.word	0x080075c5
 8007544:	080075c5 	.word	0x080075c5
 8007548:	080075c5 	.word	0x080075c5
 800754c:	080075c5 	.word	0x080075c5
 8007550:	080075c5 	.word	0x080075c5
 8007554:	08007585 	.word	0x08007585
 8007558:	080075ad 	.word	0x080075ad
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007562:	2b03      	cmp	r3, #3
 8007564:	d107      	bne.n	8007576 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007566:	f107 030c 	add.w	r3, r7, #12
 800756a:	2202      	movs	r2, #2
 800756c:	4619      	mov	r1, r3
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f001 fa53 	bl	8008a1a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007574:	e030      	b.n	80075d8 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007576:	6839      	ldr	r1, [r7, #0]
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f001 f9dd 	bl	8008938 <USBD_CtlError>
        ret = USBD_FAIL;
 800757e:	2303      	movs	r3, #3
 8007580:	75fb      	strb	r3, [r7, #23]
      break;
 8007582:	e029      	b.n	80075d8 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800758a:	2b03      	cmp	r3, #3
 800758c:	d107      	bne.n	800759e <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800758e:	f107 030f 	add.w	r3, r7, #15
 8007592:	2201      	movs	r2, #1
 8007594:	4619      	mov	r1, r3
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f001 fa3f 	bl	8008a1a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800759c:	e01c      	b.n	80075d8 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800759e:	6839      	ldr	r1, [r7, #0]
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f001 f9c9 	bl	8008938 <USBD_CtlError>
        ret = USBD_FAIL;
 80075a6:	2303      	movs	r3, #3
 80075a8:	75fb      	strb	r3, [r7, #23]
      break;
 80075aa:	e015      	b.n	80075d8 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075b2:	2b03      	cmp	r3, #3
 80075b4:	d00f      	beq.n	80075d6 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 80075b6:	6839      	ldr	r1, [r7, #0]
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f001 f9bd 	bl	8008938 <USBD_CtlError>
        ret = USBD_FAIL;
 80075be:	2303      	movs	r3, #3
 80075c0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80075c2:	e008      	b.n	80075d6 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80075c4:	6839      	ldr	r1, [r7, #0]
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f001 f9b6 	bl	8008938 <USBD_CtlError>
      ret = USBD_FAIL;
 80075cc:	2303      	movs	r3, #3
 80075ce:	75fb      	strb	r3, [r7, #23]
      break;
 80075d0:	e002      	b.n	80075d8 <USBD_CDC_Setup+0x15c>
      break;
 80075d2:	bf00      	nop
 80075d4:	e008      	b.n	80075e8 <USBD_CDC_Setup+0x16c>
      break;
 80075d6:	bf00      	nop
    }
    break;
 80075d8:	e006      	b.n	80075e8 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 80075da:	6839      	ldr	r1, [r7, #0]
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f001 f9ab 	bl	8008938 <USBD_CtlError>
    ret = USBD_FAIL;
 80075e2:	2303      	movs	r3, #3
 80075e4:	75fb      	strb	r3, [r7, #23]
    break;
 80075e6:	bf00      	nop
  }

  return (uint8_t)ret;
 80075e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3718      	adds	r7, #24
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop

080075f4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	460b      	mov	r3, r1
 80075fe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007606:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800760e:	2b00      	cmp	r3, #0
 8007610:	d101      	bne.n	8007616 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007612:	2303      	movs	r3, #3
 8007614:	e049      	b.n	80076aa <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800761c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800761e:	78fa      	ldrb	r2, [r7, #3]
 8007620:	6879      	ldr	r1, [r7, #4]
 8007622:	4613      	mov	r3, r2
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	4413      	add	r3, r2
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	440b      	add	r3, r1
 800762c:	3318      	adds	r3, #24
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d029      	beq.n	8007688 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007634:	78fa      	ldrb	r2, [r7, #3]
 8007636:	6879      	ldr	r1, [r7, #4]
 8007638:	4613      	mov	r3, r2
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	4413      	add	r3, r2
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	440b      	add	r3, r1
 8007642:	3318      	adds	r3, #24
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	78f9      	ldrb	r1, [r7, #3]
 8007648:	68f8      	ldr	r0, [r7, #12]
 800764a:	460b      	mov	r3, r1
 800764c:	00db      	lsls	r3, r3, #3
 800764e:	1a5b      	subs	r3, r3, r1
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	4403      	add	r3, r0
 8007654:	3344      	adds	r3, #68	; 0x44
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	fbb2 f1f3 	udiv	r1, r2, r3
 800765c:	fb03 f301 	mul.w	r3, r3, r1
 8007660:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007662:	2b00      	cmp	r3, #0
 8007664:	d110      	bne.n	8007688 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007666:	78fa      	ldrb	r2, [r7, #3]
 8007668:	6879      	ldr	r1, [r7, #4]
 800766a:	4613      	mov	r3, r2
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	4413      	add	r3, r2
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	440b      	add	r3, r1
 8007674:	3318      	adds	r3, #24
 8007676:	2200      	movs	r2, #0
 8007678:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800767a:	78f9      	ldrb	r1, [r7, #3]
 800767c:	2300      	movs	r3, #0
 800767e:	2200      	movs	r2, #0
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f001 ff4c 	bl	800951e <USBD_LL_Transmit>
 8007686:	e00f      	b.n	80076a8 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	2200      	movs	r2, #0
 800768c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007696:	691b      	ldr	r3, [r3, #16]
 8007698:	68ba      	ldr	r2, [r7, #8]
 800769a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800769e:	68ba      	ldr	r2, [r7, #8]
 80076a0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80076a4:	78fa      	ldrb	r2, [r7, #3]
 80076a6:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3710      	adds	r7, #16
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}

080076b2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80076b2:	b580      	push	{r7, lr}
 80076b4:	b084      	sub	sp, #16
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
 80076ba:	460b      	mov	r3, r1
 80076bc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076c4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d101      	bne.n	80076d4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80076d0:	2303      	movs	r3, #3
 80076d2:	e015      	b.n	8007700 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80076d4:	78fb      	ldrb	r3, [r7, #3]
 80076d6:	4619      	mov	r1, r3
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f001 ff62 	bl	80095a2 <USBD_LL_GetRxDataSize>
 80076de:	4602      	mov	r2, r0
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	68fa      	ldr	r2, [r7, #12]
 80076f0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80076f4:	68fa      	ldr	r2, [r7, #12]
 80076f6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80076fa:	4611      	mov	r1, r2
 80076fc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80076fe:	2300      	movs	r3, #0
}
 8007700:	4618      	mov	r0, r3
 8007702:	3710      	adds	r7, #16
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007716:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d015      	beq.n	800774e <USBD_CDC_EP0_RxReady+0x46>
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007728:	2bff      	cmp	r3, #255	; 0xff
 800772a:	d010      	beq.n	800774e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800773a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800773c:	68fa      	ldr	r2, [r7, #12]
 800773e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007742:	b292      	uxth	r2, r2
 8007744:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	22ff      	movs	r2, #255	; 0xff
 800774a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800774e:	2300      	movs	r3, #0
}
 8007750:	4618      	mov	r0, r3
 8007752:	3710      	adds	r7, #16
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2243      	movs	r2, #67	; 0x43
 8007764:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007766:	4b03      	ldr	r3, [pc, #12]	; (8007774 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007768:	4618      	mov	r0, r3
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr
 8007774:	20000094 	.word	0x20000094

08007778 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2243      	movs	r2, #67	; 0x43
 8007784:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007786:	4b03      	ldr	r3, [pc, #12]	; (8007794 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007788:	4618      	mov	r0, r3
 800778a:	370c      	adds	r7, #12
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr
 8007794:	20000050 	.word	0x20000050

08007798 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2243      	movs	r2, #67	; 0x43
 80077a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80077a6:	4b03      	ldr	r3, [pc, #12]	; (80077b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	370c      	adds	r7, #12
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr
 80077b4:	200000d8 	.word	0x200000d8

080077b8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	220a      	movs	r2, #10
 80077c4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80077c6:	4b03      	ldr	r3, [pc, #12]	; (80077d4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr
 80077d4:	2000000c 	.word	0x2000000c

080077d8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d101      	bne.n	80077ec <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80077e8:	2303      	movs	r3, #3
 80077ea:	e004      	b.n	80077f6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	683a      	ldr	r2, [r7, #0]
 80077f0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	370c      	adds	r7, #12
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr

08007802 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007802:	b480      	push	{r7}
 8007804:	b087      	sub	sp, #28
 8007806:	af00      	add	r7, sp, #0
 8007808:	60f8      	str	r0, [r7, #12]
 800780a:	60b9      	str	r1, [r7, #8]
 800780c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007814:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	68ba      	ldr	r2, [r7, #8]
 800781a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007826:	2300      	movs	r3, #0
}
 8007828:	4618      	mov	r0, r3
 800782a:	371c      	adds	r7, #28
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007834:	b480      	push	{r7}
 8007836:	b085      	sub	sp, #20
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007844:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	683a      	ldr	r2, [r7, #0]
 800784a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800784e:	2300      	movs	r3, #0
}
 8007850:	4618      	mov	r0, r3
 8007852:	3714      	adds	r7, #20
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800786a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800786c:	2301      	movs	r3, #1
 800786e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007876:	2b00      	cmp	r3, #0
 8007878:	d101      	bne.n	800787e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800787a:	2303      	movs	r3, #3
 800787c:	e01a      	b.n	80078b4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007884:	2b00      	cmp	r3, #0
 8007886:	d114      	bne.n	80078b2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	2201      	movs	r2, #1
 800788c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80078a6:	2181      	movs	r1, #129	; 0x81
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f001 fe38 	bl	800951e <USBD_LL_Transmit>

    ret = USBD_OK;
 80078ae:	2300      	movs	r3, #0
 80078b0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80078b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3710      	adds	r7, #16
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078ca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d101      	bne.n	80078da <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80078d6:	2303      	movs	r3, #3
 80078d8:	e016      	b.n	8007908 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	7c1b      	ldrb	r3, [r3, #16]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d109      	bne.n	80078f6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078ec:	2101      	movs	r1, #1
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f001 fe36 	bl	8009560 <USBD_LL_PrepareReceive>
 80078f4:	e007      	b.n	8007906 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078fc:	2340      	movs	r3, #64	; 0x40
 80078fe:	2101      	movs	r1, #1
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f001 fe2d 	bl	8009560 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007906:	2300      	movs	r3, #0
}
 8007908:	4618      	mov	r0, r3
 800790a:	3710      	adds	r7, #16
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b086      	sub	sp, #24
 8007914:	af00      	add	r7, sp, #0
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	60b9      	str	r1, [r7, #8]
 800791a:	4613      	mov	r3, r2
 800791c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d101      	bne.n	8007928 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007924:	2303      	movs	r3, #3
 8007926:	e025      	b.n	8007974 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800792e:	2b00      	cmp	r3, #0
 8007930:	d003      	beq.n	800793a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2200      	movs	r2, #0
 8007936:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8007940:	2b00      	cmp	r3, #0
 8007942:	d003      	beq.n	800794c <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2200      	movs	r2, #0
 8007948:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d003      	beq.n	800795a <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	68ba      	ldr	r2, [r7, #8]
 8007956:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2201      	movs	r2, #1
 800795e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	79fa      	ldrb	r2, [r7, #7]
 8007966:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007968:	68f8      	ldr	r0, [r7, #12]
 800796a:	f001 fca3 	bl	80092b4 <USBD_LL_Init>
 800796e:	4603      	mov	r3, r0
 8007970:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007972:	7dfb      	ldrb	r3, [r7, #23]
}
 8007974:	4618      	mov	r0, r3
 8007976:	3718      	adds	r7, #24
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b084      	sub	sp, #16
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007986:	2300      	movs	r3, #0
 8007988:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d101      	bne.n	8007994 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007990:	2303      	movs	r3, #3
 8007992:	e010      	b.n	80079b6 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	683a      	ldr	r2, [r7, #0]
 8007998:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a4:	f107 020e 	add.w	r2, r7, #14
 80079a8:	4610      	mov	r0, r2
 80079aa:	4798      	blx	r3
 80079ac:	4602      	mov	r2, r0
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80079b4:	2300      	movs	r3, #0
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3710      	adds	r7, #16
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}

080079be <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80079be:	b580      	push	{r7, lr}
 80079c0:	b082      	sub	sp, #8
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f001 fcc0 	bl	800934c <USBD_LL_Start>
 80079cc:	4603      	mov	r3, r0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3708      	adds	r7, #8
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80079d6:	b480      	push	{r7}
 80079d8:	b083      	sub	sp, #12
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80079de:	2300      	movs	r3, #0
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	370c      	adds	r7, #12
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr

080079ec <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	460b      	mov	r3, r1
 80079f6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80079f8:	2303      	movs	r3, #3
 80079fa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d009      	beq.n	8007a1a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	78fa      	ldrb	r2, [r7, #3]
 8007a10:	4611      	mov	r1, r2
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	4798      	blx	r3
 8007a16:	4603      	mov	r3, r0
 8007a18:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3710      	adds	r7, #16
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d007      	beq.n	8007a4a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	78fa      	ldrb	r2, [r7, #3]
 8007a44:	4611      	mov	r1, r2
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	4798      	blx	r3
  }

  return USBD_OK;
 8007a4a:	2300      	movs	r3, #0
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3708      	adds	r7, #8
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a64:	6839      	ldr	r1, [r7, #0]
 8007a66:	4618      	mov	r0, r3
 8007a68:	f000 ff2c 	bl	80088c4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007a88:	f003 031f 	and.w	r3, r3, #31
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d00e      	beq.n	8007aae <USBD_LL_SetupStage+0x5a>
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d302      	bcc.n	8007a9a <USBD_LL_SetupStage+0x46>
 8007a94:	2b02      	cmp	r3, #2
 8007a96:	d014      	beq.n	8007ac2 <USBD_LL_SetupStage+0x6e>
 8007a98:	e01d      	b.n	8007ad6 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 fa18 	bl	8007ed8 <USBD_StdDevReq>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8007aac:	e020      	b.n	8007af0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 fa7c 	bl	8007fb4 <USBD_StdItfReq>
 8007abc:	4603      	mov	r3, r0
 8007abe:	73fb      	strb	r3, [r7, #15]
      break;
 8007ac0:	e016      	b.n	8007af0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007ac8:	4619      	mov	r1, r3
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 fab8 	bl	8008040 <USBD_StdEPReq>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ad4:	e00c      	b.n	8007af0 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007adc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007ae0:	b2db      	uxtb	r3, r3
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f001 fc91 	bl	800940c <USBD_LL_StallEP>
 8007aea:	4603      	mov	r3, r0
 8007aec:	73fb      	strb	r3, [r7, #15]
      break;
 8007aee:	bf00      	nop
  }

  return ret;
 8007af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3710      	adds	r7, #16
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}

08007afa <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007afa:	b580      	push	{r7, lr}
 8007afc:	b086      	sub	sp, #24
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	60f8      	str	r0, [r7, #12]
 8007b02:	460b      	mov	r3, r1
 8007b04:	607a      	str	r2, [r7, #4]
 8007b06:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007b08:	7afb      	ldrb	r3, [r7, #11]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d137      	bne.n	8007b7e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007b14:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b1c:	2b03      	cmp	r3, #3
 8007b1e:	d14a      	bne.n	8007bb6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	689a      	ldr	r2, [r3, #8]
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d913      	bls.n	8007b54 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	689a      	ldr	r2, [r3, #8]
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	68db      	ldr	r3, [r3, #12]
 8007b34:	1ad2      	subs	r2, r2, r3
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	68da      	ldr	r2, [r3, #12]
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	4293      	cmp	r3, r2
 8007b44:	bf28      	it	cs
 8007b46:	4613      	movcs	r3, r2
 8007b48:	461a      	mov	r2, r3
 8007b4a:	6879      	ldr	r1, [r7, #4]
 8007b4c:	68f8      	ldr	r0, [r7, #12]
 8007b4e:	f000 ffad 	bl	8008aac <USBD_CtlContinueRx>
 8007b52:	e030      	b.n	8007bb6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b5a:	691b      	ldr	r3, [r3, #16]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00a      	beq.n	8007b76 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007b66:	2b03      	cmp	r3, #3
 8007b68:	d105      	bne.n	8007b76 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	68f8      	ldr	r0, [r7, #12]
 8007b74:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	f000 ffa9 	bl	8008ace <USBD_CtlSendStatus>
 8007b7c:	e01b      	b.n	8007bb6 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b84:	699b      	ldr	r3, [r3, #24]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d013      	beq.n	8007bb2 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007b90:	2b03      	cmp	r3, #3
 8007b92:	d10e      	bne.n	8007bb2 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b9a:	699b      	ldr	r3, [r3, #24]
 8007b9c:	7afa      	ldrb	r2, [r7, #11]
 8007b9e:	4611      	mov	r1, r2
 8007ba0:	68f8      	ldr	r0, [r7, #12]
 8007ba2:	4798      	blx	r3
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007ba8:	7dfb      	ldrb	r3, [r7, #23]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d003      	beq.n	8007bb6 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8007bae:	7dfb      	ldrb	r3, [r7, #23]
 8007bb0:	e002      	b.n	8007bb8 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007bb2:	2303      	movs	r3, #3
 8007bb4:	e000      	b.n	8007bb8 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8007bb6:	2300      	movs	r3, #0
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3718      	adds	r7, #24
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b086      	sub	sp, #24
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	460b      	mov	r3, r1
 8007bca:	607a      	str	r2, [r7, #4]
 8007bcc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007bce:	7afb      	ldrb	r3, [r7, #11]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d16a      	bne.n	8007caa <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	3314      	adds	r3, #20
 8007bd8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007be0:	2b02      	cmp	r3, #2
 8007be2:	d155      	bne.n	8007c90 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	689a      	ldr	r2, [r3, #8]
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d914      	bls.n	8007c1a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	689a      	ldr	r2, [r3, #8]
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	68db      	ldr	r3, [r3, #12]
 8007bf8:	1ad2      	subs	r2, r2, r3
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	461a      	mov	r2, r3
 8007c04:	6879      	ldr	r1, [r7, #4]
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	f000 ff22 	bl	8008a50 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	2200      	movs	r2, #0
 8007c10:	2100      	movs	r1, #0
 8007c12:	68f8      	ldr	r0, [r7, #12]
 8007c14:	f001 fca4 	bl	8009560 <USBD_LL_PrepareReceive>
 8007c18:	e03a      	b.n	8007c90 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	68da      	ldr	r2, [r3, #12]
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d11c      	bne.n	8007c60 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	685a      	ldr	r2, [r3, #4]
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d316      	bcc.n	8007c60 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	685a      	ldr	r2, [r3, #4]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d20f      	bcs.n	8007c60 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007c40:	2200      	movs	r2, #0
 8007c42:	2100      	movs	r1, #0
 8007c44:	68f8      	ldr	r0, [r7, #12]
 8007c46:	f000 ff03 	bl	8008a50 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c52:	2300      	movs	r3, #0
 8007c54:	2200      	movs	r2, #0
 8007c56:	2100      	movs	r1, #0
 8007c58:	68f8      	ldr	r0, [r7, #12]
 8007c5a:	f001 fc81 	bl	8009560 <USBD_LL_PrepareReceive>
 8007c5e:	e017      	b.n	8007c90 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d00a      	beq.n	8007c82 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007c72:	2b03      	cmp	r3, #3
 8007c74:	d105      	bne.n	8007c82 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	68f8      	ldr	r0, [r7, #12]
 8007c80:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c82:	2180      	movs	r1, #128	; 0x80
 8007c84:	68f8      	ldr	r0, [r7, #12]
 8007c86:	f001 fbc1 	bl	800940c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007c8a:	68f8      	ldr	r0, [r7, #12]
 8007c8c:	f000 ff32 	bl	8008af4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d123      	bne.n	8007ce2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007c9a:	68f8      	ldr	r0, [r7, #12]
 8007c9c:	f7ff fe9b 	bl	80079d6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007ca8:	e01b      	b.n	8007ce2 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cb0:	695b      	ldr	r3, [r3, #20]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d013      	beq.n	8007cde <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007cbc:	2b03      	cmp	r3, #3
 8007cbe:	d10e      	bne.n	8007cde <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cc6:	695b      	ldr	r3, [r3, #20]
 8007cc8:	7afa      	ldrb	r2, [r7, #11]
 8007cca:	4611      	mov	r1, r2
 8007ccc:	68f8      	ldr	r0, [r7, #12]
 8007cce:	4798      	blx	r3
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007cd4:	7dfb      	ldrb	r3, [r7, #23]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d003      	beq.n	8007ce2 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8007cda:	7dfb      	ldrb	r3, [r7, #23]
 8007cdc:	e002      	b.n	8007ce4 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007cde:	2303      	movs	r3, #3
 8007ce0:	e000      	b.n	8007ce4 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8007ce2:	2300      	movs	r3, #0
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3718      	adds	r7, #24
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b082      	sub	sp, #8
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d009      	beq.n	8007d30 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	6852      	ldr	r2, [r2, #4]
 8007d28:	b2d2      	uxtb	r2, r2
 8007d2a:	4611      	mov	r1, r2
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d30:	2340      	movs	r3, #64	; 0x40
 8007d32:	2200      	movs	r2, #0
 8007d34:	2100      	movs	r1, #0
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f001 fb23 	bl	8009382 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2240      	movs	r2, #64	; 0x40
 8007d48:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d4c:	2340      	movs	r3, #64	; 0x40
 8007d4e:	2200      	movs	r2, #0
 8007d50:	2180      	movs	r1, #128	; 0x80
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f001 fb15 	bl	8009382 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2240      	movs	r2, #64	; 0x40
 8007d62:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3708      	adds	r7, #8
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b083      	sub	sp, #12
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
 8007d76:	460b      	mov	r3, r1
 8007d78:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	78fa      	ldrb	r2, [r7, #3]
 8007d7e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007d80:	2300      	movs	r3, #0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	370c      	adds	r7, #12
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr

08007d8e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007d8e:	b480      	push	{r7}
 8007d90:	b083      	sub	sp, #12
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2204      	movs	r2, #4
 8007da6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007daa:	2300      	movs	r3, #0
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	370c      	adds	r7, #12
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b083      	sub	sp, #12
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dc6:	2b04      	cmp	r3, #4
 8007dc8:	d105      	bne.n	8007dd6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007dd6:	2300      	movs	r3, #0
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	370c      	adds	r7, #12
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b082      	sub	sp, #8
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007df2:	2b03      	cmp	r3, #3
 8007df4:	d10b      	bne.n	8007e0e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dfc:	69db      	ldr	r3, [r3, #28]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d005      	beq.n	8007e0e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e08:	69db      	ldr	r3, [r3, #28]
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e0e:	2300      	movs	r3, #0
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3708      	adds	r7, #8
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	460b      	mov	r3, r1
 8007e22:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007e24:	2300      	movs	r3, #0
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	370c      	adds	r7, #12
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr

08007e32 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007e32:	b480      	push	{r7}
 8007e34:	b083      	sub	sp, #12
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
 8007e3a:	460b      	mov	r3, r1
 8007e3c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007e3e:	2300      	movs	r3, #0
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	370c      	adds	r7, #12
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e54:	2300      	movs	r3, #0
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	370c      	adds	r7, #12
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr

08007e62 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b082      	sub	sp, #8
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d009      	beq.n	8007e90 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	6852      	ldr	r2, [r2, #4]
 8007e88:	b2d2      	uxtb	r2, r2
 8007e8a:	4611      	mov	r1, r2
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	4798      	blx	r3
  }

  return USBD_OK;
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3708      	adds	r7, #8
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007e9a:	b480      	push	{r7}
 8007e9c:	b087      	sub	sp, #28
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	3301      	adds	r3, #1
 8007eb0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007eb8:	8a3b      	ldrh	r3, [r7, #16]
 8007eba:	021b      	lsls	r3, r3, #8
 8007ebc:	b21a      	sxth	r2, r3
 8007ebe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	b21b      	sxth	r3, r3
 8007ec6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007ec8:	89fb      	ldrh	r3, [r7, #14]
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	371c      	adds	r7, #28
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr
	...

08007ed8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007eee:	2b20      	cmp	r3, #32
 8007ef0:	d004      	beq.n	8007efc <USBD_StdDevReq+0x24>
 8007ef2:	2b40      	cmp	r3, #64	; 0x40
 8007ef4:	d002      	beq.n	8007efc <USBD_StdDevReq+0x24>
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d00a      	beq.n	8007f10 <USBD_StdDevReq+0x38>
 8007efa:	e050      	b.n	8007f9e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	6839      	ldr	r1, [r7, #0]
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	4798      	blx	r3
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	73fb      	strb	r3, [r7, #15]
    break;
 8007f0e:	e04b      	b.n	8007fa8 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	785b      	ldrb	r3, [r3, #1]
 8007f14:	2b09      	cmp	r3, #9
 8007f16:	d83c      	bhi.n	8007f92 <USBD_StdDevReq+0xba>
 8007f18:	a201      	add	r2, pc, #4	; (adr r2, 8007f20 <USBD_StdDevReq+0x48>)
 8007f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f1e:	bf00      	nop
 8007f20:	08007f75 	.word	0x08007f75
 8007f24:	08007f89 	.word	0x08007f89
 8007f28:	08007f93 	.word	0x08007f93
 8007f2c:	08007f7f 	.word	0x08007f7f
 8007f30:	08007f93 	.word	0x08007f93
 8007f34:	08007f53 	.word	0x08007f53
 8007f38:	08007f49 	.word	0x08007f49
 8007f3c:	08007f93 	.word	0x08007f93
 8007f40:	08007f6b 	.word	0x08007f6b
 8007f44:	08007f5d 	.word	0x08007f5d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8007f48:	6839      	ldr	r1, [r7, #0]
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 f9ce 	bl	80082ec <USBD_GetDescriptor>
      break;
 8007f50:	e024      	b.n	8007f9c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8007f52:	6839      	ldr	r1, [r7, #0]
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f000 fb33 	bl	80085c0 <USBD_SetAddress>
      break;
 8007f5a:	e01f      	b.n	8007f9c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8007f5c:	6839      	ldr	r1, [r7, #0]
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 fb70 	bl	8008644 <USBD_SetConfig>
 8007f64:	4603      	mov	r3, r0
 8007f66:	73fb      	strb	r3, [r7, #15]
      break;
 8007f68:	e018      	b.n	8007f9c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8007f6a:	6839      	ldr	r1, [r7, #0]
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 fc0d 	bl	800878c <USBD_GetConfig>
      break;
 8007f72:	e013      	b.n	8007f9c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8007f74:	6839      	ldr	r1, [r7, #0]
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 fc3c 	bl	80087f4 <USBD_GetStatus>
      break;
 8007f7c:	e00e      	b.n	8007f9c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8007f7e:	6839      	ldr	r1, [r7, #0]
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 fc6a 	bl	800885a <USBD_SetFeature>
      break;
 8007f86:	e009      	b.n	8007f9c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8007f88:	6839      	ldr	r1, [r7, #0]
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 fc79 	bl	8008882 <USBD_ClrFeature>
      break;
 8007f90:	e004      	b.n	8007f9c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8007f92:	6839      	ldr	r1, [r7, #0]
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 fccf 	bl	8008938 <USBD_CtlError>
      break;
 8007f9a:	bf00      	nop
    }
    break;
 8007f9c:	e004      	b.n	8007fa8 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8007f9e:	6839      	ldr	r1, [r7, #0]
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 fcc9 	bl	8008938 <USBD_CtlError>
    break;
 8007fa6:	bf00      	nop
  }

  return ret;
 8007fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3710      	adds	r7, #16
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop

08007fb4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fca:	2b20      	cmp	r3, #32
 8007fcc:	d003      	beq.n	8007fd6 <USBD_StdItfReq+0x22>
 8007fce:	2b40      	cmp	r3, #64	; 0x40
 8007fd0:	d001      	beq.n	8007fd6 <USBD_StdItfReq+0x22>
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d12a      	bne.n	800802c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fdc:	3b01      	subs	r3, #1
 8007fde:	2b02      	cmp	r3, #2
 8007fe0:	d81d      	bhi.n	800801e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	889b      	ldrh	r3, [r3, #4]
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d813      	bhi.n	8008014 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	6839      	ldr	r1, [r7, #0]
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	4798      	blx	r3
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	88db      	ldrh	r3, [r3, #6]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d110      	bne.n	8008028 <USBD_StdItfReq+0x74>
 8008006:	7bfb      	ldrb	r3, [r7, #15]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d10d      	bne.n	8008028 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 fd5e 	bl	8008ace <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008012:	e009      	b.n	8008028 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008014:	6839      	ldr	r1, [r7, #0]
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 fc8e 	bl	8008938 <USBD_CtlError>
      break;
 800801c:	e004      	b.n	8008028 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800801e:	6839      	ldr	r1, [r7, #0]
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 fc89 	bl	8008938 <USBD_CtlError>
      break;
 8008026:	e000      	b.n	800802a <USBD_StdItfReq+0x76>
      break;
 8008028:	bf00      	nop
    }
    break;
 800802a:	e004      	b.n	8008036 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800802c:	6839      	ldr	r1, [r7, #0]
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 fc82 	bl	8008938 <USBD_CtlError>
    break;
 8008034:	bf00      	nop
  }

  return ret;
 8008036:	7bfb      	ldrb	r3, [r7, #15]
}
 8008038:	4618      	mov	r0, r3
 800803a:	3710      	adds	r7, #16
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800804a:	2300      	movs	r3, #0
 800804c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	889b      	ldrh	r3, [r3, #4]
 8008052:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800805c:	2b20      	cmp	r3, #32
 800805e:	d004      	beq.n	800806a <USBD_StdEPReq+0x2a>
 8008060:	2b40      	cmp	r3, #64	; 0x40
 8008062:	d002      	beq.n	800806a <USBD_StdEPReq+0x2a>
 8008064:	2b00      	cmp	r3, #0
 8008066:	d00a      	beq.n	800807e <USBD_StdEPReq+0x3e>
 8008068:	e135      	b.n	80082d6 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	6839      	ldr	r1, [r7, #0]
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	4798      	blx	r3
 8008078:	4603      	mov	r3, r0
 800807a:	73fb      	strb	r3, [r7, #15]
    break;
 800807c:	e130      	b.n	80082e0 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	785b      	ldrb	r3, [r3, #1]
 8008082:	2b01      	cmp	r3, #1
 8008084:	d03e      	beq.n	8008104 <USBD_StdEPReq+0xc4>
 8008086:	2b03      	cmp	r3, #3
 8008088:	d002      	beq.n	8008090 <USBD_StdEPReq+0x50>
 800808a:	2b00      	cmp	r3, #0
 800808c:	d077      	beq.n	800817e <USBD_StdEPReq+0x13e>
 800808e:	e11c      	b.n	80082ca <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008096:	2b02      	cmp	r3, #2
 8008098:	d002      	beq.n	80080a0 <USBD_StdEPReq+0x60>
 800809a:	2b03      	cmp	r3, #3
 800809c:	d015      	beq.n	80080ca <USBD_StdEPReq+0x8a>
 800809e:	e02b      	b.n	80080f8 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080a0:	7bbb      	ldrb	r3, [r7, #14]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00c      	beq.n	80080c0 <USBD_StdEPReq+0x80>
 80080a6:	7bbb      	ldrb	r3, [r7, #14]
 80080a8:	2b80      	cmp	r3, #128	; 0x80
 80080aa:	d009      	beq.n	80080c0 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80080ac:	7bbb      	ldrb	r3, [r7, #14]
 80080ae:	4619      	mov	r1, r3
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f001 f9ab 	bl	800940c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80080b6:	2180      	movs	r1, #128	; 0x80
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f001 f9a7 	bl	800940c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80080be:	e020      	b.n	8008102 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80080c0:	6839      	ldr	r1, [r7, #0]
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 fc38 	bl	8008938 <USBD_CtlError>
        break;
 80080c8:	e01b      	b.n	8008102 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	885b      	ldrh	r3, [r3, #2]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d10e      	bne.n	80080f0 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80080d2:	7bbb      	ldrb	r3, [r7, #14]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d00b      	beq.n	80080f0 <USBD_StdEPReq+0xb0>
 80080d8:	7bbb      	ldrb	r3, [r7, #14]
 80080da:	2b80      	cmp	r3, #128	; 0x80
 80080dc:	d008      	beq.n	80080f0 <USBD_StdEPReq+0xb0>
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	88db      	ldrh	r3, [r3, #6]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d104      	bne.n	80080f0 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80080e6:	7bbb      	ldrb	r3, [r7, #14]
 80080e8:	4619      	mov	r1, r3
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f001 f98e 	bl	800940c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 fcec 	bl	8008ace <USBD_CtlSendStatus>

        break;
 80080f6:	e004      	b.n	8008102 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80080f8:	6839      	ldr	r1, [r7, #0]
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 fc1c 	bl	8008938 <USBD_CtlError>
        break;
 8008100:	bf00      	nop
      }
      break;
 8008102:	e0e7      	b.n	80082d4 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800810a:	2b02      	cmp	r3, #2
 800810c:	d002      	beq.n	8008114 <USBD_StdEPReq+0xd4>
 800810e:	2b03      	cmp	r3, #3
 8008110:	d015      	beq.n	800813e <USBD_StdEPReq+0xfe>
 8008112:	e02d      	b.n	8008170 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008114:	7bbb      	ldrb	r3, [r7, #14]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d00c      	beq.n	8008134 <USBD_StdEPReq+0xf4>
 800811a:	7bbb      	ldrb	r3, [r7, #14]
 800811c:	2b80      	cmp	r3, #128	; 0x80
 800811e:	d009      	beq.n	8008134 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008120:	7bbb      	ldrb	r3, [r7, #14]
 8008122:	4619      	mov	r1, r3
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f001 f971 	bl	800940c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800812a:	2180      	movs	r1, #128	; 0x80
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f001 f96d 	bl	800940c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008132:	e023      	b.n	800817c <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8008134:	6839      	ldr	r1, [r7, #0]
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 fbfe 	bl	8008938 <USBD_CtlError>
        break;
 800813c:	e01e      	b.n	800817c <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	885b      	ldrh	r3, [r3, #2]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d119      	bne.n	800817a <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008146:	7bbb      	ldrb	r3, [r7, #14]
 8008148:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800814c:	2b00      	cmp	r3, #0
 800814e:	d004      	beq.n	800815a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008150:	7bbb      	ldrb	r3, [r7, #14]
 8008152:	4619      	mov	r1, r3
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f001 f978 	bl	800944a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 fcb7 	bl	8008ace <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	6839      	ldr	r1, [r7, #0]
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	4798      	blx	r3
        }
        break;
 800816e:	e004      	b.n	800817a <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8008170:	6839      	ldr	r1, [r7, #0]
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 fbe0 	bl	8008938 <USBD_CtlError>
        break;
 8008178:	e000      	b.n	800817c <USBD_StdEPReq+0x13c>
        break;
 800817a:	bf00      	nop
      }
      break;
 800817c:	e0aa      	b.n	80082d4 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008184:	2b02      	cmp	r3, #2
 8008186:	d002      	beq.n	800818e <USBD_StdEPReq+0x14e>
 8008188:	2b03      	cmp	r3, #3
 800818a:	d032      	beq.n	80081f2 <USBD_StdEPReq+0x1b2>
 800818c:	e097      	b.n	80082be <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800818e:	7bbb      	ldrb	r3, [r7, #14]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d007      	beq.n	80081a4 <USBD_StdEPReq+0x164>
 8008194:	7bbb      	ldrb	r3, [r7, #14]
 8008196:	2b80      	cmp	r3, #128	; 0x80
 8008198:	d004      	beq.n	80081a4 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800819a:	6839      	ldr	r1, [r7, #0]
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 fbcb 	bl	8008938 <USBD_CtlError>
          break;
 80081a2:	e091      	b.n	80082c8 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	da0b      	bge.n	80081c4 <USBD_StdEPReq+0x184>
 80081ac:	7bbb      	ldrb	r3, [r7, #14]
 80081ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081b2:	4613      	mov	r3, r2
 80081b4:	009b      	lsls	r3, r3, #2
 80081b6:	4413      	add	r3, r2
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	3310      	adds	r3, #16
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	4413      	add	r3, r2
 80081c0:	3304      	adds	r3, #4
 80081c2:	e00b      	b.n	80081dc <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80081c4:	7bbb      	ldrb	r3, [r7, #14]
 80081c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081ca:	4613      	mov	r3, r2
 80081cc:	009b      	lsls	r3, r3, #2
 80081ce:	4413      	add	r3, r2
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	4413      	add	r3, r2
 80081da:	3304      	adds	r3, #4
 80081dc:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	2200      	movs	r2, #0
 80081e2:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	2202      	movs	r2, #2
 80081e8:	4619      	mov	r1, r3
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 fc15 	bl	8008a1a <USBD_CtlSendData>
        break;
 80081f0:	e06a      	b.n	80082c8 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80081f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	da11      	bge.n	800821e <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80081fa:	7bbb      	ldrb	r3, [r7, #14]
 80081fc:	f003 020f 	and.w	r2, r3, #15
 8008200:	6879      	ldr	r1, [r7, #4]
 8008202:	4613      	mov	r3, r2
 8008204:	009b      	lsls	r3, r3, #2
 8008206:	4413      	add	r3, r2
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	440b      	add	r3, r1
 800820c:	3324      	adds	r3, #36	; 0x24
 800820e:	881b      	ldrh	r3, [r3, #0]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d117      	bne.n	8008244 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008214:	6839      	ldr	r1, [r7, #0]
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 fb8e 	bl	8008938 <USBD_CtlError>
            break;
 800821c:	e054      	b.n	80082c8 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800821e:	7bbb      	ldrb	r3, [r7, #14]
 8008220:	f003 020f 	and.w	r2, r3, #15
 8008224:	6879      	ldr	r1, [r7, #4]
 8008226:	4613      	mov	r3, r2
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	4413      	add	r3, r2
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	440b      	add	r3, r1
 8008230:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008234:	881b      	ldrh	r3, [r3, #0]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d104      	bne.n	8008244 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800823a:	6839      	ldr	r1, [r7, #0]
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 fb7b 	bl	8008938 <USBD_CtlError>
            break;
 8008242:	e041      	b.n	80082c8 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008244:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008248:	2b00      	cmp	r3, #0
 800824a:	da0b      	bge.n	8008264 <USBD_StdEPReq+0x224>
 800824c:	7bbb      	ldrb	r3, [r7, #14]
 800824e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008252:	4613      	mov	r3, r2
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	4413      	add	r3, r2
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	3310      	adds	r3, #16
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	4413      	add	r3, r2
 8008260:	3304      	adds	r3, #4
 8008262:	e00b      	b.n	800827c <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008264:	7bbb      	ldrb	r3, [r7, #14]
 8008266:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800826a:	4613      	mov	r3, r2
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	4413      	add	r3, r2
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	4413      	add	r3, r2
 800827a:	3304      	adds	r3, #4
 800827c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800827e:	7bbb      	ldrb	r3, [r7, #14]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d002      	beq.n	800828a <USBD_StdEPReq+0x24a>
 8008284:	7bbb      	ldrb	r3, [r7, #14]
 8008286:	2b80      	cmp	r3, #128	; 0x80
 8008288:	d103      	bne.n	8008292 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	2200      	movs	r2, #0
 800828e:	601a      	str	r2, [r3, #0]
 8008290:	e00e      	b.n	80082b0 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008292:	7bbb      	ldrb	r3, [r7, #14]
 8008294:	4619      	mov	r1, r3
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f001 f8f6 	bl	8009488 <USBD_LL_IsStallEP>
 800829c:	4603      	mov	r3, r0
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d003      	beq.n	80082aa <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	2201      	movs	r2, #1
 80082a6:	601a      	str	r2, [r3, #0]
 80082a8:	e002      	b.n	80082b0 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	2200      	movs	r2, #0
 80082ae:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	2202      	movs	r2, #2
 80082b4:	4619      	mov	r1, r3
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 fbaf 	bl	8008a1a <USBD_CtlSendData>
          break;
 80082bc:	e004      	b.n	80082c8 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 80082be:	6839      	ldr	r1, [r7, #0]
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 fb39 	bl	8008938 <USBD_CtlError>
        break;
 80082c6:	bf00      	nop
      }
      break;
 80082c8:	e004      	b.n	80082d4 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 80082ca:	6839      	ldr	r1, [r7, #0]
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f000 fb33 	bl	8008938 <USBD_CtlError>
      break;
 80082d2:	bf00      	nop
    }
    break;
 80082d4:	e004      	b.n	80082e0 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 80082d6:	6839      	ldr	r1, [r7, #0]
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 fb2d 	bl	8008938 <USBD_CtlError>
    break;
 80082de:	bf00      	nop
  }

  return ret;
 80082e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3710      	adds	r7, #16
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}
	...

080082ec <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80082f6:	2300      	movs	r3, #0
 80082f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80082fa:	2300      	movs	r3, #0
 80082fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80082fe:	2300      	movs	r3, #0
 8008300:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	885b      	ldrh	r3, [r3, #2]
 8008306:	0a1b      	lsrs	r3, r3, #8
 8008308:	b29b      	uxth	r3, r3
 800830a:	3b01      	subs	r3, #1
 800830c:	2b06      	cmp	r3, #6
 800830e:	f200 8128 	bhi.w	8008562 <USBD_GetDescriptor+0x276>
 8008312:	a201      	add	r2, pc, #4	; (adr r2, 8008318 <USBD_GetDescriptor+0x2c>)
 8008314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008318:	08008335 	.word	0x08008335
 800831c:	0800834d 	.word	0x0800834d
 8008320:	0800838d 	.word	0x0800838d
 8008324:	08008563 	.word	0x08008563
 8008328:	08008563 	.word	0x08008563
 800832c:	08008503 	.word	0x08008503
 8008330:	0800852f 	.word	0x0800852f
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	7c12      	ldrb	r2, [r2, #16]
 8008340:	f107 0108 	add.w	r1, r7, #8
 8008344:	4610      	mov	r0, r2
 8008346:	4798      	blx	r3
 8008348:	60f8      	str	r0, [r7, #12]
    break;
 800834a:	e112      	b.n	8008572 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	7c1b      	ldrb	r3, [r3, #16]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d10d      	bne.n	8008370 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800835a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800835c:	f107 0208 	add.w	r2, r7, #8
 8008360:	4610      	mov	r0, r2
 8008362:	4798      	blx	r3
 8008364:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	3301      	adds	r3, #1
 800836a:	2202      	movs	r2, #2
 800836c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800836e:	e100      	b.n	8008572 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008378:	f107 0208 	add.w	r2, r7, #8
 800837c:	4610      	mov	r0, r2
 800837e:	4798      	blx	r3
 8008380:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	3301      	adds	r3, #1
 8008386:	2202      	movs	r2, #2
 8008388:	701a      	strb	r2, [r3, #0]
    break;
 800838a:	e0f2      	b.n	8008572 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	885b      	ldrh	r3, [r3, #2]
 8008390:	b2db      	uxtb	r3, r3
 8008392:	2b05      	cmp	r3, #5
 8008394:	f200 80ac 	bhi.w	80084f0 <USBD_GetDescriptor+0x204>
 8008398:	a201      	add	r2, pc, #4	; (adr r2, 80083a0 <USBD_GetDescriptor+0xb4>)
 800839a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800839e:	bf00      	nop
 80083a0:	080083b9 	.word	0x080083b9
 80083a4:	080083ed 	.word	0x080083ed
 80083a8:	08008421 	.word	0x08008421
 80083ac:	08008455 	.word	0x08008455
 80083b0:	08008489 	.word	0x08008489
 80083b4:	080084bd 	.word	0x080084bd
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d00b      	beq.n	80083dc <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	7c12      	ldrb	r2, [r2, #16]
 80083d0:	f107 0108 	add.w	r1, r7, #8
 80083d4:	4610      	mov	r0, r2
 80083d6:	4798      	blx	r3
 80083d8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80083da:	e091      	b.n	8008500 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80083dc:	6839      	ldr	r1, [r7, #0]
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 faaa 	bl	8008938 <USBD_CtlError>
        err++;
 80083e4:	7afb      	ldrb	r3, [r7, #11]
 80083e6:	3301      	adds	r3, #1
 80083e8:	72fb      	strb	r3, [r7, #11]
      break;
 80083ea:	e089      	b.n	8008500 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083f2:	689b      	ldr	r3, [r3, #8]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d00b      	beq.n	8008410 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	7c12      	ldrb	r2, [r2, #16]
 8008404:	f107 0108 	add.w	r1, r7, #8
 8008408:	4610      	mov	r0, r2
 800840a:	4798      	blx	r3
 800840c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800840e:	e077      	b.n	8008500 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008410:	6839      	ldr	r1, [r7, #0]
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 fa90 	bl	8008938 <USBD_CtlError>
        err++;
 8008418:	7afb      	ldrb	r3, [r7, #11]
 800841a:	3301      	adds	r3, #1
 800841c:	72fb      	strb	r3, [r7, #11]
      break;
 800841e:	e06f      	b.n	8008500 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d00b      	beq.n	8008444 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	7c12      	ldrb	r2, [r2, #16]
 8008438:	f107 0108 	add.w	r1, r7, #8
 800843c:	4610      	mov	r0, r2
 800843e:	4798      	blx	r3
 8008440:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008442:	e05d      	b.n	8008500 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008444:	6839      	ldr	r1, [r7, #0]
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 fa76 	bl	8008938 <USBD_CtlError>
        err++;
 800844c:	7afb      	ldrb	r3, [r7, #11]
 800844e:	3301      	adds	r3, #1
 8008450:	72fb      	strb	r3, [r7, #11]
      break;
 8008452:	e055      	b.n	8008500 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800845a:	691b      	ldr	r3, [r3, #16]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d00b      	beq.n	8008478 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008466:	691b      	ldr	r3, [r3, #16]
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	7c12      	ldrb	r2, [r2, #16]
 800846c:	f107 0108 	add.w	r1, r7, #8
 8008470:	4610      	mov	r0, r2
 8008472:	4798      	blx	r3
 8008474:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008476:	e043      	b.n	8008500 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008478:	6839      	ldr	r1, [r7, #0]
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 fa5c 	bl	8008938 <USBD_CtlError>
        err++;
 8008480:	7afb      	ldrb	r3, [r7, #11]
 8008482:	3301      	adds	r3, #1
 8008484:	72fb      	strb	r3, [r7, #11]
      break;
 8008486:	e03b      	b.n	8008500 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800848e:	695b      	ldr	r3, [r3, #20]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d00b      	beq.n	80084ac <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800849a:	695b      	ldr	r3, [r3, #20]
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	7c12      	ldrb	r2, [r2, #16]
 80084a0:	f107 0108 	add.w	r1, r7, #8
 80084a4:	4610      	mov	r0, r2
 80084a6:	4798      	blx	r3
 80084a8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80084aa:	e029      	b.n	8008500 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80084ac:	6839      	ldr	r1, [r7, #0]
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 fa42 	bl	8008938 <USBD_CtlError>
        err++;
 80084b4:	7afb      	ldrb	r3, [r7, #11]
 80084b6:	3301      	adds	r3, #1
 80084b8:	72fb      	strb	r3, [r7, #11]
      break;
 80084ba:	e021      	b.n	8008500 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084c2:	699b      	ldr	r3, [r3, #24]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d00b      	beq.n	80084e0 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084ce:	699b      	ldr	r3, [r3, #24]
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	7c12      	ldrb	r2, [r2, #16]
 80084d4:	f107 0108 	add.w	r1, r7, #8
 80084d8:	4610      	mov	r0, r2
 80084da:	4798      	blx	r3
 80084dc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80084de:	e00f      	b.n	8008500 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80084e0:	6839      	ldr	r1, [r7, #0]
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 fa28 	bl	8008938 <USBD_CtlError>
        err++;
 80084e8:	7afb      	ldrb	r3, [r7, #11]
 80084ea:	3301      	adds	r3, #1
 80084ec:	72fb      	strb	r3, [r7, #11]
      break;
 80084ee:	e007      	b.n	8008500 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80084f0:	6839      	ldr	r1, [r7, #0]
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 fa20 	bl	8008938 <USBD_CtlError>
      err++;
 80084f8:	7afb      	ldrb	r3, [r7, #11]
 80084fa:	3301      	adds	r3, #1
 80084fc:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80084fe:	bf00      	nop
    }
    break;
 8008500:	e037      	b.n	8008572 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	7c1b      	ldrb	r3, [r3, #16]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d109      	bne.n	800851e <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008512:	f107 0208 	add.w	r2, r7, #8
 8008516:	4610      	mov	r0, r2
 8008518:	4798      	blx	r3
 800851a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800851c:	e029      	b.n	8008572 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800851e:	6839      	ldr	r1, [r7, #0]
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f000 fa09 	bl	8008938 <USBD_CtlError>
      err++;
 8008526:	7afb      	ldrb	r3, [r7, #11]
 8008528:	3301      	adds	r3, #1
 800852a:	72fb      	strb	r3, [r7, #11]
    break;
 800852c:	e021      	b.n	8008572 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	7c1b      	ldrb	r3, [r3, #16]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d10d      	bne.n	8008552 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800853c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800853e:	f107 0208 	add.w	r2, r7, #8
 8008542:	4610      	mov	r0, r2
 8008544:	4798      	blx	r3
 8008546:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	3301      	adds	r3, #1
 800854c:	2207      	movs	r2, #7
 800854e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008550:	e00f      	b.n	8008572 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008552:	6839      	ldr	r1, [r7, #0]
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 f9ef 	bl	8008938 <USBD_CtlError>
      err++;
 800855a:	7afb      	ldrb	r3, [r7, #11]
 800855c:	3301      	adds	r3, #1
 800855e:	72fb      	strb	r3, [r7, #11]
    break;
 8008560:	e007      	b.n	8008572 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8008562:	6839      	ldr	r1, [r7, #0]
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 f9e7 	bl	8008938 <USBD_CtlError>
    err++;
 800856a:	7afb      	ldrb	r3, [r7, #11]
 800856c:	3301      	adds	r3, #1
 800856e:	72fb      	strb	r3, [r7, #11]
    break;
 8008570:	bf00      	nop
  }

  if (err != 0U)
 8008572:	7afb      	ldrb	r3, [r7, #11]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d11e      	bne.n	80085b6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	88db      	ldrh	r3, [r3, #6]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d016      	beq.n	80085ae <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8008580:	893b      	ldrh	r3, [r7, #8]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d00e      	beq.n	80085a4 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	88da      	ldrh	r2, [r3, #6]
 800858a:	893b      	ldrh	r3, [r7, #8]
 800858c:	4293      	cmp	r3, r2
 800858e:	bf28      	it	cs
 8008590:	4613      	movcs	r3, r2
 8008592:	b29b      	uxth	r3, r3
 8008594:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008596:	893b      	ldrh	r3, [r7, #8]
 8008598:	461a      	mov	r2, r3
 800859a:	68f9      	ldr	r1, [r7, #12]
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f000 fa3c 	bl	8008a1a <USBD_CtlSendData>
 80085a2:	e009      	b.n	80085b8 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80085a4:	6839      	ldr	r1, [r7, #0]
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 f9c6 	bl	8008938 <USBD_CtlError>
 80085ac:	e004      	b.n	80085b8 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 fa8d 	bl	8008ace <USBD_CtlSendStatus>
 80085b4:	e000      	b.n	80085b8 <USBD_GetDescriptor+0x2cc>
    return;
 80085b6:	bf00      	nop
    }
  }
}
 80085b8:	3710      	adds	r7, #16
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
 80085be:	bf00      	nop

080085c0 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	889b      	ldrh	r3, [r3, #4]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d130      	bne.n	8008634 <USBD_SetAddress+0x74>
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	88db      	ldrh	r3, [r3, #6]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d12c      	bne.n	8008634 <USBD_SetAddress+0x74>
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	885b      	ldrh	r3, [r3, #2]
 80085de:	2b7f      	cmp	r3, #127	; 0x7f
 80085e0:	d828      	bhi.n	8008634 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	885b      	ldrh	r3, [r3, #2]
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085f4:	2b03      	cmp	r3, #3
 80085f6:	d104      	bne.n	8008602 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80085f8:	6839      	ldr	r1, [r7, #0]
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 f99c 	bl	8008938 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008600:	e01c      	b.n	800863c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	7bfa      	ldrb	r2, [r7, #15]
 8008606:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800860a:	7bfb      	ldrb	r3, [r7, #15]
 800860c:	4619      	mov	r1, r3
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 ff66 	bl	80094e0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 fa5a 	bl	8008ace <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800861a:	7bfb      	ldrb	r3, [r7, #15]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d004      	beq.n	800862a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2202      	movs	r2, #2
 8008624:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008628:	e008      	b.n	800863c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2201      	movs	r2, #1
 800862e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008632:	e003      	b.n	800863c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008634:	6839      	ldr	r1, [r7, #0]
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 f97e 	bl	8008938 <USBD_CtlError>
  }
}
 800863c:	bf00      	nop
 800863e:	3710      	adds	r7, #16
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b084      	sub	sp, #16
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800864e:	2300      	movs	r3, #0
 8008650:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	885b      	ldrh	r3, [r3, #2]
 8008656:	b2da      	uxtb	r2, r3
 8008658:	4b4b      	ldr	r3, [pc, #300]	; (8008788 <USBD_SetConfig+0x144>)
 800865a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800865c:	4b4a      	ldr	r3, [pc, #296]	; (8008788 <USBD_SetConfig+0x144>)
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	2b01      	cmp	r3, #1
 8008662:	d905      	bls.n	8008670 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008664:	6839      	ldr	r1, [r7, #0]
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 f966 	bl	8008938 <USBD_CtlError>
    return USBD_FAIL;
 800866c:	2303      	movs	r3, #3
 800866e:	e087      	b.n	8008780 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008676:	2b02      	cmp	r3, #2
 8008678:	d002      	beq.n	8008680 <USBD_SetConfig+0x3c>
 800867a:	2b03      	cmp	r3, #3
 800867c:	d025      	beq.n	80086ca <USBD_SetConfig+0x86>
 800867e:	e071      	b.n	8008764 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008680:	4b41      	ldr	r3, [pc, #260]	; (8008788 <USBD_SetConfig+0x144>)
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d01c      	beq.n	80086c2 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008688:	4b3f      	ldr	r3, [pc, #252]	; (8008788 <USBD_SetConfig+0x144>)
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	461a      	mov	r2, r3
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008692:	4b3d      	ldr	r3, [pc, #244]	; (8008788 <USBD_SetConfig+0x144>)
 8008694:	781b      	ldrb	r3, [r3, #0]
 8008696:	4619      	mov	r1, r3
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f7ff f9a7 	bl	80079ec <USBD_SetClassConfig>
 800869e:	4603      	mov	r3, r0
 80086a0:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80086a2:	7bfb      	ldrb	r3, [r7, #15]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d004      	beq.n	80086b2 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80086a8:	6839      	ldr	r1, [r7, #0]
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 f944 	bl	8008938 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80086b0:	e065      	b.n	800877e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 fa0b 	bl	8008ace <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2203      	movs	r2, #3
 80086bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80086c0:	e05d      	b.n	800877e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 fa03 	bl	8008ace <USBD_CtlSendStatus>
    break;
 80086c8:	e059      	b.n	800877e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80086ca:	4b2f      	ldr	r3, [pc, #188]	; (8008788 <USBD_SetConfig+0x144>)
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d112      	bne.n	80086f8 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2202      	movs	r2, #2
 80086d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80086da:	4b2b      	ldr	r3, [pc, #172]	; (8008788 <USBD_SetConfig+0x144>)
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	461a      	mov	r2, r3
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80086e4:	4b28      	ldr	r3, [pc, #160]	; (8008788 <USBD_SetConfig+0x144>)
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	4619      	mov	r1, r3
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f7ff f99a 	bl	8007a24 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f000 f9ec 	bl	8008ace <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80086f6:	e042      	b.n	800877e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80086f8:	4b23      	ldr	r3, [pc, #140]	; (8008788 <USBD_SetConfig+0x144>)
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	461a      	mov	r2, r3
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	429a      	cmp	r2, r3
 8008704:	d02a      	beq.n	800875c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	b2db      	uxtb	r3, r3
 800870c:	4619      	mov	r1, r3
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f7ff f988 	bl	8007a24 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008714:	4b1c      	ldr	r3, [pc, #112]	; (8008788 <USBD_SetConfig+0x144>)
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	461a      	mov	r2, r3
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800871e:	4b1a      	ldr	r3, [pc, #104]	; (8008788 <USBD_SetConfig+0x144>)
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	4619      	mov	r1, r3
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f7ff f961 	bl	80079ec <USBD_SetClassConfig>
 800872a:	4603      	mov	r3, r0
 800872c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800872e:	7bfb      	ldrb	r3, [r7, #15]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d00f      	beq.n	8008754 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008734:	6839      	ldr	r1, [r7, #0]
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 f8fe 	bl	8008938 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	b2db      	uxtb	r3, r3
 8008742:	4619      	mov	r1, r3
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f7ff f96d 	bl	8007a24 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2202      	movs	r2, #2
 800874e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008752:	e014      	b.n	800877e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 f9ba 	bl	8008ace <USBD_CtlSendStatus>
    break;
 800875a:	e010      	b.n	800877e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 f9b6 	bl	8008ace <USBD_CtlSendStatus>
    break;
 8008762:	e00c      	b.n	800877e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008764:	6839      	ldr	r1, [r7, #0]
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 f8e6 	bl	8008938 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800876c:	4b06      	ldr	r3, [pc, #24]	; (8008788 <USBD_SetConfig+0x144>)
 800876e:	781b      	ldrb	r3, [r3, #0]
 8008770:	4619      	mov	r1, r3
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f7ff f956 	bl	8007a24 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008778:	2303      	movs	r3, #3
 800877a:	73fb      	strb	r3, [r7, #15]
    break;
 800877c:	bf00      	nop
  }

  return ret;
 800877e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008780:	4618      	mov	r0, r3
 8008782:	3710      	adds	r7, #16
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}
 8008788:	20000228 	.word	0x20000228

0800878c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b082      	sub	sp, #8
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	88db      	ldrh	r3, [r3, #6]
 800879a:	2b01      	cmp	r3, #1
 800879c:	d004      	beq.n	80087a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800879e:	6839      	ldr	r1, [r7, #0]
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 f8c9 	bl	8008938 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80087a6:	e021      	b.n	80087ec <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	db17      	blt.n	80087e2 <USBD_GetConfig+0x56>
 80087b2:	2b02      	cmp	r3, #2
 80087b4:	dd02      	ble.n	80087bc <USBD_GetConfig+0x30>
 80087b6:	2b03      	cmp	r3, #3
 80087b8:	d00b      	beq.n	80087d2 <USBD_GetConfig+0x46>
 80087ba:	e012      	b.n	80087e2 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	3308      	adds	r3, #8
 80087c6:	2201      	movs	r2, #1
 80087c8:	4619      	mov	r1, r3
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 f925 	bl	8008a1a <USBD_CtlSendData>
      break;
 80087d0:	e00c      	b.n	80087ec <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	3304      	adds	r3, #4
 80087d6:	2201      	movs	r2, #1
 80087d8:	4619      	mov	r1, r3
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 f91d 	bl	8008a1a <USBD_CtlSendData>
      break;
 80087e0:	e004      	b.n	80087ec <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80087e2:	6839      	ldr	r1, [r7, #0]
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f000 f8a7 	bl	8008938 <USBD_CtlError>
      break;
 80087ea:	bf00      	nop
}
 80087ec:	bf00      	nop
 80087ee:	3708      	adds	r7, #8
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008804:	3b01      	subs	r3, #1
 8008806:	2b02      	cmp	r3, #2
 8008808:	d81e      	bhi.n	8008848 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	88db      	ldrh	r3, [r3, #6]
 800880e:	2b02      	cmp	r3, #2
 8008810:	d004      	beq.n	800881c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008812:	6839      	ldr	r1, [r7, #0]
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f000 f88f 	bl	8008938 <USBD_CtlError>
      break;
 800881a:	e01a      	b.n	8008852 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2201      	movs	r2, #1
 8008820:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008828:	2b00      	cmp	r3, #0
 800882a:	d005      	beq.n	8008838 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	68db      	ldr	r3, [r3, #12]
 8008830:	f043 0202 	orr.w	r2, r3, #2
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	330c      	adds	r3, #12
 800883c:	2202      	movs	r2, #2
 800883e:	4619      	mov	r1, r3
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 f8ea 	bl	8008a1a <USBD_CtlSendData>
    break;
 8008846:	e004      	b.n	8008852 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008848:	6839      	ldr	r1, [r7, #0]
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 f874 	bl	8008938 <USBD_CtlError>
    break;
 8008850:	bf00      	nop
  }
}
 8008852:	bf00      	nop
 8008854:	3708      	adds	r7, #8
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}

0800885a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800885a:	b580      	push	{r7, lr}
 800885c:	b082      	sub	sp, #8
 800885e:	af00      	add	r7, sp, #0
 8008860:	6078      	str	r0, [r7, #4]
 8008862:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	885b      	ldrh	r3, [r3, #2]
 8008868:	2b01      	cmp	r3, #1
 800886a:	d106      	bne.n	800887a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2201      	movs	r2, #1
 8008870:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f000 f92a 	bl	8008ace <USBD_CtlSendStatus>
  }
}
 800887a:	bf00      	nop
 800887c:	3708      	adds	r7, #8
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}

08008882 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008882:	b580      	push	{r7, lr}
 8008884:	b082      	sub	sp, #8
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
 800888a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008892:	3b01      	subs	r3, #1
 8008894:	2b02      	cmp	r3, #2
 8008896:	d80b      	bhi.n	80088b0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	885b      	ldrh	r3, [r3, #2]
 800889c:	2b01      	cmp	r3, #1
 800889e:	d10c      	bne.n	80088ba <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2200      	movs	r2, #0
 80088a4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f000 f910 	bl	8008ace <USBD_CtlSendStatus>
      }
      break;
 80088ae:	e004      	b.n	80088ba <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80088b0:	6839      	ldr	r1, [r7, #0]
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 f840 	bl	8008938 <USBD_CtlError>
      break;
 80088b8:	e000      	b.n	80088bc <USBD_ClrFeature+0x3a>
      break;
 80088ba:	bf00      	nop
  }
}
 80088bc:	bf00      	nop
 80088be:	3708      	adds	r7, #8
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b084      	sub	sp, #16
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	781a      	ldrb	r2, [r3, #0]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	3301      	adds	r3, #1
 80088de:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	781a      	ldrb	r2, [r3, #0]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	3301      	adds	r3, #1
 80088ec:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80088ee:	68f8      	ldr	r0, [r7, #12]
 80088f0:	f7ff fad3 	bl	8007e9a <SWAPBYTE>
 80088f4:	4603      	mov	r3, r0
 80088f6:	461a      	mov	r2, r3
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	3301      	adds	r3, #1
 8008900:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	3301      	adds	r3, #1
 8008906:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008908:	68f8      	ldr	r0, [r7, #12]
 800890a:	f7ff fac6 	bl	8007e9a <SWAPBYTE>
 800890e:	4603      	mov	r3, r0
 8008910:	461a      	mov	r2, r3
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	3301      	adds	r3, #1
 800891a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	3301      	adds	r3, #1
 8008920:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008922:	68f8      	ldr	r0, [r7, #12]
 8008924:	f7ff fab9 	bl	8007e9a <SWAPBYTE>
 8008928:	4603      	mov	r3, r0
 800892a:	461a      	mov	r2, r3
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	80da      	strh	r2, [r3, #6]
}
 8008930:	bf00      	nop
 8008932:	3710      	adds	r7, #16
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b082      	sub	sp, #8
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008942:	2180      	movs	r1, #128	; 0x80
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 fd61 	bl	800940c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800894a:	2100      	movs	r1, #0
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 fd5d 	bl	800940c <USBD_LL_StallEP>
}
 8008952:	bf00      	nop
 8008954:	3708      	adds	r7, #8
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}

0800895a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800895a:	b580      	push	{r7, lr}
 800895c:	b086      	sub	sp, #24
 800895e:	af00      	add	r7, sp, #0
 8008960:	60f8      	str	r0, [r7, #12]
 8008962:	60b9      	str	r1, [r7, #8]
 8008964:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008966:	2300      	movs	r3, #0
 8008968:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d036      	beq.n	80089de <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008974:	6938      	ldr	r0, [r7, #16]
 8008976:	f000 f836 	bl	80089e6 <USBD_GetLen>
 800897a:	4603      	mov	r3, r0
 800897c:	3301      	adds	r3, #1
 800897e:	b29b      	uxth	r3, r3
 8008980:	005b      	lsls	r3, r3, #1
 8008982:	b29a      	uxth	r2, r3
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008988:	7dfb      	ldrb	r3, [r7, #23]
 800898a:	68ba      	ldr	r2, [r7, #8]
 800898c:	4413      	add	r3, r2
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	7812      	ldrb	r2, [r2, #0]
 8008992:	701a      	strb	r2, [r3, #0]
  idx++;
 8008994:	7dfb      	ldrb	r3, [r7, #23]
 8008996:	3301      	adds	r3, #1
 8008998:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800899a:	7dfb      	ldrb	r3, [r7, #23]
 800899c:	68ba      	ldr	r2, [r7, #8]
 800899e:	4413      	add	r3, r2
 80089a0:	2203      	movs	r2, #3
 80089a2:	701a      	strb	r2, [r3, #0]
  idx++;
 80089a4:	7dfb      	ldrb	r3, [r7, #23]
 80089a6:	3301      	adds	r3, #1
 80089a8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80089aa:	e013      	b.n	80089d4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80089ac:	7dfb      	ldrb	r3, [r7, #23]
 80089ae:	68ba      	ldr	r2, [r7, #8]
 80089b0:	4413      	add	r3, r2
 80089b2:	693a      	ldr	r2, [r7, #16]
 80089b4:	7812      	ldrb	r2, [r2, #0]
 80089b6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	3301      	adds	r3, #1
 80089bc:	613b      	str	r3, [r7, #16]
    idx++;
 80089be:	7dfb      	ldrb	r3, [r7, #23]
 80089c0:	3301      	adds	r3, #1
 80089c2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80089c4:	7dfb      	ldrb	r3, [r7, #23]
 80089c6:	68ba      	ldr	r2, [r7, #8]
 80089c8:	4413      	add	r3, r2
 80089ca:	2200      	movs	r2, #0
 80089cc:	701a      	strb	r2, [r3, #0]
    idx++;
 80089ce:	7dfb      	ldrb	r3, [r7, #23]
 80089d0:	3301      	adds	r3, #1
 80089d2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	781b      	ldrb	r3, [r3, #0]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d1e7      	bne.n	80089ac <USBD_GetString+0x52>
 80089dc:	e000      	b.n	80089e0 <USBD_GetString+0x86>
    return;
 80089de:	bf00      	nop
  }
}
 80089e0:	3718      	adds	r7, #24
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}

080089e6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80089e6:	b480      	push	{r7}
 80089e8:	b085      	sub	sp, #20
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80089ee:	2300      	movs	r3, #0
 80089f0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80089f6:	e005      	b.n	8008a04 <USBD_GetLen+0x1e>
  {
    len++;
 80089f8:	7bfb      	ldrb	r3, [r7, #15]
 80089fa:	3301      	adds	r3, #1
 80089fc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	3301      	adds	r3, #1
 8008a02:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d1f5      	bne.n	80089f8 <USBD_GetLen+0x12>
  }

  return len;
 8008a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3714      	adds	r7, #20
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr

08008a1a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008a1a:	b580      	push	{r7, lr}
 8008a1c:	b084      	sub	sp, #16
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	60f8      	str	r0, [r7, #12]
 8008a22:	60b9      	str	r1, [r7, #8]
 8008a24:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2202      	movs	r2, #2
 8008a2a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	68ba      	ldr	r2, [r7, #8]
 8008a3e:	2100      	movs	r1, #0
 8008a40:	68f8      	ldr	r0, [r7, #12]
 8008a42:	f000 fd6c 	bl	800951e <USBD_LL_Transmit>

  return USBD_OK;
 8008a46:	2300      	movs	r3, #0
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3710      	adds	r7, #16
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	60b9      	str	r1, [r7, #8]
 8008a5a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	68ba      	ldr	r2, [r7, #8]
 8008a60:	2100      	movs	r1, #0
 8008a62:	68f8      	ldr	r0, [r7, #12]
 8008a64:	f000 fd5b 	bl	800951e <USBD_LL_Transmit>

  return USBD_OK;
 8008a68:	2300      	movs	r3, #0
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3710      	adds	r7, #16
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}

08008a72 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008a72:	b580      	push	{r7, lr}
 8008a74:	b084      	sub	sp, #16
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	60f8      	str	r0, [r7, #12]
 8008a7a:	60b9      	str	r1, [r7, #8]
 8008a7c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2203      	movs	r2, #3
 8008a82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	68ba      	ldr	r2, [r7, #8]
 8008a9a:	2100      	movs	r1, #0
 8008a9c:	68f8      	ldr	r0, [r7, #12]
 8008a9e:	f000 fd5f 	bl	8009560 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008aa2:	2300      	movs	r3, #0
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3710      	adds	r7, #16
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	60f8      	str	r0, [r7, #12]
 8008ab4:	60b9      	str	r1, [r7, #8]
 8008ab6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	68ba      	ldr	r2, [r7, #8]
 8008abc:	2100      	movs	r1, #0
 8008abe:	68f8      	ldr	r0, [r7, #12]
 8008ac0:	f000 fd4e 	bl	8009560 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ac4:	2300      	movs	r3, #0
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3710      	adds	r7, #16
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}

08008ace <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008ace:	b580      	push	{r7, lr}
 8008ad0:	b082      	sub	sp, #8
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2204      	movs	r2, #4
 8008ada:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008ade:	2300      	movs	r3, #0
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	2100      	movs	r1, #0
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 fd1a 	bl	800951e <USBD_LL_Transmit>

  return USBD_OK;
 8008aea:	2300      	movs	r3, #0
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3708      	adds	r7, #8
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b082      	sub	sp, #8
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2205      	movs	r2, #5
 8008b00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b04:	2300      	movs	r3, #0
 8008b06:	2200      	movs	r2, #0
 8008b08:	2100      	movs	r1, #0
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 fd28 	bl	8009560 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b10:	2300      	movs	r3, #0
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3708      	adds	r7, #8
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}
	...

08008b1c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008b20:	2200      	movs	r2, #0
 8008b22:	4912      	ldr	r1, [pc, #72]	; (8008b6c <MX_USB_DEVICE_Init+0x50>)
 8008b24:	4812      	ldr	r0, [pc, #72]	; (8008b70 <MX_USB_DEVICE_Init+0x54>)
 8008b26:	f7fe fef3 	bl	8007910 <USBD_Init>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d001      	beq.n	8008b34 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008b30:	f7f8 fc88 	bl	8001444 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008b34:	490f      	ldr	r1, [pc, #60]	; (8008b74 <MX_USB_DEVICE_Init+0x58>)
 8008b36:	480e      	ldr	r0, [pc, #56]	; (8008b70 <MX_USB_DEVICE_Init+0x54>)
 8008b38:	f7fe ff20 	bl	800797c <USBD_RegisterClass>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d001      	beq.n	8008b46 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008b42:	f7f8 fc7f 	bl	8001444 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008b46:	490c      	ldr	r1, [pc, #48]	; (8008b78 <MX_USB_DEVICE_Init+0x5c>)
 8008b48:	4809      	ldr	r0, [pc, #36]	; (8008b70 <MX_USB_DEVICE_Init+0x54>)
 8008b4a:	f7fe fe45 	bl	80077d8 <USBD_CDC_RegisterInterface>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d001      	beq.n	8008b58 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008b54:	f7f8 fc76 	bl	8001444 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008b58:	4805      	ldr	r0, [pc, #20]	; (8008b70 <MX_USB_DEVICE_Init+0x54>)
 8008b5a:	f7fe ff30 	bl	80079be <USBD_Start>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d001      	beq.n	8008b68 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008b64:	f7f8 fc6e 	bl	8001444 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008b68:	bf00      	nop
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	20000138 	.word	0x20000138
 8008b70:	20000738 	.word	0x20000738
 8008b74:	20000018 	.word	0x20000018
 8008b78:	20000124 	.word	0x20000124

08008b7c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008b80:	2200      	movs	r2, #0
 8008b82:	4905      	ldr	r1, [pc, #20]	; (8008b98 <CDC_Init_FS+0x1c>)
 8008b84:	4805      	ldr	r0, [pc, #20]	; (8008b9c <CDC_Init_FS+0x20>)
 8008b86:	f7fe fe3c 	bl	8007802 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008b8a:	4905      	ldr	r1, [pc, #20]	; (8008ba0 <CDC_Init_FS+0x24>)
 8008b8c:	4803      	ldr	r0, [pc, #12]	; (8008b9c <CDC_Init_FS+0x20>)
 8008b8e:	f7fe fe51 	bl	8007834 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008b92:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	bd80      	pop	{r7, pc}
 8008b98:	20001208 	.word	0x20001208
 8008b9c:	20000738 	.word	0x20000738
 8008ba0:	20000a08 	.word	0x20000a08

08008ba4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008ba8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr

08008bb4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b083      	sub	sp, #12
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	4603      	mov	r3, r0
 8008bbc:	6039      	str	r1, [r7, #0]
 8008bbe:	71fb      	strb	r3, [r7, #7]
 8008bc0:	4613      	mov	r3, r2
 8008bc2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008bc4:	79fb      	ldrb	r3, [r7, #7]
 8008bc6:	2b23      	cmp	r3, #35	; 0x23
 8008bc8:	f200 8098 	bhi.w	8008cfc <CDC_Control_FS+0x148>
 8008bcc:	a201      	add	r2, pc, #4	; (adr r2, 8008bd4 <CDC_Control_FS+0x20>)
 8008bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bd2:	bf00      	nop
 8008bd4:	08008cfd 	.word	0x08008cfd
 8008bd8:	08008cfd 	.word	0x08008cfd
 8008bdc:	08008cfd 	.word	0x08008cfd
 8008be0:	08008cfd 	.word	0x08008cfd
 8008be4:	08008cfd 	.word	0x08008cfd
 8008be8:	08008cfd 	.word	0x08008cfd
 8008bec:	08008cfd 	.word	0x08008cfd
 8008bf0:	08008cfd 	.word	0x08008cfd
 8008bf4:	08008cfd 	.word	0x08008cfd
 8008bf8:	08008cfd 	.word	0x08008cfd
 8008bfc:	08008cfd 	.word	0x08008cfd
 8008c00:	08008cfd 	.word	0x08008cfd
 8008c04:	08008cfd 	.word	0x08008cfd
 8008c08:	08008cfd 	.word	0x08008cfd
 8008c0c:	08008cfd 	.word	0x08008cfd
 8008c10:	08008cfd 	.word	0x08008cfd
 8008c14:	08008cfd 	.word	0x08008cfd
 8008c18:	08008cfd 	.word	0x08008cfd
 8008c1c:	08008cfd 	.word	0x08008cfd
 8008c20:	08008cfd 	.word	0x08008cfd
 8008c24:	08008cfd 	.word	0x08008cfd
 8008c28:	08008cfd 	.word	0x08008cfd
 8008c2c:	08008cfd 	.word	0x08008cfd
 8008c30:	08008cfd 	.word	0x08008cfd
 8008c34:	08008cfd 	.word	0x08008cfd
 8008c38:	08008cfd 	.word	0x08008cfd
 8008c3c:	08008cfd 	.word	0x08008cfd
 8008c40:	08008cfd 	.word	0x08008cfd
 8008c44:	08008cfd 	.word	0x08008cfd
 8008c48:	08008cfd 	.word	0x08008cfd
 8008c4c:	08008cfd 	.word	0x08008cfd
 8008c50:	08008cfd 	.word	0x08008cfd
 8008c54:	08008c65 	.word	0x08008c65
 8008c58:	08008ca9 	.word	0x08008ca9
 8008c5c:	08008cfd 	.word	0x08008cfd
 8008c60:	08008cfd 	.word	0x08008cfd
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
       linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	461a      	mov	r2, r3
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	021b      	lsls	r3, r3, #8
 8008c72:	431a      	orrs	r2, r3
                               (pbuf[2] << 16) | (pbuf[3] << 24));
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	3302      	adds	r3, #2
 8008c78:	781b      	ldrb	r3, [r3, #0]
 8008c7a:	041b      	lsls	r3, r3, #16
       linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8008c7c:	431a      	orrs	r2, r3
                               (pbuf[2] << 16) | (pbuf[3] << 24));
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	3303      	adds	r3, #3
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	061b      	lsls	r3, r3, #24
 8008c86:	4313      	orrs	r3, r2
       linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8008c88:	461a      	mov	r2, r3
 8008c8a:	4b20      	ldr	r3, [pc, #128]	; (8008d0c <CDC_Control_FS+0x158>)
 8008c8c:	601a      	str	r2, [r3, #0]
       linecoding.format     = pbuf[4];
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	791a      	ldrb	r2, [r3, #4]
 8008c92:	4b1e      	ldr	r3, [pc, #120]	; (8008d0c <CDC_Control_FS+0x158>)
 8008c94:	711a      	strb	r2, [r3, #4]
       linecoding.paritytype = pbuf[5];
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	795a      	ldrb	r2, [r3, #5]
 8008c9a:	4b1c      	ldr	r3, [pc, #112]	; (8008d0c <CDC_Control_FS+0x158>)
 8008c9c:	715a      	strb	r2, [r3, #5]
       linecoding.datatype   = pbuf[6];
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	799a      	ldrb	r2, [r3, #6]
 8008ca2:	4b1a      	ldr	r3, [pc, #104]	; (8008d0c <CDC_Control_FS+0x158>)
 8008ca4:	719a      	strb	r2, [r3, #6]

       /* Add your code here */
       break;
 8008ca6:	e02a      	b.n	8008cfe <CDC_Control_FS+0x14a>

     case CDC_GET_LINE_CODING:
       pbuf[0] = (uint8_t)(linecoding.bitrate);
 8008ca8:	4b18      	ldr	r3, [pc, #96]	; (8008d0c <CDC_Control_FS+0x158>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	b2da      	uxtb	r2, r3
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	701a      	strb	r2, [r3, #0]
       pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 8008cb2:	4b16      	ldr	r3, [pc, #88]	; (8008d0c <CDC_Control_FS+0x158>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	0a1a      	lsrs	r2, r3, #8
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	3301      	adds	r3, #1
 8008cbc:	b2d2      	uxtb	r2, r2
 8008cbe:	701a      	strb	r2, [r3, #0]
       pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 8008cc0:	4b12      	ldr	r3, [pc, #72]	; (8008d0c <CDC_Control_FS+0x158>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	0c1a      	lsrs	r2, r3, #16
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	3302      	adds	r3, #2
 8008cca:	b2d2      	uxtb	r2, r2
 8008ccc:	701a      	strb	r2, [r3, #0]
       pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 8008cce:	4b0f      	ldr	r3, [pc, #60]	; (8008d0c <CDC_Control_FS+0x158>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	0e1a      	lsrs	r2, r3, #24
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	3303      	adds	r3, #3
 8008cd8:	b2d2      	uxtb	r2, r2
 8008cda:	701a      	strb	r2, [r3, #0]
       pbuf[4] = linecoding.format;
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	3304      	adds	r3, #4
 8008ce0:	4a0a      	ldr	r2, [pc, #40]	; (8008d0c <CDC_Control_FS+0x158>)
 8008ce2:	7912      	ldrb	r2, [r2, #4]
 8008ce4:	701a      	strb	r2, [r3, #0]
       pbuf[5] = linecoding.paritytype;
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	3305      	adds	r3, #5
 8008cea:	4a08      	ldr	r2, [pc, #32]	; (8008d0c <CDC_Control_FS+0x158>)
 8008cec:	7952      	ldrb	r2, [r2, #5]
 8008cee:	701a      	strb	r2, [r3, #0]
       pbuf[6] = linecoding.datatype;
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	3306      	adds	r3, #6
 8008cf4:	4a05      	ldr	r2, [pc, #20]	; (8008d0c <CDC_Control_FS+0x158>)
 8008cf6:	7992      	ldrb	r2, [r2, #6]
 8008cf8:	701a      	strb	r2, [r3, #0]

       /* Add your code here */
       break;
 8008cfa:	e000      	b.n	8008cfe <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008cfc:	bf00      	nop
  }

  return (USBD_OK);
 8008cfe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	370c      	adds	r7, #12
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr
 8008d0c:	2000011c 	.word	0x2000011c

08008d10 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008d1a:	6879      	ldr	r1, [r7, #4]
 8008d1c:	4805      	ldr	r0, [pc, #20]	; (8008d34 <CDC_Receive_FS+0x24>)
 8008d1e:	f7fe fd89 	bl	8007834 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008d22:	4804      	ldr	r0, [pc, #16]	; (8008d34 <CDC_Receive_FS+0x24>)
 8008d24:	f7fe fdca 	bl	80078bc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008d28:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3708      	adds	r7, #8
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	bf00      	nop
 8008d34:	20000738 	.word	0x20000738

08008d38 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b084      	sub	sp, #16
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	460b      	mov	r3, r1
 8008d42:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008d44:	2300      	movs	r3, #0
 8008d46:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008d48:	4b0d      	ldr	r3, [pc, #52]	; (8008d80 <CDC_Transmit_FS+0x48>)
 8008d4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d4e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d001      	beq.n	8008d5e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	e00b      	b.n	8008d76 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008d5e:	887b      	ldrh	r3, [r7, #2]
 8008d60:	461a      	mov	r2, r3
 8008d62:	6879      	ldr	r1, [r7, #4]
 8008d64:	4806      	ldr	r0, [pc, #24]	; (8008d80 <CDC_Transmit_FS+0x48>)
 8008d66:	f7fe fd4c 	bl	8007802 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008d6a:	4805      	ldr	r0, [pc, #20]	; (8008d80 <CDC_Transmit_FS+0x48>)
 8008d6c:	f7fe fd76 	bl	800785c <USBD_CDC_TransmitPacket>
 8008d70:	4603      	mov	r3, r0
 8008d72:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3710      	adds	r7, #16
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	20000738 	.word	0x20000738

08008d84 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b087      	sub	sp, #28
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	60f8      	str	r0, [r7, #12]
 8008d8c:	60b9      	str	r1, [r7, #8]
 8008d8e:	4613      	mov	r3, r2
 8008d90:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008d92:	2300      	movs	r3, #0
 8008d94:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008d96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	371c      	adds	r7, #28
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr
	...

08008da8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b083      	sub	sp, #12
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	4603      	mov	r3, r0
 8008db0:	6039      	str	r1, [r7, #0]
 8008db2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	2212      	movs	r2, #18
 8008db8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008dba:	4b03      	ldr	r3, [pc, #12]	; (8008dc8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	370c      	adds	r7, #12
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr
 8008dc8:	20000154 	.word	0x20000154

08008dcc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b083      	sub	sp, #12
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	6039      	str	r1, [r7, #0]
 8008dd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	2204      	movs	r2, #4
 8008ddc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008dde:	4b03      	ldr	r3, [pc, #12]	; (8008dec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	370c      	adds	r7, #12
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr
 8008dec:	20000168 	.word	0x20000168

08008df0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	4603      	mov	r3, r0
 8008df8:	6039      	str	r1, [r7, #0]
 8008dfa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008dfc:	79fb      	ldrb	r3, [r7, #7]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d105      	bne.n	8008e0e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008e02:	683a      	ldr	r2, [r7, #0]
 8008e04:	4907      	ldr	r1, [pc, #28]	; (8008e24 <USBD_FS_ProductStrDescriptor+0x34>)
 8008e06:	4808      	ldr	r0, [pc, #32]	; (8008e28 <USBD_FS_ProductStrDescriptor+0x38>)
 8008e08:	f7ff fda7 	bl	800895a <USBD_GetString>
 8008e0c:	e004      	b.n	8008e18 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008e0e:	683a      	ldr	r2, [r7, #0]
 8008e10:	4904      	ldr	r1, [pc, #16]	; (8008e24 <USBD_FS_ProductStrDescriptor+0x34>)
 8008e12:	4805      	ldr	r0, [pc, #20]	; (8008e28 <USBD_FS_ProductStrDescriptor+0x38>)
 8008e14:	f7ff fda1 	bl	800895a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e18:	4b02      	ldr	r3, [pc, #8]	; (8008e24 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3708      	adds	r7, #8
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop
 8008e24:	20001a08 	.word	0x20001a08
 8008e28:	08009830 	.word	0x08009830

08008e2c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b082      	sub	sp, #8
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	4603      	mov	r3, r0
 8008e34:	6039      	str	r1, [r7, #0]
 8008e36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008e38:	683a      	ldr	r2, [r7, #0]
 8008e3a:	4904      	ldr	r1, [pc, #16]	; (8008e4c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008e3c:	4804      	ldr	r0, [pc, #16]	; (8008e50 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008e3e:	f7ff fd8c 	bl	800895a <USBD_GetString>
  return USBD_StrDesc;
 8008e42:	4b02      	ldr	r3, [pc, #8]	; (8008e4c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3708      	adds	r7, #8
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}
 8008e4c:	20001a08 	.word	0x20001a08
 8008e50:	08009830 	.word	0x08009830

08008e54 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b082      	sub	sp, #8
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	6039      	str	r1, [r7, #0]
 8008e5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	221a      	movs	r2, #26
 8008e64:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008e66:	f000 f843 	bl	8008ef0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008e6a:	4b02      	ldr	r3, [pc, #8]	; (8008e74 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3708      	adds	r7, #8
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}
 8008e74:	2000016c 	.word	0x2000016c

08008e78 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	4603      	mov	r3, r0
 8008e80:	6039      	str	r1, [r7, #0]
 8008e82:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008e84:	79fb      	ldrb	r3, [r7, #7]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d105      	bne.n	8008e96 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e8a:	683a      	ldr	r2, [r7, #0]
 8008e8c:	4907      	ldr	r1, [pc, #28]	; (8008eac <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e8e:	4808      	ldr	r0, [pc, #32]	; (8008eb0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e90:	f7ff fd63 	bl	800895a <USBD_GetString>
 8008e94:	e004      	b.n	8008ea0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e96:	683a      	ldr	r2, [r7, #0]
 8008e98:	4904      	ldr	r1, [pc, #16]	; (8008eac <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e9a:	4805      	ldr	r0, [pc, #20]	; (8008eb0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e9c:	f7ff fd5d 	bl	800895a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ea0:	4b02      	ldr	r3, [pc, #8]	; (8008eac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3708      	adds	r7, #8
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}
 8008eaa:	bf00      	nop
 8008eac:	20001a08 	.word	0x20001a08
 8008eb0:	0800983c 	.word	0x0800983c

08008eb4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b082      	sub	sp, #8
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	4603      	mov	r3, r0
 8008ebc:	6039      	str	r1, [r7, #0]
 8008ebe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ec0:	79fb      	ldrb	r3, [r7, #7]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d105      	bne.n	8008ed2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008ec6:	683a      	ldr	r2, [r7, #0]
 8008ec8:	4907      	ldr	r1, [pc, #28]	; (8008ee8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008eca:	4808      	ldr	r0, [pc, #32]	; (8008eec <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008ecc:	f7ff fd45 	bl	800895a <USBD_GetString>
 8008ed0:	e004      	b.n	8008edc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008ed2:	683a      	ldr	r2, [r7, #0]
 8008ed4:	4904      	ldr	r1, [pc, #16]	; (8008ee8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008ed6:	4805      	ldr	r0, [pc, #20]	; (8008eec <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008ed8:	f7ff fd3f 	bl	800895a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008edc:	4b02      	ldr	r3, [pc, #8]	; (8008ee8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3708      	adds	r7, #8
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
 8008ee6:	bf00      	nop
 8008ee8:	20001a08 	.word	0x20001a08
 8008eec:	08009848 	.word	0x08009848

08008ef0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b084      	sub	sp, #16
 8008ef4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008ef6:	4b0f      	ldr	r3, [pc, #60]	; (8008f34 <Get_SerialNum+0x44>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008efc:	4b0e      	ldr	r3, [pc, #56]	; (8008f38 <Get_SerialNum+0x48>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008f02:	4b0e      	ldr	r3, [pc, #56]	; (8008f3c <Get_SerialNum+0x4c>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008f08:	68fa      	ldr	r2, [r7, #12]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	4413      	add	r3, r2
 8008f0e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d009      	beq.n	8008f2a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008f16:	2208      	movs	r2, #8
 8008f18:	4909      	ldr	r1, [pc, #36]	; (8008f40 <Get_SerialNum+0x50>)
 8008f1a:	68f8      	ldr	r0, [r7, #12]
 8008f1c:	f000 f814 	bl	8008f48 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008f20:	2204      	movs	r2, #4
 8008f22:	4908      	ldr	r1, [pc, #32]	; (8008f44 <Get_SerialNum+0x54>)
 8008f24:	68b8      	ldr	r0, [r7, #8]
 8008f26:	f000 f80f 	bl	8008f48 <IntToUnicode>
  }
}
 8008f2a:	bf00      	nop
 8008f2c:	3710      	adds	r7, #16
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	1fff7a10 	.word	0x1fff7a10
 8008f38:	1fff7a14 	.word	0x1fff7a14
 8008f3c:	1fff7a18 	.word	0x1fff7a18
 8008f40:	2000016e 	.word	0x2000016e
 8008f44:	2000017e 	.word	0x2000017e

08008f48 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b087      	sub	sp, #28
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	60b9      	str	r1, [r7, #8]
 8008f52:	4613      	mov	r3, r2
 8008f54:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008f56:	2300      	movs	r3, #0
 8008f58:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	75fb      	strb	r3, [r7, #23]
 8008f5e:	e027      	b.n	8008fb0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	0f1b      	lsrs	r3, r3, #28
 8008f64:	2b09      	cmp	r3, #9
 8008f66:	d80b      	bhi.n	8008f80 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	0f1b      	lsrs	r3, r3, #28
 8008f6c:	b2da      	uxtb	r2, r3
 8008f6e:	7dfb      	ldrb	r3, [r7, #23]
 8008f70:	005b      	lsls	r3, r3, #1
 8008f72:	4619      	mov	r1, r3
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	440b      	add	r3, r1
 8008f78:	3230      	adds	r2, #48	; 0x30
 8008f7a:	b2d2      	uxtb	r2, r2
 8008f7c:	701a      	strb	r2, [r3, #0]
 8008f7e:	e00a      	b.n	8008f96 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	0f1b      	lsrs	r3, r3, #28
 8008f84:	b2da      	uxtb	r2, r3
 8008f86:	7dfb      	ldrb	r3, [r7, #23]
 8008f88:	005b      	lsls	r3, r3, #1
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	440b      	add	r3, r1
 8008f90:	3237      	adds	r2, #55	; 0x37
 8008f92:	b2d2      	uxtb	r2, r2
 8008f94:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	011b      	lsls	r3, r3, #4
 8008f9a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008f9c:	7dfb      	ldrb	r3, [r7, #23]
 8008f9e:	005b      	lsls	r3, r3, #1
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	68ba      	ldr	r2, [r7, #8]
 8008fa4:	4413      	add	r3, r2
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008faa:	7dfb      	ldrb	r3, [r7, #23]
 8008fac:	3301      	adds	r3, #1
 8008fae:	75fb      	strb	r3, [r7, #23]
 8008fb0:	7dfa      	ldrb	r2, [r7, #23]
 8008fb2:	79fb      	ldrb	r3, [r7, #7]
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d3d3      	bcc.n	8008f60 <IntToUnicode+0x18>
  }
}
 8008fb8:	bf00      	nop
 8008fba:	371c      	adds	r7, #28
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr

08008fc4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b08a      	sub	sp, #40	; 0x28
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008fcc:	f107 0314 	add.w	r3, r7, #20
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	601a      	str	r2, [r3, #0]
 8008fd4:	605a      	str	r2, [r3, #4]
 8008fd6:	609a      	str	r2, [r3, #8]
 8008fd8:	60da      	str	r2, [r3, #12]
 8008fda:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008fe4:	d169      	bne.n	80090ba <HAL_PCD_MspInit+0xf6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	613b      	str	r3, [r7, #16]
 8008fea:	4b36      	ldr	r3, [pc, #216]	; (80090c4 <HAL_PCD_MspInit+0x100>)
 8008fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fee:	4a35      	ldr	r2, [pc, #212]	; (80090c4 <HAL_PCD_MspInit+0x100>)
 8008ff0:	f043 0301 	orr.w	r3, r3, #1
 8008ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8008ff6:	4b33      	ldr	r3, [pc, #204]	; (80090c4 <HAL_PCD_MspInit+0x100>)
 8008ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ffa:	f003 0301 	and.w	r3, r3, #1
 8008ffe:	613b      	str	r3, [r7, #16]
 8009000:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009002:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009006:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009008:	2300      	movs	r3, #0
 800900a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800900c:	2300      	movs	r3, #0
 800900e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009010:	f107 0314 	add.w	r3, r7, #20
 8009014:	4619      	mov	r1, r3
 8009016:	482c      	ldr	r0, [pc, #176]	; (80090c8 <HAL_PCD_MspInit+0x104>)
 8009018:	f7f9 fee2 	bl	8002de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800901c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009020:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009022:	2302      	movs	r3, #2
 8009024:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009026:	2300      	movs	r3, #0
 8009028:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800902a:	2303      	movs	r3, #3
 800902c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800902e:	230a      	movs	r3, #10
 8009030:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009032:	f107 0314 	add.w	r3, r7, #20
 8009036:	4619      	mov	r1, r3
 8009038:	4823      	ldr	r0, [pc, #140]	; (80090c8 <HAL_PCD_MspInit+0x104>)
 800903a:	f7f9 fed1 	bl	8002de0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800903e:	4b21      	ldr	r3, [pc, #132]	; (80090c4 <HAL_PCD_MspInit+0x100>)
 8009040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009042:	4a20      	ldr	r2, [pc, #128]	; (80090c4 <HAL_PCD_MspInit+0x100>)
 8009044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009048:	6353      	str	r3, [r2, #52]	; 0x34
 800904a:	2300      	movs	r3, #0
 800904c:	60fb      	str	r3, [r7, #12]
 800904e:	4b1d      	ldr	r3, [pc, #116]	; (80090c4 <HAL_PCD_MspInit+0x100>)
 8009050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009052:	4a1c      	ldr	r2, [pc, #112]	; (80090c4 <HAL_PCD_MspInit+0x100>)
 8009054:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009058:	6453      	str	r3, [r2, #68]	; 0x44
 800905a:	4b1a      	ldr	r3, [pc, #104]	; (80090c4 <HAL_PCD_MspInit+0x100>)
 800905c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800905e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009062:	60fb      	str	r3, [r7, #12]
 8009064:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009066:	2200      	movs	r2, #0
 8009068:	2100      	movs	r1, #0
 800906a:	2043      	movs	r0, #67	; 0x43
 800906c:	f7f9 f9ad 	bl	80023ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009070:	2043      	movs	r0, #67	; 0x43
 8009072:	f7f9 f9c6 	bl	8002402 <HAL_NVIC_EnableIRQ>
    if(pcdHandle->Init.low_power_enable == 1)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6a1b      	ldr	r3, [r3, #32]
 800907a:	2b01      	cmp	r3, #1
 800907c:	d11d      	bne.n	80090ba <HAL_PCD_MspInit+0xf6>
    {
      /* Enable EXTI Line 18 for USB wakeup */
      __HAL_USB_OTG_FS_WAKEUP_EXTI_CLEAR_FLAG();
 800907e:	4b13      	ldr	r3, [pc, #76]	; (80090cc <HAL_PCD_MspInit+0x108>)
 8009080:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8009084:	615a      	str	r2, [r3, #20]
      __HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_RISING_EDGE();
 8009086:	4b11      	ldr	r3, [pc, #68]	; (80090cc <HAL_PCD_MspInit+0x108>)
 8009088:	68db      	ldr	r3, [r3, #12]
 800908a:	4a10      	ldr	r2, [pc, #64]	; (80090cc <HAL_PCD_MspInit+0x108>)
 800908c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009090:	60d3      	str	r3, [r2, #12]
 8009092:	4b0e      	ldr	r3, [pc, #56]	; (80090cc <HAL_PCD_MspInit+0x108>)
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	4a0d      	ldr	r2, [pc, #52]	; (80090cc <HAL_PCD_MspInit+0x108>)
 8009098:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800909c:	6093      	str	r3, [r2, #8]
      __HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_IT();
 800909e:	4b0b      	ldr	r3, [pc, #44]	; (80090cc <HAL_PCD_MspInit+0x108>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4a0a      	ldr	r2, [pc, #40]	; (80090cc <HAL_PCD_MspInit+0x108>)
 80090a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80090a8:	6013      	str	r3, [r2, #0]
      HAL_NVIC_SetPriority(OTG_FS_WKUP_IRQn, 0, 0);
 80090aa:	2200      	movs	r2, #0
 80090ac:	2100      	movs	r1, #0
 80090ae:	202a      	movs	r0, #42	; 0x2a
 80090b0:	f7f9 f98b 	bl	80023ca <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(OTG_FS_WKUP_IRQn);
 80090b4:	202a      	movs	r0, #42	; 0x2a
 80090b6:	f7f9 f9a4 	bl	8002402 <HAL_NVIC_EnableIRQ>
    }
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80090ba:	bf00      	nop
 80090bc:	3728      	adds	r7, #40	; 0x28
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop
 80090c4:	40023800 	.word	0x40023800
 80090c8:	40020000 	.word	0x40020000
 80090cc:	40013c00 	.word	0x40013c00

080090d0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80090e4:	4619      	mov	r1, r3
 80090e6:	4610      	mov	r0, r2
 80090e8:	f7fe fcb4 	bl	8007a54 <USBD_LL_SetupStage>
}
 80090ec:	bf00      	nop
 80090ee:	3708      	adds	r7, #8
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	460b      	mov	r3, r1
 80090fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009106:	78fa      	ldrb	r2, [r7, #3]
 8009108:	6879      	ldr	r1, [r7, #4]
 800910a:	4613      	mov	r3, r2
 800910c:	00db      	lsls	r3, r3, #3
 800910e:	1a9b      	subs	r3, r3, r2
 8009110:	009b      	lsls	r3, r3, #2
 8009112:	440b      	add	r3, r1
 8009114:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009118:	681a      	ldr	r2, [r3, #0]
 800911a:	78fb      	ldrb	r3, [r7, #3]
 800911c:	4619      	mov	r1, r3
 800911e:	f7fe fcec 	bl	8007afa <USBD_LL_DataOutStage>
}
 8009122:	bf00      	nop
 8009124:	3708      	adds	r7, #8
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}

0800912a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800912a:	b580      	push	{r7, lr}
 800912c:	b082      	sub	sp, #8
 800912e:	af00      	add	r7, sp, #0
 8009130:	6078      	str	r0, [r7, #4]
 8009132:	460b      	mov	r3, r1
 8009134:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800913c:	78fa      	ldrb	r2, [r7, #3]
 800913e:	6879      	ldr	r1, [r7, #4]
 8009140:	4613      	mov	r3, r2
 8009142:	00db      	lsls	r3, r3, #3
 8009144:	1a9b      	subs	r3, r3, r2
 8009146:	009b      	lsls	r3, r3, #2
 8009148:	440b      	add	r3, r1
 800914a:	3348      	adds	r3, #72	; 0x48
 800914c:	681a      	ldr	r2, [r3, #0]
 800914e:	78fb      	ldrb	r3, [r7, #3]
 8009150:	4619      	mov	r1, r3
 8009152:	f7fe fd35 	bl	8007bc0 <USBD_LL_DataInStage>
}
 8009156:	bf00      	nop
 8009158:	3708      	adds	r7, #8
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}

0800915e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800915e:	b580      	push	{r7, lr}
 8009160:	b082      	sub	sp, #8
 8009162:	af00      	add	r7, sp, #0
 8009164:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800916c:	4618      	mov	r0, r3
 800916e:	f7fe fe39 	bl	8007de4 <USBD_LL_SOF>
}
 8009172:	bf00      	nop
 8009174:	3708      	adds	r7, #8
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}

0800917a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800917a:	b580      	push	{r7, lr}
 800917c:	b084      	sub	sp, #16
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009182:	2301      	movs	r3, #1
 8009184:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	68db      	ldr	r3, [r3, #12]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d102      	bne.n	8009194 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800918e:	2300      	movs	r3, #0
 8009190:	73fb      	strb	r3, [r7, #15]
 8009192:	e008      	b.n	80091a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	68db      	ldr	r3, [r3, #12]
 8009198:	2b02      	cmp	r3, #2
 800919a:	d102      	bne.n	80091a2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800919c:	2301      	movs	r3, #1
 800919e:	73fb      	strb	r3, [r7, #15]
 80091a0:	e001      	b.n	80091a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80091a2:	f7f8 f94f 	bl	8001444 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80091ac:	7bfa      	ldrb	r2, [r7, #15]
 80091ae:	4611      	mov	r1, r2
 80091b0:	4618      	mov	r0, r3
 80091b2:	f7fe fddc 	bl	8007d6e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80091bc:	4618      	mov	r0, r3
 80091be:	f7fe fd95 	bl	8007cec <USBD_LL_Reset>
}
 80091c2:	bf00      	nop
 80091c4:	3710      	adds	r7, #16
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}
	...

080091cc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b082      	sub	sp, #8
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80091da:	4618      	mov	r0, r3
 80091dc:	f7fe fdd7 	bl	8007d8e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	687a      	ldr	r2, [r7, #4]
 80091ec:	6812      	ldr	r2, [r2, #0]
 80091ee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80091f2:	f043 0301 	orr.w	r3, r3, #1
 80091f6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6a1b      	ldr	r3, [r3, #32]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d005      	beq.n	800920c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009200:	4b04      	ldr	r3, [pc, #16]	; (8009214 <HAL_PCD_SuspendCallback+0x48>)
 8009202:	691b      	ldr	r3, [r3, #16]
 8009204:	4a03      	ldr	r2, [pc, #12]	; (8009214 <HAL_PCD_SuspendCallback+0x48>)
 8009206:	f043 0306 	orr.w	r3, r3, #6
 800920a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800920c:	bf00      	nop
 800920e:	3708      	adds	r7, #8
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}
 8009214:	e000ed00 	.word	0xe000ed00

08009218 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b082      	sub	sp, #8
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009226:	4618      	mov	r0, r3
 8009228:	f7fe fdc6 	bl	8007db8 <USBD_LL_Resume>
}
 800922c:	bf00      	nop
 800922e:	3708      	adds	r7, #8
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b082      	sub	sp, #8
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	460b      	mov	r3, r1
 800923e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009246:	78fa      	ldrb	r2, [r7, #3]
 8009248:	4611      	mov	r1, r2
 800924a:	4618      	mov	r0, r3
 800924c:	f7fe fdf1 	bl	8007e32 <USBD_LL_IsoOUTIncomplete>
}
 8009250:	bf00      	nop
 8009252:	3708      	adds	r7, #8
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	460b      	mov	r3, r1
 8009262:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800926a:	78fa      	ldrb	r2, [r7, #3]
 800926c:	4611      	mov	r1, r2
 800926e:	4618      	mov	r0, r3
 8009270:	f7fe fdd2 	bl	8007e18 <USBD_LL_IsoINIncomplete>
}
 8009274:	bf00      	nop
 8009276:	3708      	adds	r7, #8
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}

0800927c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b082      	sub	sp, #8
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800928a:	4618      	mov	r0, r3
 800928c:	f7fe fdde 	bl	8007e4c <USBD_LL_DevConnected>
}
 8009290:	bf00      	nop
 8009292:	3708      	adds	r7, #8
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}

08009298 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b082      	sub	sp, #8
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80092a6:	4618      	mov	r0, r3
 80092a8:	f7fe fddb 	bl	8007e62 <USBD_LL_DevDisconnected>
}
 80092ac:	bf00      	nop
 80092ae:	3708      	adds	r7, #8
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}

080092b4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b082      	sub	sp, #8
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d13c      	bne.n	800933e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80092c4:	4a20      	ldr	r2, [pc, #128]	; (8009348 <USBD_LL_Init+0x94>)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	4a1e      	ldr	r2, [pc, #120]	; (8009348 <USBD_LL_Init+0x94>)
 80092d0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80092d4:	4b1c      	ldr	r3, [pc, #112]	; (8009348 <USBD_LL_Init+0x94>)
 80092d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80092da:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80092dc:	4b1a      	ldr	r3, [pc, #104]	; (8009348 <USBD_LL_Init+0x94>)
 80092de:	2204      	movs	r2, #4
 80092e0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80092e2:	4b19      	ldr	r3, [pc, #100]	; (8009348 <USBD_LL_Init+0x94>)
 80092e4:	2202      	movs	r2, #2
 80092e6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80092e8:	4b17      	ldr	r3, [pc, #92]	; (8009348 <USBD_LL_Init+0x94>)
 80092ea:	2200      	movs	r2, #0
 80092ec:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80092ee:	4b16      	ldr	r3, [pc, #88]	; (8009348 <USBD_LL_Init+0x94>)
 80092f0:	2202      	movs	r2, #2
 80092f2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80092f4:	4b14      	ldr	r3, [pc, #80]	; (8009348 <USBD_LL_Init+0x94>)
 80092f6:	2200      	movs	r2, #0
 80092f8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = ENABLE;
 80092fa:	4b13      	ldr	r3, [pc, #76]	; (8009348 <USBD_LL_Init+0x94>)
 80092fc:	2201      	movs	r2, #1
 80092fe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = ENABLE;
 8009300:	4b11      	ldr	r3, [pc, #68]	; (8009348 <USBD_LL_Init+0x94>)
 8009302:	2201      	movs	r2, #1
 8009304:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8009306:	4b10      	ldr	r3, [pc, #64]	; (8009348 <USBD_LL_Init+0x94>)
 8009308:	2201      	movs	r2, #1
 800930a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800930c:	4b0e      	ldr	r3, [pc, #56]	; (8009348 <USBD_LL_Init+0x94>)
 800930e:	2200      	movs	r2, #0
 8009310:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009312:	480d      	ldr	r0, [pc, #52]	; (8009348 <USBD_LL_Init+0x94>)
 8009314:	f7f9 ff17 	bl	8003146 <HAL_PCD_Init>
 8009318:	4603      	mov	r3, r0
 800931a:	2b00      	cmp	r3, #0
 800931c:	d001      	beq.n	8009322 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800931e:	f7f8 f891 	bl	8001444 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009322:	2180      	movs	r1, #128	; 0x80
 8009324:	4808      	ldr	r0, [pc, #32]	; (8009348 <USBD_LL_Init+0x94>)
 8009326:	f7fb f874 	bl	8004412 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800932a:	2240      	movs	r2, #64	; 0x40
 800932c:	2100      	movs	r1, #0
 800932e:	4806      	ldr	r0, [pc, #24]	; (8009348 <USBD_LL_Init+0x94>)
 8009330:	f7fb f828 	bl	8004384 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009334:	2280      	movs	r2, #128	; 0x80
 8009336:	2101      	movs	r1, #1
 8009338:	4803      	ldr	r0, [pc, #12]	; (8009348 <USBD_LL_Init+0x94>)
 800933a:	f7fb f823 	bl	8004384 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800933e:	2300      	movs	r3, #0
}
 8009340:	4618      	mov	r0, r3
 8009342:	3708      	adds	r7, #8
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}
 8009348:	20001c08 	.word	0x20001c08

0800934c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009354:	2300      	movs	r3, #0
 8009356:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009358:	2300      	movs	r3, #0
 800935a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009362:	4618      	mov	r0, r3
 8009364:	f7fa f80c 	bl	8003380 <HAL_PCD_Start>
 8009368:	4603      	mov	r3, r0
 800936a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800936c:	7bfb      	ldrb	r3, [r7, #15]
 800936e:	4618      	mov	r0, r3
 8009370:	f000 f92a 	bl	80095c8 <USBD_Get_USB_Status>
 8009374:	4603      	mov	r3, r0
 8009376:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009378:	7bbb      	ldrb	r3, [r7, #14]
}
 800937a:	4618      	mov	r0, r3
 800937c:	3710      	adds	r7, #16
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}

08009382 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009382:	b580      	push	{r7, lr}
 8009384:	b084      	sub	sp, #16
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
 800938a:	4608      	mov	r0, r1
 800938c:	4611      	mov	r1, r2
 800938e:	461a      	mov	r2, r3
 8009390:	4603      	mov	r3, r0
 8009392:	70fb      	strb	r3, [r7, #3]
 8009394:	460b      	mov	r3, r1
 8009396:	70bb      	strb	r3, [r7, #2]
 8009398:	4613      	mov	r3, r2
 800939a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800939c:	2300      	movs	r3, #0
 800939e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093a0:	2300      	movs	r3, #0
 80093a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80093aa:	78bb      	ldrb	r3, [r7, #2]
 80093ac:	883a      	ldrh	r2, [r7, #0]
 80093ae:	78f9      	ldrb	r1, [r7, #3]
 80093b0:	f7fa fbf0 	bl	8003b94 <HAL_PCD_EP_Open>
 80093b4:	4603      	mov	r3, r0
 80093b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093b8:	7bfb      	ldrb	r3, [r7, #15]
 80093ba:	4618      	mov	r0, r3
 80093bc:	f000 f904 	bl	80095c8 <USBD_Get_USB_Status>
 80093c0:	4603      	mov	r3, r0
 80093c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3710      	adds	r7, #16
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}

080093ce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093ce:	b580      	push	{r7, lr}
 80093d0:	b084      	sub	sp, #16
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	6078      	str	r0, [r7, #4]
 80093d6:	460b      	mov	r3, r1
 80093d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093da:	2300      	movs	r3, #0
 80093dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093de:	2300      	movs	r3, #0
 80093e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80093e8:	78fa      	ldrb	r2, [r7, #3]
 80093ea:	4611      	mov	r1, r2
 80093ec:	4618      	mov	r0, r3
 80093ee:	f7fa fc39 	bl	8003c64 <HAL_PCD_EP_Close>
 80093f2:	4603      	mov	r3, r0
 80093f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093f6:	7bfb      	ldrb	r3, [r7, #15]
 80093f8:	4618      	mov	r0, r3
 80093fa:	f000 f8e5 	bl	80095c8 <USBD_Get_USB_Status>
 80093fe:	4603      	mov	r3, r0
 8009400:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009402:	7bbb      	ldrb	r3, [r7, #14]
}
 8009404:	4618      	mov	r0, r3
 8009406:	3710      	adds	r7, #16
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	460b      	mov	r3, r1
 8009416:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009418:	2300      	movs	r3, #0
 800941a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800941c:	2300      	movs	r3, #0
 800941e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009426:	78fa      	ldrb	r2, [r7, #3]
 8009428:	4611      	mov	r1, r2
 800942a:	4618      	mov	r0, r3
 800942c:	f7fa fd11 	bl	8003e52 <HAL_PCD_EP_SetStall>
 8009430:	4603      	mov	r3, r0
 8009432:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009434:	7bfb      	ldrb	r3, [r7, #15]
 8009436:	4618      	mov	r0, r3
 8009438:	f000 f8c6 	bl	80095c8 <USBD_Get_USB_Status>
 800943c:	4603      	mov	r3, r0
 800943e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009440:	7bbb      	ldrb	r3, [r7, #14]
}
 8009442:	4618      	mov	r0, r3
 8009444:	3710      	adds	r7, #16
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}

0800944a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800944a:	b580      	push	{r7, lr}
 800944c:	b084      	sub	sp, #16
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
 8009452:	460b      	mov	r3, r1
 8009454:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009456:	2300      	movs	r3, #0
 8009458:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800945a:	2300      	movs	r3, #0
 800945c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009464:	78fa      	ldrb	r2, [r7, #3]
 8009466:	4611      	mov	r1, r2
 8009468:	4618      	mov	r0, r3
 800946a:	f7fa fd56 	bl	8003f1a <HAL_PCD_EP_ClrStall>
 800946e:	4603      	mov	r3, r0
 8009470:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009472:	7bfb      	ldrb	r3, [r7, #15]
 8009474:	4618      	mov	r0, r3
 8009476:	f000 f8a7 	bl	80095c8 <USBD_Get_USB_Status>
 800947a:	4603      	mov	r3, r0
 800947c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800947e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009480:	4618      	mov	r0, r3
 8009482:	3710      	adds	r7, #16
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}

08009488 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009488:	b480      	push	{r7}
 800948a:	b085      	sub	sp, #20
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
 8009490:	460b      	mov	r3, r1
 8009492:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800949a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800949c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	da0b      	bge.n	80094bc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80094a4:	78fb      	ldrb	r3, [r7, #3]
 80094a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094aa:	68f9      	ldr	r1, [r7, #12]
 80094ac:	4613      	mov	r3, r2
 80094ae:	00db      	lsls	r3, r3, #3
 80094b0:	1a9b      	subs	r3, r3, r2
 80094b2:	009b      	lsls	r3, r3, #2
 80094b4:	440b      	add	r3, r1
 80094b6:	333e      	adds	r3, #62	; 0x3e
 80094b8:	781b      	ldrb	r3, [r3, #0]
 80094ba:	e00b      	b.n	80094d4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80094bc:	78fb      	ldrb	r3, [r7, #3]
 80094be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094c2:	68f9      	ldr	r1, [r7, #12]
 80094c4:	4613      	mov	r3, r2
 80094c6:	00db      	lsls	r3, r3, #3
 80094c8:	1a9b      	subs	r3, r3, r2
 80094ca:	009b      	lsls	r3, r3, #2
 80094cc:	440b      	add	r3, r1
 80094ce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80094d2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3714      	adds	r7, #20
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b084      	sub	sp, #16
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	460b      	mov	r3, r1
 80094ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094ec:	2300      	movs	r3, #0
 80094ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094f0:	2300      	movs	r3, #0
 80094f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80094fa:	78fa      	ldrb	r2, [r7, #3]
 80094fc:	4611      	mov	r1, r2
 80094fe:	4618      	mov	r0, r3
 8009500:	f7fa fb23 	bl	8003b4a <HAL_PCD_SetAddress>
 8009504:	4603      	mov	r3, r0
 8009506:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009508:	7bfb      	ldrb	r3, [r7, #15]
 800950a:	4618      	mov	r0, r3
 800950c:	f000 f85c 	bl	80095c8 <USBD_Get_USB_Status>
 8009510:	4603      	mov	r3, r0
 8009512:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009514:	7bbb      	ldrb	r3, [r7, #14]
}
 8009516:	4618      	mov	r0, r3
 8009518:	3710      	adds	r7, #16
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}

0800951e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800951e:	b580      	push	{r7, lr}
 8009520:	b086      	sub	sp, #24
 8009522:	af00      	add	r7, sp, #0
 8009524:	60f8      	str	r0, [r7, #12]
 8009526:	607a      	str	r2, [r7, #4]
 8009528:	603b      	str	r3, [r7, #0]
 800952a:	460b      	mov	r3, r1
 800952c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800952e:	2300      	movs	r3, #0
 8009530:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009532:	2300      	movs	r3, #0
 8009534:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800953c:	7af9      	ldrb	r1, [r7, #11]
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	687a      	ldr	r2, [r7, #4]
 8009542:	f7fa fc3c 	bl	8003dbe <HAL_PCD_EP_Transmit>
 8009546:	4603      	mov	r3, r0
 8009548:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800954a:	7dfb      	ldrb	r3, [r7, #23]
 800954c:	4618      	mov	r0, r3
 800954e:	f000 f83b 	bl	80095c8 <USBD_Get_USB_Status>
 8009552:	4603      	mov	r3, r0
 8009554:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009556:	7dbb      	ldrb	r3, [r7, #22]
}
 8009558:	4618      	mov	r0, r3
 800955a:	3718      	adds	r7, #24
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b086      	sub	sp, #24
 8009564:	af00      	add	r7, sp, #0
 8009566:	60f8      	str	r0, [r7, #12]
 8009568:	607a      	str	r2, [r7, #4]
 800956a:	603b      	str	r3, [r7, #0]
 800956c:	460b      	mov	r3, r1
 800956e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009570:	2300      	movs	r3, #0
 8009572:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009574:	2300      	movs	r3, #0
 8009576:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800957e:	7af9      	ldrb	r1, [r7, #11]
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	687a      	ldr	r2, [r7, #4]
 8009584:	f7fa fbb8 	bl	8003cf8 <HAL_PCD_EP_Receive>
 8009588:	4603      	mov	r3, r0
 800958a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800958c:	7dfb      	ldrb	r3, [r7, #23]
 800958e:	4618      	mov	r0, r3
 8009590:	f000 f81a 	bl	80095c8 <USBD_Get_USB_Status>
 8009594:	4603      	mov	r3, r0
 8009596:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009598:	7dbb      	ldrb	r3, [r7, #22]
}
 800959a:	4618      	mov	r0, r3
 800959c:	3718      	adds	r7, #24
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}

080095a2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095a2:	b580      	push	{r7, lr}
 80095a4:	b082      	sub	sp, #8
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	6078      	str	r0, [r7, #4]
 80095aa:	460b      	mov	r3, r1
 80095ac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80095b4:	78fa      	ldrb	r2, [r7, #3]
 80095b6:	4611      	mov	r1, r2
 80095b8:	4618      	mov	r0, r3
 80095ba:	f7fa fbe8 	bl	8003d8e <HAL_PCD_EP_GetRxCount>
 80095be:	4603      	mov	r3, r0
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3708      	adds	r7, #8
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b085      	sub	sp, #20
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	4603      	mov	r3, r0
 80095d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095d2:	2300      	movs	r3, #0
 80095d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80095d6:	79fb      	ldrb	r3, [r7, #7]
 80095d8:	2b03      	cmp	r3, #3
 80095da:	d817      	bhi.n	800960c <USBD_Get_USB_Status+0x44>
 80095dc:	a201      	add	r2, pc, #4	; (adr r2, 80095e4 <USBD_Get_USB_Status+0x1c>)
 80095de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095e2:	bf00      	nop
 80095e4:	080095f5 	.word	0x080095f5
 80095e8:	080095fb 	.word	0x080095fb
 80095ec:	08009601 	.word	0x08009601
 80095f0:	08009607 	.word	0x08009607
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80095f4:	2300      	movs	r3, #0
 80095f6:	73fb      	strb	r3, [r7, #15]
    break;
 80095f8:	e00b      	b.n	8009612 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80095fa:	2303      	movs	r3, #3
 80095fc:	73fb      	strb	r3, [r7, #15]
    break;
 80095fe:	e008      	b.n	8009612 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009600:	2301      	movs	r3, #1
 8009602:	73fb      	strb	r3, [r7, #15]
    break;
 8009604:	e005      	b.n	8009612 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009606:	2303      	movs	r3, #3
 8009608:	73fb      	strb	r3, [r7, #15]
    break;
 800960a:	e002      	b.n	8009612 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800960c:	2303      	movs	r3, #3
 800960e:	73fb      	strb	r3, [r7, #15]
    break;
 8009610:	bf00      	nop
  }
  return usb_status;
 8009612:	7bfb      	ldrb	r3, [r7, #15]
}
 8009614:	4618      	mov	r0, r3
 8009616:	3714      	adds	r7, #20
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr

08009620 <__errno>:
 8009620:	4b01      	ldr	r3, [pc, #4]	; (8009628 <__errno+0x8>)
 8009622:	6818      	ldr	r0, [r3, #0]
 8009624:	4770      	bx	lr
 8009626:	bf00      	nop
 8009628:	20000188 	.word	0x20000188

0800962c <__libc_init_array>:
 800962c:	b570      	push	{r4, r5, r6, lr}
 800962e:	4e0d      	ldr	r6, [pc, #52]	; (8009664 <__libc_init_array+0x38>)
 8009630:	4c0d      	ldr	r4, [pc, #52]	; (8009668 <__libc_init_array+0x3c>)
 8009632:	1ba4      	subs	r4, r4, r6
 8009634:	10a4      	asrs	r4, r4, #2
 8009636:	2500      	movs	r5, #0
 8009638:	42a5      	cmp	r5, r4
 800963a:	d109      	bne.n	8009650 <__libc_init_array+0x24>
 800963c:	4e0b      	ldr	r6, [pc, #44]	; (800966c <__libc_init_array+0x40>)
 800963e:	4c0c      	ldr	r4, [pc, #48]	; (8009670 <__libc_init_array+0x44>)
 8009640:	f000 f8ea 	bl	8009818 <_init>
 8009644:	1ba4      	subs	r4, r4, r6
 8009646:	10a4      	asrs	r4, r4, #2
 8009648:	2500      	movs	r5, #0
 800964a:	42a5      	cmp	r5, r4
 800964c:	d105      	bne.n	800965a <__libc_init_array+0x2e>
 800964e:	bd70      	pop	{r4, r5, r6, pc}
 8009650:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009654:	4798      	blx	r3
 8009656:	3501      	adds	r5, #1
 8009658:	e7ee      	b.n	8009638 <__libc_init_array+0xc>
 800965a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800965e:	4798      	blx	r3
 8009660:	3501      	adds	r5, #1
 8009662:	e7f2      	b.n	800964a <__libc_init_array+0x1e>
 8009664:	08009880 	.word	0x08009880
 8009668:	08009880 	.word	0x08009880
 800966c:	08009880 	.word	0x08009880
 8009670:	08009884 	.word	0x08009884

08009674 <malloc>:
 8009674:	4b02      	ldr	r3, [pc, #8]	; (8009680 <malloc+0xc>)
 8009676:	4601      	mov	r1, r0
 8009678:	6818      	ldr	r0, [r3, #0]
 800967a:	f000 b861 	b.w	8009740 <_malloc_r>
 800967e:	bf00      	nop
 8009680:	20000188 	.word	0x20000188

08009684 <free>:
 8009684:	4b02      	ldr	r3, [pc, #8]	; (8009690 <free+0xc>)
 8009686:	4601      	mov	r1, r0
 8009688:	6818      	ldr	r0, [r3, #0]
 800968a:	f000 b80b 	b.w	80096a4 <_free_r>
 800968e:	bf00      	nop
 8009690:	20000188 	.word	0x20000188

08009694 <memset>:
 8009694:	4402      	add	r2, r0
 8009696:	4603      	mov	r3, r0
 8009698:	4293      	cmp	r3, r2
 800969a:	d100      	bne.n	800969e <memset+0xa>
 800969c:	4770      	bx	lr
 800969e:	f803 1b01 	strb.w	r1, [r3], #1
 80096a2:	e7f9      	b.n	8009698 <memset+0x4>

080096a4 <_free_r>:
 80096a4:	b538      	push	{r3, r4, r5, lr}
 80096a6:	4605      	mov	r5, r0
 80096a8:	2900      	cmp	r1, #0
 80096aa:	d045      	beq.n	8009738 <_free_r+0x94>
 80096ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096b0:	1f0c      	subs	r4, r1, #4
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	bfb8      	it	lt
 80096b6:	18e4      	addlt	r4, r4, r3
 80096b8:	f000 f8ac 	bl	8009814 <__malloc_lock>
 80096bc:	4a1f      	ldr	r2, [pc, #124]	; (800973c <_free_r+0x98>)
 80096be:	6813      	ldr	r3, [r2, #0]
 80096c0:	4610      	mov	r0, r2
 80096c2:	b933      	cbnz	r3, 80096d2 <_free_r+0x2e>
 80096c4:	6063      	str	r3, [r4, #4]
 80096c6:	6014      	str	r4, [r2, #0]
 80096c8:	4628      	mov	r0, r5
 80096ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096ce:	f000 b8a2 	b.w	8009816 <__malloc_unlock>
 80096d2:	42a3      	cmp	r3, r4
 80096d4:	d90c      	bls.n	80096f0 <_free_r+0x4c>
 80096d6:	6821      	ldr	r1, [r4, #0]
 80096d8:	1862      	adds	r2, r4, r1
 80096da:	4293      	cmp	r3, r2
 80096dc:	bf04      	itt	eq
 80096de:	681a      	ldreq	r2, [r3, #0]
 80096e0:	685b      	ldreq	r3, [r3, #4]
 80096e2:	6063      	str	r3, [r4, #4]
 80096e4:	bf04      	itt	eq
 80096e6:	1852      	addeq	r2, r2, r1
 80096e8:	6022      	streq	r2, [r4, #0]
 80096ea:	6004      	str	r4, [r0, #0]
 80096ec:	e7ec      	b.n	80096c8 <_free_r+0x24>
 80096ee:	4613      	mov	r3, r2
 80096f0:	685a      	ldr	r2, [r3, #4]
 80096f2:	b10a      	cbz	r2, 80096f8 <_free_r+0x54>
 80096f4:	42a2      	cmp	r2, r4
 80096f6:	d9fa      	bls.n	80096ee <_free_r+0x4a>
 80096f8:	6819      	ldr	r1, [r3, #0]
 80096fa:	1858      	adds	r0, r3, r1
 80096fc:	42a0      	cmp	r0, r4
 80096fe:	d10b      	bne.n	8009718 <_free_r+0x74>
 8009700:	6820      	ldr	r0, [r4, #0]
 8009702:	4401      	add	r1, r0
 8009704:	1858      	adds	r0, r3, r1
 8009706:	4282      	cmp	r2, r0
 8009708:	6019      	str	r1, [r3, #0]
 800970a:	d1dd      	bne.n	80096c8 <_free_r+0x24>
 800970c:	6810      	ldr	r0, [r2, #0]
 800970e:	6852      	ldr	r2, [r2, #4]
 8009710:	605a      	str	r2, [r3, #4]
 8009712:	4401      	add	r1, r0
 8009714:	6019      	str	r1, [r3, #0]
 8009716:	e7d7      	b.n	80096c8 <_free_r+0x24>
 8009718:	d902      	bls.n	8009720 <_free_r+0x7c>
 800971a:	230c      	movs	r3, #12
 800971c:	602b      	str	r3, [r5, #0]
 800971e:	e7d3      	b.n	80096c8 <_free_r+0x24>
 8009720:	6820      	ldr	r0, [r4, #0]
 8009722:	1821      	adds	r1, r4, r0
 8009724:	428a      	cmp	r2, r1
 8009726:	bf04      	itt	eq
 8009728:	6811      	ldreq	r1, [r2, #0]
 800972a:	6852      	ldreq	r2, [r2, #4]
 800972c:	6062      	str	r2, [r4, #4]
 800972e:	bf04      	itt	eq
 8009730:	1809      	addeq	r1, r1, r0
 8009732:	6021      	streq	r1, [r4, #0]
 8009734:	605c      	str	r4, [r3, #4]
 8009736:	e7c7      	b.n	80096c8 <_free_r+0x24>
 8009738:	bd38      	pop	{r3, r4, r5, pc}
 800973a:	bf00      	nop
 800973c:	2000022c 	.word	0x2000022c

08009740 <_malloc_r>:
 8009740:	b570      	push	{r4, r5, r6, lr}
 8009742:	1ccd      	adds	r5, r1, #3
 8009744:	f025 0503 	bic.w	r5, r5, #3
 8009748:	3508      	adds	r5, #8
 800974a:	2d0c      	cmp	r5, #12
 800974c:	bf38      	it	cc
 800974e:	250c      	movcc	r5, #12
 8009750:	2d00      	cmp	r5, #0
 8009752:	4606      	mov	r6, r0
 8009754:	db01      	blt.n	800975a <_malloc_r+0x1a>
 8009756:	42a9      	cmp	r1, r5
 8009758:	d903      	bls.n	8009762 <_malloc_r+0x22>
 800975a:	230c      	movs	r3, #12
 800975c:	6033      	str	r3, [r6, #0]
 800975e:	2000      	movs	r0, #0
 8009760:	bd70      	pop	{r4, r5, r6, pc}
 8009762:	f000 f857 	bl	8009814 <__malloc_lock>
 8009766:	4a21      	ldr	r2, [pc, #132]	; (80097ec <_malloc_r+0xac>)
 8009768:	6814      	ldr	r4, [r2, #0]
 800976a:	4621      	mov	r1, r4
 800976c:	b991      	cbnz	r1, 8009794 <_malloc_r+0x54>
 800976e:	4c20      	ldr	r4, [pc, #128]	; (80097f0 <_malloc_r+0xb0>)
 8009770:	6823      	ldr	r3, [r4, #0]
 8009772:	b91b      	cbnz	r3, 800977c <_malloc_r+0x3c>
 8009774:	4630      	mov	r0, r6
 8009776:	f000 f83d 	bl	80097f4 <_sbrk_r>
 800977a:	6020      	str	r0, [r4, #0]
 800977c:	4629      	mov	r1, r5
 800977e:	4630      	mov	r0, r6
 8009780:	f000 f838 	bl	80097f4 <_sbrk_r>
 8009784:	1c43      	adds	r3, r0, #1
 8009786:	d124      	bne.n	80097d2 <_malloc_r+0x92>
 8009788:	230c      	movs	r3, #12
 800978a:	6033      	str	r3, [r6, #0]
 800978c:	4630      	mov	r0, r6
 800978e:	f000 f842 	bl	8009816 <__malloc_unlock>
 8009792:	e7e4      	b.n	800975e <_malloc_r+0x1e>
 8009794:	680b      	ldr	r3, [r1, #0]
 8009796:	1b5b      	subs	r3, r3, r5
 8009798:	d418      	bmi.n	80097cc <_malloc_r+0x8c>
 800979a:	2b0b      	cmp	r3, #11
 800979c:	d90f      	bls.n	80097be <_malloc_r+0x7e>
 800979e:	600b      	str	r3, [r1, #0]
 80097a0:	50cd      	str	r5, [r1, r3]
 80097a2:	18cc      	adds	r4, r1, r3
 80097a4:	4630      	mov	r0, r6
 80097a6:	f000 f836 	bl	8009816 <__malloc_unlock>
 80097aa:	f104 000b 	add.w	r0, r4, #11
 80097ae:	1d23      	adds	r3, r4, #4
 80097b0:	f020 0007 	bic.w	r0, r0, #7
 80097b4:	1ac3      	subs	r3, r0, r3
 80097b6:	d0d3      	beq.n	8009760 <_malloc_r+0x20>
 80097b8:	425a      	negs	r2, r3
 80097ba:	50e2      	str	r2, [r4, r3]
 80097bc:	e7d0      	b.n	8009760 <_malloc_r+0x20>
 80097be:	428c      	cmp	r4, r1
 80097c0:	684b      	ldr	r3, [r1, #4]
 80097c2:	bf16      	itet	ne
 80097c4:	6063      	strne	r3, [r4, #4]
 80097c6:	6013      	streq	r3, [r2, #0]
 80097c8:	460c      	movne	r4, r1
 80097ca:	e7eb      	b.n	80097a4 <_malloc_r+0x64>
 80097cc:	460c      	mov	r4, r1
 80097ce:	6849      	ldr	r1, [r1, #4]
 80097d0:	e7cc      	b.n	800976c <_malloc_r+0x2c>
 80097d2:	1cc4      	adds	r4, r0, #3
 80097d4:	f024 0403 	bic.w	r4, r4, #3
 80097d8:	42a0      	cmp	r0, r4
 80097da:	d005      	beq.n	80097e8 <_malloc_r+0xa8>
 80097dc:	1a21      	subs	r1, r4, r0
 80097de:	4630      	mov	r0, r6
 80097e0:	f000 f808 	bl	80097f4 <_sbrk_r>
 80097e4:	3001      	adds	r0, #1
 80097e6:	d0cf      	beq.n	8009788 <_malloc_r+0x48>
 80097e8:	6025      	str	r5, [r4, #0]
 80097ea:	e7db      	b.n	80097a4 <_malloc_r+0x64>
 80097ec:	2000022c 	.word	0x2000022c
 80097f0:	20000230 	.word	0x20000230

080097f4 <_sbrk_r>:
 80097f4:	b538      	push	{r3, r4, r5, lr}
 80097f6:	4c06      	ldr	r4, [pc, #24]	; (8009810 <_sbrk_r+0x1c>)
 80097f8:	2300      	movs	r3, #0
 80097fa:	4605      	mov	r5, r0
 80097fc:	4608      	mov	r0, r1
 80097fe:	6023      	str	r3, [r4, #0]
 8009800:	f7f8 f81e 	bl	8001840 <_sbrk>
 8009804:	1c43      	adds	r3, r0, #1
 8009806:	d102      	bne.n	800980e <_sbrk_r+0x1a>
 8009808:	6823      	ldr	r3, [r4, #0]
 800980a:	b103      	cbz	r3, 800980e <_sbrk_r+0x1a>
 800980c:	602b      	str	r3, [r5, #0]
 800980e:	bd38      	pop	{r3, r4, r5, pc}
 8009810:	20002010 	.word	0x20002010

08009814 <__malloc_lock>:
 8009814:	4770      	bx	lr

08009816 <__malloc_unlock>:
 8009816:	4770      	bx	lr

08009818 <_init>:
 8009818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800981a:	bf00      	nop
 800981c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800981e:	bc08      	pop	{r3}
 8009820:	469e      	mov	lr, r3
 8009822:	4770      	bx	lr

08009824 <_fini>:
 8009824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009826:	bf00      	nop
 8009828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800982a:	bc08      	pop	{r3}
 800982c:	469e      	mov	lr, r3
 800982e:	4770      	bx	lr
