
ScopeUSB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f48  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080080d0  080080d0  000180d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008118  08008118  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  08008118  08008118  00018118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008120  08008120  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008120  08008120  00018120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008124  08008124  00018124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08008128  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bb8  200001ec  08008314  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00001504  20001da4  08008314  00021da4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015ca5  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003224  00000000  00000000  00035ec1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ea8  00000000  00000000  000390e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d30  00000000  00000000  00039f90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023ec5  00000000  00000000  0003acc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ee39  00000000  00000000  0005eb85  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000caf52  00000000  00000000  0006d9be  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00138910  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ca4  00000000  00000000  0013898c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001ec 	.word	0x200001ec
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080080b8 	.word	0x080080b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001f0 	.word	0x200001f0
 80001c4:	080080b8 	.word	0x080080b8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_ADC_ConvCpltCallback>:
 DataADC value=0;

 uint16_t count=0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	 //HAL_ADC_Stop_DMA(&hadc1);

	 CDC_Transmit_FS((DataADC*)data, pkgSize*sizeof(DataADC));
 80004d0:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 80004d4:	4803      	ldr	r0, [pc, #12]	; (80004e4 <HAL_ADC_ConvCpltCallback+0x1c>)
 80004d6:	f007 f87f 	bl	80075d8 <CDC_Transmit_FS>
//		count++;
//	}

	//HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&data,pkgSize);

}
 80004da:	bf00      	nop
 80004dc:	3708      	adds	r7, #8
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	200002c0 	.word	0x200002c0

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ee:	f000 fbd3 	bl	8000c98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f2:	f000 f823 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f6:	f000 f927 	bl	8000748 <MX_GPIO_Init>
  MX_DMA_Init();
 80004fa:	f000 f905 	bl	8000708 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 80004fe:	f006 ff5d 	bl	80073bc <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000502:	f000 f885 	bl	8000610 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000506:	f000 f8d5 	bl	80006b4 <MX_USART2_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  for(uint32_t i=0;i<pkgSize;i++){
 800050a:	2300      	movs	r3, #0
 800050c:	607b      	str	r3, [r7, #4]
 800050e:	e007      	b.n	8000520 <main+0x38>
	  data[i]=0;
 8000510:	4a08      	ldr	r2, [pc, #32]	; (8000534 <main+0x4c>)
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	2100      	movs	r1, #0
 8000516:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(uint32_t i=0;i<pkgSize;i++){
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	3301      	adds	r3, #1
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2be0      	cmp	r3, #224	; 0xe0
 8000524:	d9f4      	bls.n	8000510 <main+0x28>
  }

  //HAL_ADC_Start_DMA(&hadc1, (uint16_t*)&value,1);
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&data,pkgSize);
 8000526:	22e1      	movs	r2, #225	; 0xe1
 8000528:	4902      	ldr	r1, [pc, #8]	; (8000534 <main+0x4c>)
 800052a:	4803      	ldr	r0, [pc, #12]	; (8000538 <main+0x50>)
 800052c:	f000 fc8c 	bl	8000e48 <HAL_ADC_Start_DMA>

  while (1)
 8000530:	e7fe      	b.n	8000530 <main+0x48>
 8000532:	bf00      	nop
 8000534:	200002c0 	.word	0x200002c0
 8000538:	20000218 	.word	0x20000218

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b094      	sub	sp, #80	; 0x50
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0320 	add.w	r3, r7, #32
 8000546:	2230      	movs	r2, #48	; 0x30
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f007 fcf2 	bl	8007f34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000560:	2300      	movs	r3, #0
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	4b28      	ldr	r3, [pc, #160]	; (8000608 <SystemClock_Config+0xcc>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	4a27      	ldr	r2, [pc, #156]	; (8000608 <SystemClock_Config+0xcc>)
 800056a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056e:	6413      	str	r3, [r2, #64]	; 0x40
 8000570:	4b25      	ldr	r3, [pc, #148]	; (8000608 <SystemClock_Config+0xcc>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800057c:	2300      	movs	r3, #0
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	4b22      	ldr	r3, [pc, #136]	; (800060c <SystemClock_Config+0xd0>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a21      	ldr	r2, [pc, #132]	; (800060c <SystemClock_Config+0xd0>)
 8000586:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800058a:	6013      	str	r3, [r2, #0]
 800058c:	4b1f      	ldr	r3, [pc, #124]	; (800060c <SystemClock_Config+0xd0>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000598:	2301      	movs	r3, #1
 800059a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800059c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a2:	2302      	movs	r3, #2
 80005a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005ac:	2304      	movs	r3, #4
 80005ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80005b0:	2390      	movs	r3, #144	; 0x90
 80005b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b4:	2302      	movs	r3, #2
 80005b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80005b8:	2306      	movs	r3, #6
 80005ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005bc:	f107 0320 	add.w	r3, r7, #32
 80005c0:	4618      	mov	r0, r3
 80005c2:	f002 ff9d 	bl	8003500 <HAL_RCC_OscConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005cc:	f000 f976 	bl	80008bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d0:	230f      	movs	r3, #15
 80005d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d4:	2302      	movs	r3, #2
 80005d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	2104      	movs	r1, #4
 80005ee:	4618      	mov	r0, r3
 80005f0:	f003 f9f6 	bl	80039e0 <HAL_RCC_ClockConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005fa:	f000 f95f 	bl	80008bc <Error_Handler>
  }
}
 80005fe:	bf00      	nop
 8000600:	3750      	adds	r7, #80	; 0x50
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40023800 	.word	0x40023800
 800060c:	40007000 	.word	0x40007000

08000610 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000616:	463b      	mov	r3, r7
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000622:	4b21      	ldr	r3, [pc, #132]	; (80006a8 <MX_ADC1_Init+0x98>)
 8000624:	4a21      	ldr	r2, [pc, #132]	; (80006ac <MX_ADC1_Init+0x9c>)
 8000626:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000628:	4b1f      	ldr	r3, [pc, #124]	; (80006a8 <MX_ADC1_Init+0x98>)
 800062a:	2200      	movs	r2, #0
 800062c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800062e:	4b1e      	ldr	r3, [pc, #120]	; (80006a8 <MX_ADC1_Init+0x98>)
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000634:	4b1c      	ldr	r3, [pc, #112]	; (80006a8 <MX_ADC1_Init+0x98>)
 8000636:	2200      	movs	r2, #0
 8000638:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800063a:	4b1b      	ldr	r3, [pc, #108]	; (80006a8 <MX_ADC1_Init+0x98>)
 800063c:	2201      	movs	r2, #1
 800063e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000640:	4b19      	ldr	r3, [pc, #100]	; (80006a8 <MX_ADC1_Init+0x98>)
 8000642:	2200      	movs	r2, #0
 8000644:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000648:	4b17      	ldr	r3, [pc, #92]	; (80006a8 <MX_ADC1_Init+0x98>)
 800064a:	2200      	movs	r2, #0
 800064c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800064e:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <MX_ADC1_Init+0x98>)
 8000650:	4a17      	ldr	r2, [pc, #92]	; (80006b0 <MX_ADC1_Init+0xa0>)
 8000652:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000654:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <MX_ADC1_Init+0x98>)
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800065a:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <MX_ADC1_Init+0x98>)
 800065c:	2201      	movs	r2, #1
 800065e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000660:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <MX_ADC1_Init+0x98>)
 8000662:	2201      	movs	r2, #1
 8000664:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000668:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <MX_ADC1_Init+0x98>)
 800066a:	2200      	movs	r2, #0
 800066c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800066e:	480e      	ldr	r0, [pc, #56]	; (80006a8 <MX_ADC1_Init+0x98>)
 8000670:	f000 fba6 	bl	8000dc0 <HAL_ADC_Init>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800067a:	f000 f91f 	bl	80008bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800067e:	2301      	movs	r3, #1
 8000680:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000682:	2301      	movs	r3, #1
 8000684:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000686:	2306      	movs	r3, #6
 8000688:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800068a:	463b      	mov	r3, r7
 800068c:	4619      	mov	r1, r3
 800068e:	4806      	ldr	r0, [pc, #24]	; (80006a8 <MX_ADC1_Init+0x98>)
 8000690:	f000 fce0 	bl	8001054 <HAL_ADC_ConfigChannel>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800069a:	f000 f90f 	bl	80008bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800069e:	bf00      	nop
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000218 	.word	0x20000218
 80006ac:	40012000 	.word	0x40012000
 80006b0:	0f000001 	.word	0x0f000001

080006b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006b8:	4b11      	ldr	r3, [pc, #68]	; (8000700 <MX_USART2_UART_Init+0x4c>)
 80006ba:	4a12      	ldr	r2, [pc, #72]	; (8000704 <MX_USART2_UART_Init+0x50>)
 80006bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006be:	4b10      	ldr	r3, [pc, #64]	; (8000700 <MX_USART2_UART_Init+0x4c>)
 80006c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <MX_USART2_UART_Init+0x4c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <MX_USART2_UART_Init+0x4c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006d2:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <MX_USART2_UART_Init+0x4c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006d8:	4b09      	ldr	r3, [pc, #36]	; (8000700 <MX_USART2_UART_Init+0x4c>)
 80006da:	220c      	movs	r2, #12
 80006dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006de:	4b08      	ldr	r3, [pc, #32]	; (8000700 <MX_USART2_UART_Init+0x4c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <MX_USART2_UART_Init+0x4c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ea:	4805      	ldr	r0, [pc, #20]	; (8000700 <MX_USART2_UART_Init+0x4c>)
 80006ec:	f003 fb6a 	bl	8003dc4 <HAL_UART_Init>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006f6:	f000 f8e1 	bl	80008bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000484 	.word	0x20000484
 8000704:	40004400 	.word	0x40004400

08000708 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <MX_DMA_Init+0x3c>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a0b      	ldr	r2, [pc, #44]	; (8000744 <MX_DMA_Init+0x3c>)
 8000718:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_DMA_Init+0x3c>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800072a:	2200      	movs	r2, #0
 800072c:	2100      	movs	r1, #0
 800072e:	2038      	movs	r0, #56	; 0x38
 8000730:	f001 f80b 	bl	800174a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000734:	2038      	movs	r0, #56	; 0x38
 8000736:	f001 f824 	bl	8001782 <HAL_NVIC_EnableIRQ>

}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40023800 	.word	0x40023800

08000748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08c      	sub	sp, #48	; 0x30
 800074c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	f107 031c 	add.w	r3, r7, #28
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	61bb      	str	r3, [r7, #24]
 8000762:	4b51      	ldr	r3, [pc, #324]	; (80008a8 <MX_GPIO_Init+0x160>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a50      	ldr	r2, [pc, #320]	; (80008a8 <MX_GPIO_Init+0x160>)
 8000768:	f043 0310 	orr.w	r3, r3, #16
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b4e      	ldr	r3, [pc, #312]	; (80008a8 <MX_GPIO_Init+0x160>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0310 	and.w	r3, r3, #16
 8000776:	61bb      	str	r3, [r7, #24]
 8000778:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
 800077e:	4b4a      	ldr	r3, [pc, #296]	; (80008a8 <MX_GPIO_Init+0x160>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a49      	ldr	r2, [pc, #292]	; (80008a8 <MX_GPIO_Init+0x160>)
 8000784:	f043 0304 	orr.w	r3, r3, #4
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b47      	ldr	r3, [pc, #284]	; (80008a8 <MX_GPIO_Init+0x160>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0304 	and.w	r3, r3, #4
 8000792:	617b      	str	r3, [r7, #20]
 8000794:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]
 800079a:	4b43      	ldr	r3, [pc, #268]	; (80008a8 <MX_GPIO_Init+0x160>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a42      	ldr	r2, [pc, #264]	; (80008a8 <MX_GPIO_Init+0x160>)
 80007a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b40      	ldr	r3, [pc, #256]	; (80008a8 <MX_GPIO_Init+0x160>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	4b3c      	ldr	r3, [pc, #240]	; (80008a8 <MX_GPIO_Init+0x160>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a3b      	ldr	r2, [pc, #236]	; (80008a8 <MX_GPIO_Init+0x160>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b39      	ldr	r3, [pc, #228]	; (80008a8 <MX_GPIO_Init+0x160>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	4b35      	ldr	r3, [pc, #212]	; (80008a8 <MX_GPIO_Init+0x160>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a34      	ldr	r2, [pc, #208]	; (80008a8 <MX_GPIO_Init+0x160>)
 80007d8:	f043 0302 	orr.w	r3, r3, #2
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b32      	ldr	r3, [pc, #200]	; (80008a8 <MX_GPIO_Init+0x160>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0302 	and.w	r3, r3, #2
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	4b2e      	ldr	r3, [pc, #184]	; (80008a8 <MX_GPIO_Init+0x160>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a2d      	ldr	r2, [pc, #180]	; (80008a8 <MX_GPIO_Init+0x160>)
 80007f4:	f043 0308 	orr.w	r3, r3, #8
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b2b      	ldr	r3, [pc, #172]	; (80008a8 <MX_GPIO_Init+0x160>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0308 	and.w	r3, r3, #8
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	2108      	movs	r1, #8
 800080a:	4828      	ldr	r0, [pc, #160]	; (80008ac <MX_GPIO_Init+0x164>)
 800080c:	f001 fcdc 	bl	80021c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000810:	2200      	movs	r2, #0
 8000812:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000816:	4826      	ldr	r0, [pc, #152]	; (80008b0 <MX_GPIO_Init+0x168>)
 8000818:	f001 fcd6 	bl	80021c8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800081c:	2308      	movs	r3, #8
 800081e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000820:	2301      	movs	r3, #1
 8000822:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	2300      	movs	r3, #0
 800082a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	4619      	mov	r1, r3
 8000832:	481e      	ldr	r0, [pc, #120]	; (80008ac <MX_GPIO_Init+0x164>)
 8000834:	f001 fb2e 	bl	8001e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000838:	2304      	movs	r3, #4
 800083a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800083c:	2300      	movs	r3, #0
 800083e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000844:	f107 031c 	add.w	r3, r7, #28
 8000848:	4619      	mov	r1, r3
 800084a:	481a      	ldr	r0, [pc, #104]	; (80008b4 <MX_GPIO_Init+0x16c>)
 800084c:	f001 fb22 	bl	8001e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000850:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000854:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	4619      	mov	r1, r3
 8000868:	4811      	ldr	r0, [pc, #68]	; (80008b0 <MX_GPIO_Init+0x168>)
 800086a:	f001 fb13 	bl	8001e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800086e:	2320      	movs	r3, #32
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000872:	2300      	movs	r3, #0
 8000874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	4619      	mov	r1, r3
 8000880:	480b      	ldr	r0, [pc, #44]	; (80008b0 <MX_GPIO_Init+0x168>)
 8000882:	f001 fb07 	bl	8001e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000886:	2302      	movs	r3, #2
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <MX_GPIO_Init+0x170>)
 800088c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	4619      	mov	r1, r3
 8000898:	4804      	ldr	r0, [pc, #16]	; (80008ac <MX_GPIO_Init+0x164>)
 800089a:	f001 fafb 	bl	8001e94 <HAL_GPIO_Init>

}
 800089e:	bf00      	nop
 80008a0:	3730      	adds	r7, #48	; 0x30
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40021000 	.word	0x40021000
 80008b0:	40020c00 	.word	0x40020c00
 80008b4:	40020400 	.word	0x40020400
 80008b8:	10120000 	.word	0x10120000

080008bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
	...

080008cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <HAL_MspInit+0x4c>)
 80008d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008da:	4a0f      	ldr	r2, [pc, #60]	; (8000918 <HAL_MspInit+0x4c>)
 80008dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e0:	6453      	str	r3, [r2, #68]	; 0x44
 80008e2:	4b0d      	ldr	r3, [pc, #52]	; (8000918 <HAL_MspInit+0x4c>)
 80008e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	603b      	str	r3, [r7, #0]
 80008f2:	4b09      	ldr	r3, [pc, #36]	; (8000918 <HAL_MspInit+0x4c>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	4a08      	ldr	r2, [pc, #32]	; (8000918 <HAL_MspInit+0x4c>)
 80008f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008fc:	6413      	str	r3, [r2, #64]	; 0x40
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <HAL_MspInit+0x4c>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800090a:	2007      	movs	r0, #7
 800090c:	f000 ff12 	bl	8001734 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000910:	bf00      	nop
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40023800 	.word	0x40023800

0800091c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	; 0x28
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a2f      	ldr	r2, [pc, #188]	; (80009f8 <HAL_ADC_MspInit+0xdc>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d158      	bne.n	80009f0 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
 8000942:	4b2e      	ldr	r3, [pc, #184]	; (80009fc <HAL_ADC_MspInit+0xe0>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000946:	4a2d      	ldr	r2, [pc, #180]	; (80009fc <HAL_ADC_MspInit+0xe0>)
 8000948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800094c:	6453      	str	r3, [r2, #68]	; 0x44
 800094e:	4b2b      	ldr	r3, [pc, #172]	; (80009fc <HAL_ADC_MspInit+0xe0>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	4b27      	ldr	r3, [pc, #156]	; (80009fc <HAL_ADC_MspInit+0xe0>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a26      	ldr	r2, [pc, #152]	; (80009fc <HAL_ADC_MspInit+0xe0>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b24      	ldr	r3, [pc, #144]	; (80009fc <HAL_ADC_MspInit+0xe0>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000976:	2302      	movs	r3, #2
 8000978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800097a:	2303      	movs	r3, #3
 800097c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000982:	f107 0314 	add.w	r3, r7, #20
 8000986:	4619      	mov	r1, r3
 8000988:	481d      	ldr	r0, [pc, #116]	; (8000a00 <HAL_ADC_MspInit+0xe4>)
 800098a:	f001 fa83 	bl	8001e94 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800098e:	4b1d      	ldr	r3, [pc, #116]	; (8000a04 <HAL_ADC_MspInit+0xe8>)
 8000990:	4a1d      	ldr	r2, [pc, #116]	; (8000a08 <HAL_ADC_MspInit+0xec>)
 8000992:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000994:	4b1b      	ldr	r3, [pc, #108]	; (8000a04 <HAL_ADC_MspInit+0xe8>)
 8000996:	2200      	movs	r2, #0
 8000998:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800099a:	4b1a      	ldr	r3, [pc, #104]	; (8000a04 <HAL_ADC_MspInit+0xe8>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80009a0:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <HAL_ADC_MspInit+0xe8>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80009a6:	4b17      	ldr	r3, [pc, #92]	; (8000a04 <HAL_ADC_MspInit+0xe8>)
 80009a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009ac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009ae:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <HAL_ADC_MspInit+0xe8>)
 80009b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009b4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009b6:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <HAL_ADC_MspInit+0xe8>)
 80009b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009bc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80009be:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <HAL_ADC_MspInit+0xe8>)
 80009c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009c4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80009c6:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <HAL_ADC_MspInit+0xe8>)
 80009c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80009cc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009ce:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <HAL_ADC_MspInit+0xe8>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80009d4:	480b      	ldr	r0, [pc, #44]	; (8000a04 <HAL_ADC_MspInit+0xe8>)
 80009d6:	f000 feef 	bl	80017b8 <HAL_DMA_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 80009e0:	f7ff ff6c 	bl	80008bc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	4a07      	ldr	r2, [pc, #28]	; (8000a04 <HAL_ADC_MspInit+0xe8>)
 80009e8:	639a      	str	r2, [r3, #56]	; 0x38
 80009ea:	4a06      	ldr	r2, [pc, #24]	; (8000a04 <HAL_ADC_MspInit+0xe8>)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009f0:	bf00      	nop
 80009f2:	3728      	adds	r7, #40	; 0x28
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40012000 	.word	0x40012000
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40020000 	.word	0x40020000
 8000a04:	20000260 	.word	0x20000260
 8000a08:	40026410 	.word	0x40026410

08000a0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	; 0x28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a28      	ldr	r2, [pc, #160]	; (8000acc <HAL_UART_MspInit+0xc0>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d149      	bne.n	8000ac2 <HAL_UART_MspInit+0xb6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	4b27      	ldr	r3, [pc, #156]	; (8000ad0 <HAL_UART_MspInit+0xc4>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a36:	4a26      	ldr	r2, [pc, #152]	; (8000ad0 <HAL_UART_MspInit+0xc4>)
 8000a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3e:	4b24      	ldr	r3, [pc, #144]	; (8000ad0 <HAL_UART_MspInit+0xc4>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	4b20      	ldr	r3, [pc, #128]	; (8000ad0 <HAL_UART_MspInit+0xc4>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a1f      	ldr	r2, [pc, #124]	; (8000ad0 <HAL_UART_MspInit+0xc4>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b1d      	ldr	r3, [pc, #116]	; (8000ad0 <HAL_UART_MspInit+0xc4>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	4b19      	ldr	r3, [pc, #100]	; (8000ad0 <HAL_UART_MspInit+0xc4>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a18      	ldr	r2, [pc, #96]	; (8000ad0 <HAL_UART_MspInit+0xc4>)
 8000a70:	f043 0308 	orr.w	r3, r3, #8
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <HAL_UART_MspInit+0xc4>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0308 	and.w	r3, r3, #8
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a82:	2304      	movs	r3, #4
 8000a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a86:	2302      	movs	r3, #2
 8000a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8e:	2303      	movs	r3, #3
 8000a90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a92:	2307      	movs	r3, #7
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	480d      	ldr	r0, [pc, #52]	; (8000ad4 <HAL_UART_MspInit+0xc8>)
 8000a9e:	f001 f9f9 	bl	8001e94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000aa2:	2340      	movs	r3, #64	; 0x40
 8000aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aae:	2303      	movs	r3, #3
 8000ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ab2:	2307      	movs	r3, #7
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	4619      	mov	r1, r3
 8000abc:	4806      	ldr	r0, [pc, #24]	; (8000ad8 <HAL_UART_MspInit+0xcc>)
 8000abe:	f001 f9e9 	bl	8001e94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ac2:	bf00      	nop
 8000ac4:	3728      	adds	r7, #40	; 0x28
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40004400 	.word	0x40004400
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40020000 	.word	0x40020000
 8000ad8:	40020c00 	.word	0x40020c00

08000adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr

08000aea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aee:	e7fe      	b.n	8000aee <HardFault_Handler+0x4>

08000af0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <MemManage_Handler+0x4>

08000af6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000afa:	e7fe      	b.n	8000afa <BusFault_Handler+0x4>

08000afc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <UsageFault_Handler+0x4>

08000b02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b30:	f000 f904 	bl	8000d3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <OTG_FS_WKUP_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS wake-up interrupt through EXTI line 18.
  */
void OTG_FS_WKUP_IRQHandler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_WKUP_IRQn 0 */

  /* USER CODE END OTG_FS_WKUP_IRQn 0 */
  if ((&hpcd_USB_OTG_FS)->Init.low_power_enable) {
 8000b3c:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <OTG_FS_WKUP_IRQHandler+0x40>)
 8000b3e:	6a1b      	ldr	r3, [r3, #32]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d007      	beq.n	8000b54 <OTG_FS_WKUP_IRQHandler+0x1c>
    /* Reset SLEEPDEEP bit of Cortex System Control Register */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8000b44:	4b0d      	ldr	r3, [pc, #52]	; (8000b7c <OTG_FS_WKUP_IRQHandler+0x44>)
 8000b46:	691b      	ldr	r3, [r3, #16]
 8000b48:	4a0c      	ldr	r2, [pc, #48]	; (8000b7c <OTG_FS_WKUP_IRQHandler+0x44>)
 8000b4a:	f023 0306 	bic.w	r3, r3, #6
 8000b4e:	6113      	str	r3, [r2, #16]
    SystemClock_Config();
 8000b50:	f7ff fcf4 	bl	800053c <SystemClock_Config>
  }
  __HAL_PCD_UNGATE_PHYCLOCK(&hpcd_USB_OTG_FS);
 8000b54:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <OTG_FS_WKUP_IRQHandler+0x40>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a06      	ldr	r2, [pc, #24]	; (8000b78 <OTG_FS_WKUP_IRQHandler+0x40>)
 8000b60:	6812      	ldr	r2, [r2, #0]
 8000b62:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8000b66:	f023 0301 	bic.w	r3, r3, #1
 8000b6a:	6013      	str	r3, [r2, #0]
  /* Clear EXTI pending bit */
  __HAL_USB_OTG_FS_WAKEUP_EXTI_CLEAR_FLAG();
 8000b6c:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <OTG_FS_WKUP_IRQHandler+0x48>)
 8000b6e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b72:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN OTG_FS_WKUP_IRQn 1 */

  /* USER CODE END OTG_FS_WKUP_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20001998 	.word	0x20001998
 8000b7c:	e000ed00 	.word	0xe000ed00
 8000b80:	40013c00 	.word	0x40013c00

08000b84 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000b88:	4802      	ldr	r0, [pc, #8]	; (8000b94 <DMA2_Stream0_IRQHandler+0x10>)
 8000b8a:	f000 ff1b 	bl	80019c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000260 	.word	0x20000260

08000b98 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b9c:	4802      	ldr	r0, [pc, #8]	; (8000ba8 <OTG_FS_IRQHandler+0x10>)
 8000b9e:	f001 fc7c 	bl	800249a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20001998 	.word	0x20001998

08000bac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb4:	4a14      	ldr	r2, [pc, #80]	; (8000c08 <_sbrk+0x5c>)
 8000bb6:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <_sbrk+0x60>)
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bc0:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <_sbrk+0x64>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d102      	bne.n	8000bce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <_sbrk+0x64>)
 8000bca:	4a12      	ldr	r2, [pc, #72]	; (8000c14 <_sbrk+0x68>)
 8000bcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bce:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <_sbrk+0x64>)
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d207      	bcs.n	8000bec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bdc:	f007 f970 	bl	8007ec0 <__errno>
 8000be0:	4602      	mov	r2, r0
 8000be2:	230c      	movs	r3, #12
 8000be4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000be6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bea:	e009      	b.n	8000c00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bec:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <_sbrk+0x64>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bf2:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <_sbrk+0x64>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	4a05      	ldr	r2, [pc, #20]	; (8000c10 <_sbrk+0x64>)
 8000bfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3718      	adds	r7, #24
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20020000 	.word	0x20020000
 8000c0c:	00000500 	.word	0x00000500
 8000c10:	20000208 	.word	0x20000208
 8000c14:	20001da8 	.word	0x20001da8

08000c18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c1c:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <SystemInit+0x28>)
 8000c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c22:	4a07      	ldr	r2, [pc, #28]	; (8000c40 <SystemInit+0x28>)
 8000c24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c2c:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <SystemInit+0x28>)
 8000c2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c32:	609a      	str	r2, [r3, #8]
#endif
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c7c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c48:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c4a:	e003      	b.n	8000c54 <LoopCopyDataInit>

08000c4c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c4e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c50:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c52:	3104      	adds	r1, #4

08000c54 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c54:	480b      	ldr	r0, [pc, #44]	; (8000c84 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c56:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c58:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c5a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c5c:	d3f6      	bcc.n	8000c4c <CopyDataInit>
  ldr  r2, =_sbss
 8000c5e:	4a0b      	ldr	r2, [pc, #44]	; (8000c8c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c60:	e002      	b.n	8000c68 <LoopFillZerobss>

08000c62 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c62:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c64:	f842 3b04 	str.w	r3, [r2], #4

08000c68 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c68:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c6a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c6c:	d3f9      	bcc.n	8000c62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c6e:	f7ff ffd3 	bl	8000c18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c72:	f007 f92b 	bl	8007ecc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c76:	f7ff fc37 	bl	80004e8 <main>
  bx  lr    
 8000c7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c7c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000c80:	08008128 	.word	0x08008128
  ldr  r0, =_sdata
 8000c84:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c88:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 8000c8c:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 8000c90:	20001da4 	.word	0x20001da4

08000c94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c94:	e7fe      	b.n	8000c94 <ADC_IRQHandler>
	...

08000c98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <HAL_Init+0x40>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a0d      	ldr	r2, [pc, #52]	; (8000cd8 <HAL_Init+0x40>)
 8000ca2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ca6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ca8:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <HAL_Init+0x40>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <HAL_Init+0x40>)
 8000cae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb4:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <HAL_Init+0x40>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a07      	ldr	r2, [pc, #28]	; (8000cd8 <HAL_Init+0x40>)
 8000cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc0:	2003      	movs	r0, #3
 8000cc2:	f000 fd37 	bl	8001734 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f000 f808 	bl	8000cdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ccc:	f7ff fdfe 	bl	80008cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40023c00 	.word	0x40023c00

08000cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ce4:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <HAL_InitTick+0x54>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <HAL_InitTick+0x58>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	4619      	mov	r1, r3
 8000cee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f000 fd4f 	bl	800179e <HAL_SYSTICK_Config>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e00e      	b.n	8000d28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b0f      	cmp	r3, #15
 8000d0e:	d80a      	bhi.n	8000d26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d10:	2200      	movs	r2, #0
 8000d12:	6879      	ldr	r1, [r7, #4]
 8000d14:	f04f 30ff 	mov.w	r0, #4294967295
 8000d18:	f000 fd17 	bl	800174a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d1c:	4a06      	ldr	r2, [pc, #24]	; (8000d38 <HAL_InitTick+0x5c>)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d22:	2300      	movs	r3, #0
 8000d24:	e000      	b.n	8000d28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000000 	.word	0x20000000
 8000d34:	20000008 	.word	0x20000008
 8000d38:	20000004 	.word	0x20000004

08000d3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <HAL_IncTick+0x20>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	461a      	mov	r2, r3
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_IncTick+0x24>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <HAL_IncTick+0x24>)
 8000d4e:	6013      	str	r3, [r2, #0]
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	20000008 	.word	0x20000008
 8000d60:	200004c4 	.word	0x200004c4

08000d64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return uwTick;
 8000d68:	4b03      	ldr	r3, [pc, #12]	; (8000d78 <HAL_GetTick+0x14>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	200004c4 	.word	0x200004c4

08000d7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d84:	f7ff ffee 	bl	8000d64 <HAL_GetTick>
 8000d88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d94:	d005      	beq.n	8000da2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d96:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <HAL_Delay+0x40>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	4413      	add	r3, r2
 8000da0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000da2:	bf00      	nop
 8000da4:	f7ff ffde 	bl	8000d64 <HAL_GetTick>
 8000da8:	4602      	mov	r2, r0
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	68fa      	ldr	r2, [r7, #12]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d8f7      	bhi.n	8000da4 <HAL_Delay+0x28>
  {
  }
}
 8000db4:	bf00      	nop
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000008 	.word	0x20000008

08000dc0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d101      	bne.n	8000dd6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e033      	b.n	8000e3e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d109      	bne.n	8000df2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f7ff fd9c 	bl	800091c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2200      	movs	r2, #0
 8000de8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2200      	movs	r2, #0
 8000dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df6:	f003 0310 	and.w	r3, r3, #16
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d118      	bne.n	8000e30 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e06:	f023 0302 	bic.w	r3, r3, #2
 8000e0a:	f043 0202 	orr.w	r2, r3, #2
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f000 fa40 	bl	8001298 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	f023 0303 	bic.w	r3, r3, #3
 8000e26:	f043 0201 	orr.w	r2, r3, #1
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	641a      	str	r2, [r3, #64]	; 0x40
 8000e2e:	e001      	b.n	8000e34 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000e30:	2301      	movs	r3, #1
 8000e32:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2200      	movs	r2, #0
 8000e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
	...

08000e48 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000e54:	2300      	movs	r3, #0
 8000e56:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d101      	bne.n	8000e66 <HAL_ADC_Start_DMA+0x1e>
 8000e62:	2302      	movs	r3, #2
 8000e64:	e0cc      	b.n	8001000 <HAL_ADC_Start_DMA+0x1b8>
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	2201      	movs	r2, #1
 8000e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	f003 0301 	and.w	r3, r3, #1
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d018      	beq.n	8000eae <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	689a      	ldr	r2, [r3, #8]
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f042 0201 	orr.w	r2, r2, #1
 8000e8a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e8c:	4b5e      	ldr	r3, [pc, #376]	; (8001008 <HAL_ADC_Start_DMA+0x1c0>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a5e      	ldr	r2, [pc, #376]	; (800100c <HAL_ADC_Start_DMA+0x1c4>)
 8000e92:	fba2 2303 	umull	r2, r3, r2, r3
 8000e96:	0c9a      	lsrs	r2, r3, #18
 8000e98:	4613      	mov	r3, r2
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	4413      	add	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000ea0:	e002      	b.n	8000ea8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	3b01      	subs	r3, #1
 8000ea6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d1f9      	bne.n	8000ea2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	f040 80a0 	bne.w	8000ffe <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000ec6:	f023 0301 	bic.w	r3, r3, #1
 8000eca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d007      	beq.n	8000ef0 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ee8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000efc:	d106      	bne.n	8000f0c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f02:	f023 0206 	bic.w	r2, r3, #6
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	645a      	str	r2, [r3, #68]	; 0x44
 8000f0a:	e002      	b.n	8000f12 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f1a:	4b3d      	ldr	r3, [pc, #244]	; (8001010 <HAL_ADC_Start_DMA+0x1c8>)
 8000f1c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f22:	4a3c      	ldr	r2, [pc, #240]	; (8001014 <HAL_ADC_Start_DMA+0x1cc>)
 8000f24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f2a:	4a3b      	ldr	r2, [pc, #236]	; (8001018 <HAL_ADC_Start_DMA+0x1d0>)
 8000f2c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f32:	4a3a      	ldr	r2, [pc, #232]	; (800101c <HAL_ADC_Start_DMA+0x1d4>)
 8000f34:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000f3e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	685a      	ldr	r2, [r3, #4]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000f4e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	689a      	ldr	r2, [r3, #8]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f5e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	334c      	adds	r3, #76	; 0x4c
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	68ba      	ldr	r2, [r7, #8]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f000 fcd0 	bl	8001914 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 031f 	and.w	r3, r3, #31
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d12a      	bne.n	8000fd6 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a26      	ldr	r2, [pc, #152]	; (8001020 <HAL_ADC_Start_DMA+0x1d8>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d015      	beq.n	8000fb6 <HAL_ADC_Start_DMA+0x16e>
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a25      	ldr	r2, [pc, #148]	; (8001024 <HAL_ADC_Start_DMA+0x1dc>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d105      	bne.n	8000fa0 <HAL_ADC_Start_DMA+0x158>
 8000f94:	4b1e      	ldr	r3, [pc, #120]	; (8001010 <HAL_ADC_Start_DMA+0x1c8>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f003 031f 	and.w	r3, r3, #31
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d00a      	beq.n	8000fb6 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a20      	ldr	r2, [pc, #128]	; (8001028 <HAL_ADC_Start_DMA+0x1e0>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d129      	bne.n	8000ffe <HAL_ADC_Start_DMA+0x1b6>
 8000faa:	4b19      	ldr	r3, [pc, #100]	; (8001010 <HAL_ADC_Start_DMA+0x1c8>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f003 031f 	and.w	r3, r3, #31
 8000fb2:	2b0f      	cmp	r3, #15
 8000fb4:	d823      	bhi.n	8000ffe <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d11c      	bne.n	8000ffe <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	689a      	ldr	r2, [r3, #8]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	e013      	b.n	8000ffe <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a11      	ldr	r2, [pc, #68]	; (8001020 <HAL_ADC_Start_DMA+0x1d8>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d10e      	bne.n	8000ffe <HAL_ADC_Start_DMA+0x1b6>
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d107      	bne.n	8000ffe <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	689a      	ldr	r2, [r3, #8]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000ffc:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8000ffe:	2300      	movs	r3, #0
}
 8001000:	4618      	mov	r0, r3
 8001002:	3718      	adds	r7, #24
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000000 	.word	0x20000000
 800100c:	431bde83 	.word	0x431bde83
 8001010:	40012300 	.word	0x40012300
 8001014:	08001491 	.word	0x08001491
 8001018:	0800154b 	.word	0x0800154b
 800101c:	08001567 	.word	0x08001567
 8001020:	40012000 	.word	0x40012000
 8001024:	40012100 	.word	0x40012100
 8001028:	40012200 	.word	0x40012200

0800102c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800105e:	2300      	movs	r3, #0
 8001060:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001068:	2b01      	cmp	r3, #1
 800106a:	d101      	bne.n	8001070 <HAL_ADC_ConfigChannel+0x1c>
 800106c:	2302      	movs	r3, #2
 800106e:	e105      	b.n	800127c <HAL_ADC_ConfigChannel+0x228>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2201      	movs	r2, #1
 8001074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b09      	cmp	r3, #9
 800107e:	d925      	bls.n	80010cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	68d9      	ldr	r1, [r3, #12]
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	b29b      	uxth	r3, r3
 800108c:	461a      	mov	r2, r3
 800108e:	4613      	mov	r3, r2
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	4413      	add	r3, r2
 8001094:	3b1e      	subs	r3, #30
 8001096:	2207      	movs	r2, #7
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43da      	mvns	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	400a      	ands	r2, r1
 80010a4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	68d9      	ldr	r1, [r3, #12]
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	689a      	ldr	r2, [r3, #8]
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	4618      	mov	r0, r3
 80010b8:	4603      	mov	r3, r0
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	4403      	add	r3, r0
 80010be:	3b1e      	subs	r3, #30
 80010c0:	409a      	lsls	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	430a      	orrs	r2, r1
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	e022      	b.n	8001112 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	6919      	ldr	r1, [r3, #16]
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	461a      	mov	r2, r3
 80010da:	4613      	mov	r3, r2
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	4413      	add	r3, r2
 80010e0:	2207      	movs	r2, #7
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43da      	mvns	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	400a      	ands	r2, r1
 80010ee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	6919      	ldr	r1, [r3, #16]
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	689a      	ldr	r2, [r3, #8]
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	b29b      	uxth	r3, r3
 8001100:	4618      	mov	r0, r3
 8001102:	4603      	mov	r3, r0
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	4403      	add	r3, r0
 8001108:	409a      	lsls	r2, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	430a      	orrs	r2, r1
 8001110:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	2b06      	cmp	r3, #6
 8001118:	d824      	bhi.n	8001164 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685a      	ldr	r2, [r3, #4]
 8001124:	4613      	mov	r3, r2
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	4413      	add	r3, r2
 800112a:	3b05      	subs	r3, #5
 800112c:	221f      	movs	r2, #31
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43da      	mvns	r2, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	400a      	ands	r2, r1
 800113a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	b29b      	uxth	r3, r3
 8001148:	4618      	mov	r0, r3
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685a      	ldr	r2, [r3, #4]
 800114e:	4613      	mov	r3, r2
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	4413      	add	r3, r2
 8001154:	3b05      	subs	r3, #5
 8001156:	fa00 f203 	lsl.w	r2, r0, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	430a      	orrs	r2, r1
 8001160:	635a      	str	r2, [r3, #52]	; 0x34
 8001162:	e04c      	b.n	80011fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	2b0c      	cmp	r3, #12
 800116a:	d824      	bhi.n	80011b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685a      	ldr	r2, [r3, #4]
 8001176:	4613      	mov	r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	4413      	add	r3, r2
 800117c:	3b23      	subs	r3, #35	; 0x23
 800117e:	221f      	movs	r2, #31
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43da      	mvns	r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	400a      	ands	r2, r1
 800118c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	b29b      	uxth	r3, r3
 800119a:	4618      	mov	r0, r3
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685a      	ldr	r2, [r3, #4]
 80011a0:	4613      	mov	r3, r2
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	4413      	add	r3, r2
 80011a6:	3b23      	subs	r3, #35	; 0x23
 80011a8:	fa00 f203 	lsl.w	r2, r0, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	430a      	orrs	r2, r1
 80011b2:	631a      	str	r2, [r3, #48]	; 0x30
 80011b4:	e023      	b.n	80011fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685a      	ldr	r2, [r3, #4]
 80011c0:	4613      	mov	r3, r2
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	4413      	add	r3, r2
 80011c6:	3b41      	subs	r3, #65	; 0x41
 80011c8:	221f      	movs	r2, #31
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43da      	mvns	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	400a      	ands	r2, r1
 80011d6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	4618      	mov	r0, r3
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685a      	ldr	r2, [r3, #4]
 80011ea:	4613      	mov	r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	4413      	add	r3, r2
 80011f0:	3b41      	subs	r3, #65	; 0x41
 80011f2:	fa00 f203 	lsl.w	r2, r0, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	430a      	orrs	r2, r1
 80011fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011fe:	4b22      	ldr	r3, [pc, #136]	; (8001288 <HAL_ADC_ConfigChannel+0x234>)
 8001200:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a21      	ldr	r2, [pc, #132]	; (800128c <HAL_ADC_ConfigChannel+0x238>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d109      	bne.n	8001220 <HAL_ADC_ConfigChannel+0x1cc>
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b12      	cmp	r3, #18
 8001212:	d105      	bne.n	8001220 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a19      	ldr	r2, [pc, #100]	; (800128c <HAL_ADC_ConfigChannel+0x238>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d123      	bne.n	8001272 <HAL_ADC_ConfigChannel+0x21e>
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2b10      	cmp	r3, #16
 8001230:	d003      	beq.n	800123a <HAL_ADC_ConfigChannel+0x1e6>
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2b11      	cmp	r3, #17
 8001238:	d11b      	bne.n	8001272 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2b10      	cmp	r3, #16
 800124c:	d111      	bne.n	8001272 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800124e:	4b10      	ldr	r3, [pc, #64]	; (8001290 <HAL_ADC_ConfigChannel+0x23c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a10      	ldr	r2, [pc, #64]	; (8001294 <HAL_ADC_ConfigChannel+0x240>)
 8001254:	fba2 2303 	umull	r2, r3, r2, r3
 8001258:	0c9a      	lsrs	r2, r3, #18
 800125a:	4613      	mov	r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	4413      	add	r3, r2
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001264:	e002      	b.n	800126c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	3b01      	subs	r3, #1
 800126a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1f9      	bne.n	8001266 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800127a:	2300      	movs	r3, #0
}
 800127c:	4618      	mov	r0, r3
 800127e:	3714      	adds	r7, #20
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	40012300 	.word	0x40012300
 800128c:	40012000 	.word	0x40012000
 8001290:	20000000 	.word	0x20000000
 8001294:	431bde83 	.word	0x431bde83

08001298 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012a0:	4b79      	ldr	r3, [pc, #484]	; (8001488 <ADC_Init+0x1f0>)
 80012a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	431a      	orrs	r2, r3
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	685a      	ldr	r2, [r3, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	6859      	ldr	r1, [r3, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	691b      	ldr	r3, [r3, #16]
 80012d8:	021a      	lsls	r2, r3, #8
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	430a      	orrs	r2, r1
 80012e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	685a      	ldr	r2, [r3, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80012f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	6859      	ldr	r1, [r3, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	689a      	ldr	r2, [r3, #8]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	430a      	orrs	r2, r1
 8001302:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	689a      	ldr	r2, [r3, #8]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001312:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	6899      	ldr	r1, [r3, #8]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	68da      	ldr	r2, [r3, #12]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	430a      	orrs	r2, r1
 8001324:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800132a:	4a58      	ldr	r2, [pc, #352]	; (800148c <ADC_Init+0x1f4>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d022      	beq.n	8001376 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	689a      	ldr	r2, [r3, #8]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800133e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	6899      	ldr	r1, [r3, #8]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	430a      	orrs	r2, r1
 8001350:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	689a      	ldr	r2, [r3, #8]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001360:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	6899      	ldr	r1, [r3, #8]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	430a      	orrs	r2, r1
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	e00f      	b.n	8001396 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	689a      	ldr	r2, [r3, #8]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001384:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	689a      	ldr	r2, [r3, #8]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001394:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	689a      	ldr	r2, [r3, #8]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f022 0202 	bic.w	r2, r2, #2
 80013a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	6899      	ldr	r1, [r3, #8]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	7e1b      	ldrb	r3, [r3, #24]
 80013b0:	005a      	lsls	r2, r3, #1
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	430a      	orrs	r2, r1
 80013b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d01b      	beq.n	80013fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	685a      	ldr	r2, [r3, #4]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80013d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	685a      	ldr	r2, [r3, #4]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80013e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	6859      	ldr	r1, [r3, #4]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ee:	3b01      	subs	r3, #1
 80013f0:	035a      	lsls	r2, r3, #13
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	430a      	orrs	r2, r1
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	e007      	b.n	800140c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	685a      	ldr	r2, [r3, #4]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800140a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800141a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	3b01      	subs	r3, #1
 8001428:	051a      	lsls	r2, r3, #20
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	430a      	orrs	r2, r1
 8001430:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	689a      	ldr	r2, [r3, #8]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001440:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6899      	ldr	r1, [r3, #8]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800144e:	025a      	lsls	r2, r3, #9
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	430a      	orrs	r2, r1
 8001456:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	689a      	ldr	r2, [r3, #8]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001466:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	6899      	ldr	r1, [r3, #8]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	029a      	lsls	r2, r3, #10
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	430a      	orrs	r2, r1
 800147a:	609a      	str	r2, [r3, #8]
}
 800147c:	bf00      	nop
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	40012300 	.word	0x40012300
 800148c:	0f000001 	.word	0x0f000001

08001490 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800149c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d13c      	bne.n	8001524 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d12b      	bne.n	800151c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d127      	bne.n	800151c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d006      	beq.n	80014e8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d119      	bne.n	800151c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	685a      	ldr	r2, [r3, #4]
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f022 0220 	bic.w	r2, r2, #32
 80014f6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001508:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d105      	bne.n	800151c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001514:	f043 0201 	orr.w	r2, r3, #1
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800151c:	68f8      	ldr	r0, [r7, #12]
 800151e:	f7fe ffd3 	bl	80004c8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001522:	e00e      	b.n	8001542 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	f003 0310 	and.w	r3, r3, #16
 800152c:	2b00      	cmp	r3, #0
 800152e:	d003      	beq.n	8001538 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001530:	68f8      	ldr	r0, [r7, #12]
 8001532:	f7ff fd85 	bl	8001040 <HAL_ADC_ErrorCallback>
}
 8001536:	e004      	b.n	8001542 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800153c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	4798      	blx	r3
}
 8001542:	bf00      	nop
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b084      	sub	sp, #16
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001556:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001558:	68f8      	ldr	r0, [r7, #12]
 800155a:	f7ff fd67 	bl	800102c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800155e:	bf00      	nop
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b084      	sub	sp, #16
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001572:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2240      	movs	r2, #64	; 0x40
 8001578:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157e:	f043 0204 	orr.w	r2, r3, #4
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f7ff fd5a 	bl	8001040 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800158c:	bf00      	nop
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a4:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <__NVIC_SetPriorityGrouping+0x44>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015aa:	68ba      	ldr	r2, [r7, #8]
 80015ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015b0:	4013      	ands	r3, r2
 80015b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015c6:	4a04      	ldr	r2, [pc, #16]	; (80015d8 <__NVIC_SetPriorityGrouping+0x44>)
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	60d3      	str	r3, [r2, #12]
}
 80015cc:	bf00      	nop
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015e0:	4b04      	ldr	r3, [pc, #16]	; (80015f4 <__NVIC_GetPriorityGrouping+0x18>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	0a1b      	lsrs	r3, r3, #8
 80015e6:	f003 0307 	and.w	r3, r3, #7
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	2b00      	cmp	r3, #0
 8001608:	db0b      	blt.n	8001622 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	f003 021f 	and.w	r2, r3, #31
 8001610:	4907      	ldr	r1, [pc, #28]	; (8001630 <__NVIC_EnableIRQ+0x38>)
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	095b      	lsrs	r3, r3, #5
 8001618:	2001      	movs	r0, #1
 800161a:	fa00 f202 	lsl.w	r2, r0, r2
 800161e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	e000e100 	.word	0xe000e100

08001634 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	6039      	str	r1, [r7, #0]
 800163e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001644:	2b00      	cmp	r3, #0
 8001646:	db0a      	blt.n	800165e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	b2da      	uxtb	r2, r3
 800164c:	490c      	ldr	r1, [pc, #48]	; (8001680 <__NVIC_SetPriority+0x4c>)
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	0112      	lsls	r2, r2, #4
 8001654:	b2d2      	uxtb	r2, r2
 8001656:	440b      	add	r3, r1
 8001658:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800165c:	e00a      	b.n	8001674 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	b2da      	uxtb	r2, r3
 8001662:	4908      	ldr	r1, [pc, #32]	; (8001684 <__NVIC_SetPriority+0x50>)
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	f003 030f 	and.w	r3, r3, #15
 800166a:	3b04      	subs	r3, #4
 800166c:	0112      	lsls	r2, r2, #4
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	440b      	add	r3, r1
 8001672:	761a      	strb	r2, [r3, #24]
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	e000e100 	.word	0xe000e100
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001688:	b480      	push	{r7}
 800168a:	b089      	sub	sp, #36	; 0x24
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	f1c3 0307 	rsb	r3, r3, #7
 80016a2:	2b04      	cmp	r3, #4
 80016a4:	bf28      	it	cs
 80016a6:	2304      	movcs	r3, #4
 80016a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	3304      	adds	r3, #4
 80016ae:	2b06      	cmp	r3, #6
 80016b0:	d902      	bls.n	80016b8 <NVIC_EncodePriority+0x30>
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	3b03      	subs	r3, #3
 80016b6:	e000      	b.n	80016ba <NVIC_EncodePriority+0x32>
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016bc:	f04f 32ff 	mov.w	r2, #4294967295
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43da      	mvns	r2, r3
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	401a      	ands	r2, r3
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016d0:	f04f 31ff 	mov.w	r1, #4294967295
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	fa01 f303 	lsl.w	r3, r1, r3
 80016da:	43d9      	mvns	r1, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e0:	4313      	orrs	r3, r2
         );
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3724      	adds	r7, #36	; 0x24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
	...

080016f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001700:	d301      	bcc.n	8001706 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001702:	2301      	movs	r3, #1
 8001704:	e00f      	b.n	8001726 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001706:	4a0a      	ldr	r2, [pc, #40]	; (8001730 <SysTick_Config+0x40>)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3b01      	subs	r3, #1
 800170c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800170e:	210f      	movs	r1, #15
 8001710:	f04f 30ff 	mov.w	r0, #4294967295
 8001714:	f7ff ff8e 	bl	8001634 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001718:	4b05      	ldr	r3, [pc, #20]	; (8001730 <SysTick_Config+0x40>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800171e:	4b04      	ldr	r3, [pc, #16]	; (8001730 <SysTick_Config+0x40>)
 8001720:	2207      	movs	r2, #7
 8001722:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	e000e010 	.word	0xe000e010

08001734 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff ff29 	bl	8001594 <__NVIC_SetPriorityGrouping>
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800174a:	b580      	push	{r7, lr}
 800174c:	b086      	sub	sp, #24
 800174e:	af00      	add	r7, sp, #0
 8001750:	4603      	mov	r3, r0
 8001752:	60b9      	str	r1, [r7, #8]
 8001754:	607a      	str	r2, [r7, #4]
 8001756:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800175c:	f7ff ff3e 	bl	80015dc <__NVIC_GetPriorityGrouping>
 8001760:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	68b9      	ldr	r1, [r7, #8]
 8001766:	6978      	ldr	r0, [r7, #20]
 8001768:	f7ff ff8e 	bl	8001688 <NVIC_EncodePriority>
 800176c:	4602      	mov	r2, r0
 800176e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001772:	4611      	mov	r1, r2
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff ff5d 	bl	8001634 <__NVIC_SetPriority>
}
 800177a:	bf00      	nop
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
 8001788:	4603      	mov	r3, r0
 800178a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800178c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff ff31 	bl	80015f8 <__NVIC_EnableIRQ>
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff ffa2 	bl	80016f0 <SysTick_Config>
 80017ac:	4603      	mov	r3, r0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80017c4:	f7ff face 	bl	8000d64 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d101      	bne.n	80017d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e099      	b.n	8001908 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2202      	movs	r2, #2
 80017e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f022 0201 	bic.w	r2, r2, #1
 80017f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017f4:	e00f      	b.n	8001816 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017f6:	f7ff fab5 	bl	8000d64 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b05      	cmp	r3, #5
 8001802:	d908      	bls.n	8001816 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2220      	movs	r2, #32
 8001808:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2203      	movs	r2, #3
 800180e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e078      	b.n	8001908 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1e8      	bne.n	80017f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800182c:	697a      	ldr	r2, [r7, #20]
 800182e:	4b38      	ldr	r3, [pc, #224]	; (8001910 <HAL_DMA_Init+0x158>)
 8001830:	4013      	ands	r3, r2
 8001832:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001842:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800184e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800185a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a1b      	ldr	r3, [r3, #32]
 8001860:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001862:	697a      	ldr	r2, [r7, #20]
 8001864:	4313      	orrs	r3, r2
 8001866:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186c:	2b04      	cmp	r3, #4
 800186e:	d107      	bne.n	8001880 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001878:	4313      	orrs	r3, r2
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	4313      	orrs	r3, r2
 800187e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	697a      	ldr	r2, [r7, #20]
 8001886:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	f023 0307 	bic.w	r3, r3, #7
 8001896:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189c:	697a      	ldr	r2, [r7, #20]
 800189e:	4313      	orrs	r3, r2
 80018a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a6:	2b04      	cmp	r3, #4
 80018a8:	d117      	bne.n	80018da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d00e      	beq.n	80018da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f000 fa6f 	bl	8001da0 <DMA_CheckFifoParam>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d008      	beq.n	80018da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2240      	movs	r2, #64	; 0x40
 80018cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2201      	movs	r2, #1
 80018d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80018d6:	2301      	movs	r3, #1
 80018d8:	e016      	b.n	8001908 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	697a      	ldr	r2, [r7, #20]
 80018e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 fa26 	bl	8001d34 <DMA_CalcBaseAndBitshift>
 80018e8:	4603      	mov	r3, r0
 80018ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018f0:	223f      	movs	r2, #63	; 0x3f
 80018f2:	409a      	lsls	r2, r3
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2201      	movs	r2, #1
 8001902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001906:	2300      	movs	r3, #0
}
 8001908:	4618      	mov	r0, r3
 800190a:	3718      	adds	r7, #24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	f010803f 	.word	0xf010803f

08001914 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
 8001920:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001922:	2300      	movs	r3, #0
 8001924:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001932:	2b01      	cmp	r3, #1
 8001934:	d101      	bne.n	800193a <HAL_DMA_Start_IT+0x26>
 8001936:	2302      	movs	r3, #2
 8001938:	e040      	b.n	80019bc <HAL_DMA_Start_IT+0xa8>
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2201      	movs	r2, #1
 800193e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b01      	cmp	r3, #1
 800194c:	d12f      	bne.n	80019ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2202      	movs	r2, #2
 8001952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2200      	movs	r2, #0
 800195a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	68f8      	ldr	r0, [r7, #12]
 8001964:	f000 f9b8 	bl	8001cd8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800196c:	223f      	movs	r2, #63	; 0x3f
 800196e:	409a      	lsls	r2, r3
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f042 0216 	orr.w	r2, r2, #22
 8001982:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001988:	2b00      	cmp	r3, #0
 800198a:	d007      	beq.n	800199c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f042 0208 	orr.w	r2, r2, #8
 800199a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f042 0201 	orr.w	r2, r2, #1
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	e005      	b.n	80019ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80019b6:	2302      	movs	r3, #2
 80019b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80019ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3718      	adds	r7, #24
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80019d0:	4b92      	ldr	r3, [pc, #584]	; (8001c1c <HAL_DMA_IRQHandler+0x258>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a92      	ldr	r2, [pc, #584]	; (8001c20 <HAL_DMA_IRQHandler+0x25c>)
 80019d6:	fba2 2303 	umull	r2, r3, r2, r3
 80019da:	0a9b      	lsrs	r3, r3, #10
 80019dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ee:	2208      	movs	r2, #8
 80019f0:	409a      	lsls	r2, r3
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	4013      	ands	r3, r2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d01a      	beq.n	8001a30 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d013      	beq.n	8001a30 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f022 0204 	bic.w	r2, r2, #4
 8001a16:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a1c:	2208      	movs	r2, #8
 8001a1e:	409a      	lsls	r2, r3
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a28:	f043 0201 	orr.w	r2, r3, #1
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a34:	2201      	movs	r2, #1
 8001a36:	409a      	lsls	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d012      	beq.n	8001a66 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d00b      	beq.n	8001a66 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a52:	2201      	movs	r2, #1
 8001a54:	409a      	lsls	r2, r3
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a5e:	f043 0202 	orr.w	r2, r3, #2
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a6a:	2204      	movs	r2, #4
 8001a6c:	409a      	lsls	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	4013      	ands	r3, r2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d012      	beq.n	8001a9c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d00b      	beq.n	8001a9c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a88:	2204      	movs	r2, #4
 8001a8a:	409a      	lsls	r2, r3
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a94:	f043 0204 	orr.w	r2, r3, #4
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa0:	2210      	movs	r2, #16
 8001aa2:	409a      	lsls	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d043      	beq.n	8001b34 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0308 	and.w	r3, r3, #8
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d03c      	beq.n	8001b34 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001abe:	2210      	movs	r2, #16
 8001ac0:	409a      	lsls	r2, r3
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d018      	beq.n	8001b06 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d108      	bne.n	8001af4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d024      	beq.n	8001b34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	4798      	blx	r3
 8001af2:	e01f      	b.n	8001b34 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d01b      	beq.n	8001b34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	4798      	blx	r3
 8001b04:	e016      	b.n	8001b34 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d107      	bne.n	8001b24 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f022 0208 	bic.w	r2, r2, #8
 8001b22:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d003      	beq.n	8001b34 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b38:	2220      	movs	r2, #32
 8001b3a:	409a      	lsls	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f000 808e 	beq.w	8001c62 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0310 	and.w	r3, r3, #16
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f000 8086 	beq.w	8001c62 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b5a:	2220      	movs	r2, #32
 8001b5c:	409a      	lsls	r2, r3
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b05      	cmp	r3, #5
 8001b6c:	d136      	bne.n	8001bdc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f022 0216 	bic.w	r2, r2, #22
 8001b7c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	695a      	ldr	r2, [r3, #20]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b8c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d103      	bne.n	8001b9e <HAL_DMA_IRQHandler+0x1da>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d007      	beq.n	8001bae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f022 0208 	bic.w	r2, r2, #8
 8001bac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb2:	223f      	movs	r2, #63	; 0x3f
 8001bb4:	409a      	lsls	r2, r3
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d07d      	beq.n	8001cce <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	4798      	blx	r3
        }
        return;
 8001bda:	e078      	b.n	8001cce <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d01c      	beq.n	8001c24 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d108      	bne.n	8001c0a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d030      	beq.n	8001c62 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	4798      	blx	r3
 8001c08:	e02b      	b.n	8001c62 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d027      	beq.n	8001c62 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	4798      	blx	r3
 8001c1a:	e022      	b.n	8001c62 <HAL_DMA_IRQHandler+0x29e>
 8001c1c:	20000000 	.word	0x20000000
 8001c20:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d10f      	bne.n	8001c52 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f022 0210 	bic.w	r2, r2, #16
 8001c40:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d032      	beq.n	8001cd0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d022      	beq.n	8001cbc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2205      	movs	r2, #5
 8001c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 0201 	bic.w	r2, r2, #1
 8001c8c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	3301      	adds	r3, #1
 8001c92:	60bb      	str	r3, [r7, #8]
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d307      	bcc.n	8001caa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1f2      	bne.n	8001c8e <HAL_DMA_IRQHandler+0x2ca>
 8001ca8:	e000      	b.n	8001cac <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001caa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d005      	beq.n	8001cd0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	4798      	blx	r3
 8001ccc:	e000      	b.n	8001cd0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001cce:	bf00      	nop
    }
  }
}
 8001cd0:	3718      	adds	r7, #24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop

08001cd8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
 8001ce4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001cf4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	2b40      	cmp	r3, #64	; 0x40
 8001d04:	d108      	bne.n	8001d18 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68ba      	ldr	r2, [r7, #8]
 8001d14:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001d16:	e007      	b.n	8001d28 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68ba      	ldr	r2, [r7, #8]
 8001d1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	60da      	str	r2, [r3, #12]
}
 8001d28:	bf00      	nop
 8001d2a:	3714      	adds	r7, #20
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	3b10      	subs	r3, #16
 8001d44:	4a14      	ldr	r2, [pc, #80]	; (8001d98 <DMA_CalcBaseAndBitshift+0x64>)
 8001d46:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4a:	091b      	lsrs	r3, r3, #4
 8001d4c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d4e:	4a13      	ldr	r2, [pc, #76]	; (8001d9c <DMA_CalcBaseAndBitshift+0x68>)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	4413      	add	r3, r2
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	461a      	mov	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2b03      	cmp	r3, #3
 8001d60:	d909      	bls.n	8001d76 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d6a:	f023 0303 	bic.w	r3, r3, #3
 8001d6e:	1d1a      	adds	r2, r3, #4
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	659a      	str	r2, [r3, #88]	; 0x58
 8001d74:	e007      	b.n	8001d86 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d7e:	f023 0303 	bic.w	r3, r3, #3
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	aaaaaaab 	.word	0xaaaaaaab
 8001d9c:	08008110 	.word	0x08008110

08001da0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001da8:	2300      	movs	r3, #0
 8001daa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d11f      	bne.n	8001dfa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	2b03      	cmp	r3, #3
 8001dbe:	d855      	bhi.n	8001e6c <DMA_CheckFifoParam+0xcc>
 8001dc0:	a201      	add	r2, pc, #4	; (adr r2, 8001dc8 <DMA_CheckFifoParam+0x28>)
 8001dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc6:	bf00      	nop
 8001dc8:	08001dd9 	.word	0x08001dd9
 8001dcc:	08001deb 	.word	0x08001deb
 8001dd0:	08001dd9 	.word	0x08001dd9
 8001dd4:	08001e6d 	.word	0x08001e6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ddc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d045      	beq.n	8001e70 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001de8:	e042      	b.n	8001e70 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001df2:	d13f      	bne.n	8001e74 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001df8:	e03c      	b.n	8001e74 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e02:	d121      	bne.n	8001e48 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	2b03      	cmp	r3, #3
 8001e08:	d836      	bhi.n	8001e78 <DMA_CheckFifoParam+0xd8>
 8001e0a:	a201      	add	r2, pc, #4	; (adr r2, 8001e10 <DMA_CheckFifoParam+0x70>)
 8001e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e10:	08001e21 	.word	0x08001e21
 8001e14:	08001e27 	.word	0x08001e27
 8001e18:	08001e21 	.word	0x08001e21
 8001e1c:	08001e39 	.word	0x08001e39
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	73fb      	strb	r3, [r7, #15]
      break;
 8001e24:	e02f      	b.n	8001e86 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d024      	beq.n	8001e7c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e36:	e021      	b.n	8001e7c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e40:	d11e      	bne.n	8001e80 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e46:	e01b      	b.n	8001e80 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d902      	bls.n	8001e54 <DMA_CheckFifoParam+0xb4>
 8001e4e:	2b03      	cmp	r3, #3
 8001e50:	d003      	beq.n	8001e5a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e52:	e018      	b.n	8001e86 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	73fb      	strb	r3, [r7, #15]
      break;
 8001e58:	e015      	b.n	8001e86 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00e      	beq.n	8001e84 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	73fb      	strb	r3, [r7, #15]
      break;
 8001e6a:	e00b      	b.n	8001e84 <DMA_CheckFifoParam+0xe4>
      break;
 8001e6c:	bf00      	nop
 8001e6e:	e00a      	b.n	8001e86 <DMA_CheckFifoParam+0xe6>
      break;
 8001e70:	bf00      	nop
 8001e72:	e008      	b.n	8001e86 <DMA_CheckFifoParam+0xe6>
      break;
 8001e74:	bf00      	nop
 8001e76:	e006      	b.n	8001e86 <DMA_CheckFifoParam+0xe6>
      break;
 8001e78:	bf00      	nop
 8001e7a:	e004      	b.n	8001e86 <DMA_CheckFifoParam+0xe6>
      break;
 8001e7c:	bf00      	nop
 8001e7e:	e002      	b.n	8001e86 <DMA_CheckFifoParam+0xe6>
      break;   
 8001e80:	bf00      	nop
 8001e82:	e000      	b.n	8001e86 <DMA_CheckFifoParam+0xe6>
      break;
 8001e84:	bf00      	nop
    }
  } 
  
  return status; 
 8001e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b089      	sub	sp, #36	; 0x24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61fb      	str	r3, [r7, #28]
 8001eae:	e16b      	b.n	8002188 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	697a      	ldr	r2, [r7, #20]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	f040 815a 	bne.w	8002182 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d00b      	beq.n	8001eee <HAL_GPIO_Init+0x5a>
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d007      	beq.n	8001eee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ee2:	2b11      	cmp	r3, #17
 8001ee4:	d003      	beq.n	8001eee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2b12      	cmp	r3, #18
 8001eec:	d130      	bne.n	8001f50 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	2203      	movs	r2, #3
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43db      	mvns	r3, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4013      	ands	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	68da      	ldr	r2, [r3, #12]
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f24:	2201      	movs	r2, #1
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4013      	ands	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	091b      	lsrs	r3, r3, #4
 8001f3a:	f003 0201 	and.w	r2, r3, #1
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	2203      	movs	r2, #3
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	43db      	mvns	r3, r3
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4013      	ands	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d003      	beq.n	8001f90 <HAL_GPIO_Init+0xfc>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	2b12      	cmp	r3, #18
 8001f8e:	d123      	bne.n	8001fd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	08da      	lsrs	r2, r3, #3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3208      	adds	r2, #8
 8001f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	220f      	movs	r2, #15
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	43db      	mvns	r3, r3
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	691a      	ldr	r2, [r3, #16]
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	08da      	lsrs	r2, r3, #3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	3208      	adds	r2, #8
 8001fd2:	69b9      	ldr	r1, [r7, #24]
 8001fd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	2203      	movs	r2, #3
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	4013      	ands	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 0203 	and.w	r2, r3, #3
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4313      	orrs	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002014:	2b00      	cmp	r3, #0
 8002016:	f000 80b4 	beq.w	8002182 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	4b5f      	ldr	r3, [pc, #380]	; (800219c <HAL_GPIO_Init+0x308>)
 8002020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002022:	4a5e      	ldr	r2, [pc, #376]	; (800219c <HAL_GPIO_Init+0x308>)
 8002024:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002028:	6453      	str	r3, [r2, #68]	; 0x44
 800202a:	4b5c      	ldr	r3, [pc, #368]	; (800219c <HAL_GPIO_Init+0x308>)
 800202c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002036:	4a5a      	ldr	r2, [pc, #360]	; (80021a0 <HAL_GPIO_Init+0x30c>)
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	089b      	lsrs	r3, r3, #2
 800203c:	3302      	adds	r3, #2
 800203e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002042:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	f003 0303 	and.w	r3, r3, #3
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	220f      	movs	r2, #15
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43db      	mvns	r3, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4013      	ands	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a51      	ldr	r2, [pc, #324]	; (80021a4 <HAL_GPIO_Init+0x310>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d02b      	beq.n	80020ba <HAL_GPIO_Init+0x226>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a50      	ldr	r2, [pc, #320]	; (80021a8 <HAL_GPIO_Init+0x314>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d025      	beq.n	80020b6 <HAL_GPIO_Init+0x222>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a4f      	ldr	r2, [pc, #316]	; (80021ac <HAL_GPIO_Init+0x318>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d01f      	beq.n	80020b2 <HAL_GPIO_Init+0x21e>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a4e      	ldr	r2, [pc, #312]	; (80021b0 <HAL_GPIO_Init+0x31c>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d019      	beq.n	80020ae <HAL_GPIO_Init+0x21a>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a4d      	ldr	r2, [pc, #308]	; (80021b4 <HAL_GPIO_Init+0x320>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d013      	beq.n	80020aa <HAL_GPIO_Init+0x216>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a4c      	ldr	r2, [pc, #304]	; (80021b8 <HAL_GPIO_Init+0x324>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d00d      	beq.n	80020a6 <HAL_GPIO_Init+0x212>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a4b      	ldr	r2, [pc, #300]	; (80021bc <HAL_GPIO_Init+0x328>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d007      	beq.n	80020a2 <HAL_GPIO_Init+0x20e>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a4a      	ldr	r2, [pc, #296]	; (80021c0 <HAL_GPIO_Init+0x32c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d101      	bne.n	800209e <HAL_GPIO_Init+0x20a>
 800209a:	2307      	movs	r3, #7
 800209c:	e00e      	b.n	80020bc <HAL_GPIO_Init+0x228>
 800209e:	2308      	movs	r3, #8
 80020a0:	e00c      	b.n	80020bc <HAL_GPIO_Init+0x228>
 80020a2:	2306      	movs	r3, #6
 80020a4:	e00a      	b.n	80020bc <HAL_GPIO_Init+0x228>
 80020a6:	2305      	movs	r3, #5
 80020a8:	e008      	b.n	80020bc <HAL_GPIO_Init+0x228>
 80020aa:	2304      	movs	r3, #4
 80020ac:	e006      	b.n	80020bc <HAL_GPIO_Init+0x228>
 80020ae:	2303      	movs	r3, #3
 80020b0:	e004      	b.n	80020bc <HAL_GPIO_Init+0x228>
 80020b2:	2302      	movs	r3, #2
 80020b4:	e002      	b.n	80020bc <HAL_GPIO_Init+0x228>
 80020b6:	2301      	movs	r3, #1
 80020b8:	e000      	b.n	80020bc <HAL_GPIO_Init+0x228>
 80020ba:	2300      	movs	r3, #0
 80020bc:	69fa      	ldr	r2, [r7, #28]
 80020be:	f002 0203 	and.w	r2, r2, #3
 80020c2:	0092      	lsls	r2, r2, #2
 80020c4:	4093      	lsls	r3, r2
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020cc:	4934      	ldr	r1, [pc, #208]	; (80021a0 <HAL_GPIO_Init+0x30c>)
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	089b      	lsrs	r3, r3, #2
 80020d2:	3302      	adds	r3, #2
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020da:	4b3a      	ldr	r3, [pc, #232]	; (80021c4 <HAL_GPIO_Init+0x330>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	43db      	mvns	r3, r3
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	4013      	ands	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020fe:	4a31      	ldr	r2, [pc, #196]	; (80021c4 <HAL_GPIO_Init+0x330>)
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002104:	4b2f      	ldr	r3, [pc, #188]	; (80021c4 <HAL_GPIO_Init+0x330>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	43db      	mvns	r3, r3
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	4013      	ands	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d003      	beq.n	8002128 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	4313      	orrs	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002128:	4a26      	ldr	r2, [pc, #152]	; (80021c4 <HAL_GPIO_Init+0x330>)
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800212e:	4b25      	ldr	r3, [pc, #148]	; (80021c4 <HAL_GPIO_Init+0x330>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	43db      	mvns	r3, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4013      	ands	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	4313      	orrs	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002152:	4a1c      	ldr	r2, [pc, #112]	; (80021c4 <HAL_GPIO_Init+0x330>)
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002158:	4b1a      	ldr	r3, [pc, #104]	; (80021c4 <HAL_GPIO_Init+0x330>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	43db      	mvns	r3, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4013      	ands	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4313      	orrs	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800217c:	4a11      	ldr	r2, [pc, #68]	; (80021c4 <HAL_GPIO_Init+0x330>)
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	3301      	adds	r3, #1
 8002186:	61fb      	str	r3, [r7, #28]
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	2b0f      	cmp	r3, #15
 800218c:	f67f ae90 	bls.w	8001eb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002190:	bf00      	nop
 8002192:	3724      	adds	r7, #36	; 0x24
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	40023800 	.word	0x40023800
 80021a0:	40013800 	.word	0x40013800
 80021a4:	40020000 	.word	0x40020000
 80021a8:	40020400 	.word	0x40020400
 80021ac:	40020800 	.word	0x40020800
 80021b0:	40020c00 	.word	0x40020c00
 80021b4:	40021000 	.word	0x40021000
 80021b8:	40021400 	.word	0x40021400
 80021bc:	40021800 	.word	0x40021800
 80021c0:	40021c00 	.word	0x40021c00
 80021c4:	40013c00 	.word	0x40013c00

080021c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	460b      	mov	r3, r1
 80021d2:	807b      	strh	r3, [r7, #2]
 80021d4:	4613      	mov	r3, r2
 80021d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021d8:	787b      	ldrb	r3, [r7, #1]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021de:	887a      	ldrh	r2, [r7, #2]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021e4:	e003      	b.n	80021ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021e6:	887b      	ldrh	r3, [r7, #2]
 80021e8:	041a      	lsls	r2, r3, #16
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	619a      	str	r2, [r3, #24]
}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021fc:	b08f      	sub	sp, #60	; 0x3c
 80021fe:	af0a      	add	r7, sp, #40	; 0x28
 8002200:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e10f      	b.n	800242c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d106      	bne.n	800222c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f005 fb1c 	bl	8007864 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2203      	movs	r2, #3
 8002230:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800223c:	2b00      	cmp	r3, #0
 800223e:	d102      	bne.n	8002246 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f002 fa99 	bl	8004782 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	603b      	str	r3, [r7, #0]
 8002256:	687e      	ldr	r6, [r7, #4]
 8002258:	466d      	mov	r5, sp
 800225a:	f106 0410 	add.w	r4, r6, #16
 800225e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002260:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002262:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002264:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002266:	e894 0003 	ldmia.w	r4, {r0, r1}
 800226a:	e885 0003 	stmia.w	r5, {r0, r1}
 800226e:	1d33      	adds	r3, r6, #4
 8002270:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002272:	6838      	ldr	r0, [r7, #0]
 8002274:	f002 f970 	bl	8004558 <USB_CoreInit>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d005      	beq.n	800228a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2202      	movs	r2, #2
 8002282:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e0d0      	b.n	800242c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2100      	movs	r1, #0
 8002290:	4618      	mov	r0, r3
 8002292:	f002 fa87 	bl	80047a4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002296:	2300      	movs	r3, #0
 8002298:	73fb      	strb	r3, [r7, #15]
 800229a:	e04a      	b.n	8002332 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800229c:	7bfa      	ldrb	r2, [r7, #15]
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	4613      	mov	r3, r2
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	1a9b      	subs	r3, r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	440b      	add	r3, r1
 80022aa:	333d      	adds	r3, #61	; 0x3d
 80022ac:	2201      	movs	r2, #1
 80022ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022b0:	7bfa      	ldrb	r2, [r7, #15]
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	4613      	mov	r3, r2
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	1a9b      	subs	r3, r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	440b      	add	r3, r1
 80022be:	333c      	adds	r3, #60	; 0x3c
 80022c0:	7bfa      	ldrb	r2, [r7, #15]
 80022c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022c4:	7bfa      	ldrb	r2, [r7, #15]
 80022c6:	7bfb      	ldrb	r3, [r7, #15]
 80022c8:	b298      	uxth	r0, r3
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	4613      	mov	r3, r2
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	1a9b      	subs	r3, r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	3342      	adds	r3, #66	; 0x42
 80022d8:	4602      	mov	r2, r0
 80022da:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022dc:	7bfa      	ldrb	r2, [r7, #15]
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	4613      	mov	r3, r2
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	1a9b      	subs	r3, r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	440b      	add	r3, r1
 80022ea:	333f      	adds	r3, #63	; 0x3f
 80022ec:	2200      	movs	r2, #0
 80022ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022f0:	7bfa      	ldrb	r2, [r7, #15]
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	4613      	mov	r3, r2
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	1a9b      	subs	r3, r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	440b      	add	r3, r1
 80022fe:	3344      	adds	r3, #68	; 0x44
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002304:	7bfa      	ldrb	r2, [r7, #15]
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	4613      	mov	r3, r2
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	1a9b      	subs	r3, r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	440b      	add	r3, r1
 8002312:	3348      	adds	r3, #72	; 0x48
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002318:	7bfa      	ldrb	r2, [r7, #15]
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	4613      	mov	r3, r2
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	1a9b      	subs	r3, r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	440b      	add	r3, r1
 8002326:	3350      	adds	r3, #80	; 0x50
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800232c:	7bfb      	ldrb	r3, [r7, #15]
 800232e:	3301      	adds	r3, #1
 8002330:	73fb      	strb	r3, [r7, #15]
 8002332:	7bfa      	ldrb	r2, [r7, #15]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	429a      	cmp	r2, r3
 800233a:	d3af      	bcc.n	800229c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800233c:	2300      	movs	r3, #0
 800233e:	73fb      	strb	r3, [r7, #15]
 8002340:	e044      	b.n	80023cc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002342:	7bfa      	ldrb	r2, [r7, #15]
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	4613      	mov	r3, r2
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	1a9b      	subs	r3, r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	440b      	add	r3, r1
 8002350:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002354:	2200      	movs	r2, #0
 8002356:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002358:	7bfa      	ldrb	r2, [r7, #15]
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	4613      	mov	r3, r2
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	1a9b      	subs	r3, r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	440b      	add	r3, r1
 8002366:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800236a:	7bfa      	ldrb	r2, [r7, #15]
 800236c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800236e:	7bfa      	ldrb	r2, [r7, #15]
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	1a9b      	subs	r3, r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	440b      	add	r3, r1
 800237c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002380:	2200      	movs	r2, #0
 8002382:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002384:	7bfa      	ldrb	r2, [r7, #15]
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	4613      	mov	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	1a9b      	subs	r3, r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	440b      	add	r3, r1
 8002392:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800239a:	7bfa      	ldrb	r2, [r7, #15]
 800239c:	6879      	ldr	r1, [r7, #4]
 800239e:	4613      	mov	r3, r2
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	1a9b      	subs	r3, r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	440b      	add	r3, r1
 80023a8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023b0:	7bfa      	ldrb	r2, [r7, #15]
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	1a9b      	subs	r3, r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	440b      	add	r3, r1
 80023be:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023c6:	7bfb      	ldrb	r3, [r7, #15]
 80023c8:	3301      	adds	r3, #1
 80023ca:	73fb      	strb	r3, [r7, #15]
 80023cc:	7bfa      	ldrb	r2, [r7, #15]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d3b5      	bcc.n	8002342 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	603b      	str	r3, [r7, #0]
 80023dc:	687e      	ldr	r6, [r7, #4]
 80023de:	466d      	mov	r5, sp
 80023e0:	f106 0410 	add.w	r4, r6, #16
 80023e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80023f4:	1d33      	adds	r3, r6, #4
 80023f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023f8:	6838      	ldr	r0, [r7, #0]
 80023fa:	f002 f9fd 	bl	80047f8 <USB_DevInit>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d005      	beq.n	8002410 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2202      	movs	r2, #2
 8002408:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e00d      	b.n	800242c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f003 fa45 	bl	80058b4 <USB_DevDisconnect>

  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002434 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002448:	2b01      	cmp	r3, #1
 800244a:	d101      	bne.n	8002450 <HAL_PCD_Start+0x1c>
 800244c:	2302      	movs	r3, #2
 800244e:	e020      	b.n	8002492 <HAL_PCD_Start+0x5e>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800245c:	2b01      	cmp	r3, #1
 800245e:	d109      	bne.n	8002474 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002464:	2b01      	cmp	r3, #1
 8002466:	d005      	beq.n	8002474 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800246c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4618      	mov	r0, r3
 800247a:	f002 f971 	bl	8004760 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f003 f9f5 	bl	8005872 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800249a:	b590      	push	{r4, r7, lr}
 800249c:	b08d      	sub	sp, #52	; 0x34
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024a8:	6a3b      	ldr	r3, [r7, #32]
 80024aa:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f003 fab3 	bl	8005a1c <USB_GetMode>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f040 839d 	bne.w	8002bf8 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f003 fa17 	bl	80058f6 <USB_ReadInterrupts>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f000 8393 	beq.w	8002bf6 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f003 fa0e 	bl	80058f6 <USB_ReadInterrupts>
 80024da:	4603      	mov	r3, r0
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d107      	bne.n	80024f4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	695a      	ldr	r2, [r3, #20]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f002 0202 	and.w	r2, r2, #2
 80024f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f003 f9fc 	bl	80058f6 <USB_ReadInterrupts>
 80024fe:	4603      	mov	r3, r0
 8002500:	f003 0310 	and.w	r3, r3, #16
 8002504:	2b10      	cmp	r3, #16
 8002506:	d161      	bne.n	80025cc <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	699a      	ldr	r2, [r3, #24]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 0210 	bic.w	r2, r2, #16
 8002516:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002518:	6a3b      	ldr	r3, [r7, #32]
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	f003 020f 	and.w	r2, r3, #15
 8002524:	4613      	mov	r3, r2
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	1a9b      	subs	r3, r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	4413      	add	r3, r2
 8002534:	3304      	adds	r3, #4
 8002536:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	0c5b      	lsrs	r3, r3, #17
 800253c:	f003 030f 	and.w	r3, r3, #15
 8002540:	2b02      	cmp	r3, #2
 8002542:	d124      	bne.n	800258e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800254a:	4013      	ands	r3, r2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d035      	beq.n	80025bc <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	091b      	lsrs	r3, r3, #4
 8002558:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800255a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800255e:	b29b      	uxth	r3, r3
 8002560:	461a      	mov	r2, r3
 8002562:	6a38      	ldr	r0, [r7, #32]
 8002564:	f003 f862 	bl	800562c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	68da      	ldr	r2, [r3, #12]
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	091b      	lsrs	r3, r3, #4
 8002570:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002574:	441a      	add	r2, r3
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	699a      	ldr	r2, [r3, #24]
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	091b      	lsrs	r3, r3, #4
 8002582:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002586:	441a      	add	r2, r3
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	619a      	str	r2, [r3, #24]
 800258c:	e016      	b.n	80025bc <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	0c5b      	lsrs	r3, r3, #17
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	2b06      	cmp	r3, #6
 8002598:	d110      	bne.n	80025bc <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80025a0:	2208      	movs	r2, #8
 80025a2:	4619      	mov	r1, r3
 80025a4:	6a38      	ldr	r0, [r7, #32]
 80025a6:	f003 f841 	bl	800562c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	699a      	ldr	r2, [r3, #24]
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	091b      	lsrs	r3, r3, #4
 80025b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025b6:	441a      	add	r2, r3
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	699a      	ldr	r2, [r3, #24]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f042 0210 	orr.w	r2, r2, #16
 80025ca:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f003 f990 	bl	80058f6 <USB_ReadInterrupts>
 80025d6:	4603      	mov	r3, r0
 80025d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025dc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80025e0:	d16e      	bne.n	80026c0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80025e2:	2300      	movs	r3, #0
 80025e4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f003 f996 	bl	800591c <USB_ReadDevAllOutEpInterrupt>
 80025f0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80025f2:	e062      	b.n	80026ba <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80025f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d057      	beq.n	80026ae <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	4611      	mov	r1, r2
 8002608:	4618      	mov	r0, r3
 800260a:	f003 f9bb 	bl	8005984 <USB_ReadDevOutEPInterrupt>
 800260e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00c      	beq.n	8002634 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	015a      	lsls	r2, r3, #5
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	4413      	add	r3, r2
 8002622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002626:	461a      	mov	r2, r3
 8002628:	2301      	movs	r3, #1
 800262a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800262c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 fdb0 	bl	8003194 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	f003 0308 	and.w	r3, r3, #8
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00c      	beq.n	8002658 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002640:	015a      	lsls	r2, r3, #5
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	4413      	add	r3, r2
 8002646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800264a:	461a      	mov	r2, r3
 800264c:	2308      	movs	r3, #8
 800264e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002650:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 feaa 	bl	80033ac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	f003 0310 	and.w	r3, r3, #16
 800265e:	2b00      	cmp	r3, #0
 8002660:	d008      	beq.n	8002674 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	015a      	lsls	r2, r3, #5
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	4413      	add	r3, r2
 800266a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800266e:	461a      	mov	r2, r3
 8002670:	2310      	movs	r3, #16
 8002672:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	f003 0320 	and.w	r3, r3, #32
 800267a:	2b00      	cmp	r3, #0
 800267c:	d008      	beq.n	8002690 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002680:	015a      	lsls	r2, r3, #5
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	4413      	add	r3, r2
 8002686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800268a:	461a      	mov	r2, r3
 800268c:	2320      	movs	r3, #32
 800268e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d009      	beq.n	80026ae <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	015a      	lsls	r2, r3, #5
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	4413      	add	r3, r2
 80026a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026a6:	461a      	mov	r2, r3
 80026a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026ac:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	3301      	adds	r3, #1
 80026b2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80026b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b6:	085b      	lsrs	r3, r3, #1
 80026b8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80026ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d199      	bne.n	80025f4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f003 f916 	bl	80058f6 <USB_ReadInterrupts>
 80026ca:	4603      	mov	r3, r0
 80026cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80026d4:	f040 80c0 	bne.w	8002858 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4618      	mov	r0, r3
 80026de:	f003 f937 	bl	8005950 <USB_ReadDevAllInEpInterrupt>
 80026e2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80026e8:	e0b2      	b.n	8002850 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80026ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 80a7 	beq.w	8002844 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026fc:	b2d2      	uxtb	r2, r2
 80026fe:	4611      	mov	r1, r2
 8002700:	4618      	mov	r0, r3
 8002702:	f003 f95d 	bl	80059c0 <USB_ReadDevInEPInterrupt>
 8002706:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b00      	cmp	r3, #0
 8002710:	d057      	beq.n	80027c2 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	f003 030f 	and.w	r3, r3, #15
 8002718:	2201      	movs	r2, #1
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002726:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	43db      	mvns	r3, r3
 800272c:	69f9      	ldr	r1, [r7, #28]
 800272e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002732:	4013      	ands	r3, r2
 8002734:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002738:	015a      	lsls	r2, r3, #5
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	4413      	add	r3, r2
 800273e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002742:	461a      	mov	r2, r3
 8002744:	2301      	movs	r3, #1
 8002746:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d132      	bne.n	80027b6 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002754:	4613      	mov	r3, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	1a9b      	subs	r3, r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	440b      	add	r3, r1
 800275e:	3348      	adds	r3, #72	; 0x48
 8002760:	6819      	ldr	r1, [r3, #0]
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002766:	4613      	mov	r3, r2
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	1a9b      	subs	r3, r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4403      	add	r3, r0
 8002770:	3344      	adds	r3, #68	; 0x44
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4419      	add	r1, r3
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800277a:	4613      	mov	r3, r2
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	1a9b      	subs	r3, r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	4403      	add	r3, r0
 8002784:	3348      	adds	r3, #72	; 0x48
 8002786:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278a:	2b00      	cmp	r3, #0
 800278c:	d113      	bne.n	80027b6 <HAL_PCD_IRQHandler+0x31c>
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002792:	4613      	mov	r3, r2
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	1a9b      	subs	r3, r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	440b      	add	r3, r1
 800279c:	3350      	adds	r3, #80	; 0x50
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d108      	bne.n	80027b6 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6818      	ldr	r0, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80027ae:	461a      	mov	r2, r3
 80027b0:	2101      	movs	r1, #1
 80027b2:	f003 f965 	bl	8005a80 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	4619      	mov	r1, r3
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f005 f904 	bl	80079ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	f003 0308 	and.w	r3, r3, #8
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d008      	beq.n	80027de <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80027cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ce:	015a      	lsls	r2, r3, #5
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	4413      	add	r3, r2
 80027d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027d8:	461a      	mov	r2, r3
 80027da:	2308      	movs	r3, #8
 80027dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	f003 0310 	and.w	r3, r3, #16
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d008      	beq.n	80027fa <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80027e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ea:	015a      	lsls	r2, r3, #5
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	4413      	add	r3, r2
 80027f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027f4:	461a      	mov	r2, r3
 80027f6:	2310      	movs	r3, #16
 80027f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002800:	2b00      	cmp	r3, #0
 8002802:	d008      	beq.n	8002816 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002806:	015a      	lsls	r2, r3, #5
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	4413      	add	r3, r2
 800280c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002810:	461a      	mov	r2, r3
 8002812:	2340      	movs	r3, #64	; 0x40
 8002814:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d008      	beq.n	8002832 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	015a      	lsls	r2, r3, #5
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	4413      	add	r3, r2
 8002828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800282c:	461a      	mov	r2, r3
 800282e:	2302      	movs	r3, #2
 8002830:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002838:	2b00      	cmp	r3, #0
 800283a:	d003      	beq.n	8002844 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800283c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 fc1b 	bl	800307a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	3301      	adds	r3, #1
 8002848:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800284a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800284c:	085b      	lsrs	r3, r3, #1
 800284e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002852:	2b00      	cmp	r3, #0
 8002854:	f47f af49 	bne.w	80026ea <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f003 f84a 	bl	80058f6 <USB_ReadInterrupts>
 8002862:	4603      	mov	r3, r0
 8002864:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002868:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800286c:	d122      	bne.n	80028b4 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	69fa      	ldr	r2, [r7, #28]
 8002878:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800287c:	f023 0301 	bic.w	r3, r3, #1
 8002880:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002888:	2b01      	cmp	r3, #1
 800288a:	d108      	bne.n	800289e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002894:	2100      	movs	r1, #0
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 fe26 	bl	80034e8 <HAL_PCDEx_LPM_Callback>
 800289c:	e002      	b.n	80028a4 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f005 f90a 	bl	8007ab8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	695a      	ldr	r2, [r3, #20]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80028b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f003 f81c 	bl	80058f6 <USB_ReadInterrupts>
 80028be:	4603      	mov	r3, r0
 80028c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028c8:	d112      	bne.n	80028f0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d102      	bne.n	80028e0 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f005 f8c6 	bl	8007a6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	695a      	ldr	r2, [r3, #20]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80028ee:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f002 fffe 	bl	80058f6 <USB_ReadInterrupts>
 80028fa:	4603      	mov	r3, r0
 80028fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002900:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002904:	f040 80c7 	bne.w	8002a96 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	69fa      	ldr	r2, [r7, #28]
 8002912:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002916:	f023 0301 	bic.w	r3, r3, #1
 800291a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2110      	movs	r1, #16
 8002922:	4618      	mov	r0, r3
 8002924:	f002 f8cc 	bl	8004ac0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002928:	2300      	movs	r3, #0
 800292a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800292c:	e056      	b.n	80029dc <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800292e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002930:	015a      	lsls	r2, r3, #5
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	4413      	add	r3, r2
 8002936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800293a:	461a      	mov	r2, r3
 800293c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002940:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002944:	015a      	lsls	r2, r3, #5
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	4413      	add	r3, r2
 800294a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002952:	0151      	lsls	r1, r2, #5
 8002954:	69fa      	ldr	r2, [r7, #28]
 8002956:	440a      	add	r2, r1
 8002958:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800295c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002960:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002964:	015a      	lsls	r2, r3, #5
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	4413      	add	r3, r2
 800296a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002972:	0151      	lsls	r1, r2, #5
 8002974:	69fa      	ldr	r2, [r7, #28]
 8002976:	440a      	add	r2, r1
 8002978:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800297c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002980:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002984:	015a      	lsls	r2, r3, #5
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	4413      	add	r3, r2
 800298a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800298e:	461a      	mov	r2, r3
 8002990:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002994:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002998:	015a      	lsls	r2, r3, #5
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	4413      	add	r3, r2
 800299e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029a6:	0151      	lsls	r1, r2, #5
 80029a8:	69fa      	ldr	r2, [r7, #28]
 80029aa:	440a      	add	r2, r1
 80029ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80029b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029b4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80029b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b8:	015a      	lsls	r2, r3, #5
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	4413      	add	r3, r2
 80029be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029c6:	0151      	lsls	r1, r2, #5
 80029c8:	69fa      	ldr	r2, [r7, #28]
 80029ca:	440a      	add	r2, r1
 80029cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80029d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80029d4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d8:	3301      	adds	r3, #1
 80029da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d3a3      	bcc.n	800292e <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	69fa      	ldr	r2, [r7, #28]
 80029f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029f4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80029f8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d016      	beq.n	8002a30 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a0c:	69fa      	ldr	r2, [r7, #28]
 8002a0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a12:	f043 030b 	orr.w	r3, r3, #11
 8002a16:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a22:	69fa      	ldr	r2, [r7, #28]
 8002a24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a28:	f043 030b 	orr.w	r3, r3, #11
 8002a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a2e:	e015      	b.n	8002a5c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a36:	695b      	ldr	r3, [r3, #20]
 8002a38:	69fa      	ldr	r2, [r7, #28]
 8002a3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a3e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a42:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002a46:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	69fa      	ldr	r2, [r7, #28]
 8002a52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a56:	f043 030b 	orr.w	r3, r3, #11
 8002a5a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	69fa      	ldr	r2, [r7, #28]
 8002a66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a6a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002a6e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6818      	ldr	r0, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002a80:	461a      	mov	r2, r3
 8002a82:	f002 fffd 	bl	8005a80 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	695a      	ldr	r2, [r3, #20]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002a94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f002 ff2b 	bl	80058f6 <USB_ReadInterrupts>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002aa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aaa:	d124      	bne.n	8002af6 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f002 ffc1 	bl	8005a38 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f002 f861 	bl	8004b82 <USB_GetDevSpeed>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681c      	ldr	r4, [r3, #0]
 8002acc:	f001 f946 	bl	8003d5c <HAL_RCC_GetHCLKFreq>
 8002ad0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	461a      	mov	r2, r3
 8002ada:	4620      	mov	r0, r4
 8002adc:	f001 fd9e 	bl	800461c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f004 ff9a 	bl	8007a1a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	695a      	ldr	r2, [r3, #20]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002af4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f002 fefb 	bl	80058f6 <USB_ReadInterrupts>
 8002b00:	4603      	mov	r3, r0
 8002b02:	f003 0308 	and.w	r3, r3, #8
 8002b06:	2b08      	cmp	r3, #8
 8002b08:	d10a      	bne.n	8002b20 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f004 ff77 	bl	80079fe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	695a      	ldr	r2, [r3, #20]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f002 0208 	and.w	r2, r2, #8
 8002b1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f002 fee6 	bl	80058f6 <USB_ReadInterrupts>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b34:	d10f      	bne.n	8002b56 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002b36:	2300      	movs	r3, #0
 8002b38:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	4619      	mov	r1, r3
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f004 ffd9 	bl	8007af8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	695a      	ldr	r2, [r3, #20]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002b54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f002 fecb 	bl	80058f6 <USB_ReadInterrupts>
 8002b60:	4603      	mov	r3, r0
 8002b62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b6a:	d10f      	bne.n	8002b8c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	4619      	mov	r1, r3
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f004 ffac 	bl	8007ad4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	695a      	ldr	r2, [r3, #20]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002b8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f002 feb0 	bl	80058f6 <USB_ReadInterrupts>
 8002b96:	4603      	mov	r3, r0
 8002b98:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ba0:	d10a      	bne.n	8002bb8 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f004 ffba 	bl	8007b1c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	695a      	ldr	r2, [r3, #20]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002bb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f002 fe9a 	bl	80058f6 <USB_ReadInterrupts>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	f003 0304 	and.w	r3, r3, #4
 8002bc8:	2b04      	cmp	r3, #4
 8002bca:	d115      	bne.n	8002bf8 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	f003 0304 	and.w	r3, r3, #4
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d002      	beq.n	8002be4 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f004 ffaa 	bl	8007b38 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6859      	ldr	r1, [r3, #4]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	605a      	str	r2, [r3, #4]
 8002bf4:	e000      	b.n	8002bf8 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002bf6:	bf00      	nop
    }
  }
}
 8002bf8:	3734      	adds	r7, #52	; 0x34
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd90      	pop	{r4, r7, pc}

08002bfe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b082      	sub	sp, #8
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
 8002c06:	460b      	mov	r3, r1
 8002c08:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d101      	bne.n	8002c18 <HAL_PCD_SetAddress+0x1a>
 8002c14:	2302      	movs	r3, #2
 8002c16:	e013      	b.n	8002c40 <HAL_PCD_SetAddress+0x42>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	78fa      	ldrb	r2, [r7, #3]
 8002c24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	78fa      	ldrb	r2, [r7, #3]
 8002c2e:	4611      	mov	r1, r2
 8002c30:	4618      	mov	r0, r3
 8002c32:	f002 fdf8 	bl	8005826 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3708      	adds	r7, #8
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	4608      	mov	r0, r1
 8002c52:	4611      	mov	r1, r2
 8002c54:	461a      	mov	r2, r3
 8002c56:	4603      	mov	r3, r0
 8002c58:	70fb      	strb	r3, [r7, #3]
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	803b      	strh	r3, [r7, #0]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c62:	2300      	movs	r3, #0
 8002c64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	da0f      	bge.n	8002c8e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c6e:	78fb      	ldrb	r3, [r7, #3]
 8002c70:	f003 020f 	and.w	r2, r3, #15
 8002c74:	4613      	mov	r3, r2
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	1a9b      	subs	r3, r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	3338      	adds	r3, #56	; 0x38
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	4413      	add	r3, r2
 8002c82:	3304      	adds	r3, #4
 8002c84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	705a      	strb	r2, [r3, #1]
 8002c8c:	e00f      	b.n	8002cae <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c8e:	78fb      	ldrb	r3, [r7, #3]
 8002c90:	f003 020f 	and.w	r2, r3, #15
 8002c94:	4613      	mov	r3, r2
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	1a9b      	subs	r3, r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	3304      	adds	r3, #4
 8002ca6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002cae:	78fb      	ldrb	r3, [r7, #3]
 8002cb0:	f003 030f 	and.w	r3, r3, #15
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002cba:	883a      	ldrh	r2, [r7, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	78ba      	ldrb	r2, [r7, #2]
 8002cc4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	785b      	ldrb	r3, [r3, #1]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d004      	beq.n	8002cd8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002cd8:	78bb      	ldrb	r3, [r7, #2]
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d102      	bne.n	8002ce4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d101      	bne.n	8002cf2 <HAL_PCD_EP_Open+0xaa>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	e00e      	b.n	8002d10 <HAL_PCD_EP_Open+0xc8>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68f9      	ldr	r1, [r7, #12]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f001 ff63 	bl	8004bcc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002d0e:	7afb      	ldrb	r3, [r7, #11]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	460b      	mov	r3, r1
 8002d22:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	da0f      	bge.n	8002d4c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d2c:	78fb      	ldrb	r3, [r7, #3]
 8002d2e:	f003 020f 	and.w	r2, r3, #15
 8002d32:	4613      	mov	r3, r2
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	1a9b      	subs	r3, r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	3338      	adds	r3, #56	; 0x38
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	4413      	add	r3, r2
 8002d40:	3304      	adds	r3, #4
 8002d42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2201      	movs	r2, #1
 8002d48:	705a      	strb	r2, [r3, #1]
 8002d4a:	e00f      	b.n	8002d6c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d4c:	78fb      	ldrb	r3, [r7, #3]
 8002d4e:	f003 020f 	and.w	r2, r3, #15
 8002d52:	4613      	mov	r3, r2
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	1a9b      	subs	r3, r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	4413      	add	r3, r2
 8002d62:	3304      	adds	r3, #4
 8002d64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002d6c:	78fb      	ldrb	r3, [r7, #3]
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d101      	bne.n	8002d86 <HAL_PCD_EP_Close+0x6e>
 8002d82:	2302      	movs	r3, #2
 8002d84:	e00e      	b.n	8002da4 <HAL_PCD_EP_Close+0x8c>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68f9      	ldr	r1, [r7, #12]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f001 ffa1 	bl	8004cdc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	607a      	str	r2, [r7, #4]
 8002db6:	603b      	str	r3, [r7, #0]
 8002db8:	460b      	mov	r3, r1
 8002dba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dbc:	7afb      	ldrb	r3, [r7, #11]
 8002dbe:	f003 020f 	and.w	r2, r3, #15
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	1a9b      	subs	r3, r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	3304      	adds	r3, #4
 8002dd4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	2200      	movs	r2, #0
 8002de6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	2200      	movs	r2, #0
 8002dec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dee:	7afb      	ldrb	r3, [r7, #11]
 8002df0:	f003 030f 	and.w	r3, r3, #15
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d102      	bne.n	8002e08 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e08:	7afb      	ldrb	r3, [r7, #11]
 8002e0a:	f003 030f 	and.w	r3, r3, #15
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d109      	bne.n	8002e26 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6818      	ldr	r0, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	6979      	ldr	r1, [r7, #20]
 8002e20:	f002 fa7c 	bl	800531c <USB_EP0StartXfer>
 8002e24:	e008      	b.n	8002e38 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6818      	ldr	r0, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	461a      	mov	r2, r3
 8002e32:	6979      	ldr	r1, [r7, #20]
 8002e34:	f002 f82e 	bl	8004e94 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3718      	adds	r7, #24
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e42:	b480      	push	{r7}
 8002e44:	b083      	sub	sp, #12
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e4e:	78fb      	ldrb	r3, [r7, #3]
 8002e50:	f003 020f 	and.w	r2, r3, #15
 8002e54:	6879      	ldr	r1, [r7, #4]
 8002e56:	4613      	mov	r3, r2
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	1a9b      	subs	r3, r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	440b      	add	r3, r1
 8002e60:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002e64:	681b      	ldr	r3, [r3, #0]
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr

08002e72 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b086      	sub	sp, #24
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	60f8      	str	r0, [r7, #12]
 8002e7a:	607a      	str	r2, [r7, #4]
 8002e7c:	603b      	str	r3, [r7, #0]
 8002e7e:	460b      	mov	r3, r1
 8002e80:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e82:	7afb      	ldrb	r3, [r7, #11]
 8002e84:	f003 020f 	and.w	r2, r3, #15
 8002e88:	4613      	mov	r3, r2
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	1a9b      	subs	r3, r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	3338      	adds	r3, #56	; 0x38
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	4413      	add	r3, r2
 8002e96:	3304      	adds	r3, #4
 8002e98:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002eb2:	7afb      	ldrb	r3, [r7, #11]
 8002eb4:	f003 030f 	and.w	r3, r3, #15
 8002eb8:	b2da      	uxtb	r2, r3
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d102      	bne.n	8002ecc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ecc:	7afb      	ldrb	r3, [r7, #11]
 8002ece:	f003 030f 	and.w	r3, r3, #15
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d109      	bne.n	8002eea <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6818      	ldr	r0, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	6979      	ldr	r1, [r7, #20]
 8002ee4:	f002 fa1a 	bl	800531c <USB_EP0StartXfer>
 8002ee8:	e008      	b.n	8002efc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6818      	ldr	r0, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	6979      	ldr	r1, [r7, #20]
 8002ef8:	f001 ffcc 	bl	8004e94 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3718      	adds	r7, #24
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b084      	sub	sp, #16
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
 8002f0e:	460b      	mov	r3, r1
 8002f10:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f12:	78fb      	ldrb	r3, [r7, #3]
 8002f14:	f003 020f 	and.w	r2, r3, #15
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d901      	bls.n	8002f24 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e050      	b.n	8002fc6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	da0f      	bge.n	8002f4c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f2c:	78fb      	ldrb	r3, [r7, #3]
 8002f2e:	f003 020f 	and.w	r2, r3, #15
 8002f32:	4613      	mov	r3, r2
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	1a9b      	subs	r3, r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	3338      	adds	r3, #56	; 0x38
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	4413      	add	r3, r2
 8002f40:	3304      	adds	r3, #4
 8002f42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2201      	movs	r2, #1
 8002f48:	705a      	strb	r2, [r3, #1]
 8002f4a:	e00d      	b.n	8002f68 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f4c:	78fa      	ldrb	r2, [r7, #3]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	1a9b      	subs	r3, r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	3304      	adds	r3, #4
 8002f60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f6e:	78fb      	ldrb	r3, [r7, #3]
 8002f70:	f003 030f 	and.w	r3, r3, #15
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d101      	bne.n	8002f88 <HAL_PCD_EP_SetStall+0x82>
 8002f84:	2302      	movs	r3, #2
 8002f86:	e01e      	b.n	8002fc6 <HAL_PCD_EP_SetStall+0xc0>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68f9      	ldr	r1, [r7, #12]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f002 fb71 	bl	800567e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f9c:	78fb      	ldrb	r3, [r7, #3]
 8002f9e:	f003 030f 	and.w	r3, r3, #15
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10a      	bne.n	8002fbc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6818      	ldr	r0, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	b2d9      	uxtb	r1, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	f002 fd62 	bl	8005a80 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b084      	sub	sp, #16
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002fda:	78fb      	ldrb	r3, [r7, #3]
 8002fdc:	f003 020f 	and.w	r2, r3, #15
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d901      	bls.n	8002fec <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e042      	b.n	8003072 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	da0f      	bge.n	8003014 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ff4:	78fb      	ldrb	r3, [r7, #3]
 8002ff6:	f003 020f 	and.w	r2, r3, #15
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	1a9b      	subs	r3, r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	3338      	adds	r3, #56	; 0x38
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	4413      	add	r3, r2
 8003008:	3304      	adds	r3, #4
 800300a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2201      	movs	r2, #1
 8003010:	705a      	strb	r2, [r3, #1]
 8003012:	e00f      	b.n	8003034 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003014:	78fb      	ldrb	r3, [r7, #3]
 8003016:	f003 020f 	and.w	r2, r3, #15
 800301a:	4613      	mov	r3, r2
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	1a9b      	subs	r3, r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	4413      	add	r3, r2
 800302a:	3304      	adds	r3, #4
 800302c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800303a:	78fb      	ldrb	r3, [r7, #3]
 800303c:	f003 030f 	and.w	r3, r3, #15
 8003040:	b2da      	uxtb	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800304c:	2b01      	cmp	r3, #1
 800304e:	d101      	bne.n	8003054 <HAL_PCD_EP_ClrStall+0x86>
 8003050:	2302      	movs	r3, #2
 8003052:	e00e      	b.n	8003072 <HAL_PCD_EP_ClrStall+0xa4>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68f9      	ldr	r1, [r7, #12]
 8003062:	4618      	mov	r0, r3
 8003064:	f002 fb79 	bl	800575a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b08a      	sub	sp, #40	; 0x28
 800307e:	af02      	add	r7, sp, #8
 8003080:	6078      	str	r0, [r7, #4]
 8003082:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	4613      	mov	r3, r2
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	1a9b      	subs	r3, r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	3338      	adds	r3, #56	; 0x38
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	4413      	add	r3, r2
 800309e:	3304      	adds	r3, #4
 80030a0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	699a      	ldr	r2, [r3, #24]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d901      	bls.n	80030b2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e06c      	b.n	800318c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	695a      	ldr	r2, [r3, #20]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	69fa      	ldr	r2, [r7, #28]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d902      	bls.n	80030ce <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	3303      	adds	r3, #3
 80030d2:	089b      	lsrs	r3, r3, #2
 80030d4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030d6:	e02b      	b.n	8003130 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	695a      	ldr	r2, [r3, #20]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	69fa      	ldr	r2, [r7, #28]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d902      	bls.n	80030f4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	3303      	adds	r3, #3
 80030f8:	089b      	lsrs	r3, r3, #2
 80030fa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	68d9      	ldr	r1, [r3, #12]
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	b2da      	uxtb	r2, r3
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800310c:	b2db      	uxtb	r3, r3
 800310e:	9300      	str	r3, [sp, #0]
 8003110:	4603      	mov	r3, r0
 8003112:	6978      	ldr	r0, [r7, #20]
 8003114:	f002 fa55 	bl	80055c2 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	68da      	ldr	r2, [r3, #12]
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	441a      	add	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	699a      	ldr	r2, [r3, #24]
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	441a      	add	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	015a      	lsls	r2, r3, #5
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	4413      	add	r3, r2
 8003138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	b29b      	uxth	r3, r3
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	429a      	cmp	r2, r3
 8003144:	d809      	bhi.n	800315a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	699a      	ldr	r2, [r3, #24]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800314e:	429a      	cmp	r2, r3
 8003150:	d203      	bcs.n	800315a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1be      	bne.n	80030d8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	695a      	ldr	r2, [r3, #20]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	429a      	cmp	r2, r3
 8003164:	d811      	bhi.n	800318a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	f003 030f 	and.w	r3, r3, #15
 800316c:	2201      	movs	r2, #1
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800317a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	43db      	mvns	r3, r3
 8003180:	6939      	ldr	r1, [r7, #16]
 8003182:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003186:	4013      	ands	r3, r2
 8003188:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3720      	adds	r7, #32
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	333c      	adds	r3, #60	; 0x3c
 80031ac:	3304      	adds	r3, #4
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	015a      	lsls	r2, r3, #5
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	4413      	add	r3, r2
 80031ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	f040 80a0 	bne.w	800330c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	f003 0308 	and.w	r3, r3, #8
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d015      	beq.n	8003202 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	4a72      	ldr	r2, [pc, #456]	; (80033a4 <PCD_EP_OutXfrComplete_int+0x210>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	f240 80dd 	bls.w	800339a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 80d7 	beq.w	800339a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	015a      	lsls	r2, r3, #5
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	4413      	add	r3, r2
 80031f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031f8:	461a      	mov	r2, r3
 80031fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031fe:	6093      	str	r3, [r2, #8]
 8003200:	e0cb      	b.n	800339a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	f003 0320 	and.w	r3, r3, #32
 8003208:	2b00      	cmp	r3, #0
 800320a:	d009      	beq.n	8003220 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	015a      	lsls	r2, r3, #5
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	4413      	add	r3, r2
 8003214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003218:	461a      	mov	r2, r3
 800321a:	2320      	movs	r3, #32
 800321c:	6093      	str	r3, [r2, #8]
 800321e:	e0bc      	b.n	800339a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003226:	2b00      	cmp	r3, #0
 8003228:	f040 80b7 	bne.w	800339a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4a5d      	ldr	r2, [pc, #372]	; (80033a4 <PCD_EP_OutXfrComplete_int+0x210>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d90f      	bls.n	8003254 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00a      	beq.n	8003254 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	015a      	lsls	r2, r3, #5
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	4413      	add	r3, r2
 8003246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800324a:	461a      	mov	r2, r3
 800324c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003250:	6093      	str	r3, [r2, #8]
 8003252:	e0a2      	b.n	800339a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	4613      	mov	r3, r2
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	1a9b      	subs	r3, r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	440b      	add	r3, r1
 8003262:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003266:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	0159      	lsls	r1, r3, #5
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	440b      	add	r3, r1
 8003270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800327a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	4613      	mov	r3, r2
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	1a9b      	subs	r3, r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4403      	add	r3, r0
 800328a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800328e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	4613      	mov	r3, r2
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	1a9b      	subs	r3, r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80032a2:	6819      	ldr	r1, [r3, #0]
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	683a      	ldr	r2, [r7, #0]
 80032a8:	4613      	mov	r3, r2
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	1a9b      	subs	r3, r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4403      	add	r3, r0
 80032b2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4419      	add	r1, r3
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	4613      	mov	r3, r2
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	1a9b      	subs	r3, r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	4403      	add	r3, r0
 80032c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80032cc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d114      	bne.n	80032fe <PCD_EP_OutXfrComplete_int+0x16a>
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	4613      	mov	r3, r2
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	1a9b      	subs	r3, r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	440b      	add	r3, r1
 80032e2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d108      	bne.n	80032fe <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6818      	ldr	r0, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80032f6:	461a      	mov	r2, r3
 80032f8:	2101      	movs	r1, #1
 80032fa:	f002 fbc1 	bl	8005a80 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	b2db      	uxtb	r3, r3
 8003302:	4619      	mov	r1, r3
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f004 fb45 	bl	8007994 <HAL_PCD_DataOutStageCallback>
 800330a:	e046      	b.n	800339a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	4a26      	ldr	r2, [pc, #152]	; (80033a8 <PCD_EP_OutXfrComplete_int+0x214>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d124      	bne.n	800335e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00a      	beq.n	8003334 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	015a      	lsls	r2, r3, #5
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	4413      	add	r3, r2
 8003326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800332a:	461a      	mov	r2, r3
 800332c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003330:	6093      	str	r3, [r2, #8]
 8003332:	e032      	b.n	800339a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	f003 0320 	and.w	r3, r3, #32
 800333a:	2b00      	cmp	r3, #0
 800333c:	d008      	beq.n	8003350 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	015a      	lsls	r2, r3, #5
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	4413      	add	r3, r2
 8003346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800334a:	461a      	mov	r2, r3
 800334c:	2320      	movs	r3, #32
 800334e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	b2db      	uxtb	r3, r3
 8003354:	4619      	mov	r1, r3
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f004 fb1c 	bl	8007994 <HAL_PCD_DataOutStageCallback>
 800335c:	e01d      	b.n	800339a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d114      	bne.n	800338e <PCD_EP_OutXfrComplete_int+0x1fa>
 8003364:	6879      	ldr	r1, [r7, #4]
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	4613      	mov	r3, r2
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	1a9b      	subs	r3, r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	440b      	add	r3, r1
 8003372:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d108      	bne.n	800338e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6818      	ldr	r0, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003386:	461a      	mov	r2, r3
 8003388:	2100      	movs	r1, #0
 800338a:	f002 fb79 	bl	8005a80 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	b2db      	uxtb	r3, r3
 8003392:	4619      	mov	r1, r3
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f004 fafd 	bl	8007994 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3718      	adds	r7, #24
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	4f54300a 	.word	0x4f54300a
 80033a8:	4f54310a 	.word	0x4f54310a

080033ac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	333c      	adds	r3, #60	; 0x3c
 80033c4:	3304      	adds	r3, #4
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	015a      	lsls	r2, r3, #5
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	4413      	add	r3, r2
 80033d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	4a15      	ldr	r2, [pc, #84]	; (8003434 <PCD_EP_OutSetupPacket_int+0x88>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d90e      	bls.n	8003400 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d009      	beq.n	8003400 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	015a      	lsls	r2, r3, #5
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	4413      	add	r3, r2
 80033f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033f8:	461a      	mov	r2, r3
 80033fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033fe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f004 fab5 	bl	8007970 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	4a0a      	ldr	r2, [pc, #40]	; (8003434 <PCD_EP_OutSetupPacket_int+0x88>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d90c      	bls.n	8003428 <PCD_EP_OutSetupPacket_int+0x7c>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d108      	bne.n	8003428 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6818      	ldr	r0, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003420:	461a      	mov	r2, r3
 8003422:	2101      	movs	r1, #1
 8003424:	f002 fb2c 	bl	8005a80 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3718      	adds	r7, #24
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	4f54300a 	.word	0x4f54300a

08003438 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	460b      	mov	r3, r1
 8003442:	70fb      	strb	r3, [r7, #3]
 8003444:	4613      	mov	r3, r2
 8003446:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003450:	78fb      	ldrb	r3, [r7, #3]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d107      	bne.n	8003466 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003456:	883b      	ldrh	r3, [r7, #0]
 8003458:	0419      	lsls	r1, r3, #16
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68ba      	ldr	r2, [r7, #8]
 8003460:	430a      	orrs	r2, r1
 8003462:	629a      	str	r2, [r3, #40]	; 0x28
 8003464:	e028      	b.n	80034b8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346c:	0c1b      	lsrs	r3, r3, #16
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	4413      	add	r3, r2
 8003472:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003474:	2300      	movs	r3, #0
 8003476:	73fb      	strb	r3, [r7, #15]
 8003478:	e00d      	b.n	8003496 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	7bfb      	ldrb	r3, [r7, #15]
 8003480:	3340      	adds	r3, #64	; 0x40
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4413      	add	r3, r2
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	0c1b      	lsrs	r3, r3, #16
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	4413      	add	r3, r2
 800348e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003490:	7bfb      	ldrb	r3, [r7, #15]
 8003492:	3301      	adds	r3, #1
 8003494:	73fb      	strb	r3, [r7, #15]
 8003496:	7bfa      	ldrb	r2, [r7, #15]
 8003498:	78fb      	ldrb	r3, [r7, #3]
 800349a:	3b01      	subs	r3, #1
 800349c:	429a      	cmp	r2, r3
 800349e:	d3ec      	bcc.n	800347a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80034a0:	883b      	ldrh	r3, [r7, #0]
 80034a2:	0418      	lsls	r0, r3, #16
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6819      	ldr	r1, [r3, #0]
 80034a8:	78fb      	ldrb	r3, [r7, #3]
 80034aa:	3b01      	subs	r3, #1
 80034ac:	68ba      	ldr	r2, [r7, #8]
 80034ae:	4302      	orrs	r2, r0
 80034b0:	3340      	adds	r3, #64	; 0x40
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	440b      	add	r3, r1
 80034b6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3714      	adds	r7, #20
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b083      	sub	sp, #12
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
 80034ce:	460b      	mov	r3, r1
 80034d0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	887a      	ldrh	r2, [r7, #2]
 80034d8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	460b      	mov	r3, r1
 80034f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e25b      	b.n	80039ca <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b00      	cmp	r3, #0
 800351c:	d075      	beq.n	800360a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800351e:	4ba3      	ldr	r3, [pc, #652]	; (80037ac <HAL_RCC_OscConfig+0x2ac>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f003 030c 	and.w	r3, r3, #12
 8003526:	2b04      	cmp	r3, #4
 8003528:	d00c      	beq.n	8003544 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800352a:	4ba0      	ldr	r3, [pc, #640]	; (80037ac <HAL_RCC_OscConfig+0x2ac>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003532:	2b08      	cmp	r3, #8
 8003534:	d112      	bne.n	800355c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003536:	4b9d      	ldr	r3, [pc, #628]	; (80037ac <HAL_RCC_OscConfig+0x2ac>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800353e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003542:	d10b      	bne.n	800355c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003544:	4b99      	ldr	r3, [pc, #612]	; (80037ac <HAL_RCC_OscConfig+0x2ac>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d05b      	beq.n	8003608 <HAL_RCC_OscConfig+0x108>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d157      	bne.n	8003608 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e236      	b.n	80039ca <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003564:	d106      	bne.n	8003574 <HAL_RCC_OscConfig+0x74>
 8003566:	4b91      	ldr	r3, [pc, #580]	; (80037ac <HAL_RCC_OscConfig+0x2ac>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a90      	ldr	r2, [pc, #576]	; (80037ac <HAL_RCC_OscConfig+0x2ac>)
 800356c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003570:	6013      	str	r3, [r2, #0]
 8003572:	e01d      	b.n	80035b0 <HAL_RCC_OscConfig+0xb0>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800357c:	d10c      	bne.n	8003598 <HAL_RCC_OscConfig+0x98>
 800357e:	4b8b      	ldr	r3, [pc, #556]	; (80037ac <HAL_RCC_OscConfig+0x2ac>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a8a      	ldr	r2, [pc, #552]	; (80037ac <HAL_RCC_OscConfig+0x2ac>)
 8003584:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003588:	6013      	str	r3, [r2, #0]
 800358a:	4b88      	ldr	r3, [pc, #544]	; (80037ac <HAL_RCC_OscConfig+0x2ac>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a87      	ldr	r2, [pc, #540]	; (80037ac <HAL_RCC_OscConfig+0x2ac>)
 8003590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003594:	6013      	str	r3, [r2, #0]
 8003596:	e00b      	b.n	80035b0 <HAL_RCC_OscConfig+0xb0>
 8003598:	4b84      	ldr	r3, [pc, #528]	; (80037ac <HAL_RCC_OscConfig+0x2ac>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a83      	ldr	r2, [pc, #524]	; (80037ac <HAL_RCC_OscConfig+0x2ac>)
 800359e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035a2:	6013      	str	r3, [r2, #0]
 80035a4:	4b81      	ldr	r3, [pc, #516]	; (80037ac <HAL_RCC_OscConfig+0x2ac>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a80      	ldr	r2, [pc, #512]	; (80037ac <HAL_RCC_OscConfig+0x2ac>)
 80035aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d013      	beq.n	80035e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b8:	f7fd fbd4 	bl	8000d64 <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035c0:	f7fd fbd0 	bl	8000d64 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b64      	cmp	r3, #100	; 0x64
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e1fb      	b.n	80039ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035d2:	4b76      	ldr	r3, [pc, #472]	; (80037ac <HAL_RCC_OscConfig+0x2ac>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d0f0      	beq.n	80035c0 <HAL_RCC_OscConfig+0xc0>
 80035de:	e014      	b.n	800360a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e0:	f7fd fbc0 	bl	8000d64 <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035e8:	f7fd fbbc 	bl	8000d64 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b64      	cmp	r3, #100	; 0x64
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e1e7      	b.n	80039ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035fa:	4b6c      	ldr	r3, [pc, #432]	; (80037ac <HAL_RCC_OscConfig+0x2ac>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1f0      	bne.n	80035e8 <HAL_RCC_OscConfig+0xe8>
 8003606:	e000      	b.n	800360a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003608:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d063      	beq.n	80036de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003616:	4b65      	ldr	r3, [pc, #404]	; (80037ac <HAL_RCC_OscConfig+0x2ac>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 030c 	and.w	r3, r3, #12
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00b      	beq.n	800363a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003622:	4b62      	ldr	r3, [pc, #392]	; (80037ac <HAL_RCC_OscConfig+0x2ac>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800362a:	2b08      	cmp	r3, #8
 800362c:	d11c      	bne.n	8003668 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800362e:	4b5f      	ldr	r3, [pc, #380]	; (80037ac <HAL_RCC_OscConfig+0x2ac>)
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d116      	bne.n	8003668 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800363a:	4b5c      	ldr	r3, [pc, #368]	; (80037ac <HAL_RCC_OscConfig+0x2ac>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d005      	beq.n	8003652 <HAL_RCC_OscConfig+0x152>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d001      	beq.n	8003652 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e1bb      	b.n	80039ca <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003652:	4b56      	ldr	r3, [pc, #344]	; (80037ac <HAL_RCC_OscConfig+0x2ac>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	4952      	ldr	r1, [pc, #328]	; (80037ac <HAL_RCC_OscConfig+0x2ac>)
 8003662:	4313      	orrs	r3, r2
 8003664:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003666:	e03a      	b.n	80036de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d020      	beq.n	80036b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003670:	4b4f      	ldr	r3, [pc, #316]	; (80037b0 <HAL_RCC_OscConfig+0x2b0>)
 8003672:	2201      	movs	r2, #1
 8003674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003676:	f7fd fb75 	bl	8000d64 <HAL_GetTick>
 800367a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800367c:	e008      	b.n	8003690 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800367e:	f7fd fb71 	bl	8000d64 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b02      	cmp	r3, #2
 800368a:	d901      	bls.n	8003690 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e19c      	b.n	80039ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003690:	4b46      	ldr	r3, [pc, #280]	; (80037ac <HAL_RCC_OscConfig+0x2ac>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d0f0      	beq.n	800367e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800369c:	4b43      	ldr	r3, [pc, #268]	; (80037ac <HAL_RCC_OscConfig+0x2ac>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	00db      	lsls	r3, r3, #3
 80036aa:	4940      	ldr	r1, [pc, #256]	; (80037ac <HAL_RCC_OscConfig+0x2ac>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	600b      	str	r3, [r1, #0]
 80036b0:	e015      	b.n	80036de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036b2:	4b3f      	ldr	r3, [pc, #252]	; (80037b0 <HAL_RCC_OscConfig+0x2b0>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b8:	f7fd fb54 	bl	8000d64 <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036be:	e008      	b.n	80036d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036c0:	f7fd fb50 	bl	8000d64 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e17b      	b.n	80039ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036d2:	4b36      	ldr	r3, [pc, #216]	; (80037ac <HAL_RCC_OscConfig+0x2ac>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1f0      	bne.n	80036c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0308 	and.w	r3, r3, #8
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d030      	beq.n	800374c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d016      	beq.n	8003720 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036f2:	4b30      	ldr	r3, [pc, #192]	; (80037b4 <HAL_RCC_OscConfig+0x2b4>)
 80036f4:	2201      	movs	r2, #1
 80036f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f8:	f7fd fb34 	bl	8000d64 <HAL_GetTick>
 80036fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036fe:	e008      	b.n	8003712 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003700:	f7fd fb30 	bl	8000d64 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e15b      	b.n	80039ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003712:	4b26      	ldr	r3, [pc, #152]	; (80037ac <HAL_RCC_OscConfig+0x2ac>)
 8003714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d0f0      	beq.n	8003700 <HAL_RCC_OscConfig+0x200>
 800371e:	e015      	b.n	800374c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003720:	4b24      	ldr	r3, [pc, #144]	; (80037b4 <HAL_RCC_OscConfig+0x2b4>)
 8003722:	2200      	movs	r2, #0
 8003724:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003726:	f7fd fb1d 	bl	8000d64 <HAL_GetTick>
 800372a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800372c:	e008      	b.n	8003740 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800372e:	f7fd fb19 	bl	8000d64 <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	2b02      	cmp	r3, #2
 800373a:	d901      	bls.n	8003740 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e144      	b.n	80039ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003740:	4b1a      	ldr	r3, [pc, #104]	; (80037ac <HAL_RCC_OscConfig+0x2ac>)
 8003742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1f0      	bne.n	800372e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 80a0 	beq.w	800389a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800375a:	2300      	movs	r3, #0
 800375c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800375e:	4b13      	ldr	r3, [pc, #76]	; (80037ac <HAL_RCC_OscConfig+0x2ac>)
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10f      	bne.n	800378a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800376a:	2300      	movs	r3, #0
 800376c:	60bb      	str	r3, [r7, #8]
 800376e:	4b0f      	ldr	r3, [pc, #60]	; (80037ac <HAL_RCC_OscConfig+0x2ac>)
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	4a0e      	ldr	r2, [pc, #56]	; (80037ac <HAL_RCC_OscConfig+0x2ac>)
 8003774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003778:	6413      	str	r3, [r2, #64]	; 0x40
 800377a:	4b0c      	ldr	r3, [pc, #48]	; (80037ac <HAL_RCC_OscConfig+0x2ac>)
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003782:	60bb      	str	r3, [r7, #8]
 8003784:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003786:	2301      	movs	r3, #1
 8003788:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800378a:	4b0b      	ldr	r3, [pc, #44]	; (80037b8 <HAL_RCC_OscConfig+0x2b8>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003792:	2b00      	cmp	r3, #0
 8003794:	d121      	bne.n	80037da <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003796:	4b08      	ldr	r3, [pc, #32]	; (80037b8 <HAL_RCC_OscConfig+0x2b8>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a07      	ldr	r2, [pc, #28]	; (80037b8 <HAL_RCC_OscConfig+0x2b8>)
 800379c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037a2:	f7fd fadf 	bl	8000d64 <HAL_GetTick>
 80037a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a8:	e011      	b.n	80037ce <HAL_RCC_OscConfig+0x2ce>
 80037aa:	bf00      	nop
 80037ac:	40023800 	.word	0x40023800
 80037b0:	42470000 	.word	0x42470000
 80037b4:	42470e80 	.word	0x42470e80
 80037b8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037bc:	f7fd fad2 	bl	8000d64 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e0fd      	b.n	80039ca <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ce:	4b81      	ldr	r3, [pc, #516]	; (80039d4 <HAL_RCC_OscConfig+0x4d4>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d0f0      	beq.n	80037bc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d106      	bne.n	80037f0 <HAL_RCC_OscConfig+0x2f0>
 80037e2:	4b7d      	ldr	r3, [pc, #500]	; (80039d8 <HAL_RCC_OscConfig+0x4d8>)
 80037e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e6:	4a7c      	ldr	r2, [pc, #496]	; (80039d8 <HAL_RCC_OscConfig+0x4d8>)
 80037e8:	f043 0301 	orr.w	r3, r3, #1
 80037ec:	6713      	str	r3, [r2, #112]	; 0x70
 80037ee:	e01c      	b.n	800382a <HAL_RCC_OscConfig+0x32a>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	2b05      	cmp	r3, #5
 80037f6:	d10c      	bne.n	8003812 <HAL_RCC_OscConfig+0x312>
 80037f8:	4b77      	ldr	r3, [pc, #476]	; (80039d8 <HAL_RCC_OscConfig+0x4d8>)
 80037fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fc:	4a76      	ldr	r2, [pc, #472]	; (80039d8 <HAL_RCC_OscConfig+0x4d8>)
 80037fe:	f043 0304 	orr.w	r3, r3, #4
 8003802:	6713      	str	r3, [r2, #112]	; 0x70
 8003804:	4b74      	ldr	r3, [pc, #464]	; (80039d8 <HAL_RCC_OscConfig+0x4d8>)
 8003806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003808:	4a73      	ldr	r2, [pc, #460]	; (80039d8 <HAL_RCC_OscConfig+0x4d8>)
 800380a:	f043 0301 	orr.w	r3, r3, #1
 800380e:	6713      	str	r3, [r2, #112]	; 0x70
 8003810:	e00b      	b.n	800382a <HAL_RCC_OscConfig+0x32a>
 8003812:	4b71      	ldr	r3, [pc, #452]	; (80039d8 <HAL_RCC_OscConfig+0x4d8>)
 8003814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003816:	4a70      	ldr	r2, [pc, #448]	; (80039d8 <HAL_RCC_OscConfig+0x4d8>)
 8003818:	f023 0301 	bic.w	r3, r3, #1
 800381c:	6713      	str	r3, [r2, #112]	; 0x70
 800381e:	4b6e      	ldr	r3, [pc, #440]	; (80039d8 <HAL_RCC_OscConfig+0x4d8>)
 8003820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003822:	4a6d      	ldr	r2, [pc, #436]	; (80039d8 <HAL_RCC_OscConfig+0x4d8>)
 8003824:	f023 0304 	bic.w	r3, r3, #4
 8003828:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d015      	beq.n	800385e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003832:	f7fd fa97 	bl	8000d64 <HAL_GetTick>
 8003836:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003838:	e00a      	b.n	8003850 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800383a:	f7fd fa93 	bl	8000d64 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	f241 3288 	movw	r2, #5000	; 0x1388
 8003848:	4293      	cmp	r3, r2
 800384a:	d901      	bls.n	8003850 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e0bc      	b.n	80039ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003850:	4b61      	ldr	r3, [pc, #388]	; (80039d8 <HAL_RCC_OscConfig+0x4d8>)
 8003852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d0ee      	beq.n	800383a <HAL_RCC_OscConfig+0x33a>
 800385c:	e014      	b.n	8003888 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800385e:	f7fd fa81 	bl	8000d64 <HAL_GetTick>
 8003862:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003864:	e00a      	b.n	800387c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003866:	f7fd fa7d 	bl	8000d64 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	f241 3288 	movw	r2, #5000	; 0x1388
 8003874:	4293      	cmp	r3, r2
 8003876:	d901      	bls.n	800387c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e0a6      	b.n	80039ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800387c:	4b56      	ldr	r3, [pc, #344]	; (80039d8 <HAL_RCC_OscConfig+0x4d8>)
 800387e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1ee      	bne.n	8003866 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003888:	7dfb      	ldrb	r3, [r7, #23]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d105      	bne.n	800389a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800388e:	4b52      	ldr	r3, [pc, #328]	; (80039d8 <HAL_RCC_OscConfig+0x4d8>)
 8003890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003892:	4a51      	ldr	r2, [pc, #324]	; (80039d8 <HAL_RCC_OscConfig+0x4d8>)
 8003894:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003898:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f000 8092 	beq.w	80039c8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038a4:	4b4c      	ldr	r3, [pc, #304]	; (80039d8 <HAL_RCC_OscConfig+0x4d8>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f003 030c 	and.w	r3, r3, #12
 80038ac:	2b08      	cmp	r3, #8
 80038ae:	d05c      	beq.n	800396a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d141      	bne.n	800393c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038b8:	4b48      	ldr	r3, [pc, #288]	; (80039dc <HAL_RCC_OscConfig+0x4dc>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038be:	f7fd fa51 	bl	8000d64 <HAL_GetTick>
 80038c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038c4:	e008      	b.n	80038d8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038c6:	f7fd fa4d 	bl	8000d64 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d901      	bls.n	80038d8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e078      	b.n	80039ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038d8:	4b3f      	ldr	r3, [pc, #252]	; (80039d8 <HAL_RCC_OscConfig+0x4d8>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1f0      	bne.n	80038c6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	69da      	ldr	r2, [r3, #28]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	431a      	orrs	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f2:	019b      	lsls	r3, r3, #6
 80038f4:	431a      	orrs	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fa:	085b      	lsrs	r3, r3, #1
 80038fc:	3b01      	subs	r3, #1
 80038fe:	041b      	lsls	r3, r3, #16
 8003900:	431a      	orrs	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003906:	061b      	lsls	r3, r3, #24
 8003908:	4933      	ldr	r1, [pc, #204]	; (80039d8 <HAL_RCC_OscConfig+0x4d8>)
 800390a:	4313      	orrs	r3, r2
 800390c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800390e:	4b33      	ldr	r3, [pc, #204]	; (80039dc <HAL_RCC_OscConfig+0x4dc>)
 8003910:	2201      	movs	r2, #1
 8003912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003914:	f7fd fa26 	bl	8000d64 <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800391c:	f7fd fa22 	bl	8000d64 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e04d      	b.n	80039ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800392e:	4b2a      	ldr	r3, [pc, #168]	; (80039d8 <HAL_RCC_OscConfig+0x4d8>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d0f0      	beq.n	800391c <HAL_RCC_OscConfig+0x41c>
 800393a:	e045      	b.n	80039c8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800393c:	4b27      	ldr	r3, [pc, #156]	; (80039dc <HAL_RCC_OscConfig+0x4dc>)
 800393e:	2200      	movs	r2, #0
 8003940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003942:	f7fd fa0f 	bl	8000d64 <HAL_GetTick>
 8003946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003948:	e008      	b.n	800395c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800394a:	f7fd fa0b 	bl	8000d64 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d901      	bls.n	800395c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e036      	b.n	80039ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800395c:	4b1e      	ldr	r3, [pc, #120]	; (80039d8 <HAL_RCC_OscConfig+0x4d8>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1f0      	bne.n	800394a <HAL_RCC_OscConfig+0x44a>
 8003968:	e02e      	b.n	80039c8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d101      	bne.n	8003976 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e029      	b.n	80039ca <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003976:	4b18      	ldr	r3, [pc, #96]	; (80039d8 <HAL_RCC_OscConfig+0x4d8>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	429a      	cmp	r2, r3
 8003988:	d11c      	bne.n	80039c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003994:	429a      	cmp	r2, r3
 8003996:	d115      	bne.n	80039c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800399e:	4013      	ands	r3, r2
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d10d      	bne.n	80039c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d106      	bne.n	80039c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d001      	beq.n	80039c8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e000      	b.n	80039ca <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3718      	adds	r7, #24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	40007000 	.word	0x40007000
 80039d8:	40023800 	.word	0x40023800
 80039dc:	42470060 	.word	0x42470060

080039e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d101      	bne.n	80039f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e0cc      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039f4:	4b68      	ldr	r3, [pc, #416]	; (8003b98 <HAL_RCC_ClockConfig+0x1b8>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 030f 	and.w	r3, r3, #15
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d90c      	bls.n	8003a1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a02:	4b65      	ldr	r3, [pc, #404]	; (8003b98 <HAL_RCC_ClockConfig+0x1b8>)
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	b2d2      	uxtb	r2, r2
 8003a08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a0a:	4b63      	ldr	r3, [pc, #396]	; (8003b98 <HAL_RCC_ClockConfig+0x1b8>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 030f 	and.w	r3, r3, #15
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d001      	beq.n	8003a1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e0b8      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d020      	beq.n	8003a6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0304 	and.w	r3, r3, #4
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d005      	beq.n	8003a40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a34:	4b59      	ldr	r3, [pc, #356]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	4a58      	ldr	r2, [pc, #352]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003a3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0308 	and.w	r3, r3, #8
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d005      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a4c:	4b53      	ldr	r3, [pc, #332]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	4a52      	ldr	r2, [pc, #328]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003a52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a58:	4b50      	ldr	r3, [pc, #320]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	494d      	ldr	r1, [pc, #308]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d044      	beq.n	8003b00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d107      	bne.n	8003a8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a7e:	4b47      	ldr	r3, [pc, #284]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d119      	bne.n	8003abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e07f      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d003      	beq.n	8003a9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a9a:	2b03      	cmp	r3, #3
 8003a9c:	d107      	bne.n	8003aae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a9e:	4b3f      	ldr	r3, [pc, #252]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d109      	bne.n	8003abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e06f      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aae:	4b3b      	ldr	r3, [pc, #236]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e067      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003abe:	4b37      	ldr	r3, [pc, #220]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f023 0203 	bic.w	r2, r3, #3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	4934      	ldr	r1, [pc, #208]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ad0:	f7fd f948 	bl	8000d64 <HAL_GetTick>
 8003ad4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ad6:	e00a      	b.n	8003aee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ad8:	f7fd f944 	bl	8000d64 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e04f      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aee:	4b2b      	ldr	r3, [pc, #172]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 020c 	and.w	r2, r3, #12
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d1eb      	bne.n	8003ad8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b00:	4b25      	ldr	r3, [pc, #148]	; (8003b98 <HAL_RCC_ClockConfig+0x1b8>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 030f 	and.w	r3, r3, #15
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d20c      	bcs.n	8003b28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b0e:	4b22      	ldr	r3, [pc, #136]	; (8003b98 <HAL_RCC_ClockConfig+0x1b8>)
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	b2d2      	uxtb	r2, r2
 8003b14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b16:	4b20      	ldr	r3, [pc, #128]	; (8003b98 <HAL_RCC_ClockConfig+0x1b8>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 030f 	and.w	r3, r3, #15
 8003b1e:	683a      	ldr	r2, [r7, #0]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d001      	beq.n	8003b28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e032      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d008      	beq.n	8003b46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b34:	4b19      	ldr	r3, [pc, #100]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	4916      	ldr	r1, [pc, #88]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0308 	and.w	r3, r3, #8
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d009      	beq.n	8003b66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b52:	4b12      	ldr	r3, [pc, #72]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	490e      	ldr	r1, [pc, #56]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b66:	f000 f821 	bl	8003bac <HAL_RCC_GetSysClockFreq>
 8003b6a:	4601      	mov	r1, r0
 8003b6c:	4b0b      	ldr	r3, [pc, #44]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	091b      	lsrs	r3, r3, #4
 8003b72:	f003 030f 	and.w	r3, r3, #15
 8003b76:	4a0a      	ldr	r2, [pc, #40]	; (8003ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b78:	5cd3      	ldrb	r3, [r2, r3]
 8003b7a:	fa21 f303 	lsr.w	r3, r1, r3
 8003b7e:	4a09      	ldr	r2, [pc, #36]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b82:	4b09      	ldr	r3, [pc, #36]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7fd f8a8 	bl	8000cdc <HAL_InitTick>

  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	40023c00 	.word	0x40023c00
 8003b9c:	40023800 	.word	0x40023800
 8003ba0:	080080f8 	.word	0x080080f8
 8003ba4:	20000000 	.word	0x20000000
 8003ba8:	20000004 	.word	0x20000004

08003bac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	607b      	str	r3, [r7, #4]
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	60fb      	str	r3, [r7, #12]
 8003bba:	2300      	movs	r3, #0
 8003bbc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bc2:	4b63      	ldr	r3, [pc, #396]	; (8003d50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f003 030c 	and.w	r3, r3, #12
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	d007      	beq.n	8003bde <HAL_RCC_GetSysClockFreq+0x32>
 8003bce:	2b08      	cmp	r3, #8
 8003bd0:	d008      	beq.n	8003be4 <HAL_RCC_GetSysClockFreq+0x38>
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f040 80b4 	bne.w	8003d40 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bd8:	4b5e      	ldr	r3, [pc, #376]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003bda:	60bb      	str	r3, [r7, #8]
       break;
 8003bdc:	e0b3      	b.n	8003d46 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bde:	4b5e      	ldr	r3, [pc, #376]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003be0:	60bb      	str	r3, [r7, #8]
      break;
 8003be2:	e0b0      	b.n	8003d46 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003be4:	4b5a      	ldr	r3, [pc, #360]	; (8003d50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bee:	4b58      	ldr	r3, [pc, #352]	; (8003d50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d04a      	beq.n	8003c90 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bfa:	4b55      	ldr	r3, [pc, #340]	; (8003d50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	099b      	lsrs	r3, r3, #6
 8003c00:	f04f 0400 	mov.w	r4, #0
 8003c04:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003c08:	f04f 0200 	mov.w	r2, #0
 8003c0c:	ea03 0501 	and.w	r5, r3, r1
 8003c10:	ea04 0602 	and.w	r6, r4, r2
 8003c14:	4629      	mov	r1, r5
 8003c16:	4632      	mov	r2, r6
 8003c18:	f04f 0300 	mov.w	r3, #0
 8003c1c:	f04f 0400 	mov.w	r4, #0
 8003c20:	0154      	lsls	r4, r2, #5
 8003c22:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003c26:	014b      	lsls	r3, r1, #5
 8003c28:	4619      	mov	r1, r3
 8003c2a:	4622      	mov	r2, r4
 8003c2c:	1b49      	subs	r1, r1, r5
 8003c2e:	eb62 0206 	sbc.w	r2, r2, r6
 8003c32:	f04f 0300 	mov.w	r3, #0
 8003c36:	f04f 0400 	mov.w	r4, #0
 8003c3a:	0194      	lsls	r4, r2, #6
 8003c3c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003c40:	018b      	lsls	r3, r1, #6
 8003c42:	1a5b      	subs	r3, r3, r1
 8003c44:	eb64 0402 	sbc.w	r4, r4, r2
 8003c48:	f04f 0100 	mov.w	r1, #0
 8003c4c:	f04f 0200 	mov.w	r2, #0
 8003c50:	00e2      	lsls	r2, r4, #3
 8003c52:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003c56:	00d9      	lsls	r1, r3, #3
 8003c58:	460b      	mov	r3, r1
 8003c5a:	4614      	mov	r4, r2
 8003c5c:	195b      	adds	r3, r3, r5
 8003c5e:	eb44 0406 	adc.w	r4, r4, r6
 8003c62:	f04f 0100 	mov.w	r1, #0
 8003c66:	f04f 0200 	mov.w	r2, #0
 8003c6a:	0262      	lsls	r2, r4, #9
 8003c6c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003c70:	0259      	lsls	r1, r3, #9
 8003c72:	460b      	mov	r3, r1
 8003c74:	4614      	mov	r4, r2
 8003c76:	4618      	mov	r0, r3
 8003c78:	4621      	mov	r1, r4
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f04f 0400 	mov.w	r4, #0
 8003c80:	461a      	mov	r2, r3
 8003c82:	4623      	mov	r3, r4
 8003c84:	f7fc faa0 	bl	80001c8 <__aeabi_uldivmod>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	460c      	mov	r4, r1
 8003c8c:	60fb      	str	r3, [r7, #12]
 8003c8e:	e049      	b.n	8003d24 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c90:	4b2f      	ldr	r3, [pc, #188]	; (8003d50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	099b      	lsrs	r3, r3, #6
 8003c96:	f04f 0400 	mov.w	r4, #0
 8003c9a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003c9e:	f04f 0200 	mov.w	r2, #0
 8003ca2:	ea03 0501 	and.w	r5, r3, r1
 8003ca6:	ea04 0602 	and.w	r6, r4, r2
 8003caa:	4629      	mov	r1, r5
 8003cac:	4632      	mov	r2, r6
 8003cae:	f04f 0300 	mov.w	r3, #0
 8003cb2:	f04f 0400 	mov.w	r4, #0
 8003cb6:	0154      	lsls	r4, r2, #5
 8003cb8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003cbc:	014b      	lsls	r3, r1, #5
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	4622      	mov	r2, r4
 8003cc2:	1b49      	subs	r1, r1, r5
 8003cc4:	eb62 0206 	sbc.w	r2, r2, r6
 8003cc8:	f04f 0300 	mov.w	r3, #0
 8003ccc:	f04f 0400 	mov.w	r4, #0
 8003cd0:	0194      	lsls	r4, r2, #6
 8003cd2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003cd6:	018b      	lsls	r3, r1, #6
 8003cd8:	1a5b      	subs	r3, r3, r1
 8003cda:	eb64 0402 	sbc.w	r4, r4, r2
 8003cde:	f04f 0100 	mov.w	r1, #0
 8003ce2:	f04f 0200 	mov.w	r2, #0
 8003ce6:	00e2      	lsls	r2, r4, #3
 8003ce8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003cec:	00d9      	lsls	r1, r3, #3
 8003cee:	460b      	mov	r3, r1
 8003cf0:	4614      	mov	r4, r2
 8003cf2:	195b      	adds	r3, r3, r5
 8003cf4:	eb44 0406 	adc.w	r4, r4, r6
 8003cf8:	f04f 0100 	mov.w	r1, #0
 8003cfc:	f04f 0200 	mov.w	r2, #0
 8003d00:	02a2      	lsls	r2, r4, #10
 8003d02:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003d06:	0299      	lsls	r1, r3, #10
 8003d08:	460b      	mov	r3, r1
 8003d0a:	4614      	mov	r4, r2
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	4621      	mov	r1, r4
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f04f 0400 	mov.w	r4, #0
 8003d16:	461a      	mov	r2, r3
 8003d18:	4623      	mov	r3, r4
 8003d1a:	f7fc fa55 	bl	80001c8 <__aeabi_uldivmod>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	460c      	mov	r4, r1
 8003d22:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d24:	4b0a      	ldr	r3, [pc, #40]	; (8003d50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	0c1b      	lsrs	r3, r3, #16
 8003d2a:	f003 0303 	and.w	r3, r3, #3
 8003d2e:	3301      	adds	r3, #1
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d3c:	60bb      	str	r3, [r7, #8]
      break;
 8003d3e:	e002      	b.n	8003d46 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d40:	4b04      	ldr	r3, [pc, #16]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003d42:	60bb      	str	r3, [r7, #8]
      break;
 8003d44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d46:	68bb      	ldr	r3, [r7, #8]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3714      	adds	r7, #20
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d50:	40023800 	.word	0x40023800
 8003d54:	00f42400 	.word	0x00f42400
 8003d58:	007a1200 	.word	0x007a1200

08003d5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d60:	4b03      	ldr	r3, [pc, #12]	; (8003d70 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d62:	681b      	ldr	r3, [r3, #0]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	20000000 	.word	0x20000000

08003d74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d78:	f7ff fff0 	bl	8003d5c <HAL_RCC_GetHCLKFreq>
 8003d7c:	4601      	mov	r1, r0
 8003d7e:	4b05      	ldr	r3, [pc, #20]	; (8003d94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	0a9b      	lsrs	r3, r3, #10
 8003d84:	f003 0307 	and.w	r3, r3, #7
 8003d88:	4a03      	ldr	r2, [pc, #12]	; (8003d98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d8a:	5cd3      	ldrb	r3, [r2, r3]
 8003d8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	40023800 	.word	0x40023800
 8003d98:	08008108 	.word	0x08008108

08003d9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003da0:	f7ff ffdc 	bl	8003d5c <HAL_RCC_GetHCLKFreq>
 8003da4:	4601      	mov	r1, r0
 8003da6:	4b05      	ldr	r3, [pc, #20]	; (8003dbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	0b5b      	lsrs	r3, r3, #13
 8003dac:	f003 0307 	and.w	r3, r3, #7
 8003db0:	4a03      	ldr	r2, [pc, #12]	; (8003dc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003db2:	5cd3      	ldrb	r3, [r2, r3]
 8003db4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	40023800 	.word	0x40023800
 8003dc0:	08008108 	.word	0x08008108

08003dc4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e03f      	b.n	8003e56 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d106      	bne.n	8003df0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f7fc fe0e 	bl	8000a0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2224      	movs	r2, #36	; 0x24
 8003df4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68da      	ldr	r2, [r3, #12]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 f829 	bl	8003e60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	691a      	ldr	r2, [r3, #16]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	695a      	ldr	r2, [r3, #20]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68da      	ldr	r2, [r3, #12]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2220      	movs	r2, #32
 8003e48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
	...

08003e60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e64:	b085      	sub	sp, #20
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	68da      	ldr	r2, [r3, #12]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689a      	ldr	r2, [r3, #8]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	431a      	orrs	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	69db      	ldr	r3, [r3, #28]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003ea2:	f023 030c 	bic.w	r3, r3, #12
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	6812      	ldr	r2, [r2, #0]
 8003eaa:	68f9      	ldr	r1, [r7, #12]
 8003eac:	430b      	orrs	r3, r1
 8003eae:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	699a      	ldr	r2, [r3, #24]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ece:	f040 818b 	bne.w	80041e8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4ac1      	ldr	r2, [pc, #772]	; (80041dc <UART_SetConfig+0x37c>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d005      	beq.n	8003ee8 <UART_SetConfig+0x88>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4abf      	ldr	r2, [pc, #764]	; (80041e0 <UART_SetConfig+0x380>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	f040 80bd 	bne.w	8004062 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ee8:	f7ff ff58 	bl	8003d9c <HAL_RCC_GetPCLK2Freq>
 8003eec:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	461d      	mov	r5, r3
 8003ef2:	f04f 0600 	mov.w	r6, #0
 8003ef6:	46a8      	mov	r8, r5
 8003ef8:	46b1      	mov	r9, r6
 8003efa:	eb18 0308 	adds.w	r3, r8, r8
 8003efe:	eb49 0409 	adc.w	r4, r9, r9
 8003f02:	4698      	mov	r8, r3
 8003f04:	46a1      	mov	r9, r4
 8003f06:	eb18 0805 	adds.w	r8, r8, r5
 8003f0a:	eb49 0906 	adc.w	r9, r9, r6
 8003f0e:	f04f 0100 	mov.w	r1, #0
 8003f12:	f04f 0200 	mov.w	r2, #0
 8003f16:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003f1a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003f1e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003f22:	4688      	mov	r8, r1
 8003f24:	4691      	mov	r9, r2
 8003f26:	eb18 0005 	adds.w	r0, r8, r5
 8003f2a:	eb49 0106 	adc.w	r1, r9, r6
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	461d      	mov	r5, r3
 8003f34:	f04f 0600 	mov.w	r6, #0
 8003f38:	196b      	adds	r3, r5, r5
 8003f3a:	eb46 0406 	adc.w	r4, r6, r6
 8003f3e:	461a      	mov	r2, r3
 8003f40:	4623      	mov	r3, r4
 8003f42:	f7fc f941 	bl	80001c8 <__aeabi_uldivmod>
 8003f46:	4603      	mov	r3, r0
 8003f48:	460c      	mov	r4, r1
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	4ba5      	ldr	r3, [pc, #660]	; (80041e4 <UART_SetConfig+0x384>)
 8003f4e:	fba3 2302 	umull	r2, r3, r3, r2
 8003f52:	095b      	lsrs	r3, r3, #5
 8003f54:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	461d      	mov	r5, r3
 8003f5c:	f04f 0600 	mov.w	r6, #0
 8003f60:	46a9      	mov	r9, r5
 8003f62:	46b2      	mov	sl, r6
 8003f64:	eb19 0309 	adds.w	r3, r9, r9
 8003f68:	eb4a 040a 	adc.w	r4, sl, sl
 8003f6c:	4699      	mov	r9, r3
 8003f6e:	46a2      	mov	sl, r4
 8003f70:	eb19 0905 	adds.w	r9, r9, r5
 8003f74:	eb4a 0a06 	adc.w	sl, sl, r6
 8003f78:	f04f 0100 	mov.w	r1, #0
 8003f7c:	f04f 0200 	mov.w	r2, #0
 8003f80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f84:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f88:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f8c:	4689      	mov	r9, r1
 8003f8e:	4692      	mov	sl, r2
 8003f90:	eb19 0005 	adds.w	r0, r9, r5
 8003f94:	eb4a 0106 	adc.w	r1, sl, r6
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	461d      	mov	r5, r3
 8003f9e:	f04f 0600 	mov.w	r6, #0
 8003fa2:	196b      	adds	r3, r5, r5
 8003fa4:	eb46 0406 	adc.w	r4, r6, r6
 8003fa8:	461a      	mov	r2, r3
 8003faa:	4623      	mov	r3, r4
 8003fac:	f7fc f90c 	bl	80001c8 <__aeabi_uldivmod>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	460c      	mov	r4, r1
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	4b8b      	ldr	r3, [pc, #556]	; (80041e4 <UART_SetConfig+0x384>)
 8003fb8:	fba3 1302 	umull	r1, r3, r3, r2
 8003fbc:	095b      	lsrs	r3, r3, #5
 8003fbe:	2164      	movs	r1, #100	; 0x64
 8003fc0:	fb01 f303 	mul.w	r3, r1, r3
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	3332      	adds	r3, #50	; 0x32
 8003fca:	4a86      	ldr	r2, [pc, #536]	; (80041e4 <UART_SetConfig+0x384>)
 8003fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd0:	095b      	lsrs	r3, r3, #5
 8003fd2:	005b      	lsls	r3, r3, #1
 8003fd4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003fd8:	4498      	add	r8, r3
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	461d      	mov	r5, r3
 8003fde:	f04f 0600 	mov.w	r6, #0
 8003fe2:	46a9      	mov	r9, r5
 8003fe4:	46b2      	mov	sl, r6
 8003fe6:	eb19 0309 	adds.w	r3, r9, r9
 8003fea:	eb4a 040a 	adc.w	r4, sl, sl
 8003fee:	4699      	mov	r9, r3
 8003ff0:	46a2      	mov	sl, r4
 8003ff2:	eb19 0905 	adds.w	r9, r9, r5
 8003ff6:	eb4a 0a06 	adc.w	sl, sl, r6
 8003ffa:	f04f 0100 	mov.w	r1, #0
 8003ffe:	f04f 0200 	mov.w	r2, #0
 8004002:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004006:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800400a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800400e:	4689      	mov	r9, r1
 8004010:	4692      	mov	sl, r2
 8004012:	eb19 0005 	adds.w	r0, r9, r5
 8004016:	eb4a 0106 	adc.w	r1, sl, r6
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	461d      	mov	r5, r3
 8004020:	f04f 0600 	mov.w	r6, #0
 8004024:	196b      	adds	r3, r5, r5
 8004026:	eb46 0406 	adc.w	r4, r6, r6
 800402a:	461a      	mov	r2, r3
 800402c:	4623      	mov	r3, r4
 800402e:	f7fc f8cb 	bl	80001c8 <__aeabi_uldivmod>
 8004032:	4603      	mov	r3, r0
 8004034:	460c      	mov	r4, r1
 8004036:	461a      	mov	r2, r3
 8004038:	4b6a      	ldr	r3, [pc, #424]	; (80041e4 <UART_SetConfig+0x384>)
 800403a:	fba3 1302 	umull	r1, r3, r3, r2
 800403e:	095b      	lsrs	r3, r3, #5
 8004040:	2164      	movs	r1, #100	; 0x64
 8004042:	fb01 f303 	mul.w	r3, r1, r3
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	00db      	lsls	r3, r3, #3
 800404a:	3332      	adds	r3, #50	; 0x32
 800404c:	4a65      	ldr	r2, [pc, #404]	; (80041e4 <UART_SetConfig+0x384>)
 800404e:	fba2 2303 	umull	r2, r3, r2, r3
 8004052:	095b      	lsrs	r3, r3, #5
 8004054:	f003 0207 	and.w	r2, r3, #7
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4442      	add	r2, r8
 800405e:	609a      	str	r2, [r3, #8]
 8004060:	e26f      	b.n	8004542 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004062:	f7ff fe87 	bl	8003d74 <HAL_RCC_GetPCLK1Freq>
 8004066:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	461d      	mov	r5, r3
 800406c:	f04f 0600 	mov.w	r6, #0
 8004070:	46a8      	mov	r8, r5
 8004072:	46b1      	mov	r9, r6
 8004074:	eb18 0308 	adds.w	r3, r8, r8
 8004078:	eb49 0409 	adc.w	r4, r9, r9
 800407c:	4698      	mov	r8, r3
 800407e:	46a1      	mov	r9, r4
 8004080:	eb18 0805 	adds.w	r8, r8, r5
 8004084:	eb49 0906 	adc.w	r9, r9, r6
 8004088:	f04f 0100 	mov.w	r1, #0
 800408c:	f04f 0200 	mov.w	r2, #0
 8004090:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004094:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004098:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800409c:	4688      	mov	r8, r1
 800409e:	4691      	mov	r9, r2
 80040a0:	eb18 0005 	adds.w	r0, r8, r5
 80040a4:	eb49 0106 	adc.w	r1, r9, r6
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	461d      	mov	r5, r3
 80040ae:	f04f 0600 	mov.w	r6, #0
 80040b2:	196b      	adds	r3, r5, r5
 80040b4:	eb46 0406 	adc.w	r4, r6, r6
 80040b8:	461a      	mov	r2, r3
 80040ba:	4623      	mov	r3, r4
 80040bc:	f7fc f884 	bl	80001c8 <__aeabi_uldivmod>
 80040c0:	4603      	mov	r3, r0
 80040c2:	460c      	mov	r4, r1
 80040c4:	461a      	mov	r2, r3
 80040c6:	4b47      	ldr	r3, [pc, #284]	; (80041e4 <UART_SetConfig+0x384>)
 80040c8:	fba3 2302 	umull	r2, r3, r3, r2
 80040cc:	095b      	lsrs	r3, r3, #5
 80040ce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	461d      	mov	r5, r3
 80040d6:	f04f 0600 	mov.w	r6, #0
 80040da:	46a9      	mov	r9, r5
 80040dc:	46b2      	mov	sl, r6
 80040de:	eb19 0309 	adds.w	r3, r9, r9
 80040e2:	eb4a 040a 	adc.w	r4, sl, sl
 80040e6:	4699      	mov	r9, r3
 80040e8:	46a2      	mov	sl, r4
 80040ea:	eb19 0905 	adds.w	r9, r9, r5
 80040ee:	eb4a 0a06 	adc.w	sl, sl, r6
 80040f2:	f04f 0100 	mov.w	r1, #0
 80040f6:	f04f 0200 	mov.w	r2, #0
 80040fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004102:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004106:	4689      	mov	r9, r1
 8004108:	4692      	mov	sl, r2
 800410a:	eb19 0005 	adds.w	r0, r9, r5
 800410e:	eb4a 0106 	adc.w	r1, sl, r6
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	461d      	mov	r5, r3
 8004118:	f04f 0600 	mov.w	r6, #0
 800411c:	196b      	adds	r3, r5, r5
 800411e:	eb46 0406 	adc.w	r4, r6, r6
 8004122:	461a      	mov	r2, r3
 8004124:	4623      	mov	r3, r4
 8004126:	f7fc f84f 	bl	80001c8 <__aeabi_uldivmod>
 800412a:	4603      	mov	r3, r0
 800412c:	460c      	mov	r4, r1
 800412e:	461a      	mov	r2, r3
 8004130:	4b2c      	ldr	r3, [pc, #176]	; (80041e4 <UART_SetConfig+0x384>)
 8004132:	fba3 1302 	umull	r1, r3, r3, r2
 8004136:	095b      	lsrs	r3, r3, #5
 8004138:	2164      	movs	r1, #100	; 0x64
 800413a:	fb01 f303 	mul.w	r3, r1, r3
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	00db      	lsls	r3, r3, #3
 8004142:	3332      	adds	r3, #50	; 0x32
 8004144:	4a27      	ldr	r2, [pc, #156]	; (80041e4 <UART_SetConfig+0x384>)
 8004146:	fba2 2303 	umull	r2, r3, r2, r3
 800414a:	095b      	lsrs	r3, r3, #5
 800414c:	005b      	lsls	r3, r3, #1
 800414e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004152:	4498      	add	r8, r3
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	461d      	mov	r5, r3
 8004158:	f04f 0600 	mov.w	r6, #0
 800415c:	46a9      	mov	r9, r5
 800415e:	46b2      	mov	sl, r6
 8004160:	eb19 0309 	adds.w	r3, r9, r9
 8004164:	eb4a 040a 	adc.w	r4, sl, sl
 8004168:	4699      	mov	r9, r3
 800416a:	46a2      	mov	sl, r4
 800416c:	eb19 0905 	adds.w	r9, r9, r5
 8004170:	eb4a 0a06 	adc.w	sl, sl, r6
 8004174:	f04f 0100 	mov.w	r1, #0
 8004178:	f04f 0200 	mov.w	r2, #0
 800417c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004180:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004184:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004188:	4689      	mov	r9, r1
 800418a:	4692      	mov	sl, r2
 800418c:	eb19 0005 	adds.w	r0, r9, r5
 8004190:	eb4a 0106 	adc.w	r1, sl, r6
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	461d      	mov	r5, r3
 800419a:	f04f 0600 	mov.w	r6, #0
 800419e:	196b      	adds	r3, r5, r5
 80041a0:	eb46 0406 	adc.w	r4, r6, r6
 80041a4:	461a      	mov	r2, r3
 80041a6:	4623      	mov	r3, r4
 80041a8:	f7fc f80e 	bl	80001c8 <__aeabi_uldivmod>
 80041ac:	4603      	mov	r3, r0
 80041ae:	460c      	mov	r4, r1
 80041b0:	461a      	mov	r2, r3
 80041b2:	4b0c      	ldr	r3, [pc, #48]	; (80041e4 <UART_SetConfig+0x384>)
 80041b4:	fba3 1302 	umull	r1, r3, r3, r2
 80041b8:	095b      	lsrs	r3, r3, #5
 80041ba:	2164      	movs	r1, #100	; 0x64
 80041bc:	fb01 f303 	mul.w	r3, r1, r3
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	3332      	adds	r3, #50	; 0x32
 80041c6:	4a07      	ldr	r2, [pc, #28]	; (80041e4 <UART_SetConfig+0x384>)
 80041c8:	fba2 2303 	umull	r2, r3, r2, r3
 80041cc:	095b      	lsrs	r3, r3, #5
 80041ce:	f003 0207 	and.w	r2, r3, #7
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4442      	add	r2, r8
 80041d8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80041da:	e1b2      	b.n	8004542 <UART_SetConfig+0x6e2>
 80041dc:	40011000 	.word	0x40011000
 80041e0:	40011400 	.word	0x40011400
 80041e4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4ad7      	ldr	r2, [pc, #860]	; (800454c <UART_SetConfig+0x6ec>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d005      	beq.n	80041fe <UART_SetConfig+0x39e>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4ad6      	ldr	r2, [pc, #856]	; (8004550 <UART_SetConfig+0x6f0>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	f040 80d1 	bne.w	80043a0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80041fe:	f7ff fdcd 	bl	8003d9c <HAL_RCC_GetPCLK2Freq>
 8004202:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	469a      	mov	sl, r3
 8004208:	f04f 0b00 	mov.w	fp, #0
 800420c:	46d0      	mov	r8, sl
 800420e:	46d9      	mov	r9, fp
 8004210:	eb18 0308 	adds.w	r3, r8, r8
 8004214:	eb49 0409 	adc.w	r4, r9, r9
 8004218:	4698      	mov	r8, r3
 800421a:	46a1      	mov	r9, r4
 800421c:	eb18 080a 	adds.w	r8, r8, sl
 8004220:	eb49 090b 	adc.w	r9, r9, fp
 8004224:	f04f 0100 	mov.w	r1, #0
 8004228:	f04f 0200 	mov.w	r2, #0
 800422c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004230:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004234:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004238:	4688      	mov	r8, r1
 800423a:	4691      	mov	r9, r2
 800423c:	eb1a 0508 	adds.w	r5, sl, r8
 8004240:	eb4b 0609 	adc.w	r6, fp, r9
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	4619      	mov	r1, r3
 800424a:	f04f 0200 	mov.w	r2, #0
 800424e:	f04f 0300 	mov.w	r3, #0
 8004252:	f04f 0400 	mov.w	r4, #0
 8004256:	0094      	lsls	r4, r2, #2
 8004258:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800425c:	008b      	lsls	r3, r1, #2
 800425e:	461a      	mov	r2, r3
 8004260:	4623      	mov	r3, r4
 8004262:	4628      	mov	r0, r5
 8004264:	4631      	mov	r1, r6
 8004266:	f7fb ffaf 	bl	80001c8 <__aeabi_uldivmod>
 800426a:	4603      	mov	r3, r0
 800426c:	460c      	mov	r4, r1
 800426e:	461a      	mov	r2, r3
 8004270:	4bb8      	ldr	r3, [pc, #736]	; (8004554 <UART_SetConfig+0x6f4>)
 8004272:	fba3 2302 	umull	r2, r3, r3, r2
 8004276:	095b      	lsrs	r3, r3, #5
 8004278:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	469b      	mov	fp, r3
 8004280:	f04f 0c00 	mov.w	ip, #0
 8004284:	46d9      	mov	r9, fp
 8004286:	46e2      	mov	sl, ip
 8004288:	eb19 0309 	adds.w	r3, r9, r9
 800428c:	eb4a 040a 	adc.w	r4, sl, sl
 8004290:	4699      	mov	r9, r3
 8004292:	46a2      	mov	sl, r4
 8004294:	eb19 090b 	adds.w	r9, r9, fp
 8004298:	eb4a 0a0c 	adc.w	sl, sl, ip
 800429c:	f04f 0100 	mov.w	r1, #0
 80042a0:	f04f 0200 	mov.w	r2, #0
 80042a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042b0:	4689      	mov	r9, r1
 80042b2:	4692      	mov	sl, r2
 80042b4:	eb1b 0509 	adds.w	r5, fp, r9
 80042b8:	eb4c 060a 	adc.w	r6, ip, sl
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	4619      	mov	r1, r3
 80042c2:	f04f 0200 	mov.w	r2, #0
 80042c6:	f04f 0300 	mov.w	r3, #0
 80042ca:	f04f 0400 	mov.w	r4, #0
 80042ce:	0094      	lsls	r4, r2, #2
 80042d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80042d4:	008b      	lsls	r3, r1, #2
 80042d6:	461a      	mov	r2, r3
 80042d8:	4623      	mov	r3, r4
 80042da:	4628      	mov	r0, r5
 80042dc:	4631      	mov	r1, r6
 80042de:	f7fb ff73 	bl	80001c8 <__aeabi_uldivmod>
 80042e2:	4603      	mov	r3, r0
 80042e4:	460c      	mov	r4, r1
 80042e6:	461a      	mov	r2, r3
 80042e8:	4b9a      	ldr	r3, [pc, #616]	; (8004554 <UART_SetConfig+0x6f4>)
 80042ea:	fba3 1302 	umull	r1, r3, r3, r2
 80042ee:	095b      	lsrs	r3, r3, #5
 80042f0:	2164      	movs	r1, #100	; 0x64
 80042f2:	fb01 f303 	mul.w	r3, r1, r3
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	011b      	lsls	r3, r3, #4
 80042fa:	3332      	adds	r3, #50	; 0x32
 80042fc:	4a95      	ldr	r2, [pc, #596]	; (8004554 <UART_SetConfig+0x6f4>)
 80042fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004302:	095b      	lsrs	r3, r3, #5
 8004304:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004308:	4498      	add	r8, r3
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	469b      	mov	fp, r3
 800430e:	f04f 0c00 	mov.w	ip, #0
 8004312:	46d9      	mov	r9, fp
 8004314:	46e2      	mov	sl, ip
 8004316:	eb19 0309 	adds.w	r3, r9, r9
 800431a:	eb4a 040a 	adc.w	r4, sl, sl
 800431e:	4699      	mov	r9, r3
 8004320:	46a2      	mov	sl, r4
 8004322:	eb19 090b 	adds.w	r9, r9, fp
 8004326:	eb4a 0a0c 	adc.w	sl, sl, ip
 800432a:	f04f 0100 	mov.w	r1, #0
 800432e:	f04f 0200 	mov.w	r2, #0
 8004332:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004336:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800433a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800433e:	4689      	mov	r9, r1
 8004340:	4692      	mov	sl, r2
 8004342:	eb1b 0509 	adds.w	r5, fp, r9
 8004346:	eb4c 060a 	adc.w	r6, ip, sl
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	4619      	mov	r1, r3
 8004350:	f04f 0200 	mov.w	r2, #0
 8004354:	f04f 0300 	mov.w	r3, #0
 8004358:	f04f 0400 	mov.w	r4, #0
 800435c:	0094      	lsls	r4, r2, #2
 800435e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004362:	008b      	lsls	r3, r1, #2
 8004364:	461a      	mov	r2, r3
 8004366:	4623      	mov	r3, r4
 8004368:	4628      	mov	r0, r5
 800436a:	4631      	mov	r1, r6
 800436c:	f7fb ff2c 	bl	80001c8 <__aeabi_uldivmod>
 8004370:	4603      	mov	r3, r0
 8004372:	460c      	mov	r4, r1
 8004374:	461a      	mov	r2, r3
 8004376:	4b77      	ldr	r3, [pc, #476]	; (8004554 <UART_SetConfig+0x6f4>)
 8004378:	fba3 1302 	umull	r1, r3, r3, r2
 800437c:	095b      	lsrs	r3, r3, #5
 800437e:	2164      	movs	r1, #100	; 0x64
 8004380:	fb01 f303 	mul.w	r3, r1, r3
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	011b      	lsls	r3, r3, #4
 8004388:	3332      	adds	r3, #50	; 0x32
 800438a:	4a72      	ldr	r2, [pc, #456]	; (8004554 <UART_SetConfig+0x6f4>)
 800438c:	fba2 2303 	umull	r2, r3, r2, r3
 8004390:	095b      	lsrs	r3, r3, #5
 8004392:	f003 020f 	and.w	r2, r3, #15
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4442      	add	r2, r8
 800439c:	609a      	str	r2, [r3, #8]
 800439e:	e0d0      	b.n	8004542 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80043a0:	f7ff fce8 	bl	8003d74 <HAL_RCC_GetPCLK1Freq>
 80043a4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	469a      	mov	sl, r3
 80043aa:	f04f 0b00 	mov.w	fp, #0
 80043ae:	46d0      	mov	r8, sl
 80043b0:	46d9      	mov	r9, fp
 80043b2:	eb18 0308 	adds.w	r3, r8, r8
 80043b6:	eb49 0409 	adc.w	r4, r9, r9
 80043ba:	4698      	mov	r8, r3
 80043bc:	46a1      	mov	r9, r4
 80043be:	eb18 080a 	adds.w	r8, r8, sl
 80043c2:	eb49 090b 	adc.w	r9, r9, fp
 80043c6:	f04f 0100 	mov.w	r1, #0
 80043ca:	f04f 0200 	mov.w	r2, #0
 80043ce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80043d2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80043d6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80043da:	4688      	mov	r8, r1
 80043dc:	4691      	mov	r9, r2
 80043de:	eb1a 0508 	adds.w	r5, sl, r8
 80043e2:	eb4b 0609 	adc.w	r6, fp, r9
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	4619      	mov	r1, r3
 80043ec:	f04f 0200 	mov.w	r2, #0
 80043f0:	f04f 0300 	mov.w	r3, #0
 80043f4:	f04f 0400 	mov.w	r4, #0
 80043f8:	0094      	lsls	r4, r2, #2
 80043fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80043fe:	008b      	lsls	r3, r1, #2
 8004400:	461a      	mov	r2, r3
 8004402:	4623      	mov	r3, r4
 8004404:	4628      	mov	r0, r5
 8004406:	4631      	mov	r1, r6
 8004408:	f7fb fede 	bl	80001c8 <__aeabi_uldivmod>
 800440c:	4603      	mov	r3, r0
 800440e:	460c      	mov	r4, r1
 8004410:	461a      	mov	r2, r3
 8004412:	4b50      	ldr	r3, [pc, #320]	; (8004554 <UART_SetConfig+0x6f4>)
 8004414:	fba3 2302 	umull	r2, r3, r3, r2
 8004418:	095b      	lsrs	r3, r3, #5
 800441a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	469b      	mov	fp, r3
 8004422:	f04f 0c00 	mov.w	ip, #0
 8004426:	46d9      	mov	r9, fp
 8004428:	46e2      	mov	sl, ip
 800442a:	eb19 0309 	adds.w	r3, r9, r9
 800442e:	eb4a 040a 	adc.w	r4, sl, sl
 8004432:	4699      	mov	r9, r3
 8004434:	46a2      	mov	sl, r4
 8004436:	eb19 090b 	adds.w	r9, r9, fp
 800443a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800443e:	f04f 0100 	mov.w	r1, #0
 8004442:	f04f 0200 	mov.w	r2, #0
 8004446:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800444a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800444e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004452:	4689      	mov	r9, r1
 8004454:	4692      	mov	sl, r2
 8004456:	eb1b 0509 	adds.w	r5, fp, r9
 800445a:	eb4c 060a 	adc.w	r6, ip, sl
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	4619      	mov	r1, r3
 8004464:	f04f 0200 	mov.w	r2, #0
 8004468:	f04f 0300 	mov.w	r3, #0
 800446c:	f04f 0400 	mov.w	r4, #0
 8004470:	0094      	lsls	r4, r2, #2
 8004472:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004476:	008b      	lsls	r3, r1, #2
 8004478:	461a      	mov	r2, r3
 800447a:	4623      	mov	r3, r4
 800447c:	4628      	mov	r0, r5
 800447e:	4631      	mov	r1, r6
 8004480:	f7fb fea2 	bl	80001c8 <__aeabi_uldivmod>
 8004484:	4603      	mov	r3, r0
 8004486:	460c      	mov	r4, r1
 8004488:	461a      	mov	r2, r3
 800448a:	4b32      	ldr	r3, [pc, #200]	; (8004554 <UART_SetConfig+0x6f4>)
 800448c:	fba3 1302 	umull	r1, r3, r3, r2
 8004490:	095b      	lsrs	r3, r3, #5
 8004492:	2164      	movs	r1, #100	; 0x64
 8004494:	fb01 f303 	mul.w	r3, r1, r3
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	011b      	lsls	r3, r3, #4
 800449c:	3332      	adds	r3, #50	; 0x32
 800449e:	4a2d      	ldr	r2, [pc, #180]	; (8004554 <UART_SetConfig+0x6f4>)
 80044a0:	fba2 2303 	umull	r2, r3, r2, r3
 80044a4:	095b      	lsrs	r3, r3, #5
 80044a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044aa:	4498      	add	r8, r3
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	469b      	mov	fp, r3
 80044b0:	f04f 0c00 	mov.w	ip, #0
 80044b4:	46d9      	mov	r9, fp
 80044b6:	46e2      	mov	sl, ip
 80044b8:	eb19 0309 	adds.w	r3, r9, r9
 80044bc:	eb4a 040a 	adc.w	r4, sl, sl
 80044c0:	4699      	mov	r9, r3
 80044c2:	46a2      	mov	sl, r4
 80044c4:	eb19 090b 	adds.w	r9, r9, fp
 80044c8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80044cc:	f04f 0100 	mov.w	r1, #0
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044e0:	4689      	mov	r9, r1
 80044e2:	4692      	mov	sl, r2
 80044e4:	eb1b 0509 	adds.w	r5, fp, r9
 80044e8:	eb4c 060a 	adc.w	r6, ip, sl
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	4619      	mov	r1, r3
 80044f2:	f04f 0200 	mov.w	r2, #0
 80044f6:	f04f 0300 	mov.w	r3, #0
 80044fa:	f04f 0400 	mov.w	r4, #0
 80044fe:	0094      	lsls	r4, r2, #2
 8004500:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004504:	008b      	lsls	r3, r1, #2
 8004506:	461a      	mov	r2, r3
 8004508:	4623      	mov	r3, r4
 800450a:	4628      	mov	r0, r5
 800450c:	4631      	mov	r1, r6
 800450e:	f7fb fe5b 	bl	80001c8 <__aeabi_uldivmod>
 8004512:	4603      	mov	r3, r0
 8004514:	460c      	mov	r4, r1
 8004516:	461a      	mov	r2, r3
 8004518:	4b0e      	ldr	r3, [pc, #56]	; (8004554 <UART_SetConfig+0x6f4>)
 800451a:	fba3 1302 	umull	r1, r3, r3, r2
 800451e:	095b      	lsrs	r3, r3, #5
 8004520:	2164      	movs	r1, #100	; 0x64
 8004522:	fb01 f303 	mul.w	r3, r1, r3
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	011b      	lsls	r3, r3, #4
 800452a:	3332      	adds	r3, #50	; 0x32
 800452c:	4a09      	ldr	r2, [pc, #36]	; (8004554 <UART_SetConfig+0x6f4>)
 800452e:	fba2 2303 	umull	r2, r3, r2, r3
 8004532:	095b      	lsrs	r3, r3, #5
 8004534:	f003 020f 	and.w	r2, r3, #15
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4442      	add	r2, r8
 800453e:	609a      	str	r2, [r3, #8]
}
 8004540:	e7ff      	b.n	8004542 <UART_SetConfig+0x6e2>
 8004542:	bf00      	nop
 8004544:	3714      	adds	r7, #20
 8004546:	46bd      	mov	sp, r7
 8004548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800454c:	40011000 	.word	0x40011000
 8004550:	40011400 	.word	0x40011400
 8004554:	51eb851f 	.word	0x51eb851f

08004558 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004558:	b084      	sub	sp, #16
 800455a:	b580      	push	{r7, lr}
 800455c:	b084      	sub	sp, #16
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
 8004562:	f107 001c 	add.w	r0, r7, #28
 8004566:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800456a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456c:	2b01      	cmp	r3, #1
 800456e:	d122      	bne.n	80045b6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004574:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004584:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800459a:	2b01      	cmp	r3, #1
 800459c:	d105      	bne.n	80045aa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f001 fac6 	bl	8005b3c <USB_CoreReset>
 80045b0:	4603      	mov	r3, r0
 80045b2:	73fb      	strb	r3, [r7, #15]
 80045b4:	e01a      	b.n	80045ec <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f001 faba 	bl	8005b3c <USB_CoreReset>
 80045c8:	4603      	mov	r3, r0
 80045ca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80045cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d106      	bne.n	80045e0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	639a      	str	r2, [r3, #56]	; 0x38
 80045de:	e005      	b.n	80045ec <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80045ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d10b      	bne.n	800460a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f043 0206 	orr.w	r2, r3, #6
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f043 0220 	orr.w	r2, r3, #32
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800460a:	7bfb      	ldrb	r3, [r7, #15]
}
 800460c:	4618      	mov	r0, r3
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004616:	b004      	add	sp, #16
 8004618:	4770      	bx	lr
	...

0800461c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800461c:	b480      	push	{r7}
 800461e:	b087      	sub	sp, #28
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	4613      	mov	r3, r2
 8004628:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800462a:	79fb      	ldrb	r3, [r7, #7]
 800462c:	2b02      	cmp	r3, #2
 800462e:	d165      	bne.n	80046fc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	4a41      	ldr	r2, [pc, #260]	; (8004738 <USB_SetTurnaroundTime+0x11c>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d906      	bls.n	8004646 <USB_SetTurnaroundTime+0x2a>
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	4a40      	ldr	r2, [pc, #256]	; (800473c <USB_SetTurnaroundTime+0x120>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d802      	bhi.n	8004646 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004640:	230f      	movs	r3, #15
 8004642:	617b      	str	r3, [r7, #20]
 8004644:	e062      	b.n	800470c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	4a3c      	ldr	r2, [pc, #240]	; (800473c <USB_SetTurnaroundTime+0x120>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d906      	bls.n	800465c <USB_SetTurnaroundTime+0x40>
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	4a3b      	ldr	r2, [pc, #236]	; (8004740 <USB_SetTurnaroundTime+0x124>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d802      	bhi.n	800465c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004656:	230e      	movs	r3, #14
 8004658:	617b      	str	r3, [r7, #20]
 800465a:	e057      	b.n	800470c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	4a38      	ldr	r2, [pc, #224]	; (8004740 <USB_SetTurnaroundTime+0x124>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d906      	bls.n	8004672 <USB_SetTurnaroundTime+0x56>
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	4a37      	ldr	r2, [pc, #220]	; (8004744 <USB_SetTurnaroundTime+0x128>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d802      	bhi.n	8004672 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800466c:	230d      	movs	r3, #13
 800466e:	617b      	str	r3, [r7, #20]
 8004670:	e04c      	b.n	800470c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	4a33      	ldr	r2, [pc, #204]	; (8004744 <USB_SetTurnaroundTime+0x128>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d906      	bls.n	8004688 <USB_SetTurnaroundTime+0x6c>
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	4a32      	ldr	r2, [pc, #200]	; (8004748 <USB_SetTurnaroundTime+0x12c>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d802      	bhi.n	8004688 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004682:	230c      	movs	r3, #12
 8004684:	617b      	str	r3, [r7, #20]
 8004686:	e041      	b.n	800470c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	4a2f      	ldr	r2, [pc, #188]	; (8004748 <USB_SetTurnaroundTime+0x12c>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d906      	bls.n	800469e <USB_SetTurnaroundTime+0x82>
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	4a2e      	ldr	r2, [pc, #184]	; (800474c <USB_SetTurnaroundTime+0x130>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d802      	bhi.n	800469e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004698:	230b      	movs	r3, #11
 800469a:	617b      	str	r3, [r7, #20]
 800469c:	e036      	b.n	800470c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	4a2a      	ldr	r2, [pc, #168]	; (800474c <USB_SetTurnaroundTime+0x130>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d906      	bls.n	80046b4 <USB_SetTurnaroundTime+0x98>
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	4a29      	ldr	r2, [pc, #164]	; (8004750 <USB_SetTurnaroundTime+0x134>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d802      	bhi.n	80046b4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80046ae:	230a      	movs	r3, #10
 80046b0:	617b      	str	r3, [r7, #20]
 80046b2:	e02b      	b.n	800470c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	4a26      	ldr	r2, [pc, #152]	; (8004750 <USB_SetTurnaroundTime+0x134>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d906      	bls.n	80046ca <USB_SetTurnaroundTime+0xae>
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	4a25      	ldr	r2, [pc, #148]	; (8004754 <USB_SetTurnaroundTime+0x138>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d802      	bhi.n	80046ca <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80046c4:	2309      	movs	r3, #9
 80046c6:	617b      	str	r3, [r7, #20]
 80046c8:	e020      	b.n	800470c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	4a21      	ldr	r2, [pc, #132]	; (8004754 <USB_SetTurnaroundTime+0x138>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d906      	bls.n	80046e0 <USB_SetTurnaroundTime+0xc4>
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	4a20      	ldr	r2, [pc, #128]	; (8004758 <USB_SetTurnaroundTime+0x13c>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d802      	bhi.n	80046e0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80046da:	2308      	movs	r3, #8
 80046dc:	617b      	str	r3, [r7, #20]
 80046de:	e015      	b.n	800470c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	4a1d      	ldr	r2, [pc, #116]	; (8004758 <USB_SetTurnaroundTime+0x13c>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d906      	bls.n	80046f6 <USB_SetTurnaroundTime+0xda>
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	4a1c      	ldr	r2, [pc, #112]	; (800475c <USB_SetTurnaroundTime+0x140>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d802      	bhi.n	80046f6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80046f0:	2307      	movs	r3, #7
 80046f2:	617b      	str	r3, [r7, #20]
 80046f4:	e00a      	b.n	800470c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80046f6:	2306      	movs	r3, #6
 80046f8:	617b      	str	r3, [r7, #20]
 80046fa:	e007      	b.n	800470c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80046fc:	79fb      	ldrb	r3, [r7, #7]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d102      	bne.n	8004708 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004702:	2309      	movs	r3, #9
 8004704:	617b      	str	r3, [r7, #20]
 8004706:	e001      	b.n	800470c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004708:	2309      	movs	r3, #9
 800470a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	68da      	ldr	r2, [r3, #12]
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	029b      	lsls	r3, r3, #10
 8004720:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004724:	431a      	orrs	r2, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	371c      	adds	r7, #28
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr
 8004738:	00d8acbf 	.word	0x00d8acbf
 800473c:	00e4e1bf 	.word	0x00e4e1bf
 8004740:	00f423ff 	.word	0x00f423ff
 8004744:	0106737f 	.word	0x0106737f
 8004748:	011a499f 	.word	0x011a499f
 800474c:	01312cff 	.word	0x01312cff
 8004750:	014ca43f 	.word	0x014ca43f
 8004754:	016e35ff 	.word	0x016e35ff
 8004758:	01a6ab1f 	.word	0x01a6ab1f
 800475c:	01e847ff 	.word	0x01e847ff

08004760 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f043 0201 	orr.w	r2, r3, #1
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	370c      	adds	r7, #12
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr

08004782 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004782:	b480      	push	{r7}
 8004784:	b083      	sub	sp, #12
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f023 0201 	bic.w	r2, r3, #1
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	460b      	mov	r3, r1
 80047ae:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80047bc:	78fb      	ldrb	r3, [r7, #3]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d106      	bne.n	80047d0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	60da      	str	r2, [r3, #12]
 80047ce:	e00b      	b.n	80047e8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80047d0:	78fb      	ldrb	r3, [r7, #3]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d106      	bne.n	80047e4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	60da      	str	r2, [r3, #12]
 80047e2:	e001      	b.n	80047e8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e003      	b.n	80047f0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80047e8:	2032      	movs	r0, #50	; 0x32
 80047ea:	f7fc fac7 	bl	8000d7c <HAL_Delay>

  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3708      	adds	r7, #8
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047f8:	b084      	sub	sp, #16
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b086      	sub	sp, #24
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
 8004802:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004806:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800480a:	2300      	movs	r3, #0
 800480c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004812:	2300      	movs	r3, #0
 8004814:	613b      	str	r3, [r7, #16]
 8004816:	e009      	b.n	800482c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	3340      	adds	r3, #64	; 0x40
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	4413      	add	r3, r2
 8004822:	2200      	movs	r2, #0
 8004824:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	3301      	adds	r3, #1
 800482a:	613b      	str	r3, [r7, #16]
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	2b0e      	cmp	r3, #14
 8004830:	d9f2      	bls.n	8004818 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004834:	2b00      	cmp	r3, #0
 8004836:	d11c      	bne.n	8004872 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004846:	f043 0302 	orr.w	r3, r3, #2
 800484a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004850:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004868:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	639a      	str	r2, [r3, #56]	; 0x38
 8004870:	e00b      	b.n	800488a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004876:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004882:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004890:	461a      	mov	r2, r3
 8004892:	2300      	movs	r3, #0
 8004894:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800489c:	4619      	mov	r1, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a4:	461a      	mov	r2, r3
 80048a6:	680b      	ldr	r3, [r1, #0]
 80048a8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80048aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d10c      	bne.n	80048ca <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80048b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d104      	bne.n	80048c0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80048b6:	2100      	movs	r1, #0
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 f949 	bl	8004b50 <USB_SetDevSpeed>
 80048be:	e008      	b.n	80048d2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80048c0:	2101      	movs	r1, #1
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f944 	bl	8004b50 <USB_SetDevSpeed>
 80048c8:	e003      	b.n	80048d2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80048ca:	2103      	movs	r1, #3
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 f93f 	bl	8004b50 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80048d2:	2110      	movs	r1, #16
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f000 f8f3 	bl	8004ac0 <USB_FlushTxFifo>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d001      	beq.n	80048e4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 f911 	bl	8004b0c <USB_FlushRxFifo>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d001      	beq.n	80048f4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048fa:	461a      	mov	r2, r3
 80048fc:	2300      	movs	r3, #0
 80048fe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004906:	461a      	mov	r2, r3
 8004908:	2300      	movs	r3, #0
 800490a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004912:	461a      	mov	r2, r3
 8004914:	2300      	movs	r3, #0
 8004916:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004918:	2300      	movs	r3, #0
 800491a:	613b      	str	r3, [r7, #16]
 800491c:	e043      	b.n	80049a6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	015a      	lsls	r2, r3, #5
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	4413      	add	r3, r2
 8004926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004930:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004934:	d118      	bne.n	8004968 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d10a      	bne.n	8004952 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	015a      	lsls	r2, r3, #5
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	4413      	add	r3, r2
 8004944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004948:	461a      	mov	r2, r3
 800494a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800494e:	6013      	str	r3, [r2, #0]
 8004950:	e013      	b.n	800497a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	015a      	lsls	r2, r3, #5
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	4413      	add	r3, r2
 800495a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800495e:	461a      	mov	r2, r3
 8004960:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004964:	6013      	str	r3, [r2, #0]
 8004966:	e008      	b.n	800497a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	015a      	lsls	r2, r3, #5
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4413      	add	r3, r2
 8004970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004974:	461a      	mov	r2, r3
 8004976:	2300      	movs	r3, #0
 8004978:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	015a      	lsls	r2, r3, #5
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	4413      	add	r3, r2
 8004982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004986:	461a      	mov	r2, r3
 8004988:	2300      	movs	r3, #0
 800498a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	015a      	lsls	r2, r3, #5
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	4413      	add	r3, r2
 8004994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004998:	461a      	mov	r2, r3
 800499a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800499e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	3301      	adds	r3, #1
 80049a4:	613b      	str	r3, [r7, #16]
 80049a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d3b7      	bcc.n	800491e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049ae:	2300      	movs	r3, #0
 80049b0:	613b      	str	r3, [r7, #16]
 80049b2:	e043      	b.n	8004a3c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	015a      	lsls	r2, r3, #5
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	4413      	add	r3, r2
 80049bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049ca:	d118      	bne.n	80049fe <USB_DevInit+0x206>
    {
      if (i == 0U)
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d10a      	bne.n	80049e8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	015a      	lsls	r2, r3, #5
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	4413      	add	r3, r2
 80049da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049de:	461a      	mov	r2, r3
 80049e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80049e4:	6013      	str	r3, [r2, #0]
 80049e6:	e013      	b.n	8004a10 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	015a      	lsls	r2, r3, #5
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	4413      	add	r3, r2
 80049f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f4:	461a      	mov	r2, r3
 80049f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80049fa:	6013      	str	r3, [r2, #0]
 80049fc:	e008      	b.n	8004a10 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	015a      	lsls	r2, r3, #5
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	4413      	add	r3, r2
 8004a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	015a      	lsls	r2, r3, #5
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	4413      	add	r3, r2
 8004a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	2300      	movs	r3, #0
 8004a20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	015a      	lsls	r2, r3, #5
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	4413      	add	r3, r2
 8004a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a2e:	461a      	mov	r2, r3
 8004a30:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a34:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	3301      	adds	r3, #1
 8004a3a:	613b      	str	r3, [r7, #16]
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d3b7      	bcc.n	80049b4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a56:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004a64:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d105      	bne.n	8004a78 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	f043 0210 	orr.w	r2, r3, #16
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	699a      	ldr	r2, [r3, #24]
 8004a7c:	4b0f      	ldr	r3, [pc, #60]	; (8004abc <USB_DevInit+0x2c4>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004a84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d005      	beq.n	8004a96 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	f043 0208 	orr.w	r2, r3, #8
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d107      	bne.n	8004aac <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	699b      	ldr	r3, [r3, #24]
 8004aa0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004aa4:	f043 0304 	orr.w	r3, r3, #4
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004aac:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3718      	adds	r7, #24
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ab8:	b004      	add	sp, #16
 8004aba:	4770      	bx	lr
 8004abc:	803c3800 	.word	0x803c3800

08004ac0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004aca:	2300      	movs	r3, #0
 8004acc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	019b      	lsls	r3, r3, #6
 8004ad2:	f043 0220 	orr.w	r2, r3, #32
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	3301      	adds	r3, #1
 8004ade:	60fb      	str	r3, [r7, #12]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	4a09      	ldr	r2, [pc, #36]	; (8004b08 <USB_FlushTxFifo+0x48>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d901      	bls.n	8004aec <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e006      	b.n	8004afa <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	f003 0320 	and.w	r3, r3, #32
 8004af4:	2b20      	cmp	r3, #32
 8004af6:	d0f0      	beq.n	8004ada <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3714      	adds	r7, #20
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	00030d40 	.word	0x00030d40

08004b0c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004b14:	2300      	movs	r3, #0
 8004b16:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2210      	movs	r2, #16
 8004b1c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	3301      	adds	r3, #1
 8004b22:	60fb      	str	r3, [r7, #12]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	4a09      	ldr	r2, [pc, #36]	; (8004b4c <USB_FlushRxFifo+0x40>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d901      	bls.n	8004b30 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e006      	b.n	8004b3e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	f003 0310 	and.w	r3, r3, #16
 8004b38:	2b10      	cmp	r3, #16
 8004b3a:	d0f0      	beq.n	8004b1e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3714      	adds	r7, #20
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	00030d40 	.word	0x00030d40

08004b50 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	460b      	mov	r3, r1
 8004b5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	78fb      	ldrb	r3, [r7, #3]
 8004b6a:	68f9      	ldr	r1, [r7, #12]
 8004b6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b70:	4313      	orrs	r3, r2
 8004b72:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3714      	adds	r7, #20
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004b82:	b480      	push	{r7}
 8004b84:	b087      	sub	sp, #28
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f003 0306 	and.w	r3, r3, #6
 8004b9a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d102      	bne.n	8004ba8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	75fb      	strb	r3, [r7, #23]
 8004ba6:	e00a      	b.n	8004bbe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d002      	beq.n	8004bb4 <USB_GetDevSpeed+0x32>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2b06      	cmp	r3, #6
 8004bb2:	d102      	bne.n	8004bba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	75fb      	strb	r3, [r7, #23]
 8004bb8:	e001      	b.n	8004bbe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004bba:	230f      	movs	r3, #15
 8004bbc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004bbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	371c      	adds	r7, #28
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	785b      	ldrb	r3, [r3, #1]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d13a      	bne.n	8004c5e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bee:	69da      	ldr	r2, [r3, #28]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	f003 030f 	and.w	r3, r3, #15
 8004bf8:	2101      	movs	r1, #1
 8004bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	68f9      	ldr	r1, [r7, #12]
 8004c02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c06:	4313      	orrs	r3, r2
 8004c08:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	015a      	lsls	r2, r3, #5
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	4413      	add	r3, r2
 8004c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d155      	bne.n	8004ccc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	015a      	lsls	r2, r3, #5
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	4413      	add	r3, r2
 8004c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	78db      	ldrb	r3, [r3, #3]
 8004c3a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c3c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	059b      	lsls	r3, r3, #22
 8004c42:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c44:	4313      	orrs	r3, r2
 8004c46:	68ba      	ldr	r2, [r7, #8]
 8004c48:	0151      	lsls	r1, r2, #5
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	440a      	add	r2, r1
 8004c4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c5a:	6013      	str	r3, [r2, #0]
 8004c5c:	e036      	b.n	8004ccc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c64:	69da      	ldr	r2, [r3, #28]
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	f003 030f 	and.w	r3, r3, #15
 8004c6e:	2101      	movs	r1, #1
 8004c70:	fa01 f303 	lsl.w	r3, r1, r3
 8004c74:	041b      	lsls	r3, r3, #16
 8004c76:	68f9      	ldr	r1, [r7, #12]
 8004c78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	015a      	lsls	r2, r3, #5
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	4413      	add	r3, r2
 8004c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d11a      	bne.n	8004ccc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	015a      	lsls	r2, r3, #5
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	78db      	ldrb	r3, [r3, #3]
 8004cb0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004cb2:	430b      	orrs	r3, r1
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	0151      	lsls	r1, r2, #5
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	440a      	add	r2, r1
 8004cbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cca:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3714      	adds	r7, #20
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
	...

08004cdc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	785b      	ldrb	r3, [r3, #1]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d161      	bne.n	8004dbc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	015a      	lsls	r2, r3, #5
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	4413      	add	r3, r2
 8004d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d0e:	d11f      	bne.n	8004d50 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	015a      	lsls	r2, r3, #5
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	4413      	add	r3, r2
 8004d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68ba      	ldr	r2, [r7, #8]
 8004d20:	0151      	lsls	r1, r2, #5
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	440a      	add	r2, r1
 8004d26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d2e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	015a      	lsls	r2, r3, #5
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	4413      	add	r3, r2
 8004d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68ba      	ldr	r2, [r7, #8]
 8004d40:	0151      	lsls	r1, r2, #5
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	440a      	add	r2, r1
 8004d46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d4e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	f003 030f 	and.w	r3, r3, #15
 8004d60:	2101      	movs	r1, #1
 8004d62:	fa01 f303 	lsl.w	r3, r1, r3
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	43db      	mvns	r3, r3
 8004d6a:	68f9      	ldr	r1, [r7, #12]
 8004d6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d70:	4013      	ands	r3, r2
 8004d72:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d7a:	69da      	ldr	r2, [r3, #28]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	f003 030f 	and.w	r3, r3, #15
 8004d84:	2101      	movs	r1, #1
 8004d86:	fa01 f303 	lsl.w	r3, r1, r3
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	43db      	mvns	r3, r3
 8004d8e:	68f9      	ldr	r1, [r7, #12]
 8004d90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d94:	4013      	ands	r3, r2
 8004d96:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	015a      	lsls	r2, r3, #5
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	4413      	add	r3, r2
 8004da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	0159      	lsls	r1, r3, #5
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	440b      	add	r3, r1
 8004dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db2:	4619      	mov	r1, r3
 8004db4:	4b35      	ldr	r3, [pc, #212]	; (8004e8c <USB_DeactivateEndpoint+0x1b0>)
 8004db6:	4013      	ands	r3, r2
 8004db8:	600b      	str	r3, [r1, #0]
 8004dba:	e060      	b.n	8004e7e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	015a      	lsls	r2, r3, #5
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dd2:	d11f      	bne.n	8004e14 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	015a      	lsls	r2, r3, #5
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	4413      	add	r3, r2
 8004ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	0151      	lsls	r1, r2, #5
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	440a      	add	r2, r1
 8004dea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004df2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	015a      	lsls	r2, r3, #5
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	0151      	lsls	r1, r2, #5
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	440a      	add	r2, r1
 8004e0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e12:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	f003 030f 	and.w	r3, r3, #15
 8004e24:	2101      	movs	r1, #1
 8004e26:	fa01 f303 	lsl.w	r3, r1, r3
 8004e2a:	041b      	lsls	r3, r3, #16
 8004e2c:	43db      	mvns	r3, r3
 8004e2e:	68f9      	ldr	r1, [r7, #12]
 8004e30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e34:	4013      	ands	r3, r2
 8004e36:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e3e:	69da      	ldr	r2, [r3, #28]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	f003 030f 	and.w	r3, r3, #15
 8004e48:	2101      	movs	r1, #1
 8004e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e4e:	041b      	lsls	r3, r3, #16
 8004e50:	43db      	mvns	r3, r3
 8004e52:	68f9      	ldr	r1, [r7, #12]
 8004e54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e58:	4013      	ands	r3, r2
 8004e5a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	015a      	lsls	r2, r3, #5
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	4413      	add	r3, r2
 8004e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	0159      	lsls	r1, r3, #5
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	440b      	add	r3, r1
 8004e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e76:	4619      	mov	r1, r3
 8004e78:	4b05      	ldr	r3, [pc, #20]	; (8004e90 <USB_DeactivateEndpoint+0x1b4>)
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3714      	adds	r7, #20
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr
 8004e8c:	ec337800 	.word	0xec337800
 8004e90:	eff37800 	.word	0xeff37800

08004e94 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b08a      	sub	sp, #40	; 0x28
 8004e98:	af02      	add	r7, sp, #8
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	785b      	ldrb	r3, [r3, #1]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	f040 815c 	bne.w	800516e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d132      	bne.n	8004f24 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	015a      	lsls	r2, r3, #5
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	0151      	lsls	r1, r2, #5
 8004ed0:	69fa      	ldr	r2, [r7, #28]
 8004ed2:	440a      	add	r2, r1
 8004ed4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ed8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004edc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ee0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	015a      	lsls	r2, r3, #5
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	4413      	add	r3, r2
 8004eea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	69ba      	ldr	r2, [r7, #24]
 8004ef2:	0151      	lsls	r1, r2, #5
 8004ef4:	69fa      	ldr	r2, [r7, #28]
 8004ef6:	440a      	add	r2, r1
 8004ef8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004efc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	015a      	lsls	r2, r3, #5
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	4413      	add	r3, r2
 8004f0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	69ba      	ldr	r2, [r7, #24]
 8004f12:	0151      	lsls	r1, r2, #5
 8004f14:	69fa      	ldr	r2, [r7, #28]
 8004f16:	440a      	add	r2, r1
 8004f18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f1c:	0cdb      	lsrs	r3, r3, #19
 8004f1e:	04db      	lsls	r3, r3, #19
 8004f20:	6113      	str	r3, [r2, #16]
 8004f22:	e074      	b.n	800500e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	015a      	lsls	r2, r3, #5
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	69ba      	ldr	r2, [r7, #24]
 8004f34:	0151      	lsls	r1, r2, #5
 8004f36:	69fa      	ldr	r2, [r7, #28]
 8004f38:	440a      	add	r2, r1
 8004f3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f3e:	0cdb      	lsrs	r3, r3, #19
 8004f40:	04db      	lsls	r3, r3, #19
 8004f42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	015a      	lsls	r2, r3, #5
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	69ba      	ldr	r2, [r7, #24]
 8004f54:	0151      	lsls	r1, r2, #5
 8004f56:	69fa      	ldr	r2, [r7, #28]
 8004f58:	440a      	add	r2, r1
 8004f5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f5e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f62:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	015a      	lsls	r2, r3, #5
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	4413      	add	r3, r2
 8004f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f74:	691a      	ldr	r2, [r3, #16]
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	6959      	ldr	r1, [r3, #20]
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	440b      	add	r3, r1
 8004f80:	1e59      	subs	r1, r3, #1
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f8a:	04d9      	lsls	r1, r3, #19
 8004f8c:	4b9d      	ldr	r3, [pc, #628]	; (8005204 <USB_EPStartXfer+0x370>)
 8004f8e:	400b      	ands	r3, r1
 8004f90:	69b9      	ldr	r1, [r7, #24]
 8004f92:	0148      	lsls	r0, r1, #5
 8004f94:	69f9      	ldr	r1, [r7, #28]
 8004f96:	4401      	add	r1, r0
 8004f98:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	015a      	lsls	r2, r3, #5
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fac:	691a      	ldr	r2, [r3, #16]
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fb6:	69b9      	ldr	r1, [r7, #24]
 8004fb8:	0148      	lsls	r0, r1, #5
 8004fba:	69f9      	ldr	r1, [r7, #28]
 8004fbc:	4401      	add	r1, r0
 8004fbe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	78db      	ldrb	r3, [r3, #3]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d11f      	bne.n	800500e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	015a      	lsls	r2, r3, #5
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	4413      	add	r3, r2
 8004fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	69ba      	ldr	r2, [r7, #24]
 8004fde:	0151      	lsls	r1, r2, #5
 8004fe0:	69fa      	ldr	r2, [r7, #28]
 8004fe2:	440a      	add	r2, r1
 8004fe4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fe8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004fec:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	015a      	lsls	r2, r3, #5
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	69ba      	ldr	r2, [r7, #24]
 8004ffe:	0151      	lsls	r1, r2, #5
 8005000:	69fa      	ldr	r2, [r7, #28]
 8005002:	440a      	add	r2, r1
 8005004:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005008:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800500c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800500e:	79fb      	ldrb	r3, [r7, #7]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d14b      	bne.n	80050ac <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d009      	beq.n	8005030 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	015a      	lsls	r2, r3, #5
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	4413      	add	r3, r2
 8005024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005028:	461a      	mov	r2, r3
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	78db      	ldrb	r3, [r3, #3]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d128      	bne.n	800508a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005044:	2b00      	cmp	r3, #0
 8005046:	d110      	bne.n	800506a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	015a      	lsls	r2, r3, #5
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	4413      	add	r3, r2
 8005050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	69ba      	ldr	r2, [r7, #24]
 8005058:	0151      	lsls	r1, r2, #5
 800505a:	69fa      	ldr	r2, [r7, #28]
 800505c:	440a      	add	r2, r1
 800505e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005062:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005066:	6013      	str	r3, [r2, #0]
 8005068:	e00f      	b.n	800508a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	015a      	lsls	r2, r3, #5
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	4413      	add	r3, r2
 8005072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	69ba      	ldr	r2, [r7, #24]
 800507a:	0151      	lsls	r1, r2, #5
 800507c:	69fa      	ldr	r2, [r7, #28]
 800507e:	440a      	add	r2, r1
 8005080:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005088:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	015a      	lsls	r2, r3, #5
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	4413      	add	r3, r2
 8005092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	69ba      	ldr	r2, [r7, #24]
 800509a:	0151      	lsls	r1, r2, #5
 800509c:	69fa      	ldr	r2, [r7, #28]
 800509e:	440a      	add	r2, r1
 80050a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050a8:	6013      	str	r3, [r2, #0]
 80050aa:	e12f      	b.n	800530c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	015a      	lsls	r2, r3, #5
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	4413      	add	r3, r2
 80050b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	69ba      	ldr	r2, [r7, #24]
 80050bc:	0151      	lsls	r1, r2, #5
 80050be:	69fa      	ldr	r2, [r7, #28]
 80050c0:	440a      	add	r2, r1
 80050c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050ca:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	78db      	ldrb	r3, [r3, #3]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d015      	beq.n	8005100 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	695b      	ldr	r3, [r3, #20]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f000 8117 	beq.w	800530c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	f003 030f 	and.w	r3, r3, #15
 80050ee:	2101      	movs	r1, #1
 80050f0:	fa01 f303 	lsl.w	r3, r1, r3
 80050f4:	69f9      	ldr	r1, [r7, #28]
 80050f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050fa:	4313      	orrs	r3, r2
 80050fc:	634b      	str	r3, [r1, #52]	; 0x34
 80050fe:	e105      	b.n	800530c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800510c:	2b00      	cmp	r3, #0
 800510e:	d110      	bne.n	8005132 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	015a      	lsls	r2, r3, #5
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	4413      	add	r3, r2
 8005118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	69ba      	ldr	r2, [r7, #24]
 8005120:	0151      	lsls	r1, r2, #5
 8005122:	69fa      	ldr	r2, [r7, #28]
 8005124:	440a      	add	r2, r1
 8005126:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800512a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800512e:	6013      	str	r3, [r2, #0]
 8005130:	e00f      	b.n	8005152 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	015a      	lsls	r2, r3, #5
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	4413      	add	r3, r2
 800513a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	69ba      	ldr	r2, [r7, #24]
 8005142:	0151      	lsls	r1, r2, #5
 8005144:	69fa      	ldr	r2, [r7, #28]
 8005146:	440a      	add	r2, r1
 8005148:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800514c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005150:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	68d9      	ldr	r1, [r3, #12]
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	781a      	ldrb	r2, [r3, #0]
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	b298      	uxth	r0, r3
 8005160:	79fb      	ldrb	r3, [r7, #7]
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	4603      	mov	r3, r0
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f000 fa2b 	bl	80055c2 <USB_WritePacket>
 800516c:	e0ce      	b.n	800530c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	015a      	lsls	r2, r3, #5
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	4413      	add	r3, r2
 8005176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	0151      	lsls	r1, r2, #5
 8005180:	69fa      	ldr	r2, [r7, #28]
 8005182:	440a      	add	r2, r1
 8005184:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005188:	0cdb      	lsrs	r3, r3, #19
 800518a:	04db      	lsls	r3, r3, #19
 800518c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	015a      	lsls	r2, r3, #5
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	4413      	add	r3, r2
 8005196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	0151      	lsls	r1, r2, #5
 80051a0:	69fa      	ldr	r2, [r7, #28]
 80051a2:	440a      	add	r2, r1
 80051a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051b0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d126      	bne.n	8005208 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	015a      	lsls	r2, r3, #5
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	4413      	add	r3, r2
 80051c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c6:	691a      	ldr	r2, [r3, #16]
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051d0:	69b9      	ldr	r1, [r7, #24]
 80051d2:	0148      	lsls	r0, r1, #5
 80051d4:	69f9      	ldr	r1, [r7, #28]
 80051d6:	4401      	add	r1, r0
 80051d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80051dc:	4313      	orrs	r3, r2
 80051de:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	015a      	lsls	r2, r3, #5
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	4413      	add	r3, r2
 80051e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	69ba      	ldr	r2, [r7, #24]
 80051f0:	0151      	lsls	r1, r2, #5
 80051f2:	69fa      	ldr	r2, [r7, #28]
 80051f4:	440a      	add	r2, r1
 80051f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051fe:	6113      	str	r3, [r2, #16]
 8005200:	e036      	b.n	8005270 <USB_EPStartXfer+0x3dc>
 8005202:	bf00      	nop
 8005204:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	695a      	ldr	r2, [r3, #20]
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	4413      	add	r3, r2
 8005212:	1e5a      	subs	r2, r3, #1
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	fbb2 f3f3 	udiv	r3, r2, r3
 800521c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	015a      	lsls	r2, r3, #5
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	4413      	add	r3, r2
 8005226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800522a:	691a      	ldr	r2, [r3, #16]
 800522c:	8afb      	ldrh	r3, [r7, #22]
 800522e:	04d9      	lsls	r1, r3, #19
 8005230:	4b39      	ldr	r3, [pc, #228]	; (8005318 <USB_EPStartXfer+0x484>)
 8005232:	400b      	ands	r3, r1
 8005234:	69b9      	ldr	r1, [r7, #24]
 8005236:	0148      	lsls	r0, r1, #5
 8005238:	69f9      	ldr	r1, [r7, #28]
 800523a:	4401      	add	r1, r0
 800523c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005240:	4313      	orrs	r3, r2
 8005242:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	015a      	lsls	r2, r3, #5
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	4413      	add	r3, r2
 800524c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005250:	691a      	ldr	r2, [r3, #16]
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	8af9      	ldrh	r1, [r7, #22]
 8005258:	fb01 f303 	mul.w	r3, r1, r3
 800525c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005260:	69b9      	ldr	r1, [r7, #24]
 8005262:	0148      	lsls	r0, r1, #5
 8005264:	69f9      	ldr	r1, [r7, #28]
 8005266:	4401      	add	r1, r0
 8005268:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800526c:	4313      	orrs	r3, r2
 800526e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005270:	79fb      	ldrb	r3, [r7, #7]
 8005272:	2b01      	cmp	r3, #1
 8005274:	d10d      	bne.n	8005292 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d009      	beq.n	8005292 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	68d9      	ldr	r1, [r3, #12]
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	015a      	lsls	r2, r3, #5
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	4413      	add	r3, r2
 800528a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800528e:	460a      	mov	r2, r1
 8005290:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	78db      	ldrb	r3, [r3, #3]
 8005296:	2b01      	cmp	r3, #1
 8005298:	d128      	bne.n	80052ec <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d110      	bne.n	80052cc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	015a      	lsls	r2, r3, #5
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	4413      	add	r3, r2
 80052b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	69ba      	ldr	r2, [r7, #24]
 80052ba:	0151      	lsls	r1, r2, #5
 80052bc:	69fa      	ldr	r2, [r7, #28]
 80052be:	440a      	add	r2, r1
 80052c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80052c8:	6013      	str	r3, [r2, #0]
 80052ca:	e00f      	b.n	80052ec <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	69ba      	ldr	r2, [r7, #24]
 80052dc:	0151      	lsls	r1, r2, #5
 80052de:	69fa      	ldr	r2, [r7, #28]
 80052e0:	440a      	add	r2, r1
 80052e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052ea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	015a      	lsls	r2, r3, #5
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	4413      	add	r3, r2
 80052f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	69ba      	ldr	r2, [r7, #24]
 80052fc:	0151      	lsls	r1, r2, #5
 80052fe:	69fa      	ldr	r2, [r7, #28]
 8005300:	440a      	add	r2, r1
 8005302:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005306:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800530a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3720      	adds	r7, #32
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	1ff80000 	.word	0x1ff80000

0800531c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800531c:	b480      	push	{r7}
 800531e:	b087      	sub	sp, #28
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	4613      	mov	r3, r2
 8005328:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	785b      	ldrb	r3, [r3, #1]
 8005338:	2b01      	cmp	r3, #1
 800533a:	f040 80cd 	bne.w	80054d8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d132      	bne.n	80053ac <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	015a      	lsls	r2, r3, #5
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	4413      	add	r3, r2
 800534e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	693a      	ldr	r2, [r7, #16]
 8005356:	0151      	lsls	r1, r2, #5
 8005358:	697a      	ldr	r2, [r7, #20]
 800535a:	440a      	add	r2, r1
 800535c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005360:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005364:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005368:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	015a      	lsls	r2, r3, #5
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	4413      	add	r3, r2
 8005372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	0151      	lsls	r1, r2, #5
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	440a      	add	r2, r1
 8005380:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005384:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005388:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	015a      	lsls	r2, r3, #5
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	4413      	add	r3, r2
 8005392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	693a      	ldr	r2, [r7, #16]
 800539a:	0151      	lsls	r1, r2, #5
 800539c:	697a      	ldr	r2, [r7, #20]
 800539e:	440a      	add	r2, r1
 80053a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053a4:	0cdb      	lsrs	r3, r3, #19
 80053a6:	04db      	lsls	r3, r3, #19
 80053a8:	6113      	str	r3, [r2, #16]
 80053aa:	e04e      	b.n	800544a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	015a      	lsls	r2, r3, #5
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	4413      	add	r3, r2
 80053b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	0151      	lsls	r1, r2, #5
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	440a      	add	r2, r1
 80053c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053c6:	0cdb      	lsrs	r3, r3, #19
 80053c8:	04db      	lsls	r3, r3, #19
 80053ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	015a      	lsls	r2, r3, #5
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	4413      	add	r3, r2
 80053d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	0151      	lsls	r1, r2, #5
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	440a      	add	r2, r1
 80053e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053ee:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	695a      	ldr	r2, [r3, #20]
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d903      	bls.n	8005404 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	689a      	ldr	r2, [r3, #8]
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	015a      	lsls	r2, r3, #5
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	4413      	add	r3, r2
 800540c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	693a      	ldr	r2, [r7, #16]
 8005414:	0151      	lsls	r1, r2, #5
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	440a      	add	r2, r1
 800541a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800541e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005422:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	015a      	lsls	r2, r3, #5
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	4413      	add	r3, r2
 800542c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005430:	691a      	ldr	r2, [r3, #16]
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	695b      	ldr	r3, [r3, #20]
 8005436:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800543a:	6939      	ldr	r1, [r7, #16]
 800543c:	0148      	lsls	r0, r1, #5
 800543e:	6979      	ldr	r1, [r7, #20]
 8005440:	4401      	add	r1, r0
 8005442:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005446:	4313      	orrs	r3, r2
 8005448:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800544a:	79fb      	ldrb	r3, [r7, #7]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d11e      	bne.n	800548e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d009      	beq.n	800546c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	015a      	lsls	r2, r3, #5
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	4413      	add	r3, r2
 8005460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005464:	461a      	mov	r2, r3
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	015a      	lsls	r2, r3, #5
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	4413      	add	r3, r2
 8005474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	0151      	lsls	r1, r2, #5
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	440a      	add	r2, r1
 8005482:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005486:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800548a:	6013      	str	r3, [r2, #0]
 800548c:	e092      	b.n	80055b4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	015a      	lsls	r2, r3, #5
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	4413      	add	r3, r2
 8005496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	693a      	ldr	r2, [r7, #16]
 800549e:	0151      	lsls	r1, r2, #5
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	440a      	add	r2, r1
 80054a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054ac:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d07e      	beq.n	80055b4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	f003 030f 	and.w	r3, r3, #15
 80054c6:	2101      	movs	r1, #1
 80054c8:	fa01 f303 	lsl.w	r3, r1, r3
 80054cc:	6979      	ldr	r1, [r7, #20]
 80054ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054d2:	4313      	orrs	r3, r2
 80054d4:	634b      	str	r3, [r1, #52]	; 0x34
 80054d6:	e06d      	b.n	80055b4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	015a      	lsls	r2, r3, #5
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	4413      	add	r3, r2
 80054e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	0151      	lsls	r1, r2, #5
 80054ea:	697a      	ldr	r2, [r7, #20]
 80054ec:	440a      	add	r2, r1
 80054ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054f2:	0cdb      	lsrs	r3, r3, #19
 80054f4:	04db      	lsls	r3, r3, #19
 80054f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	015a      	lsls	r2, r3, #5
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	4413      	add	r3, r2
 8005500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	693a      	ldr	r2, [r7, #16]
 8005508:	0151      	lsls	r1, r2, #5
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	440a      	add	r2, r1
 800550e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005512:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005516:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800551a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	695b      	ldr	r3, [r3, #20]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d003      	beq.n	800552c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	689a      	ldr	r2, [r3, #8]
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	015a      	lsls	r2, r3, #5
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	4413      	add	r3, r2
 8005534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	0151      	lsls	r1, r2, #5
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	440a      	add	r2, r1
 8005542:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005546:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800554a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	015a      	lsls	r2, r3, #5
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	4413      	add	r3, r2
 8005554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005558:	691a      	ldr	r2, [r3, #16]
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005562:	6939      	ldr	r1, [r7, #16]
 8005564:	0148      	lsls	r0, r1, #5
 8005566:	6979      	ldr	r1, [r7, #20]
 8005568:	4401      	add	r1, r0
 800556a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800556e:	4313      	orrs	r3, r2
 8005570:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005572:	79fb      	ldrb	r3, [r7, #7]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d10d      	bne.n	8005594 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d009      	beq.n	8005594 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	68d9      	ldr	r1, [r3, #12]
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	015a      	lsls	r2, r3, #5
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	4413      	add	r3, r2
 800558c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005590:	460a      	mov	r2, r1
 8005592:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	015a      	lsls	r2, r3, #5
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	4413      	add	r3, r2
 800559c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	693a      	ldr	r2, [r7, #16]
 80055a4:	0151      	lsls	r1, r2, #5
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	440a      	add	r2, r1
 80055aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	371c      	adds	r7, #28
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr

080055c2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80055c2:	b480      	push	{r7}
 80055c4:	b089      	sub	sp, #36	; 0x24
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	60f8      	str	r0, [r7, #12]
 80055ca:	60b9      	str	r1, [r7, #8]
 80055cc:	4611      	mov	r1, r2
 80055ce:	461a      	mov	r2, r3
 80055d0:	460b      	mov	r3, r1
 80055d2:	71fb      	strb	r3, [r7, #7]
 80055d4:	4613      	mov	r3, r2
 80055d6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80055e0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d11a      	bne.n	800561e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80055e8:	88bb      	ldrh	r3, [r7, #4]
 80055ea:	3303      	adds	r3, #3
 80055ec:	089b      	lsrs	r3, r3, #2
 80055ee:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80055f0:	2300      	movs	r3, #0
 80055f2:	61bb      	str	r3, [r7, #24]
 80055f4:	e00f      	b.n	8005616 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80055f6:	79fb      	ldrb	r3, [r7, #7]
 80055f8:	031a      	lsls	r2, r3, #12
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	4413      	add	r3, r2
 80055fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005602:	461a      	mov	r2, r3
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6013      	str	r3, [r2, #0]
      pSrc++;
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	3304      	adds	r3, #4
 800560e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	3301      	adds	r3, #1
 8005614:	61bb      	str	r3, [r7, #24]
 8005616:	69ba      	ldr	r2, [r7, #24]
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	429a      	cmp	r2, r3
 800561c:	d3eb      	bcc.n	80055f6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3724      	adds	r7, #36	; 0x24
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800562c:	b480      	push	{r7}
 800562e:	b089      	sub	sp, #36	; 0x24
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	4613      	mov	r3, r2
 8005638:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005642:	88fb      	ldrh	r3, [r7, #6]
 8005644:	3303      	adds	r3, #3
 8005646:	089b      	lsrs	r3, r3, #2
 8005648:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800564a:	2300      	movs	r3, #0
 800564c:	61bb      	str	r3, [r7, #24]
 800564e:	e00b      	b.n	8005668 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	601a      	str	r2, [r3, #0]
    pDest++;
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	3304      	adds	r3, #4
 8005660:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	3301      	adds	r3, #1
 8005666:	61bb      	str	r3, [r7, #24]
 8005668:	69ba      	ldr	r2, [r7, #24]
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	429a      	cmp	r2, r3
 800566e:	d3ef      	bcc.n	8005650 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005670:	69fb      	ldr	r3, [r7, #28]
}
 8005672:	4618      	mov	r0, r3
 8005674:	3724      	adds	r7, #36	; 0x24
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr

0800567e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800567e:	b480      	push	{r7}
 8005680:	b085      	sub	sp, #20
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
 8005686:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	785b      	ldrb	r3, [r3, #1]
 8005696:	2b01      	cmp	r3, #1
 8005698:	d12c      	bne.n	80056f4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	015a      	lsls	r2, r3, #5
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	4413      	add	r3, r2
 80056a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	db12      	blt.n	80056d2 <USB_EPSetStall+0x54>
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d00f      	beq.n	80056d2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	015a      	lsls	r2, r3, #5
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	4413      	add	r3, r2
 80056ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68ba      	ldr	r2, [r7, #8]
 80056c2:	0151      	lsls	r1, r2, #5
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	440a      	add	r2, r1
 80056c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80056d0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	015a      	lsls	r2, r3, #5
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	4413      	add	r3, r2
 80056da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68ba      	ldr	r2, [r7, #8]
 80056e2:	0151      	lsls	r1, r2, #5
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	440a      	add	r2, r1
 80056e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80056f0:	6013      	str	r3, [r2, #0]
 80056f2:	e02b      	b.n	800574c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	015a      	lsls	r2, r3, #5
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	4413      	add	r3, r2
 80056fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	db12      	blt.n	800572c <USB_EPSetStall+0xae>
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00f      	beq.n	800572c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	015a      	lsls	r2, r3, #5
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	4413      	add	r3, r2
 8005714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68ba      	ldr	r2, [r7, #8]
 800571c:	0151      	lsls	r1, r2, #5
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	440a      	add	r2, r1
 8005722:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005726:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800572a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	015a      	lsls	r2, r3, #5
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	4413      	add	r3, r2
 8005734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68ba      	ldr	r2, [r7, #8]
 800573c:	0151      	lsls	r1, r2, #5
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	440a      	add	r2, r1
 8005742:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005746:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800574a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3714      	adds	r7, #20
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr

0800575a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800575a:	b480      	push	{r7}
 800575c:	b085      	sub	sp, #20
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
 8005762:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	785b      	ldrb	r3, [r3, #1]
 8005772:	2b01      	cmp	r3, #1
 8005774:	d128      	bne.n	80057c8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	015a      	lsls	r2, r3, #5
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	4413      	add	r3, r2
 800577e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68ba      	ldr	r2, [r7, #8]
 8005786:	0151      	lsls	r1, r2, #5
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	440a      	add	r2, r1
 800578c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005790:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005794:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	78db      	ldrb	r3, [r3, #3]
 800579a:	2b03      	cmp	r3, #3
 800579c:	d003      	beq.n	80057a6 <USB_EPClearStall+0x4c>
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	78db      	ldrb	r3, [r3, #3]
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d138      	bne.n	8005818 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	015a      	lsls	r2, r3, #5
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	4413      	add	r3, r2
 80057ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68ba      	ldr	r2, [r7, #8]
 80057b6:	0151      	lsls	r1, r2, #5
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	440a      	add	r2, r1
 80057bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057c4:	6013      	str	r3, [r2, #0]
 80057c6:	e027      	b.n	8005818 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	015a      	lsls	r2, r3, #5
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	4413      	add	r3, r2
 80057d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68ba      	ldr	r2, [r7, #8]
 80057d8:	0151      	lsls	r1, r2, #5
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	440a      	add	r2, r1
 80057de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80057e6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	78db      	ldrb	r3, [r3, #3]
 80057ec:	2b03      	cmp	r3, #3
 80057ee:	d003      	beq.n	80057f8 <USB_EPClearStall+0x9e>
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	78db      	ldrb	r3, [r3, #3]
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d10f      	bne.n	8005818 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	015a      	lsls	r2, r3, #5
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	4413      	add	r3, r2
 8005800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	0151      	lsls	r1, r2, #5
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	440a      	add	r2, r1
 800580e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005816:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3714      	adds	r7, #20
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr

08005826 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005826:	b480      	push	{r7}
 8005828:	b085      	sub	sp, #20
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
 800582e:	460b      	mov	r3, r1
 8005830:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005844:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005848:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	78fb      	ldrb	r3, [r7, #3]
 8005854:	011b      	lsls	r3, r3, #4
 8005856:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800585a:	68f9      	ldr	r1, [r7, #12]
 800585c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005860:	4313      	orrs	r3, r2
 8005862:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3714      	adds	r7, #20
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr

08005872 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005872:	b480      	push	{r7}
 8005874:	b085      	sub	sp, #20
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800588c:	f023 0303 	bic.w	r3, r3, #3
 8005890:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058a0:	f023 0302 	bic.w	r3, r3, #2
 80058a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3714      	adds	r7, #20
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80058ce:	f023 0303 	bic.w	r3, r3, #3
 80058d2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058e2:	f043 0302 	orr.w	r3, r3, #2
 80058e6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3714      	adds	r7, #20
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr

080058f6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80058f6:	b480      	push	{r7}
 80058f8:	b085      	sub	sp, #20
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	699b      	ldr	r3, [r3, #24]
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	4013      	ands	r3, r2
 800590c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800590e:	68fb      	ldr	r3, [r7, #12]
}
 8005910:	4618      	mov	r0, r3
 8005912:	3714      	adds	r7, #20
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005938:	69db      	ldr	r3, [r3, #28]
 800593a:	68ba      	ldr	r2, [r7, #8]
 800593c:	4013      	ands	r3, r2
 800593e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	0c1b      	lsrs	r3, r3, #16
}
 8005944:	4618      	mov	r0, r3
 8005946:	3714      	adds	r7, #20
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800596c:	69db      	ldr	r3, [r3, #28]
 800596e:	68ba      	ldr	r2, [r7, #8]
 8005970:	4013      	ands	r3, r2
 8005972:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	b29b      	uxth	r3, r3
}
 8005978:	4618      	mov	r0, r3
 800597a:	3714      	adds	r7, #20
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	460b      	mov	r3, r1
 800598e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005994:	78fb      	ldrb	r3, [r7, #3]
 8005996:	015a      	lsls	r2, r3, #5
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	4413      	add	r3, r2
 800599c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059aa:	695b      	ldr	r3, [r3, #20]
 80059ac:	68ba      	ldr	r2, [r7, #8]
 80059ae:	4013      	ands	r3, r2
 80059b0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80059b2:	68bb      	ldr	r3, [r7, #8]
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3714      	adds	r7, #20
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b087      	sub	sp, #28
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	460b      	mov	r3, r1
 80059ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059e2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80059e4:	78fb      	ldrb	r3, [r7, #3]
 80059e6:	f003 030f 	and.w	r3, r3, #15
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	fa22 f303 	lsr.w	r3, r2, r3
 80059f0:	01db      	lsls	r3, r3, #7
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80059fa:	78fb      	ldrb	r3, [r7, #3]
 80059fc:	015a      	lsls	r2, r3, #5
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	4413      	add	r3, r2
 8005a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005a0e:	68bb      	ldr	r3, [r7, #8]
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	371c      	adds	r7, #28
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	695b      	ldr	r3, [r3, #20]
 8005a28:	f003 0301 	and.w	r3, r3, #1
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	370c      	adds	r7, #12
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a52:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005a56:	f023 0307 	bic.w	r3, r3, #7
 8005a5a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a6e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3714      	adds	r7, #20
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
	...

08005a80 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b087      	sub	sp, #28
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	460b      	mov	r3, r1
 8005a8a:	607a      	str	r2, [r7, #4]
 8005a8c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	333c      	adds	r3, #60	; 0x3c
 8005a96:	3304      	adds	r3, #4
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	4a26      	ldr	r2, [pc, #152]	; (8005b38 <USB_EP0_OutStart+0xb8>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d90a      	bls.n	8005aba <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ab0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ab4:	d101      	bne.n	8005aba <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	e037      	b.n	8005b2a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ad4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ad8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ae8:	f043 0318 	orr.w	r3, r3, #24
 8005aec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005afc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005b00:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005b02:	7afb      	ldrb	r3, [r7, #11]
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d10f      	bne.n	8005b28 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b0e:	461a      	mov	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b22:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005b26:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	371c      	adds	r7, #28
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr
 8005b36:	bf00      	nop
 8005b38:	4f54300a 	.word	0x4f54300a

08005b3c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005b44:	2300      	movs	r3, #0
 8005b46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	60fb      	str	r3, [r7, #12]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	4a13      	ldr	r2, [pc, #76]	; (8005ba0 <USB_CoreReset+0x64>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d901      	bls.n	8005b5a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	e01b      	b.n	8005b92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	daf2      	bge.n	8005b48 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b62:	2300      	movs	r3, #0
 8005b64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	f043 0201 	orr.w	r2, r3, #1
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	3301      	adds	r3, #1
 8005b76:	60fb      	str	r3, [r7, #12]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	4a09      	ldr	r2, [pc, #36]	; (8005ba0 <USB_CoreReset+0x64>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d901      	bls.n	8005b84 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e006      	b.n	8005b92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	f003 0301 	and.w	r3, r3, #1
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d0f0      	beq.n	8005b72 <USB_CoreReset+0x36>

  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3714      	adds	r7, #20
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	00030d40 	.word	0x00030d40

08005ba4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	460b      	mov	r3, r1
 8005bae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005bb0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005bb4:	f002 f9ae 	bl	8007f14 <malloc>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d105      	bne.n	8005bce <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005bca:	2302      	movs	r3, #2
 8005bcc:	e066      	b.n	8005c9c <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	7c1b      	ldrb	r3, [r3, #16]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d119      	bne.n	8005c12 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005bde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005be2:	2202      	movs	r2, #2
 8005be4:	2181      	movs	r1, #129	; 0x81
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f002 f81b 	bl	8007c22 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005bf2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	2101      	movs	r1, #1
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f002 f811 	bl	8007c22 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2210      	movs	r2, #16
 8005c0c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005c10:	e016      	b.n	8005c40 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005c12:	2340      	movs	r3, #64	; 0x40
 8005c14:	2202      	movs	r2, #2
 8005c16:	2181      	movs	r1, #129	; 0x81
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f002 f802 	bl	8007c22 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2201      	movs	r2, #1
 8005c22:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005c24:	2340      	movs	r3, #64	; 0x40
 8005c26:	2202      	movs	r2, #2
 8005c28:	2101      	movs	r1, #1
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f001 fff9 	bl	8007c22 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2210      	movs	r2, #16
 8005c3c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005c40:	2308      	movs	r3, #8
 8005c42:	2203      	movs	r2, #3
 8005c44:	2182      	movs	r1, #130	; 0x82
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f001 ffeb 	bl	8007c22 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	7c1b      	ldrb	r3, [r3, #16]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d109      	bne.n	8005c8a <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c80:	2101      	movs	r1, #1
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f002 f8bc 	bl	8007e00 <USBD_LL_PrepareReceive>
 8005c88:	e007      	b.n	8005c9a <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c90:	2340      	movs	r3, #64	; 0x40
 8005c92:	2101      	movs	r1, #1
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f002 f8b3 	bl	8007e00 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3710      	adds	r7, #16
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	460b      	mov	r3, r1
 8005cae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005cb4:	2181      	movs	r1, #129	; 0x81
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f001 ffd9 	bl	8007c6e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005cc2:	2101      	movs	r1, #1
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f001 ffd2 	bl	8007c6e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005cd2:	2182      	movs	r1, #130	; 0x82
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f001 ffca 	bl	8007c6e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d00e      	beq.n	8005d12 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d04:	4618      	mov	r0, r3
 8005d06:	f002 f90d 	bl	8007f24 <free>
    pdev->pClassData = NULL;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8005d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3710      	adds	r7, #16
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b086      	sub	sp, #24
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d2c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005d32:	2300      	movs	r3, #0
 8005d34:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d36:	2300      	movs	r3, #0
 8005d38:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d03a      	beq.n	8005dbc <USBD_CDC_Setup+0xa0>
 8005d46:	2b20      	cmp	r3, #32
 8005d48:	f040 8097 	bne.w	8005e7a <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	88db      	ldrh	r3, [r3, #6]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d029      	beq.n	8005da8 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	b25b      	sxtb	r3, r3
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	da11      	bge.n	8005d82 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	683a      	ldr	r2, [r7, #0]
 8005d68:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8005d6a:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005d6c:	683a      	ldr	r2, [r7, #0]
 8005d6e:	88d2      	ldrh	r2, [r2, #6]
 8005d70:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005d72:	6939      	ldr	r1, [r7, #16]
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	88db      	ldrh	r3, [r3, #6]
 8005d78:	461a      	mov	r2, r3
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f001 fa9d 	bl	80072ba <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8005d80:	e082      	b.n	8005e88 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	785a      	ldrb	r2, [r3, #1]
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	88db      	ldrh	r3, [r3, #6]
 8005d90:	b2da      	uxtb	r2, r3
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005d98:	6939      	ldr	r1, [r7, #16]
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	88db      	ldrh	r3, [r3, #6]
 8005d9e:	461a      	mov	r2, r3
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f001 fab6 	bl	8007312 <USBD_CtlPrepareRx>
    break;
 8005da6:	e06f      	b.n	8005e88 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	683a      	ldr	r2, [r7, #0]
 8005db2:	7850      	ldrb	r0, [r2, #1]
 8005db4:	2200      	movs	r2, #0
 8005db6:	6839      	ldr	r1, [r7, #0]
 8005db8:	4798      	blx	r3
    break;
 8005dba:	e065      	b.n	8005e88 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	785b      	ldrb	r3, [r3, #1]
 8005dc0:	2b0b      	cmp	r3, #11
 8005dc2:	d84f      	bhi.n	8005e64 <USBD_CDC_Setup+0x148>
 8005dc4:	a201      	add	r2, pc, #4	; (adr r2, 8005dcc <USBD_CDC_Setup+0xb0>)
 8005dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dca:	bf00      	nop
 8005dcc:	08005dfd 	.word	0x08005dfd
 8005dd0:	08005e73 	.word	0x08005e73
 8005dd4:	08005e65 	.word	0x08005e65
 8005dd8:	08005e65 	.word	0x08005e65
 8005ddc:	08005e65 	.word	0x08005e65
 8005de0:	08005e65 	.word	0x08005e65
 8005de4:	08005e65 	.word	0x08005e65
 8005de8:	08005e65 	.word	0x08005e65
 8005dec:	08005e65 	.word	0x08005e65
 8005df0:	08005e65 	.word	0x08005e65
 8005df4:	08005e25 	.word	0x08005e25
 8005df8:	08005e4d 	.word	0x08005e4d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e02:	2b03      	cmp	r3, #3
 8005e04:	d107      	bne.n	8005e16 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005e06:	f107 030c 	add.w	r3, r7, #12
 8005e0a:	2202      	movs	r2, #2
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f001 fa53 	bl	80072ba <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005e14:	e030      	b.n	8005e78 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005e16:	6839      	ldr	r1, [r7, #0]
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f001 f9dd 	bl	80071d8 <USBD_CtlError>
        ret = USBD_FAIL;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	75fb      	strb	r3, [r7, #23]
      break;
 8005e22:	e029      	b.n	8005e78 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e2a:	2b03      	cmp	r3, #3
 8005e2c:	d107      	bne.n	8005e3e <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005e2e:	f107 030f 	add.w	r3, r7, #15
 8005e32:	2201      	movs	r2, #1
 8005e34:	4619      	mov	r1, r3
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f001 fa3f 	bl	80072ba <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005e3c:	e01c      	b.n	8005e78 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005e3e:	6839      	ldr	r1, [r7, #0]
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f001 f9c9 	bl	80071d8 <USBD_CtlError>
        ret = USBD_FAIL;
 8005e46:	2303      	movs	r3, #3
 8005e48:	75fb      	strb	r3, [r7, #23]
      break;
 8005e4a:	e015      	b.n	8005e78 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e52:	2b03      	cmp	r3, #3
 8005e54:	d00f      	beq.n	8005e76 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8005e56:	6839      	ldr	r1, [r7, #0]
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f001 f9bd 	bl	80071d8 <USBD_CtlError>
        ret = USBD_FAIL;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005e62:	e008      	b.n	8005e76 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8005e64:	6839      	ldr	r1, [r7, #0]
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f001 f9b6 	bl	80071d8 <USBD_CtlError>
      ret = USBD_FAIL;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	75fb      	strb	r3, [r7, #23]
      break;
 8005e70:	e002      	b.n	8005e78 <USBD_CDC_Setup+0x15c>
      break;
 8005e72:	bf00      	nop
 8005e74:	e008      	b.n	8005e88 <USBD_CDC_Setup+0x16c>
      break;
 8005e76:	bf00      	nop
    }
    break;
 8005e78:	e006      	b.n	8005e88 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8005e7a:	6839      	ldr	r1, [r7, #0]
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f001 f9ab 	bl	80071d8 <USBD_CtlError>
    ret = USBD_FAIL;
 8005e82:	2303      	movs	r3, #3
 8005e84:	75fb      	strb	r3, [r7, #23]
    break;
 8005e86:	bf00      	nop
  }

  return (uint8_t)ret;
 8005e88:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3718      	adds	r7, #24
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop

08005e94 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005ea6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d101      	bne.n	8005eb6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	e049      	b.n	8005f4a <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ebc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005ebe:	78fa      	ldrb	r2, [r7, #3]
 8005ec0:	6879      	ldr	r1, [r7, #4]
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	4413      	add	r3, r2
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	440b      	add	r3, r1
 8005ecc:	3318      	adds	r3, #24
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d029      	beq.n	8005f28 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005ed4:	78fa      	ldrb	r2, [r7, #3]
 8005ed6:	6879      	ldr	r1, [r7, #4]
 8005ed8:	4613      	mov	r3, r2
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	4413      	add	r3, r2
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	440b      	add	r3, r1
 8005ee2:	3318      	adds	r3, #24
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	78f9      	ldrb	r1, [r7, #3]
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	460b      	mov	r3, r1
 8005eec:	00db      	lsls	r3, r3, #3
 8005eee:	1a5b      	subs	r3, r3, r1
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	4403      	add	r3, r0
 8005ef4:	3344      	adds	r3, #68	; 0x44
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	fbb2 f1f3 	udiv	r1, r2, r3
 8005efc:	fb03 f301 	mul.w	r3, r3, r1
 8005f00:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d110      	bne.n	8005f28 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005f06:	78fa      	ldrb	r2, [r7, #3]
 8005f08:	6879      	ldr	r1, [r7, #4]
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	4413      	add	r3, r2
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	440b      	add	r3, r1
 8005f14:	3318      	adds	r3, #24
 8005f16:	2200      	movs	r2, #0
 8005f18:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005f1a:	78f9      	ldrb	r1, [r7, #3]
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	2200      	movs	r2, #0
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f001 ff4c 	bl	8007dbe <USBD_LL_Transmit>
 8005f26:	e00f      	b.n	8005f48 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	68ba      	ldr	r2, [r7, #8]
 8005f3a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005f3e:	68ba      	ldr	r2, [r7, #8]
 8005f40:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005f44:	78fa      	ldrb	r2, [r7, #3]
 8005f46:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b084      	sub	sp, #16
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f64:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d101      	bne.n	8005f74 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005f70:	2303      	movs	r3, #3
 8005f72:	e015      	b.n	8005fa0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005f74:	78fb      	ldrb	r3, [r7, #3]
 8005f76:	4619      	mov	r1, r3
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f001 ff62 	bl	8007e42 <USBD_LL_GetRxDataSize>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005f9a:	4611      	mov	r1, r2
 8005f9c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3710      	adds	r7, #16
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fb6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d015      	beq.n	8005fee <USBD_CDC_EP0_RxReady+0x46>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005fc8:	2bff      	cmp	r3, #255	; 0xff
 8005fca:	d010      	beq.n	8005fee <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005fda:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005fdc:	68fa      	ldr	r2, [r7, #12]
 8005fde:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005fe2:	b292      	uxth	r2, r2
 8005fe4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	22ff      	movs	r2, #255	; 0xff
 8005fea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3710      	adds	r7, #16
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2243      	movs	r2, #67	; 0x43
 8006004:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006006:	4b03      	ldr	r3, [pc, #12]	; (8006014 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006008:	4618      	mov	r0, r3
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr
 8006014:	20000094 	.word	0x20000094

08006018 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2243      	movs	r2, #67	; 0x43
 8006024:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006026:	4b03      	ldr	r3, [pc, #12]	; (8006034 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006028:	4618      	mov	r0, r3
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr
 8006034:	20000050 	.word	0x20000050

08006038 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2243      	movs	r2, #67	; 0x43
 8006044:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006046:	4b03      	ldr	r3, [pc, #12]	; (8006054 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006048:	4618      	mov	r0, r3
 800604a:	370c      	adds	r7, #12
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr
 8006054:	200000d8 	.word	0x200000d8

08006058 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	220a      	movs	r2, #10
 8006064:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006066:	4b03      	ldr	r3, [pc, #12]	; (8006074 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006068:	4618      	mov	r0, r3
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr
 8006074:	2000000c 	.word	0x2000000c

08006078 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d101      	bne.n	800608c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006088:	2303      	movs	r3, #3
 800608a:	e004      	b.n	8006096 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	683a      	ldr	r2, [r7, #0]
 8006090:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	370c      	adds	r7, #12
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr

080060a2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80060a2:	b480      	push	{r7}
 80060a4:	b087      	sub	sp, #28
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	60f8      	str	r0, [r7, #12]
 80060aa:	60b9      	str	r1, [r7, #8]
 80060ac:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060b4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	68ba      	ldr	r2, [r7, #8]
 80060ba:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80060c6:	2300      	movs	r3, #0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	371c      	adds	r7, #28
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060e4:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	683a      	ldr	r2, [r7, #0]
 80060ea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3714      	adds	r7, #20
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800610a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800610c:	2301      	movs	r3, #1
 800610e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006116:	2b00      	cmp	r3, #0
 8006118:	d101      	bne.n	800611e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800611a:	2303      	movs	r3, #3
 800611c:	e01a      	b.n	8006154 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006124:	2b00      	cmp	r3, #0
 8006126:	d114      	bne.n	8006152 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	2201      	movs	r2, #1
 800612c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006146:	2181      	movs	r1, #129	; 0x81
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f001 fe38 	bl	8007dbe <USBD_LL_Transmit>

    ret = USBD_OK;
 800614e:	2300      	movs	r3, #0
 8006150:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006152:	7bfb      	ldrb	r3, [r7, #15]
}
 8006154:	4618      	mov	r0, r3
 8006156:	3710      	adds	r7, #16
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800616a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006172:	2b00      	cmp	r3, #0
 8006174:	d101      	bne.n	800617a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006176:	2303      	movs	r3, #3
 8006178:	e016      	b.n	80061a8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	7c1b      	ldrb	r3, [r3, #16]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d109      	bne.n	8006196 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006188:	f44f 7300 	mov.w	r3, #512	; 0x200
 800618c:	2101      	movs	r1, #1
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f001 fe36 	bl	8007e00 <USBD_LL_PrepareReceive>
 8006194:	e007      	b.n	80061a6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800619c:	2340      	movs	r3, #64	; 0x40
 800619e:	2101      	movs	r1, #1
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f001 fe2d 	bl	8007e00 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3710      	adds	r7, #16
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b086      	sub	sp, #24
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	4613      	mov	r3, r2
 80061bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d101      	bne.n	80061c8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e025      	b.n	8006214 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d003      	beq.n	80061da <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d003      	beq.n	80061ec <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d003      	beq.n	80061fa <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	68ba      	ldr	r2, [r7, #8]
 80061f6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2201      	movs	r2, #1
 80061fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	79fa      	ldrb	r2, [r7, #7]
 8006206:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006208:	68f8      	ldr	r0, [r7, #12]
 800620a:	f001 fca3 	bl	8007b54 <USBD_LL_Init>
 800620e:	4603      	mov	r3, r0
 8006210:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006212:	7dfb      	ldrb	r3, [r7, #23]
}
 8006214:	4618      	mov	r0, r3
 8006216:	3718      	adds	r7, #24
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006226:	2300      	movs	r3, #0
 8006228:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d101      	bne.n	8006234 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006230:	2303      	movs	r3, #3
 8006232:	e010      	b.n	8006256 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	683a      	ldr	r2, [r7, #0]
 8006238:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006244:	f107 020e 	add.w	r2, r7, #14
 8006248:	4610      	mov	r0, r2
 800624a:	4798      	blx	r3
 800624c:	4602      	mov	r2, r0
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800625e:	b580      	push	{r7, lr}
 8006260:	b082      	sub	sp, #8
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f001 fcc0 	bl	8007bec <USBD_LL_Start>
 800626c:	4603      	mov	r3, r0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3708      	adds	r7, #8
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006276:	b480      	push	{r7}
 8006278:	b083      	sub	sp, #12
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800627e:	2300      	movs	r3, #0
}
 8006280:	4618      	mov	r0, r3
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	460b      	mov	r3, r1
 8006296:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006298:	2303      	movs	r3, #3
 800629a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d009      	beq.n	80062ba <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	78fa      	ldrb	r2, [r7, #3]
 80062b0:	4611      	mov	r1, r2
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	4798      	blx	r3
 80062b6:	4603      	mov	r3, r0
 80062b8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80062ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3710      	adds	r7, #16
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	460b      	mov	r3, r1
 80062ce:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d007      	beq.n	80062ea <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	78fa      	ldrb	r2, [r7, #3]
 80062e4:	4611      	mov	r1, r2
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	4798      	blx	r3
  }

  return USBD_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3708      	adds	r7, #8
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006304:	6839      	ldr	r1, [r7, #0]
 8006306:	4618      	mov	r0, r3
 8006308:	f000 ff2c 	bl	8007164 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800631a:	461a      	mov	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006328:	f003 031f 	and.w	r3, r3, #31
 800632c:	2b01      	cmp	r3, #1
 800632e:	d00e      	beq.n	800634e <USBD_LL_SetupStage+0x5a>
 8006330:	2b01      	cmp	r3, #1
 8006332:	d302      	bcc.n	800633a <USBD_LL_SetupStage+0x46>
 8006334:	2b02      	cmp	r3, #2
 8006336:	d014      	beq.n	8006362 <USBD_LL_SetupStage+0x6e>
 8006338:	e01d      	b.n	8006376 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006340:	4619      	mov	r1, r3
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 fa18 	bl	8006778 <USBD_StdDevReq>
 8006348:	4603      	mov	r3, r0
 800634a:	73fb      	strb	r3, [r7, #15]
      break;
 800634c:	e020      	b.n	8006390 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006354:	4619      	mov	r1, r3
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 fa7c 	bl	8006854 <USBD_StdItfReq>
 800635c:	4603      	mov	r3, r0
 800635e:	73fb      	strb	r3, [r7, #15]
      break;
 8006360:	e016      	b.n	8006390 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006368:	4619      	mov	r1, r3
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 fab8 	bl	80068e0 <USBD_StdEPReq>
 8006370:	4603      	mov	r3, r0
 8006372:	73fb      	strb	r3, [r7, #15]
      break;
 8006374:	e00c      	b.n	8006390 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800637c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006380:	b2db      	uxtb	r3, r3
 8006382:	4619      	mov	r1, r3
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f001 fc91 	bl	8007cac <USBD_LL_StallEP>
 800638a:	4603      	mov	r3, r0
 800638c:	73fb      	strb	r3, [r7, #15]
      break;
 800638e:	bf00      	nop
  }

  return ret;
 8006390:	7bfb      	ldrb	r3, [r7, #15]
}
 8006392:	4618      	mov	r0, r3
 8006394:	3710      	adds	r7, #16
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800639a:	b580      	push	{r7, lr}
 800639c:	b086      	sub	sp, #24
 800639e:	af00      	add	r7, sp, #0
 80063a0:	60f8      	str	r0, [r7, #12]
 80063a2:	460b      	mov	r3, r1
 80063a4:	607a      	str	r2, [r7, #4]
 80063a6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80063a8:	7afb      	ldrb	r3, [r7, #11]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d137      	bne.n	800641e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80063b4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80063bc:	2b03      	cmp	r3, #3
 80063be:	d14a      	bne.n	8006456 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	689a      	ldr	r2, [r3, #8]
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d913      	bls.n	80063f4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	689a      	ldr	r2, [r3, #8]
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	1ad2      	subs	r2, r2, r3
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	68da      	ldr	r2, [r3, #12]
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	4293      	cmp	r3, r2
 80063e4:	bf28      	it	cs
 80063e6:	4613      	movcs	r3, r2
 80063e8:	461a      	mov	r2, r3
 80063ea:	6879      	ldr	r1, [r7, #4]
 80063ec:	68f8      	ldr	r0, [r7, #12]
 80063ee:	f000 ffad 	bl	800734c <USBD_CtlContinueRx>
 80063f2:	e030      	b.n	8006456 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00a      	beq.n	8006416 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006406:	2b03      	cmp	r3, #3
 8006408:	d105      	bne.n	8006416 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	68f8      	ldr	r0, [r7, #12]
 8006414:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f000 ffa9 	bl	800736e <USBD_CtlSendStatus>
 800641c:	e01b      	b.n	8006456 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d013      	beq.n	8006452 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006430:	2b03      	cmp	r3, #3
 8006432:	d10e      	bne.n	8006452 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	7afa      	ldrb	r2, [r7, #11]
 800643e:	4611      	mov	r1, r2
 8006440:	68f8      	ldr	r0, [r7, #12]
 8006442:	4798      	blx	r3
 8006444:	4603      	mov	r3, r0
 8006446:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006448:	7dfb      	ldrb	r3, [r7, #23]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d003      	beq.n	8006456 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800644e:	7dfb      	ldrb	r3, [r7, #23]
 8006450:	e002      	b.n	8006458 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006452:	2303      	movs	r3, #3
 8006454:	e000      	b.n	8006458 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3718      	adds	r7, #24
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b086      	sub	sp, #24
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	460b      	mov	r3, r1
 800646a:	607a      	str	r2, [r7, #4]
 800646c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800646e:	7afb      	ldrb	r3, [r7, #11]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d16a      	bne.n	800654a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	3314      	adds	r3, #20
 8006478:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006480:	2b02      	cmp	r3, #2
 8006482:	d155      	bne.n	8006530 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	689a      	ldr	r2, [r3, #8]
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	429a      	cmp	r2, r3
 800648e:	d914      	bls.n	80064ba <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	689a      	ldr	r2, [r3, #8]
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	1ad2      	subs	r2, r2, r3
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	461a      	mov	r2, r3
 80064a4:	6879      	ldr	r1, [r7, #4]
 80064a6:	68f8      	ldr	r0, [r7, #12]
 80064a8:	f000 ff22 	bl	80072f0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80064ac:	2300      	movs	r3, #0
 80064ae:	2200      	movs	r2, #0
 80064b0:	2100      	movs	r1, #0
 80064b2:	68f8      	ldr	r0, [r7, #12]
 80064b4:	f001 fca4 	bl	8007e00 <USBD_LL_PrepareReceive>
 80064b8:	e03a      	b.n	8006530 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	68da      	ldr	r2, [r3, #12]
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d11c      	bne.n	8006500 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	685a      	ldr	r2, [r3, #4]
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d316      	bcc.n	8006500 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	685a      	ldr	r2, [r3, #4]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80064dc:	429a      	cmp	r2, r3
 80064de:	d20f      	bcs.n	8006500 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80064e0:	2200      	movs	r2, #0
 80064e2:	2100      	movs	r1, #0
 80064e4:	68f8      	ldr	r0, [r7, #12]
 80064e6:	f000 ff03 	bl	80072f0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80064f2:	2300      	movs	r3, #0
 80064f4:	2200      	movs	r2, #0
 80064f6:	2100      	movs	r1, #0
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	f001 fc81 	bl	8007e00 <USBD_LL_PrepareReceive>
 80064fe:	e017      	b.n	8006530 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d00a      	beq.n	8006522 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006512:	2b03      	cmp	r3, #3
 8006514:	d105      	bne.n	8006522 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	68f8      	ldr	r0, [r7, #12]
 8006520:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006522:	2180      	movs	r1, #128	; 0x80
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f001 fbc1 	bl	8007cac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800652a:	68f8      	ldr	r0, [r7, #12]
 800652c:	f000 ff32 	bl	8007394 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006536:	2b01      	cmp	r3, #1
 8006538:	d123      	bne.n	8006582 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800653a:	68f8      	ldr	r0, [r7, #12]
 800653c:	f7ff fe9b 	bl	8006276 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2200      	movs	r2, #0
 8006544:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006548:	e01b      	b.n	8006582 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d013      	beq.n	800657e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800655c:	2b03      	cmp	r3, #3
 800655e:	d10e      	bne.n	800657e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006566:	695b      	ldr	r3, [r3, #20]
 8006568:	7afa      	ldrb	r2, [r7, #11]
 800656a:	4611      	mov	r1, r2
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	4798      	blx	r3
 8006570:	4603      	mov	r3, r0
 8006572:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006574:	7dfb      	ldrb	r3, [r7, #23]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d003      	beq.n	8006582 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800657a:	7dfb      	ldrb	r3, [r7, #23]
 800657c:	e002      	b.n	8006584 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800657e:	2303      	movs	r3, #3
 8006580:	e000      	b.n	8006584 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8006582:	2300      	movs	r3, #0
}
 8006584:	4618      	mov	r0, r3
 8006586:	3718      	adds	r7, #24
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d009      	beq.n	80065d0 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	6852      	ldr	r2, [r2, #4]
 80065c8:	b2d2      	uxtb	r2, r2
 80065ca:	4611      	mov	r1, r2
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80065d0:	2340      	movs	r3, #64	; 0x40
 80065d2:	2200      	movs	r2, #0
 80065d4:	2100      	movs	r1, #0
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f001 fb23 	bl	8007c22 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2240      	movs	r2, #64	; 0x40
 80065e8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80065ec:	2340      	movs	r3, #64	; 0x40
 80065ee:	2200      	movs	r2, #0
 80065f0:	2180      	movs	r1, #128	; 0x80
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f001 fb15 	bl	8007c22 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2240      	movs	r2, #64	; 0x40
 8006602:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3708      	adds	r7, #8
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}

0800660e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800660e:	b480      	push	{r7}
 8006610:	b083      	sub	sp, #12
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]
 8006616:	460b      	mov	r3, r1
 8006618:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	78fa      	ldrb	r2, [r7, #3]
 800661e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	370c      	adds	r7, #12
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr

0800662e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800662e:	b480      	push	{r7}
 8006630:	b083      	sub	sp, #12
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2204      	movs	r2, #4
 8006646:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800664a:	2300      	movs	r3, #0
}
 800664c:	4618      	mov	r0, r3
 800664e:	370c      	adds	r7, #12
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006666:	2b04      	cmp	r3, #4
 8006668:	d105      	bne.n	8006676 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006692:	2b03      	cmp	r3, #3
 8006694:	d10b      	bne.n	80066ae <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800669c:	69db      	ldr	r3, [r3, #28]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d005      	beq.n	80066ae <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066a8:	69db      	ldr	r3, [r3, #28]
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3708      	adds	r7, #8
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	460b      	mov	r3, r1
 80066c2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	370c      	adds	r7, #12
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr

080066d2 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80066d2:	b480      	push	{r7}
 80066d4:	b083      	sub	sp, #12
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
 80066da:	460b      	mov	r3, r1
 80066dc:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	370c      	adds	r7, #12
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr

08006702 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006702:	b580      	push	{r7, lr}
 8006704:	b082      	sub	sp, #8
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2201      	movs	r2, #1
 800670e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006718:	2b00      	cmp	r3, #0
 800671a:	d009      	beq.n	8006730 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	6852      	ldr	r2, [r2, #4]
 8006728:	b2d2      	uxtb	r2, r2
 800672a:	4611      	mov	r1, r2
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	4798      	blx	r3
  }

  return USBD_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3708      	adds	r7, #8
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}

0800673a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800673a:	b480      	push	{r7}
 800673c:	b087      	sub	sp, #28
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	3301      	adds	r3, #1
 8006750:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006758:	8a3b      	ldrh	r3, [r7, #16]
 800675a:	021b      	lsls	r3, r3, #8
 800675c:	b21a      	sxth	r2, r3
 800675e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006762:	4313      	orrs	r3, r2
 8006764:	b21b      	sxth	r3, r3
 8006766:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006768:	89fb      	ldrh	r3, [r7, #14]
}
 800676a:	4618      	mov	r0, r3
 800676c:	371c      	adds	r7, #28
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr
	...

08006778 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006782:	2300      	movs	r3, #0
 8006784:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800678e:	2b20      	cmp	r3, #32
 8006790:	d004      	beq.n	800679c <USBD_StdDevReq+0x24>
 8006792:	2b40      	cmp	r3, #64	; 0x40
 8006794:	d002      	beq.n	800679c <USBD_StdDevReq+0x24>
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00a      	beq.n	80067b0 <USBD_StdDevReq+0x38>
 800679a:	e050      	b.n	800683e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	6839      	ldr	r1, [r7, #0]
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	4798      	blx	r3
 80067aa:	4603      	mov	r3, r0
 80067ac:	73fb      	strb	r3, [r7, #15]
    break;
 80067ae:	e04b      	b.n	8006848 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	785b      	ldrb	r3, [r3, #1]
 80067b4:	2b09      	cmp	r3, #9
 80067b6:	d83c      	bhi.n	8006832 <USBD_StdDevReq+0xba>
 80067b8:	a201      	add	r2, pc, #4	; (adr r2, 80067c0 <USBD_StdDevReq+0x48>)
 80067ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067be:	bf00      	nop
 80067c0:	08006815 	.word	0x08006815
 80067c4:	08006829 	.word	0x08006829
 80067c8:	08006833 	.word	0x08006833
 80067cc:	0800681f 	.word	0x0800681f
 80067d0:	08006833 	.word	0x08006833
 80067d4:	080067f3 	.word	0x080067f3
 80067d8:	080067e9 	.word	0x080067e9
 80067dc:	08006833 	.word	0x08006833
 80067e0:	0800680b 	.word	0x0800680b
 80067e4:	080067fd 	.word	0x080067fd
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80067e8:	6839      	ldr	r1, [r7, #0]
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 f9ce 	bl	8006b8c <USBD_GetDescriptor>
      break;
 80067f0:	e024      	b.n	800683c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80067f2:	6839      	ldr	r1, [r7, #0]
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 fb33 	bl	8006e60 <USBD_SetAddress>
      break;
 80067fa:	e01f      	b.n	800683c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80067fc:	6839      	ldr	r1, [r7, #0]
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 fb70 	bl	8006ee4 <USBD_SetConfig>
 8006804:	4603      	mov	r3, r0
 8006806:	73fb      	strb	r3, [r7, #15]
      break;
 8006808:	e018      	b.n	800683c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800680a:	6839      	ldr	r1, [r7, #0]
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 fc0d 	bl	800702c <USBD_GetConfig>
      break;
 8006812:	e013      	b.n	800683c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8006814:	6839      	ldr	r1, [r7, #0]
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 fc3c 	bl	8007094 <USBD_GetStatus>
      break;
 800681c:	e00e      	b.n	800683c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800681e:	6839      	ldr	r1, [r7, #0]
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 fc6a 	bl	80070fa <USBD_SetFeature>
      break;
 8006826:	e009      	b.n	800683c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8006828:	6839      	ldr	r1, [r7, #0]
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 fc79 	bl	8007122 <USBD_ClrFeature>
      break;
 8006830:	e004      	b.n	800683c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8006832:	6839      	ldr	r1, [r7, #0]
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 fccf 	bl	80071d8 <USBD_CtlError>
      break;
 800683a:	bf00      	nop
    }
    break;
 800683c:	e004      	b.n	8006848 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800683e:	6839      	ldr	r1, [r7, #0]
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 fcc9 	bl	80071d8 <USBD_CtlError>
    break;
 8006846:	bf00      	nop
  }

  return ret;
 8006848:	7bfb      	ldrb	r3, [r7, #15]
}
 800684a:	4618      	mov	r0, r3
 800684c:	3710      	adds	r7, #16
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop

08006854 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800685e:	2300      	movs	r3, #0
 8006860:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800686a:	2b20      	cmp	r3, #32
 800686c:	d003      	beq.n	8006876 <USBD_StdItfReq+0x22>
 800686e:	2b40      	cmp	r3, #64	; 0x40
 8006870:	d001      	beq.n	8006876 <USBD_StdItfReq+0x22>
 8006872:	2b00      	cmp	r3, #0
 8006874:	d12a      	bne.n	80068cc <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800687c:	3b01      	subs	r3, #1
 800687e:	2b02      	cmp	r3, #2
 8006880:	d81d      	bhi.n	80068be <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	889b      	ldrh	r3, [r3, #4]
 8006886:	b2db      	uxtb	r3, r3
 8006888:	2b01      	cmp	r3, #1
 800688a:	d813      	bhi.n	80068b4 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	6839      	ldr	r1, [r7, #0]
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	4798      	blx	r3
 800689a:	4603      	mov	r3, r0
 800689c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	88db      	ldrh	r3, [r3, #6]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d110      	bne.n	80068c8 <USBD_StdItfReq+0x74>
 80068a6:	7bfb      	ldrb	r3, [r7, #15]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d10d      	bne.n	80068c8 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 fd5e 	bl	800736e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80068b2:	e009      	b.n	80068c8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80068b4:	6839      	ldr	r1, [r7, #0]
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 fc8e 	bl	80071d8 <USBD_CtlError>
      break;
 80068bc:	e004      	b.n	80068c8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80068be:	6839      	ldr	r1, [r7, #0]
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 fc89 	bl	80071d8 <USBD_CtlError>
      break;
 80068c6:	e000      	b.n	80068ca <USBD_StdItfReq+0x76>
      break;
 80068c8:	bf00      	nop
    }
    break;
 80068ca:	e004      	b.n	80068d6 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80068cc:	6839      	ldr	r1, [r7, #0]
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 fc82 	bl	80071d8 <USBD_CtlError>
    break;
 80068d4:	bf00      	nop
  }

  return ret;
 80068d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3710      	adds	r7, #16
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80068ea:	2300      	movs	r3, #0
 80068ec:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	889b      	ldrh	r3, [r3, #4]
 80068f2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80068fc:	2b20      	cmp	r3, #32
 80068fe:	d004      	beq.n	800690a <USBD_StdEPReq+0x2a>
 8006900:	2b40      	cmp	r3, #64	; 0x40
 8006902:	d002      	beq.n	800690a <USBD_StdEPReq+0x2a>
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00a      	beq.n	800691e <USBD_StdEPReq+0x3e>
 8006908:	e135      	b.n	8006b76 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	6839      	ldr	r1, [r7, #0]
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	4798      	blx	r3
 8006918:	4603      	mov	r3, r0
 800691a:	73fb      	strb	r3, [r7, #15]
    break;
 800691c:	e130      	b.n	8006b80 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	785b      	ldrb	r3, [r3, #1]
 8006922:	2b01      	cmp	r3, #1
 8006924:	d03e      	beq.n	80069a4 <USBD_StdEPReq+0xc4>
 8006926:	2b03      	cmp	r3, #3
 8006928:	d002      	beq.n	8006930 <USBD_StdEPReq+0x50>
 800692a:	2b00      	cmp	r3, #0
 800692c:	d077      	beq.n	8006a1e <USBD_StdEPReq+0x13e>
 800692e:	e11c      	b.n	8006b6a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006936:	2b02      	cmp	r3, #2
 8006938:	d002      	beq.n	8006940 <USBD_StdEPReq+0x60>
 800693a:	2b03      	cmp	r3, #3
 800693c:	d015      	beq.n	800696a <USBD_StdEPReq+0x8a>
 800693e:	e02b      	b.n	8006998 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006940:	7bbb      	ldrb	r3, [r7, #14]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00c      	beq.n	8006960 <USBD_StdEPReq+0x80>
 8006946:	7bbb      	ldrb	r3, [r7, #14]
 8006948:	2b80      	cmp	r3, #128	; 0x80
 800694a:	d009      	beq.n	8006960 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800694c:	7bbb      	ldrb	r3, [r7, #14]
 800694e:	4619      	mov	r1, r3
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f001 f9ab 	bl	8007cac <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006956:	2180      	movs	r1, #128	; 0x80
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f001 f9a7 	bl	8007cac <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800695e:	e020      	b.n	80069a2 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8006960:	6839      	ldr	r1, [r7, #0]
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 fc38 	bl	80071d8 <USBD_CtlError>
        break;
 8006968:	e01b      	b.n	80069a2 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	885b      	ldrh	r3, [r3, #2]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d10e      	bne.n	8006990 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006972:	7bbb      	ldrb	r3, [r7, #14]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d00b      	beq.n	8006990 <USBD_StdEPReq+0xb0>
 8006978:	7bbb      	ldrb	r3, [r7, #14]
 800697a:	2b80      	cmp	r3, #128	; 0x80
 800697c:	d008      	beq.n	8006990 <USBD_StdEPReq+0xb0>
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	88db      	ldrh	r3, [r3, #6]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d104      	bne.n	8006990 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8006986:	7bbb      	ldrb	r3, [r7, #14]
 8006988:	4619      	mov	r1, r3
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f001 f98e 	bl	8007cac <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 fcec 	bl	800736e <USBD_CtlSendStatus>

        break;
 8006996:	e004      	b.n	80069a2 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8006998:	6839      	ldr	r1, [r7, #0]
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 fc1c 	bl	80071d8 <USBD_CtlError>
        break;
 80069a0:	bf00      	nop
      }
      break;
 80069a2:	e0e7      	b.n	8006b74 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d002      	beq.n	80069b4 <USBD_StdEPReq+0xd4>
 80069ae:	2b03      	cmp	r3, #3
 80069b0:	d015      	beq.n	80069de <USBD_StdEPReq+0xfe>
 80069b2:	e02d      	b.n	8006a10 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80069b4:	7bbb      	ldrb	r3, [r7, #14]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d00c      	beq.n	80069d4 <USBD_StdEPReq+0xf4>
 80069ba:	7bbb      	ldrb	r3, [r7, #14]
 80069bc:	2b80      	cmp	r3, #128	; 0x80
 80069be:	d009      	beq.n	80069d4 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80069c0:	7bbb      	ldrb	r3, [r7, #14]
 80069c2:	4619      	mov	r1, r3
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f001 f971 	bl	8007cac <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80069ca:	2180      	movs	r1, #128	; 0x80
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f001 f96d 	bl	8007cac <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80069d2:	e023      	b.n	8006a1c <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80069d4:	6839      	ldr	r1, [r7, #0]
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 fbfe 	bl	80071d8 <USBD_CtlError>
        break;
 80069dc:	e01e      	b.n	8006a1c <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	885b      	ldrh	r3, [r3, #2]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d119      	bne.n	8006a1a <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80069e6:	7bbb      	ldrb	r3, [r7, #14]
 80069e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d004      	beq.n	80069fa <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80069f0:	7bbb      	ldrb	r3, [r7, #14]
 80069f2:	4619      	mov	r1, r3
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f001 f978 	bl	8007cea <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 fcb7 	bl	800736e <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	6839      	ldr	r1, [r7, #0]
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	4798      	blx	r3
        }
        break;
 8006a0e:	e004      	b.n	8006a1a <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8006a10:	6839      	ldr	r1, [r7, #0]
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 fbe0 	bl	80071d8 <USBD_CtlError>
        break;
 8006a18:	e000      	b.n	8006a1c <USBD_StdEPReq+0x13c>
        break;
 8006a1a:	bf00      	nop
      }
      break;
 8006a1c:	e0aa      	b.n	8006b74 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	d002      	beq.n	8006a2e <USBD_StdEPReq+0x14e>
 8006a28:	2b03      	cmp	r3, #3
 8006a2a:	d032      	beq.n	8006a92 <USBD_StdEPReq+0x1b2>
 8006a2c:	e097      	b.n	8006b5e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a2e:	7bbb      	ldrb	r3, [r7, #14]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d007      	beq.n	8006a44 <USBD_StdEPReq+0x164>
 8006a34:	7bbb      	ldrb	r3, [r7, #14]
 8006a36:	2b80      	cmp	r3, #128	; 0x80
 8006a38:	d004      	beq.n	8006a44 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8006a3a:	6839      	ldr	r1, [r7, #0]
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 fbcb 	bl	80071d8 <USBD_CtlError>
          break;
 8006a42:	e091      	b.n	8006b68 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	da0b      	bge.n	8006a64 <USBD_StdEPReq+0x184>
 8006a4c:	7bbb      	ldrb	r3, [r7, #14]
 8006a4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a52:	4613      	mov	r3, r2
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	4413      	add	r3, r2
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	3310      	adds	r3, #16
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	4413      	add	r3, r2
 8006a60:	3304      	adds	r3, #4
 8006a62:	e00b      	b.n	8006a7c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006a64:	7bbb      	ldrb	r3, [r7, #14]
 8006a66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	4413      	add	r3, r2
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	4413      	add	r3, r2
 8006a7a:	3304      	adds	r3, #4
 8006a7c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	2200      	movs	r2, #0
 8006a82:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	2202      	movs	r2, #2
 8006a88:	4619      	mov	r1, r3
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 fc15 	bl	80072ba <USBD_CtlSendData>
        break;
 8006a90:	e06a      	b.n	8006b68 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8006a92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	da11      	bge.n	8006abe <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006a9a:	7bbb      	ldrb	r3, [r7, #14]
 8006a9c:	f003 020f 	and.w	r2, r3, #15
 8006aa0:	6879      	ldr	r1, [r7, #4]
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	4413      	add	r3, r2
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	440b      	add	r3, r1
 8006aac:	3324      	adds	r3, #36	; 0x24
 8006aae:	881b      	ldrh	r3, [r3, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d117      	bne.n	8006ae4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006ab4:	6839      	ldr	r1, [r7, #0]
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 fb8e 	bl	80071d8 <USBD_CtlError>
            break;
 8006abc:	e054      	b.n	8006b68 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006abe:	7bbb      	ldrb	r3, [r7, #14]
 8006ac0:	f003 020f 	and.w	r2, r3, #15
 8006ac4:	6879      	ldr	r1, [r7, #4]
 8006ac6:	4613      	mov	r3, r2
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	4413      	add	r3, r2
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	440b      	add	r3, r1
 8006ad0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006ad4:	881b      	ldrh	r3, [r3, #0]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d104      	bne.n	8006ae4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006ada:	6839      	ldr	r1, [r7, #0]
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 fb7b 	bl	80071d8 <USBD_CtlError>
            break;
 8006ae2:	e041      	b.n	8006b68 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ae4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	da0b      	bge.n	8006b04 <USBD_StdEPReq+0x224>
 8006aec:	7bbb      	ldrb	r3, [r7, #14]
 8006aee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006af2:	4613      	mov	r3, r2
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	4413      	add	r3, r2
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	3310      	adds	r3, #16
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	4413      	add	r3, r2
 8006b00:	3304      	adds	r3, #4
 8006b02:	e00b      	b.n	8006b1c <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006b04:	7bbb      	ldrb	r3, [r7, #14]
 8006b06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	4413      	add	r3, r2
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	4413      	add	r3, r2
 8006b1a:	3304      	adds	r3, #4
 8006b1c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006b1e:	7bbb      	ldrb	r3, [r7, #14]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d002      	beq.n	8006b2a <USBD_StdEPReq+0x24a>
 8006b24:	7bbb      	ldrb	r3, [r7, #14]
 8006b26:	2b80      	cmp	r3, #128	; 0x80
 8006b28:	d103      	bne.n	8006b32 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	601a      	str	r2, [r3, #0]
 8006b30:	e00e      	b.n	8006b50 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006b32:	7bbb      	ldrb	r3, [r7, #14]
 8006b34:	4619      	mov	r1, r3
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f001 f8f6 	bl	8007d28 <USBD_LL_IsStallEP>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d003      	beq.n	8006b4a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	2201      	movs	r2, #1
 8006b46:	601a      	str	r2, [r3, #0]
 8006b48:	e002      	b.n	8006b50 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	2202      	movs	r2, #2
 8006b54:	4619      	mov	r1, r3
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 fbaf 	bl	80072ba <USBD_CtlSendData>
          break;
 8006b5c:	e004      	b.n	8006b68 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8006b5e:	6839      	ldr	r1, [r7, #0]
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 fb39 	bl	80071d8 <USBD_CtlError>
        break;
 8006b66:	bf00      	nop
      }
      break;
 8006b68:	e004      	b.n	8006b74 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8006b6a:	6839      	ldr	r1, [r7, #0]
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 fb33 	bl	80071d8 <USBD_CtlError>
      break;
 8006b72:	bf00      	nop
    }
    break;
 8006b74:	e004      	b.n	8006b80 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8006b76:	6839      	ldr	r1, [r7, #0]
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 fb2d 	bl	80071d8 <USBD_CtlError>
    break;
 8006b7e:	bf00      	nop
  }

  return ret;
 8006b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3710      	adds	r7, #16
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
	...

08006b8c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006b96:	2300      	movs	r3, #0
 8006b98:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	885b      	ldrh	r3, [r3, #2]
 8006ba6:	0a1b      	lsrs	r3, r3, #8
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	3b01      	subs	r3, #1
 8006bac:	2b06      	cmp	r3, #6
 8006bae:	f200 8128 	bhi.w	8006e02 <USBD_GetDescriptor+0x276>
 8006bb2:	a201      	add	r2, pc, #4	; (adr r2, 8006bb8 <USBD_GetDescriptor+0x2c>)
 8006bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb8:	08006bd5 	.word	0x08006bd5
 8006bbc:	08006bed 	.word	0x08006bed
 8006bc0:	08006c2d 	.word	0x08006c2d
 8006bc4:	08006e03 	.word	0x08006e03
 8006bc8:	08006e03 	.word	0x08006e03
 8006bcc:	08006da3 	.word	0x08006da3
 8006bd0:	08006dcf 	.word	0x08006dcf
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	7c12      	ldrb	r2, [r2, #16]
 8006be0:	f107 0108 	add.w	r1, r7, #8
 8006be4:	4610      	mov	r0, r2
 8006be6:	4798      	blx	r3
 8006be8:	60f8      	str	r0, [r7, #12]
    break;
 8006bea:	e112      	b.n	8006e12 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	7c1b      	ldrb	r3, [r3, #16]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d10d      	bne.n	8006c10 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bfc:	f107 0208 	add.w	r2, r7, #8
 8006c00:	4610      	mov	r0, r2
 8006c02:	4798      	blx	r3
 8006c04:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	2202      	movs	r2, #2
 8006c0c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006c0e:	e100      	b.n	8006e12 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c18:	f107 0208 	add.w	r2, r7, #8
 8006c1c:	4610      	mov	r0, r2
 8006c1e:	4798      	blx	r3
 8006c20:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	3301      	adds	r3, #1
 8006c26:	2202      	movs	r2, #2
 8006c28:	701a      	strb	r2, [r3, #0]
    break;
 8006c2a:	e0f2      	b.n	8006e12 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	885b      	ldrh	r3, [r3, #2]
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	2b05      	cmp	r3, #5
 8006c34:	f200 80ac 	bhi.w	8006d90 <USBD_GetDescriptor+0x204>
 8006c38:	a201      	add	r2, pc, #4	; (adr r2, 8006c40 <USBD_GetDescriptor+0xb4>)
 8006c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c3e:	bf00      	nop
 8006c40:	08006c59 	.word	0x08006c59
 8006c44:	08006c8d 	.word	0x08006c8d
 8006c48:	08006cc1 	.word	0x08006cc1
 8006c4c:	08006cf5 	.word	0x08006cf5
 8006c50:	08006d29 	.word	0x08006d29
 8006c54:	08006d5d 	.word	0x08006d5d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d00b      	beq.n	8006c7c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	7c12      	ldrb	r2, [r2, #16]
 8006c70:	f107 0108 	add.w	r1, r7, #8
 8006c74:	4610      	mov	r0, r2
 8006c76:	4798      	blx	r3
 8006c78:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c7a:	e091      	b.n	8006da0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006c7c:	6839      	ldr	r1, [r7, #0]
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 faaa 	bl	80071d8 <USBD_CtlError>
        err++;
 8006c84:	7afb      	ldrb	r3, [r7, #11]
 8006c86:	3301      	adds	r3, #1
 8006c88:	72fb      	strb	r3, [r7, #11]
      break;
 8006c8a:	e089      	b.n	8006da0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d00b      	beq.n	8006cb0 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	7c12      	ldrb	r2, [r2, #16]
 8006ca4:	f107 0108 	add.w	r1, r7, #8
 8006ca8:	4610      	mov	r0, r2
 8006caa:	4798      	blx	r3
 8006cac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006cae:	e077      	b.n	8006da0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006cb0:	6839      	ldr	r1, [r7, #0]
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 fa90 	bl	80071d8 <USBD_CtlError>
        err++;
 8006cb8:	7afb      	ldrb	r3, [r7, #11]
 8006cba:	3301      	adds	r3, #1
 8006cbc:	72fb      	strb	r3, [r7, #11]
      break;
 8006cbe:	e06f      	b.n	8006da0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00b      	beq.n	8006ce4 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	7c12      	ldrb	r2, [r2, #16]
 8006cd8:	f107 0108 	add.w	r1, r7, #8
 8006cdc:	4610      	mov	r0, r2
 8006cde:	4798      	blx	r3
 8006ce0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ce2:	e05d      	b.n	8006da0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006ce4:	6839      	ldr	r1, [r7, #0]
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 fa76 	bl	80071d8 <USBD_CtlError>
        err++;
 8006cec:	7afb      	ldrb	r3, [r7, #11]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	72fb      	strb	r3, [r7, #11]
      break;
 8006cf2:	e055      	b.n	8006da0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d00b      	beq.n	8006d18 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d06:	691b      	ldr	r3, [r3, #16]
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	7c12      	ldrb	r2, [r2, #16]
 8006d0c:	f107 0108 	add.w	r1, r7, #8
 8006d10:	4610      	mov	r0, r2
 8006d12:	4798      	blx	r3
 8006d14:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d16:	e043      	b.n	8006da0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006d18:	6839      	ldr	r1, [r7, #0]
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 fa5c 	bl	80071d8 <USBD_CtlError>
        err++;
 8006d20:	7afb      	ldrb	r3, [r7, #11]
 8006d22:	3301      	adds	r3, #1
 8006d24:	72fb      	strb	r3, [r7, #11]
      break;
 8006d26:	e03b      	b.n	8006da0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d2e:	695b      	ldr	r3, [r3, #20]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d00b      	beq.n	8006d4c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d3a:	695b      	ldr	r3, [r3, #20]
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	7c12      	ldrb	r2, [r2, #16]
 8006d40:	f107 0108 	add.w	r1, r7, #8
 8006d44:	4610      	mov	r0, r2
 8006d46:	4798      	blx	r3
 8006d48:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d4a:	e029      	b.n	8006da0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006d4c:	6839      	ldr	r1, [r7, #0]
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 fa42 	bl	80071d8 <USBD_CtlError>
        err++;
 8006d54:	7afb      	ldrb	r3, [r7, #11]
 8006d56:	3301      	adds	r3, #1
 8006d58:	72fb      	strb	r3, [r7, #11]
      break;
 8006d5a:	e021      	b.n	8006da0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d62:	699b      	ldr	r3, [r3, #24]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d00b      	beq.n	8006d80 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d6e:	699b      	ldr	r3, [r3, #24]
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	7c12      	ldrb	r2, [r2, #16]
 8006d74:	f107 0108 	add.w	r1, r7, #8
 8006d78:	4610      	mov	r0, r2
 8006d7a:	4798      	blx	r3
 8006d7c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d7e:	e00f      	b.n	8006da0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006d80:	6839      	ldr	r1, [r7, #0]
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 fa28 	bl	80071d8 <USBD_CtlError>
        err++;
 8006d88:	7afb      	ldrb	r3, [r7, #11]
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	72fb      	strb	r3, [r7, #11]
      break;
 8006d8e:	e007      	b.n	8006da0 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8006d90:	6839      	ldr	r1, [r7, #0]
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 fa20 	bl	80071d8 <USBD_CtlError>
      err++;
 8006d98:	7afb      	ldrb	r3, [r7, #11]
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8006d9e:	bf00      	nop
    }
    break;
 8006da0:	e037      	b.n	8006e12 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	7c1b      	ldrb	r3, [r3, #16]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d109      	bne.n	8006dbe <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006db2:	f107 0208 	add.w	r2, r7, #8
 8006db6:	4610      	mov	r0, r2
 8006db8:	4798      	blx	r3
 8006dba:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006dbc:	e029      	b.n	8006e12 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006dbe:	6839      	ldr	r1, [r7, #0]
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 fa09 	bl	80071d8 <USBD_CtlError>
      err++;
 8006dc6:	7afb      	ldrb	r3, [r7, #11]
 8006dc8:	3301      	adds	r3, #1
 8006dca:	72fb      	strb	r3, [r7, #11]
    break;
 8006dcc:	e021      	b.n	8006e12 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	7c1b      	ldrb	r3, [r3, #16]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d10d      	bne.n	8006df2 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dde:	f107 0208 	add.w	r2, r7, #8
 8006de2:	4610      	mov	r0, r2
 8006de4:	4798      	blx	r3
 8006de6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	3301      	adds	r3, #1
 8006dec:	2207      	movs	r2, #7
 8006dee:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006df0:	e00f      	b.n	8006e12 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006df2:	6839      	ldr	r1, [r7, #0]
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 f9ef 	bl	80071d8 <USBD_CtlError>
      err++;
 8006dfa:	7afb      	ldrb	r3, [r7, #11]
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	72fb      	strb	r3, [r7, #11]
    break;
 8006e00:	e007      	b.n	8006e12 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8006e02:	6839      	ldr	r1, [r7, #0]
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 f9e7 	bl	80071d8 <USBD_CtlError>
    err++;
 8006e0a:	7afb      	ldrb	r3, [r7, #11]
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	72fb      	strb	r3, [r7, #11]
    break;
 8006e10:	bf00      	nop
  }

  if (err != 0U)
 8006e12:	7afb      	ldrb	r3, [r7, #11]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d11e      	bne.n	8006e56 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	88db      	ldrh	r3, [r3, #6]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d016      	beq.n	8006e4e <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8006e20:	893b      	ldrh	r3, [r7, #8]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00e      	beq.n	8006e44 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	88da      	ldrh	r2, [r3, #6]
 8006e2a:	893b      	ldrh	r3, [r7, #8]
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	bf28      	it	cs
 8006e30:	4613      	movcs	r3, r2
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8006e36:	893b      	ldrh	r3, [r7, #8]
 8006e38:	461a      	mov	r2, r3
 8006e3a:	68f9      	ldr	r1, [r7, #12]
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 fa3c 	bl	80072ba <USBD_CtlSendData>
 8006e42:	e009      	b.n	8006e58 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8006e44:	6839      	ldr	r1, [r7, #0]
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 f9c6 	bl	80071d8 <USBD_CtlError>
 8006e4c:	e004      	b.n	8006e58 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 fa8d 	bl	800736e <USBD_CtlSendStatus>
 8006e54:	e000      	b.n	8006e58 <USBD_GetDescriptor+0x2cc>
    return;
 8006e56:	bf00      	nop
    }
  }
}
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop

08006e60 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	889b      	ldrh	r3, [r3, #4]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d130      	bne.n	8006ed4 <USBD_SetAddress+0x74>
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	88db      	ldrh	r3, [r3, #6]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d12c      	bne.n	8006ed4 <USBD_SetAddress+0x74>
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	885b      	ldrh	r3, [r3, #2]
 8006e7e:	2b7f      	cmp	r3, #127	; 0x7f
 8006e80:	d828      	bhi.n	8006ed4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	885b      	ldrh	r3, [r3, #2]
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e8c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e94:	2b03      	cmp	r3, #3
 8006e96:	d104      	bne.n	8006ea2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006e98:	6839      	ldr	r1, [r7, #0]
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 f99c 	bl	80071d8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ea0:	e01c      	b.n	8006edc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	7bfa      	ldrb	r2, [r7, #15]
 8006ea6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006eaa:	7bfb      	ldrb	r3, [r7, #15]
 8006eac:	4619      	mov	r1, r3
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 ff66 	bl	8007d80 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 fa5a 	bl	800736e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006eba:	7bfb      	ldrb	r3, [r7, #15]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d004      	beq.n	8006eca <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2202      	movs	r2, #2
 8006ec4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ec8:	e008      	b.n	8006edc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ed2:	e003      	b.n	8006edc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006ed4:	6839      	ldr	r1, [r7, #0]
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 f97e 	bl	80071d8 <USBD_CtlError>
  }
}
 8006edc:	bf00      	nop
 8006ede:	3710      	adds	r7, #16
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	885b      	ldrh	r3, [r3, #2]
 8006ef6:	b2da      	uxtb	r2, r3
 8006ef8:	4b4b      	ldr	r3, [pc, #300]	; (8007028 <USBD_SetConfig+0x144>)
 8006efa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006efc:	4b4a      	ldr	r3, [pc, #296]	; (8007028 <USBD_SetConfig+0x144>)
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d905      	bls.n	8006f10 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006f04:	6839      	ldr	r1, [r7, #0]
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f966 	bl	80071d8 <USBD_CtlError>
    return USBD_FAIL;
 8006f0c:	2303      	movs	r3, #3
 8006f0e:	e087      	b.n	8007020 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f16:	2b02      	cmp	r3, #2
 8006f18:	d002      	beq.n	8006f20 <USBD_SetConfig+0x3c>
 8006f1a:	2b03      	cmp	r3, #3
 8006f1c:	d025      	beq.n	8006f6a <USBD_SetConfig+0x86>
 8006f1e:	e071      	b.n	8007004 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8006f20:	4b41      	ldr	r3, [pc, #260]	; (8007028 <USBD_SetConfig+0x144>)
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d01c      	beq.n	8006f62 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8006f28:	4b3f      	ldr	r3, [pc, #252]	; (8007028 <USBD_SetConfig+0x144>)
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006f32:	4b3d      	ldr	r3, [pc, #244]	; (8007028 <USBD_SetConfig+0x144>)
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	4619      	mov	r1, r3
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f7ff f9a7 	bl	800628c <USBD_SetClassConfig>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8006f42:	7bfb      	ldrb	r3, [r7, #15]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d004      	beq.n	8006f52 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8006f48:	6839      	ldr	r1, [r7, #0]
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 f944 	bl	80071d8 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006f50:	e065      	b.n	800701e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 fa0b 	bl	800736e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2203      	movs	r2, #3
 8006f5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006f60:	e05d      	b.n	800701e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 fa03 	bl	800736e <USBD_CtlSendStatus>
    break;
 8006f68:	e059      	b.n	800701e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8006f6a:	4b2f      	ldr	r3, [pc, #188]	; (8007028 <USBD_SetConfig+0x144>)
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d112      	bne.n	8006f98 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2202      	movs	r2, #2
 8006f76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8006f7a:	4b2b      	ldr	r3, [pc, #172]	; (8007028 <USBD_SetConfig+0x144>)
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	461a      	mov	r2, r3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006f84:	4b28      	ldr	r3, [pc, #160]	; (8007028 <USBD_SetConfig+0x144>)
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	4619      	mov	r1, r3
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f7ff f99a 	bl	80062c4 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 f9ec 	bl	800736e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006f96:	e042      	b.n	800701e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8006f98:	4b23      	ldr	r3, [pc, #140]	; (8007028 <USBD_SetConfig+0x144>)
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d02a      	beq.n	8006ffc <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	4619      	mov	r1, r3
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f7ff f988 	bl	80062c4 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8006fb4:	4b1c      	ldr	r3, [pc, #112]	; (8007028 <USBD_SetConfig+0x144>)
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	461a      	mov	r2, r3
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006fbe:	4b1a      	ldr	r3, [pc, #104]	; (8007028 <USBD_SetConfig+0x144>)
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f7ff f961 	bl	800628c <USBD_SetClassConfig>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8006fce:	7bfb      	ldrb	r3, [r7, #15]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d00f      	beq.n	8006ff4 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8006fd4:	6839      	ldr	r1, [r7, #0]
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 f8fe 	bl	80071d8 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f7ff f96d 	bl	80062c4 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2202      	movs	r2, #2
 8006fee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006ff2:	e014      	b.n	800701e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 f9ba 	bl	800736e <USBD_CtlSendStatus>
    break;
 8006ffa:	e010      	b.n	800701e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 f9b6 	bl	800736e <USBD_CtlSendStatus>
    break;
 8007002:	e00c      	b.n	800701e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8007004:	6839      	ldr	r1, [r7, #0]
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 f8e6 	bl	80071d8 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800700c:	4b06      	ldr	r3, [pc, #24]	; (8007028 <USBD_SetConfig+0x144>)
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	4619      	mov	r1, r3
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f7ff f956 	bl	80062c4 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8007018:	2303      	movs	r3, #3
 800701a:	73fb      	strb	r3, [r7, #15]
    break;
 800701c:	bf00      	nop
  }

  return ret;
 800701e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007020:	4618      	mov	r0, r3
 8007022:	3710      	adds	r7, #16
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}
 8007028:	2000020c 	.word	0x2000020c

0800702c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	88db      	ldrh	r3, [r3, #6]
 800703a:	2b01      	cmp	r3, #1
 800703c:	d004      	beq.n	8007048 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800703e:	6839      	ldr	r1, [r7, #0]
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 f8c9 	bl	80071d8 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8007046:	e021      	b.n	800708c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800704e:	2b01      	cmp	r3, #1
 8007050:	db17      	blt.n	8007082 <USBD_GetConfig+0x56>
 8007052:	2b02      	cmp	r3, #2
 8007054:	dd02      	ble.n	800705c <USBD_GetConfig+0x30>
 8007056:	2b03      	cmp	r3, #3
 8007058:	d00b      	beq.n	8007072 <USBD_GetConfig+0x46>
 800705a:	e012      	b.n	8007082 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	3308      	adds	r3, #8
 8007066:	2201      	movs	r2, #1
 8007068:	4619      	mov	r1, r3
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 f925 	bl	80072ba <USBD_CtlSendData>
      break;
 8007070:	e00c      	b.n	800708c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	3304      	adds	r3, #4
 8007076:	2201      	movs	r2, #1
 8007078:	4619      	mov	r1, r3
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 f91d 	bl	80072ba <USBD_CtlSendData>
      break;
 8007080:	e004      	b.n	800708c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8007082:	6839      	ldr	r1, [r7, #0]
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 f8a7 	bl	80071d8 <USBD_CtlError>
      break;
 800708a:	bf00      	nop
}
 800708c:	bf00      	nop
 800708e:	3708      	adds	r7, #8
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070a4:	3b01      	subs	r3, #1
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	d81e      	bhi.n	80070e8 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	88db      	ldrh	r3, [r3, #6]
 80070ae:	2b02      	cmp	r3, #2
 80070b0:	d004      	beq.n	80070bc <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80070b2:	6839      	ldr	r1, [r7, #0]
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 f88f 	bl	80071d8 <USBD_CtlError>
      break;
 80070ba:	e01a      	b.n	80070f2 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d005      	beq.n	80070d8 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	f043 0202 	orr.w	r2, r3, #2
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	330c      	adds	r3, #12
 80070dc:	2202      	movs	r2, #2
 80070de:	4619      	mov	r1, r3
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 f8ea 	bl	80072ba <USBD_CtlSendData>
    break;
 80070e6:	e004      	b.n	80070f2 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80070e8:	6839      	ldr	r1, [r7, #0]
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 f874 	bl	80071d8 <USBD_CtlError>
    break;
 80070f0:	bf00      	nop
  }
}
 80070f2:	bf00      	nop
 80070f4:	3708      	adds	r7, #8
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}

080070fa <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b082      	sub	sp, #8
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
 8007102:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	885b      	ldrh	r3, [r3, #2]
 8007108:	2b01      	cmp	r3, #1
 800710a:	d106      	bne.n	800711a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 f92a 	bl	800736e <USBD_CtlSendStatus>
  }
}
 800711a:	bf00      	nop
 800711c:	3708      	adds	r7, #8
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b082      	sub	sp, #8
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
 800712a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007132:	3b01      	subs	r3, #1
 8007134:	2b02      	cmp	r3, #2
 8007136:	d80b      	bhi.n	8007150 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	885b      	ldrh	r3, [r3, #2]
 800713c:	2b01      	cmp	r3, #1
 800713e:	d10c      	bne.n	800715a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 f910 	bl	800736e <USBD_CtlSendStatus>
      }
      break;
 800714e:	e004      	b.n	800715a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007150:	6839      	ldr	r1, [r7, #0]
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 f840 	bl	80071d8 <USBD_CtlError>
      break;
 8007158:	e000      	b.n	800715c <USBD_ClrFeature+0x3a>
      break;
 800715a:	bf00      	nop
  }
}
 800715c:	bf00      	nop
 800715e:	3708      	adds	r7, #8
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	781a      	ldrb	r2, [r3, #0]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	3301      	adds	r3, #1
 800717e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	781a      	ldrb	r2, [r3, #0]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	3301      	adds	r3, #1
 800718c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800718e:	68f8      	ldr	r0, [r7, #12]
 8007190:	f7ff fad3 	bl	800673a <SWAPBYTE>
 8007194:	4603      	mov	r3, r0
 8007196:	461a      	mov	r2, r3
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	3301      	adds	r3, #1
 80071a0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	3301      	adds	r3, #1
 80071a6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80071a8:	68f8      	ldr	r0, [r7, #12]
 80071aa:	f7ff fac6 	bl	800673a <SWAPBYTE>
 80071ae:	4603      	mov	r3, r0
 80071b0:	461a      	mov	r2, r3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	3301      	adds	r3, #1
 80071ba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	3301      	adds	r3, #1
 80071c0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80071c2:	68f8      	ldr	r0, [r7, #12]
 80071c4:	f7ff fab9 	bl	800673a <SWAPBYTE>
 80071c8:	4603      	mov	r3, r0
 80071ca:	461a      	mov	r2, r3
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	80da      	strh	r2, [r3, #6]
}
 80071d0:	bf00      	nop
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80071e2:	2180      	movs	r1, #128	; 0x80
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 fd61 	bl	8007cac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80071ea:	2100      	movs	r1, #0
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 fd5d 	bl	8007cac <USBD_LL_StallEP>
}
 80071f2:	bf00      	nop
 80071f4:	3708      	adds	r7, #8
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}

080071fa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80071fa:	b580      	push	{r7, lr}
 80071fc:	b086      	sub	sp, #24
 80071fe:	af00      	add	r7, sp, #0
 8007200:	60f8      	str	r0, [r7, #12]
 8007202:	60b9      	str	r1, [r7, #8]
 8007204:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007206:	2300      	movs	r3, #0
 8007208:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d036      	beq.n	800727e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007214:	6938      	ldr	r0, [r7, #16]
 8007216:	f000 f836 	bl	8007286 <USBD_GetLen>
 800721a:	4603      	mov	r3, r0
 800721c:	3301      	adds	r3, #1
 800721e:	b29b      	uxth	r3, r3
 8007220:	005b      	lsls	r3, r3, #1
 8007222:	b29a      	uxth	r2, r3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007228:	7dfb      	ldrb	r3, [r7, #23]
 800722a:	68ba      	ldr	r2, [r7, #8]
 800722c:	4413      	add	r3, r2
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	7812      	ldrb	r2, [r2, #0]
 8007232:	701a      	strb	r2, [r3, #0]
  idx++;
 8007234:	7dfb      	ldrb	r3, [r7, #23]
 8007236:	3301      	adds	r3, #1
 8007238:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800723a:	7dfb      	ldrb	r3, [r7, #23]
 800723c:	68ba      	ldr	r2, [r7, #8]
 800723e:	4413      	add	r3, r2
 8007240:	2203      	movs	r2, #3
 8007242:	701a      	strb	r2, [r3, #0]
  idx++;
 8007244:	7dfb      	ldrb	r3, [r7, #23]
 8007246:	3301      	adds	r3, #1
 8007248:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800724a:	e013      	b.n	8007274 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800724c:	7dfb      	ldrb	r3, [r7, #23]
 800724e:	68ba      	ldr	r2, [r7, #8]
 8007250:	4413      	add	r3, r2
 8007252:	693a      	ldr	r2, [r7, #16]
 8007254:	7812      	ldrb	r2, [r2, #0]
 8007256:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	3301      	adds	r3, #1
 800725c:	613b      	str	r3, [r7, #16]
    idx++;
 800725e:	7dfb      	ldrb	r3, [r7, #23]
 8007260:	3301      	adds	r3, #1
 8007262:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007264:	7dfb      	ldrb	r3, [r7, #23]
 8007266:	68ba      	ldr	r2, [r7, #8]
 8007268:	4413      	add	r3, r2
 800726a:	2200      	movs	r2, #0
 800726c:	701a      	strb	r2, [r3, #0]
    idx++;
 800726e:	7dfb      	ldrb	r3, [r7, #23]
 8007270:	3301      	adds	r3, #1
 8007272:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d1e7      	bne.n	800724c <USBD_GetString+0x52>
 800727c:	e000      	b.n	8007280 <USBD_GetString+0x86>
    return;
 800727e:	bf00      	nop
  }
}
 8007280:	3718      	adds	r7, #24
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}

08007286 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007286:	b480      	push	{r7}
 8007288:	b085      	sub	sp, #20
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800728e:	2300      	movs	r3, #0
 8007290:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007296:	e005      	b.n	80072a4 <USBD_GetLen+0x1e>
  {
    len++;
 8007298:	7bfb      	ldrb	r3, [r7, #15]
 800729a:	3301      	adds	r3, #1
 800729c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	3301      	adds	r3, #1
 80072a2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d1f5      	bne.n	8007298 <USBD_GetLen+0x12>
  }

  return len;
 80072ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3714      	adds	r7, #20
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr

080072ba <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80072ba:	b580      	push	{r7, lr}
 80072bc:	b084      	sub	sp, #16
 80072be:	af00      	add	r7, sp, #0
 80072c0:	60f8      	str	r0, [r7, #12]
 80072c2:	60b9      	str	r1, [r7, #8]
 80072c4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2202      	movs	r2, #2
 80072ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	68ba      	ldr	r2, [r7, #8]
 80072de:	2100      	movs	r1, #0
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	f000 fd6c 	bl	8007dbe <USBD_LL_Transmit>

  return USBD_OK;
 80072e6:	2300      	movs	r3, #0
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3710      	adds	r7, #16
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	68ba      	ldr	r2, [r7, #8]
 8007300:	2100      	movs	r1, #0
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	f000 fd5b 	bl	8007dbe <USBD_LL_Transmit>

  return USBD_OK;
 8007308:	2300      	movs	r3, #0
}
 800730a:	4618      	mov	r0, r3
 800730c:	3710      	adds	r7, #16
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}

08007312 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007312:	b580      	push	{r7, lr}
 8007314:	b084      	sub	sp, #16
 8007316:	af00      	add	r7, sp, #0
 8007318:	60f8      	str	r0, [r7, #12]
 800731a:	60b9      	str	r1, [r7, #8]
 800731c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2203      	movs	r2, #3
 8007322:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	68ba      	ldr	r2, [r7, #8]
 800733a:	2100      	movs	r1, #0
 800733c:	68f8      	ldr	r0, [r7, #12]
 800733e:	f000 fd5f 	bl	8007e00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007342:	2300      	movs	r3, #0
}
 8007344:	4618      	mov	r0, r3
 8007346:	3710      	adds	r7, #16
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	60b9      	str	r1, [r7, #8]
 8007356:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	68ba      	ldr	r2, [r7, #8]
 800735c:	2100      	movs	r1, #0
 800735e:	68f8      	ldr	r0, [r7, #12]
 8007360:	f000 fd4e 	bl	8007e00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b082      	sub	sp, #8
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2204      	movs	r2, #4
 800737a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800737e:	2300      	movs	r3, #0
 8007380:	2200      	movs	r2, #0
 8007382:	2100      	movs	r1, #0
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 fd1a 	bl	8007dbe <USBD_LL_Transmit>

  return USBD_OK;
 800738a:	2300      	movs	r3, #0
}
 800738c:	4618      	mov	r0, r3
 800738e:	3708      	adds	r7, #8
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b082      	sub	sp, #8
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2205      	movs	r2, #5
 80073a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073a4:	2300      	movs	r3, #0
 80073a6:	2200      	movs	r2, #0
 80073a8:	2100      	movs	r1, #0
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 fd28 	bl	8007e00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80073b0:	2300      	movs	r3, #0
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3708      	adds	r7, #8
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
	...

080073bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80073c0:	2200      	movs	r2, #0
 80073c2:	4912      	ldr	r1, [pc, #72]	; (800740c <MX_USB_DEVICE_Init+0x50>)
 80073c4:	4812      	ldr	r0, [pc, #72]	; (8007410 <MX_USB_DEVICE_Init+0x54>)
 80073c6:	f7fe fef3 	bl	80061b0 <USBD_Init>
 80073ca:	4603      	mov	r3, r0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d001      	beq.n	80073d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80073d0:	f7f9 fa74 	bl	80008bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80073d4:	490f      	ldr	r1, [pc, #60]	; (8007414 <MX_USB_DEVICE_Init+0x58>)
 80073d6:	480e      	ldr	r0, [pc, #56]	; (8007410 <MX_USB_DEVICE_Init+0x54>)
 80073d8:	f7fe ff20 	bl	800621c <USBD_RegisterClass>
 80073dc:	4603      	mov	r3, r0
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d001      	beq.n	80073e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80073e2:	f7f9 fa6b 	bl	80008bc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80073e6:	490c      	ldr	r1, [pc, #48]	; (8007418 <MX_USB_DEVICE_Init+0x5c>)
 80073e8:	4809      	ldr	r0, [pc, #36]	; (8007410 <MX_USB_DEVICE_Init+0x54>)
 80073ea:	f7fe fe45 	bl	8006078 <USBD_CDC_RegisterInterface>
 80073ee:	4603      	mov	r3, r0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d001      	beq.n	80073f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80073f4:	f7f9 fa62 	bl	80008bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80073f8:	4805      	ldr	r0, [pc, #20]	; (8007410 <MX_USB_DEVICE_Init+0x54>)
 80073fa:	f7fe ff30 	bl	800625e <USBD_Start>
 80073fe:	4603      	mov	r3, r0
 8007400:	2b00      	cmp	r3, #0
 8007402:	d001      	beq.n	8007408 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007404:	f7f9 fa5a 	bl	80008bc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007408:	bf00      	nop
 800740a:	bd80      	pop	{r7, pc}
 800740c:	20000138 	.word	0x20000138
 8007410:	200004c8 	.word	0x200004c8
 8007414:	20000018 	.word	0x20000018
 8007418:	20000124 	.word	0x20000124

0800741c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007420:	2200      	movs	r2, #0
 8007422:	4905      	ldr	r1, [pc, #20]	; (8007438 <CDC_Init_FS+0x1c>)
 8007424:	4805      	ldr	r0, [pc, #20]	; (800743c <CDC_Init_FS+0x20>)
 8007426:	f7fe fe3c 	bl	80060a2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800742a:	4905      	ldr	r1, [pc, #20]	; (8007440 <CDC_Init_FS+0x24>)
 800742c:	4803      	ldr	r0, [pc, #12]	; (800743c <CDC_Init_FS+0x20>)
 800742e:	f7fe fe51 	bl	80060d4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007432:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007434:	4618      	mov	r0, r3
 8007436:	bd80      	pop	{r7, pc}
 8007438:	20000f98 	.word	0x20000f98
 800743c:	200004c8 	.word	0x200004c8
 8007440:	20000798 	.word	0x20000798

08007444 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007444:	b480      	push	{r7}
 8007446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007448:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800744a:	4618      	mov	r0, r3
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr

08007454 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
 800745a:	4603      	mov	r3, r0
 800745c:	6039      	str	r1, [r7, #0]
 800745e:	71fb      	strb	r3, [r7, #7]
 8007460:	4613      	mov	r3, r2
 8007462:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007464:	79fb      	ldrb	r3, [r7, #7]
 8007466:	2b23      	cmp	r3, #35	; 0x23
 8007468:	f200 8098 	bhi.w	800759c <CDC_Control_FS+0x148>
 800746c:	a201      	add	r2, pc, #4	; (adr r2, 8007474 <CDC_Control_FS+0x20>)
 800746e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007472:	bf00      	nop
 8007474:	0800759d 	.word	0x0800759d
 8007478:	0800759d 	.word	0x0800759d
 800747c:	0800759d 	.word	0x0800759d
 8007480:	0800759d 	.word	0x0800759d
 8007484:	0800759d 	.word	0x0800759d
 8007488:	0800759d 	.word	0x0800759d
 800748c:	0800759d 	.word	0x0800759d
 8007490:	0800759d 	.word	0x0800759d
 8007494:	0800759d 	.word	0x0800759d
 8007498:	0800759d 	.word	0x0800759d
 800749c:	0800759d 	.word	0x0800759d
 80074a0:	0800759d 	.word	0x0800759d
 80074a4:	0800759d 	.word	0x0800759d
 80074a8:	0800759d 	.word	0x0800759d
 80074ac:	0800759d 	.word	0x0800759d
 80074b0:	0800759d 	.word	0x0800759d
 80074b4:	0800759d 	.word	0x0800759d
 80074b8:	0800759d 	.word	0x0800759d
 80074bc:	0800759d 	.word	0x0800759d
 80074c0:	0800759d 	.word	0x0800759d
 80074c4:	0800759d 	.word	0x0800759d
 80074c8:	0800759d 	.word	0x0800759d
 80074cc:	0800759d 	.word	0x0800759d
 80074d0:	0800759d 	.word	0x0800759d
 80074d4:	0800759d 	.word	0x0800759d
 80074d8:	0800759d 	.word	0x0800759d
 80074dc:	0800759d 	.word	0x0800759d
 80074e0:	0800759d 	.word	0x0800759d
 80074e4:	0800759d 	.word	0x0800759d
 80074e8:	0800759d 	.word	0x0800759d
 80074ec:	0800759d 	.word	0x0800759d
 80074f0:	0800759d 	.word	0x0800759d
 80074f4:	08007505 	.word	0x08007505
 80074f8:	08007549 	.word	0x08007549
 80074fc:	0800759d 	.word	0x0800759d
 8007500:	0800759d 	.word	0x0800759d
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
       linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	461a      	mov	r2, r3
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	3301      	adds	r3, #1
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	021b      	lsls	r3, r3, #8
 8007512:	431a      	orrs	r2, r3
                               (pbuf[2] << 16) | (pbuf[3] << 24));
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	3302      	adds	r3, #2
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	041b      	lsls	r3, r3, #16
       linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 800751c:	431a      	orrs	r2, r3
                               (pbuf[2] << 16) | (pbuf[3] << 24));
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	3303      	adds	r3, #3
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	061b      	lsls	r3, r3, #24
 8007526:	4313      	orrs	r3, r2
       linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8007528:	461a      	mov	r2, r3
 800752a:	4b20      	ldr	r3, [pc, #128]	; (80075ac <CDC_Control_FS+0x158>)
 800752c:	601a      	str	r2, [r3, #0]
       linecoding.format     = pbuf[4];
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	791a      	ldrb	r2, [r3, #4]
 8007532:	4b1e      	ldr	r3, [pc, #120]	; (80075ac <CDC_Control_FS+0x158>)
 8007534:	711a      	strb	r2, [r3, #4]
       linecoding.paritytype = pbuf[5];
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	795a      	ldrb	r2, [r3, #5]
 800753a:	4b1c      	ldr	r3, [pc, #112]	; (80075ac <CDC_Control_FS+0x158>)
 800753c:	715a      	strb	r2, [r3, #5]
       linecoding.datatype   = pbuf[6];
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	799a      	ldrb	r2, [r3, #6]
 8007542:	4b1a      	ldr	r3, [pc, #104]	; (80075ac <CDC_Control_FS+0x158>)
 8007544:	719a      	strb	r2, [r3, #6]

       /* Add your code here */
       break;
 8007546:	e02a      	b.n	800759e <CDC_Control_FS+0x14a>

     case CDC_GET_LINE_CODING:
       pbuf[0] = (uint8_t)(linecoding.bitrate);
 8007548:	4b18      	ldr	r3, [pc, #96]	; (80075ac <CDC_Control_FS+0x158>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	b2da      	uxtb	r2, r3
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	701a      	strb	r2, [r3, #0]
       pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 8007552:	4b16      	ldr	r3, [pc, #88]	; (80075ac <CDC_Control_FS+0x158>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	0a1a      	lsrs	r2, r3, #8
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	3301      	adds	r3, #1
 800755c:	b2d2      	uxtb	r2, r2
 800755e:	701a      	strb	r2, [r3, #0]
       pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 8007560:	4b12      	ldr	r3, [pc, #72]	; (80075ac <CDC_Control_FS+0x158>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	0c1a      	lsrs	r2, r3, #16
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	3302      	adds	r3, #2
 800756a:	b2d2      	uxtb	r2, r2
 800756c:	701a      	strb	r2, [r3, #0]
       pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 800756e:	4b0f      	ldr	r3, [pc, #60]	; (80075ac <CDC_Control_FS+0x158>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	0e1a      	lsrs	r2, r3, #24
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	3303      	adds	r3, #3
 8007578:	b2d2      	uxtb	r2, r2
 800757a:	701a      	strb	r2, [r3, #0]
       pbuf[4] = linecoding.format;
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	3304      	adds	r3, #4
 8007580:	4a0a      	ldr	r2, [pc, #40]	; (80075ac <CDC_Control_FS+0x158>)
 8007582:	7912      	ldrb	r2, [r2, #4]
 8007584:	701a      	strb	r2, [r3, #0]
       pbuf[5] = linecoding.paritytype;
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	3305      	adds	r3, #5
 800758a:	4a08      	ldr	r2, [pc, #32]	; (80075ac <CDC_Control_FS+0x158>)
 800758c:	7952      	ldrb	r2, [r2, #5]
 800758e:	701a      	strb	r2, [r3, #0]
       pbuf[6] = linecoding.datatype;
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	3306      	adds	r3, #6
 8007594:	4a05      	ldr	r2, [pc, #20]	; (80075ac <CDC_Control_FS+0x158>)
 8007596:	7992      	ldrb	r2, [r2, #6]
 8007598:	701a      	strb	r2, [r3, #0]

       /* Add your code here */
       break;
 800759a:	e000      	b.n	800759e <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800759c:	bf00      	nop
  }

  return (USBD_OK);
 800759e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	370c      	adds	r7, #12
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr
 80075ac:	2000011c 	.word	0x2000011c

080075b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80075ba:	6879      	ldr	r1, [r7, #4]
 80075bc:	4805      	ldr	r0, [pc, #20]	; (80075d4 <CDC_Receive_FS+0x24>)
 80075be:	f7fe fd89 	bl	80060d4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80075c2:	4804      	ldr	r0, [pc, #16]	; (80075d4 <CDC_Receive_FS+0x24>)
 80075c4:	f7fe fdca 	bl	800615c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80075c8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3708      	adds	r7, #8
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	200004c8 	.word	0x200004c8

080075d8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	460b      	mov	r3, r1
 80075e2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80075e4:	2300      	movs	r3, #0
 80075e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80075e8:	4b0d      	ldr	r3, [pc, #52]	; (8007620 <CDC_Transmit_FS+0x48>)
 80075ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075ee:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d001      	beq.n	80075fe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80075fa:	2301      	movs	r3, #1
 80075fc:	e00b      	b.n	8007616 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80075fe:	887b      	ldrh	r3, [r7, #2]
 8007600:	461a      	mov	r2, r3
 8007602:	6879      	ldr	r1, [r7, #4]
 8007604:	4806      	ldr	r0, [pc, #24]	; (8007620 <CDC_Transmit_FS+0x48>)
 8007606:	f7fe fd4c 	bl	80060a2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800760a:	4805      	ldr	r0, [pc, #20]	; (8007620 <CDC_Transmit_FS+0x48>)
 800760c:	f7fe fd76 	bl	80060fc <USBD_CDC_TransmitPacket>
 8007610:	4603      	mov	r3, r0
 8007612:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007614:	7bfb      	ldrb	r3, [r7, #15]
}
 8007616:	4618      	mov	r0, r3
 8007618:	3710      	adds	r7, #16
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	200004c8 	.word	0x200004c8

08007624 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007624:	b480      	push	{r7}
 8007626:	b087      	sub	sp, #28
 8007628:	af00      	add	r7, sp, #0
 800762a:	60f8      	str	r0, [r7, #12]
 800762c:	60b9      	str	r1, [r7, #8]
 800762e:	4613      	mov	r3, r2
 8007630:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007632:	2300      	movs	r3, #0
 8007634:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007636:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800763a:	4618      	mov	r0, r3
 800763c:	371c      	adds	r7, #28
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr
	...

08007648 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	4603      	mov	r3, r0
 8007650:	6039      	str	r1, [r7, #0]
 8007652:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	2212      	movs	r2, #18
 8007658:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800765a:	4b03      	ldr	r3, [pc, #12]	; (8007668 <USBD_FS_DeviceDescriptor+0x20>)
}
 800765c:	4618      	mov	r0, r3
 800765e:	370c      	adds	r7, #12
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr
 8007668:	20000154 	.word	0x20000154

0800766c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800766c:	b480      	push	{r7}
 800766e:	b083      	sub	sp, #12
 8007670:	af00      	add	r7, sp, #0
 8007672:	4603      	mov	r3, r0
 8007674:	6039      	str	r1, [r7, #0]
 8007676:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	2204      	movs	r2, #4
 800767c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800767e:	4b03      	ldr	r3, [pc, #12]	; (800768c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007680:	4618      	mov	r0, r3
 8007682:	370c      	adds	r7, #12
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr
 800768c:	20000168 	.word	0x20000168

08007690 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
 8007696:	4603      	mov	r3, r0
 8007698:	6039      	str	r1, [r7, #0]
 800769a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800769c:	79fb      	ldrb	r3, [r7, #7]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d105      	bne.n	80076ae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80076a2:	683a      	ldr	r2, [r7, #0]
 80076a4:	4907      	ldr	r1, [pc, #28]	; (80076c4 <USBD_FS_ProductStrDescriptor+0x34>)
 80076a6:	4808      	ldr	r0, [pc, #32]	; (80076c8 <USBD_FS_ProductStrDescriptor+0x38>)
 80076a8:	f7ff fda7 	bl	80071fa <USBD_GetString>
 80076ac:	e004      	b.n	80076b8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80076ae:	683a      	ldr	r2, [r7, #0]
 80076b0:	4904      	ldr	r1, [pc, #16]	; (80076c4 <USBD_FS_ProductStrDescriptor+0x34>)
 80076b2:	4805      	ldr	r0, [pc, #20]	; (80076c8 <USBD_FS_ProductStrDescriptor+0x38>)
 80076b4:	f7ff fda1 	bl	80071fa <USBD_GetString>
  }
  return USBD_StrDesc;
 80076b8:	4b02      	ldr	r3, [pc, #8]	; (80076c4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3708      	adds	r7, #8
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	bf00      	nop
 80076c4:	20001798 	.word	0x20001798
 80076c8:	080080d0 	.word	0x080080d0

080076cc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b082      	sub	sp, #8
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	4603      	mov	r3, r0
 80076d4:	6039      	str	r1, [r7, #0]
 80076d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80076d8:	683a      	ldr	r2, [r7, #0]
 80076da:	4904      	ldr	r1, [pc, #16]	; (80076ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80076dc:	4804      	ldr	r0, [pc, #16]	; (80076f0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80076de:	f7ff fd8c 	bl	80071fa <USBD_GetString>
  return USBD_StrDesc;
 80076e2:	4b02      	ldr	r3, [pc, #8]	; (80076ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3708      	adds	r7, #8
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}
 80076ec:	20001798 	.word	0x20001798
 80076f0:	080080d0 	.word	0x080080d0

080076f4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b082      	sub	sp, #8
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	4603      	mov	r3, r0
 80076fc:	6039      	str	r1, [r7, #0]
 80076fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	221a      	movs	r2, #26
 8007704:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007706:	f000 f843 	bl	8007790 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800770a:	4b02      	ldr	r3, [pc, #8]	; (8007714 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800770c:	4618      	mov	r0, r3
 800770e:	3708      	adds	r7, #8
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}
 8007714:	2000016c 	.word	0x2000016c

08007718 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	4603      	mov	r3, r0
 8007720:	6039      	str	r1, [r7, #0]
 8007722:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007724:	79fb      	ldrb	r3, [r7, #7]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d105      	bne.n	8007736 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800772a:	683a      	ldr	r2, [r7, #0]
 800772c:	4907      	ldr	r1, [pc, #28]	; (800774c <USBD_FS_ConfigStrDescriptor+0x34>)
 800772e:	4808      	ldr	r0, [pc, #32]	; (8007750 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007730:	f7ff fd63 	bl	80071fa <USBD_GetString>
 8007734:	e004      	b.n	8007740 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007736:	683a      	ldr	r2, [r7, #0]
 8007738:	4904      	ldr	r1, [pc, #16]	; (800774c <USBD_FS_ConfigStrDescriptor+0x34>)
 800773a:	4805      	ldr	r0, [pc, #20]	; (8007750 <USBD_FS_ConfigStrDescriptor+0x38>)
 800773c:	f7ff fd5d 	bl	80071fa <USBD_GetString>
  }
  return USBD_StrDesc;
 8007740:	4b02      	ldr	r3, [pc, #8]	; (800774c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007742:	4618      	mov	r0, r3
 8007744:	3708      	adds	r7, #8
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	20001798 	.word	0x20001798
 8007750:	080080dc 	.word	0x080080dc

08007754 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b082      	sub	sp, #8
 8007758:	af00      	add	r7, sp, #0
 800775a:	4603      	mov	r3, r0
 800775c:	6039      	str	r1, [r7, #0]
 800775e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007760:	79fb      	ldrb	r3, [r7, #7]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d105      	bne.n	8007772 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007766:	683a      	ldr	r2, [r7, #0]
 8007768:	4907      	ldr	r1, [pc, #28]	; (8007788 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800776a:	4808      	ldr	r0, [pc, #32]	; (800778c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800776c:	f7ff fd45 	bl	80071fa <USBD_GetString>
 8007770:	e004      	b.n	800777c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007772:	683a      	ldr	r2, [r7, #0]
 8007774:	4904      	ldr	r1, [pc, #16]	; (8007788 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007776:	4805      	ldr	r0, [pc, #20]	; (800778c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007778:	f7ff fd3f 	bl	80071fa <USBD_GetString>
  }
  return USBD_StrDesc;
 800777c:	4b02      	ldr	r3, [pc, #8]	; (8007788 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800777e:	4618      	mov	r0, r3
 8007780:	3708      	adds	r7, #8
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	20001798 	.word	0x20001798
 800778c:	080080e8 	.word	0x080080e8

08007790 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007796:	4b0f      	ldr	r3, [pc, #60]	; (80077d4 <Get_SerialNum+0x44>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800779c:	4b0e      	ldr	r3, [pc, #56]	; (80077d8 <Get_SerialNum+0x48>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80077a2:	4b0e      	ldr	r3, [pc, #56]	; (80077dc <Get_SerialNum+0x4c>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4413      	add	r3, r2
 80077ae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d009      	beq.n	80077ca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80077b6:	2208      	movs	r2, #8
 80077b8:	4909      	ldr	r1, [pc, #36]	; (80077e0 <Get_SerialNum+0x50>)
 80077ba:	68f8      	ldr	r0, [r7, #12]
 80077bc:	f000 f814 	bl	80077e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80077c0:	2204      	movs	r2, #4
 80077c2:	4908      	ldr	r1, [pc, #32]	; (80077e4 <Get_SerialNum+0x54>)
 80077c4:	68b8      	ldr	r0, [r7, #8]
 80077c6:	f000 f80f 	bl	80077e8 <IntToUnicode>
  }
}
 80077ca:	bf00      	nop
 80077cc:	3710      	adds	r7, #16
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	1fff7a10 	.word	0x1fff7a10
 80077d8:	1fff7a14 	.word	0x1fff7a14
 80077dc:	1fff7a18 	.word	0x1fff7a18
 80077e0:	2000016e 	.word	0x2000016e
 80077e4:	2000017e 	.word	0x2000017e

080077e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b087      	sub	sp, #28
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	4613      	mov	r3, r2
 80077f4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80077f6:	2300      	movs	r3, #0
 80077f8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80077fa:	2300      	movs	r3, #0
 80077fc:	75fb      	strb	r3, [r7, #23]
 80077fe:	e027      	b.n	8007850 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	0f1b      	lsrs	r3, r3, #28
 8007804:	2b09      	cmp	r3, #9
 8007806:	d80b      	bhi.n	8007820 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	0f1b      	lsrs	r3, r3, #28
 800780c:	b2da      	uxtb	r2, r3
 800780e:	7dfb      	ldrb	r3, [r7, #23]
 8007810:	005b      	lsls	r3, r3, #1
 8007812:	4619      	mov	r1, r3
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	440b      	add	r3, r1
 8007818:	3230      	adds	r2, #48	; 0x30
 800781a:	b2d2      	uxtb	r2, r2
 800781c:	701a      	strb	r2, [r3, #0]
 800781e:	e00a      	b.n	8007836 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	0f1b      	lsrs	r3, r3, #28
 8007824:	b2da      	uxtb	r2, r3
 8007826:	7dfb      	ldrb	r3, [r7, #23]
 8007828:	005b      	lsls	r3, r3, #1
 800782a:	4619      	mov	r1, r3
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	440b      	add	r3, r1
 8007830:	3237      	adds	r2, #55	; 0x37
 8007832:	b2d2      	uxtb	r2, r2
 8007834:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	011b      	lsls	r3, r3, #4
 800783a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800783c:	7dfb      	ldrb	r3, [r7, #23]
 800783e:	005b      	lsls	r3, r3, #1
 8007840:	3301      	adds	r3, #1
 8007842:	68ba      	ldr	r2, [r7, #8]
 8007844:	4413      	add	r3, r2
 8007846:	2200      	movs	r2, #0
 8007848:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800784a:	7dfb      	ldrb	r3, [r7, #23]
 800784c:	3301      	adds	r3, #1
 800784e:	75fb      	strb	r3, [r7, #23]
 8007850:	7dfa      	ldrb	r2, [r7, #23]
 8007852:	79fb      	ldrb	r3, [r7, #7]
 8007854:	429a      	cmp	r2, r3
 8007856:	d3d3      	bcc.n	8007800 <IntToUnicode+0x18>
  }
}
 8007858:	bf00      	nop
 800785a:	371c      	adds	r7, #28
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b08a      	sub	sp, #40	; 0x28
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800786c:	f107 0314 	add.w	r3, r7, #20
 8007870:	2200      	movs	r2, #0
 8007872:	601a      	str	r2, [r3, #0]
 8007874:	605a      	str	r2, [r3, #4]
 8007876:	609a      	str	r2, [r3, #8]
 8007878:	60da      	str	r2, [r3, #12]
 800787a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007884:	d169      	bne.n	800795a <HAL_PCD_MspInit+0xf6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007886:	2300      	movs	r3, #0
 8007888:	613b      	str	r3, [r7, #16]
 800788a:	4b36      	ldr	r3, [pc, #216]	; (8007964 <HAL_PCD_MspInit+0x100>)
 800788c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800788e:	4a35      	ldr	r2, [pc, #212]	; (8007964 <HAL_PCD_MspInit+0x100>)
 8007890:	f043 0301 	orr.w	r3, r3, #1
 8007894:	6313      	str	r3, [r2, #48]	; 0x30
 8007896:	4b33      	ldr	r3, [pc, #204]	; (8007964 <HAL_PCD_MspInit+0x100>)
 8007898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800789a:	f003 0301 	and.w	r3, r3, #1
 800789e:	613b      	str	r3, [r7, #16]
 80078a0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80078a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80078a8:	2300      	movs	r3, #0
 80078aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078ac:	2300      	movs	r3, #0
 80078ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078b0:	f107 0314 	add.w	r3, r7, #20
 80078b4:	4619      	mov	r1, r3
 80078b6:	482c      	ldr	r0, [pc, #176]	; (8007968 <HAL_PCD_MspInit+0x104>)
 80078b8:	f7fa faec 	bl	8001e94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80078bc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80078c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078c2:	2302      	movs	r3, #2
 80078c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078c6:	2300      	movs	r3, #0
 80078c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078ca:	2303      	movs	r3, #3
 80078cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80078ce:	230a      	movs	r3, #10
 80078d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078d2:	f107 0314 	add.w	r3, r7, #20
 80078d6:	4619      	mov	r1, r3
 80078d8:	4823      	ldr	r0, [pc, #140]	; (8007968 <HAL_PCD_MspInit+0x104>)
 80078da:	f7fa fadb 	bl	8001e94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80078de:	4b21      	ldr	r3, [pc, #132]	; (8007964 <HAL_PCD_MspInit+0x100>)
 80078e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078e2:	4a20      	ldr	r2, [pc, #128]	; (8007964 <HAL_PCD_MspInit+0x100>)
 80078e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078e8:	6353      	str	r3, [r2, #52]	; 0x34
 80078ea:	2300      	movs	r3, #0
 80078ec:	60fb      	str	r3, [r7, #12]
 80078ee:	4b1d      	ldr	r3, [pc, #116]	; (8007964 <HAL_PCD_MspInit+0x100>)
 80078f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078f2:	4a1c      	ldr	r2, [pc, #112]	; (8007964 <HAL_PCD_MspInit+0x100>)
 80078f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80078f8:	6453      	str	r3, [r2, #68]	; 0x44
 80078fa:	4b1a      	ldr	r3, [pc, #104]	; (8007964 <HAL_PCD_MspInit+0x100>)
 80078fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007902:	60fb      	str	r3, [r7, #12]
 8007904:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007906:	2200      	movs	r2, #0
 8007908:	2100      	movs	r1, #0
 800790a:	2043      	movs	r0, #67	; 0x43
 800790c:	f7f9 ff1d 	bl	800174a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007910:	2043      	movs	r0, #67	; 0x43
 8007912:	f7f9 ff36 	bl	8001782 <HAL_NVIC_EnableIRQ>
    if(pcdHandle->Init.low_power_enable == 1)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6a1b      	ldr	r3, [r3, #32]
 800791a:	2b01      	cmp	r3, #1
 800791c:	d11d      	bne.n	800795a <HAL_PCD_MspInit+0xf6>
    {
      /* Enable EXTI Line 18 for USB wakeup */
      __HAL_USB_OTG_FS_WAKEUP_EXTI_CLEAR_FLAG();
 800791e:	4b13      	ldr	r3, [pc, #76]	; (800796c <HAL_PCD_MspInit+0x108>)
 8007920:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007924:	615a      	str	r2, [r3, #20]
      __HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_RISING_EDGE();
 8007926:	4b11      	ldr	r3, [pc, #68]	; (800796c <HAL_PCD_MspInit+0x108>)
 8007928:	68db      	ldr	r3, [r3, #12]
 800792a:	4a10      	ldr	r2, [pc, #64]	; (800796c <HAL_PCD_MspInit+0x108>)
 800792c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007930:	60d3      	str	r3, [r2, #12]
 8007932:	4b0e      	ldr	r3, [pc, #56]	; (800796c <HAL_PCD_MspInit+0x108>)
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	4a0d      	ldr	r2, [pc, #52]	; (800796c <HAL_PCD_MspInit+0x108>)
 8007938:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800793c:	6093      	str	r3, [r2, #8]
      __HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_IT();
 800793e:	4b0b      	ldr	r3, [pc, #44]	; (800796c <HAL_PCD_MspInit+0x108>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a0a      	ldr	r2, [pc, #40]	; (800796c <HAL_PCD_MspInit+0x108>)
 8007944:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007948:	6013      	str	r3, [r2, #0]
      HAL_NVIC_SetPriority(OTG_FS_WKUP_IRQn, 0, 0);
 800794a:	2200      	movs	r2, #0
 800794c:	2100      	movs	r1, #0
 800794e:	202a      	movs	r0, #42	; 0x2a
 8007950:	f7f9 fefb 	bl	800174a <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(OTG_FS_WKUP_IRQn);
 8007954:	202a      	movs	r0, #42	; 0x2a
 8007956:	f7f9 ff14 	bl	8001782 <HAL_NVIC_EnableIRQ>
    }
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800795a:	bf00      	nop
 800795c:	3728      	adds	r7, #40	; 0x28
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	40023800 	.word	0x40023800
 8007968:	40020000 	.word	0x40020000
 800796c:	40013c00 	.word	0x40013c00

08007970 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007984:	4619      	mov	r1, r3
 8007986:	4610      	mov	r0, r2
 8007988:	f7fe fcb4 	bl	80062f4 <USBD_LL_SetupStage>
}
 800798c:	bf00      	nop
 800798e:	3708      	adds	r7, #8
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	460b      	mov	r3, r1
 800799e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80079a6:	78fa      	ldrb	r2, [r7, #3]
 80079a8:	6879      	ldr	r1, [r7, #4]
 80079aa:	4613      	mov	r3, r2
 80079ac:	00db      	lsls	r3, r3, #3
 80079ae:	1a9b      	subs	r3, r3, r2
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	440b      	add	r3, r1
 80079b4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	78fb      	ldrb	r3, [r7, #3]
 80079bc:	4619      	mov	r1, r3
 80079be:	f7fe fcec 	bl	800639a <USBD_LL_DataOutStage>
}
 80079c2:	bf00      	nop
 80079c4:	3708      	adds	r7, #8
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b082      	sub	sp, #8
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
 80079d2:	460b      	mov	r3, r1
 80079d4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80079dc:	78fa      	ldrb	r2, [r7, #3]
 80079de:	6879      	ldr	r1, [r7, #4]
 80079e0:	4613      	mov	r3, r2
 80079e2:	00db      	lsls	r3, r3, #3
 80079e4:	1a9b      	subs	r3, r3, r2
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	440b      	add	r3, r1
 80079ea:	3348      	adds	r3, #72	; 0x48
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	78fb      	ldrb	r3, [r7, #3]
 80079f0:	4619      	mov	r1, r3
 80079f2:	f7fe fd35 	bl	8006460 <USBD_LL_DataInStage>
}
 80079f6:	bf00      	nop
 80079f8:	3708      	adds	r7, #8
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}

080079fe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b082      	sub	sp, #8
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f7fe fe39 	bl	8006684 <USBD_LL_SOF>
}
 8007a12:	bf00      	nop
 8007a14:	3708      	adds	r7, #8
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}

08007a1a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a1a:	b580      	push	{r7, lr}
 8007a1c:	b084      	sub	sp, #16
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007a22:	2301      	movs	r3, #1
 8007a24:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d102      	bne.n	8007a34 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	73fb      	strb	r3, [r7, #15]
 8007a32:	e008      	b.n	8007a46 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	2b02      	cmp	r3, #2
 8007a3a:	d102      	bne.n	8007a42 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	73fb      	strb	r3, [r7, #15]
 8007a40:	e001      	b.n	8007a46 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007a42:	f7f8 ff3b 	bl	80008bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a4c:	7bfa      	ldrb	r2, [r7, #15]
 8007a4e:	4611      	mov	r1, r2
 8007a50:	4618      	mov	r0, r3
 8007a52:	f7fe fddc 	bl	800660e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f7fe fd95 	bl	800658c <USBD_LL_Reset>
}
 8007a62:	bf00      	nop
 8007a64:	3710      	adds	r7, #16
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
	...

08007a6c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7fe fdd7 	bl	800662e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	6812      	ldr	r2, [r2, #0]
 8007a8e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a92:	f043 0301 	orr.w	r3, r3, #1
 8007a96:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6a1b      	ldr	r3, [r3, #32]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d005      	beq.n	8007aac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007aa0:	4b04      	ldr	r3, [pc, #16]	; (8007ab4 <HAL_PCD_SuspendCallback+0x48>)
 8007aa2:	691b      	ldr	r3, [r3, #16]
 8007aa4:	4a03      	ldr	r2, [pc, #12]	; (8007ab4 <HAL_PCD_SuspendCallback+0x48>)
 8007aa6:	f043 0306 	orr.w	r3, r3, #6
 8007aaa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007aac:	bf00      	nop
 8007aae:	3708      	adds	r7, #8
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}
 8007ab4:	e000ed00 	.word	0xe000ed00

08007ab8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f7fe fdc6 	bl	8006658 <USBD_LL_Resume>
}
 8007acc:	bf00      	nop
 8007ace:	3708      	adds	r7, #8
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b082      	sub	sp, #8
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	460b      	mov	r3, r1
 8007ade:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ae6:	78fa      	ldrb	r2, [r7, #3]
 8007ae8:	4611      	mov	r1, r2
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7fe fdf1 	bl	80066d2 <USBD_LL_IsoOUTIncomplete>
}
 8007af0:	bf00      	nop
 8007af2:	3708      	adds	r7, #8
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	460b      	mov	r3, r1
 8007b02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b0a:	78fa      	ldrb	r2, [r7, #3]
 8007b0c:	4611      	mov	r1, r2
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7fe fdd2 	bl	80066b8 <USBD_LL_IsoINIncomplete>
}
 8007b14:	bf00      	nop
 8007b16:	3708      	adds	r7, #8
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b082      	sub	sp, #8
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f7fe fdde 	bl	80066ec <USBD_LL_DevConnected>
}
 8007b30:	bf00      	nop
 8007b32:	3708      	adds	r7, #8
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b46:	4618      	mov	r0, r3
 8007b48:	f7fe fddb 	bl	8006702 <USBD_LL_DevDisconnected>
}
 8007b4c:	bf00      	nop
 8007b4e:	3708      	adds	r7, #8
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d13c      	bne.n	8007bde <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007b64:	4a20      	ldr	r2, [pc, #128]	; (8007be8 <USBD_LL_Init+0x94>)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	4a1e      	ldr	r2, [pc, #120]	; (8007be8 <USBD_LL_Init+0x94>)
 8007b70:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007b74:	4b1c      	ldr	r3, [pc, #112]	; (8007be8 <USBD_LL_Init+0x94>)
 8007b76:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007b7a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007b7c:	4b1a      	ldr	r3, [pc, #104]	; (8007be8 <USBD_LL_Init+0x94>)
 8007b7e:	2204      	movs	r2, #4
 8007b80:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007b82:	4b19      	ldr	r3, [pc, #100]	; (8007be8 <USBD_LL_Init+0x94>)
 8007b84:	2202      	movs	r2, #2
 8007b86:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007b88:	4b17      	ldr	r3, [pc, #92]	; (8007be8 <USBD_LL_Init+0x94>)
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007b8e:	4b16      	ldr	r3, [pc, #88]	; (8007be8 <USBD_LL_Init+0x94>)
 8007b90:	2202      	movs	r2, #2
 8007b92:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007b94:	4b14      	ldr	r3, [pc, #80]	; (8007be8 <USBD_LL_Init+0x94>)
 8007b96:	2200      	movs	r2, #0
 8007b98:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = ENABLE;
 8007b9a:	4b13      	ldr	r3, [pc, #76]	; (8007be8 <USBD_LL_Init+0x94>)
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = ENABLE;
 8007ba0:	4b11      	ldr	r3, [pc, #68]	; (8007be8 <USBD_LL_Init+0x94>)
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8007ba6:	4b10      	ldr	r3, [pc, #64]	; (8007be8 <USBD_LL_Init+0x94>)
 8007ba8:	2201      	movs	r2, #1
 8007baa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007bac:	4b0e      	ldr	r3, [pc, #56]	; (8007be8 <USBD_LL_Init+0x94>)
 8007bae:	2200      	movs	r2, #0
 8007bb0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007bb2:	480d      	ldr	r0, [pc, #52]	; (8007be8 <USBD_LL_Init+0x94>)
 8007bb4:	f7fa fb21 	bl	80021fa <HAL_PCD_Init>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d001      	beq.n	8007bc2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007bbe:	f7f8 fe7d 	bl	80008bc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007bc2:	2180      	movs	r1, #128	; 0x80
 8007bc4:	4808      	ldr	r0, [pc, #32]	; (8007be8 <USBD_LL_Init+0x94>)
 8007bc6:	f7fb fc7e 	bl	80034c6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007bca:	2240      	movs	r2, #64	; 0x40
 8007bcc:	2100      	movs	r1, #0
 8007bce:	4806      	ldr	r0, [pc, #24]	; (8007be8 <USBD_LL_Init+0x94>)
 8007bd0:	f7fb fc32 	bl	8003438 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007bd4:	2280      	movs	r2, #128	; 0x80
 8007bd6:	2101      	movs	r1, #1
 8007bd8:	4803      	ldr	r0, [pc, #12]	; (8007be8 <USBD_LL_Init+0x94>)
 8007bda:	f7fb fc2d 	bl	8003438 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3708      	adds	r7, #8
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	20001998 	.word	0x20001998

08007bec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7fa fc16 	bl	8002434 <HAL_PCD_Start>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c0c:	7bfb      	ldrb	r3, [r7, #15]
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f000 f92a 	bl	8007e68 <USBD_Get_USB_Status>
 8007c14:	4603      	mov	r3, r0
 8007c16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c18:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b084      	sub	sp, #16
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
 8007c2a:	4608      	mov	r0, r1
 8007c2c:	4611      	mov	r1, r2
 8007c2e:	461a      	mov	r2, r3
 8007c30:	4603      	mov	r3, r0
 8007c32:	70fb      	strb	r3, [r7, #3]
 8007c34:	460b      	mov	r3, r1
 8007c36:	70bb      	strb	r3, [r7, #2]
 8007c38:	4613      	mov	r3, r2
 8007c3a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c40:	2300      	movs	r3, #0
 8007c42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007c4a:	78bb      	ldrb	r3, [r7, #2]
 8007c4c:	883a      	ldrh	r2, [r7, #0]
 8007c4e:	78f9      	ldrb	r1, [r7, #3]
 8007c50:	f7fa fffa 	bl	8002c48 <HAL_PCD_EP_Open>
 8007c54:	4603      	mov	r3, r0
 8007c56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c58:	7bfb      	ldrb	r3, [r7, #15]
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f000 f904 	bl	8007e68 <USBD_Get_USB_Status>
 8007c60:	4603      	mov	r3, r0
 8007c62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c64:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3710      	adds	r7, #16
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}

08007c6e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b084      	sub	sp, #16
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
 8007c76:	460b      	mov	r3, r1
 8007c78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c88:	78fa      	ldrb	r2, [r7, #3]
 8007c8a:	4611      	mov	r1, r2
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f7fb f843 	bl	8002d18 <HAL_PCD_EP_Close>
 8007c92:	4603      	mov	r3, r0
 8007c94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c96:	7bfb      	ldrb	r3, [r7, #15]
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f000 f8e5 	bl	8007e68 <USBD_Get_USB_Status>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ca2:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3710      	adds	r7, #16
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	460b      	mov	r3, r1
 8007cb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007cc6:	78fa      	ldrb	r2, [r7, #3]
 8007cc8:	4611      	mov	r1, r2
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f7fb f91b 	bl	8002f06 <HAL_PCD_EP_SetStall>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cd4:	7bfb      	ldrb	r3, [r7, #15]
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f000 f8c6 	bl	8007e68 <USBD_Get_USB_Status>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ce0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3710      	adds	r7, #16
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}

08007cea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cea:	b580      	push	{r7, lr}
 8007cec:	b084      	sub	sp, #16
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d04:	78fa      	ldrb	r2, [r7, #3]
 8007d06:	4611      	mov	r1, r2
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f7fb f960 	bl	8002fce <HAL_PCD_EP_ClrStall>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d12:	7bfb      	ldrb	r3, [r7, #15]
 8007d14:	4618      	mov	r0, r3
 8007d16:	f000 f8a7 	bl	8007e68 <USBD_Get_USB_Status>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3710      	adds	r7, #16
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b085      	sub	sp, #20
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	460b      	mov	r3, r1
 8007d32:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d3a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007d3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	da0b      	bge.n	8007d5c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007d44:	78fb      	ldrb	r3, [r7, #3]
 8007d46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d4a:	68f9      	ldr	r1, [r7, #12]
 8007d4c:	4613      	mov	r3, r2
 8007d4e:	00db      	lsls	r3, r3, #3
 8007d50:	1a9b      	subs	r3, r3, r2
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	440b      	add	r3, r1
 8007d56:	333e      	adds	r3, #62	; 0x3e
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	e00b      	b.n	8007d74 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007d5c:	78fb      	ldrb	r3, [r7, #3]
 8007d5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d62:	68f9      	ldr	r1, [r7, #12]
 8007d64:	4613      	mov	r3, r2
 8007d66:	00db      	lsls	r3, r3, #3
 8007d68:	1a9b      	subs	r3, r3, r2
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	440b      	add	r3, r1
 8007d6e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007d72:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3714      	adds	r7, #20
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	460b      	mov	r3, r1
 8007d8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d90:	2300      	movs	r3, #0
 8007d92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d9a:	78fa      	ldrb	r2, [r7, #3]
 8007d9c:	4611      	mov	r1, r2
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f7fa ff2d 	bl	8002bfe <HAL_PCD_SetAddress>
 8007da4:	4603      	mov	r3, r0
 8007da6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007da8:	7bfb      	ldrb	r3, [r7, #15]
 8007daa:	4618      	mov	r0, r3
 8007dac:	f000 f85c 	bl	8007e68 <USBD_Get_USB_Status>
 8007db0:	4603      	mov	r3, r0
 8007db2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007db4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3710      	adds	r7, #16
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}

08007dbe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007dbe:	b580      	push	{r7, lr}
 8007dc0:	b086      	sub	sp, #24
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	60f8      	str	r0, [r7, #12]
 8007dc6:	607a      	str	r2, [r7, #4]
 8007dc8:	603b      	str	r3, [r7, #0]
 8007dca:	460b      	mov	r3, r1
 8007dcc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007ddc:	7af9      	ldrb	r1, [r7, #11]
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	f7fb f846 	bl	8002e72 <HAL_PCD_EP_Transmit>
 8007de6:	4603      	mov	r3, r0
 8007de8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dea:	7dfb      	ldrb	r3, [r7, #23]
 8007dec:	4618      	mov	r0, r3
 8007dee:	f000 f83b 	bl	8007e68 <USBD_Get_USB_Status>
 8007df2:	4603      	mov	r3, r0
 8007df4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007df6:	7dbb      	ldrb	r3, [r7, #22]
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3718      	adds	r7, #24
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b086      	sub	sp, #24
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	60f8      	str	r0, [r7, #12]
 8007e08:	607a      	str	r2, [r7, #4]
 8007e0a:	603b      	str	r3, [r7, #0]
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e10:	2300      	movs	r3, #0
 8007e12:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e14:	2300      	movs	r3, #0
 8007e16:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007e1e:	7af9      	ldrb	r1, [r7, #11]
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	f7fa ffc2 	bl	8002dac <HAL_PCD_EP_Receive>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e2c:	7dfb      	ldrb	r3, [r7, #23]
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f000 f81a 	bl	8007e68 <USBD_Get_USB_Status>
 8007e34:	4603      	mov	r3, r0
 8007e36:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007e38:	7dbb      	ldrb	r3, [r7, #22]
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3718      	adds	r7, #24
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b082      	sub	sp, #8
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e54:	78fa      	ldrb	r2, [r7, #3]
 8007e56:	4611      	mov	r1, r2
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f7fa fff2 	bl	8002e42 <HAL_PCD_EP_GetRxCount>
 8007e5e:	4603      	mov	r3, r0
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3708      	adds	r7, #8
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	4603      	mov	r3, r0
 8007e70:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e72:	2300      	movs	r3, #0
 8007e74:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007e76:	79fb      	ldrb	r3, [r7, #7]
 8007e78:	2b03      	cmp	r3, #3
 8007e7a:	d817      	bhi.n	8007eac <USBD_Get_USB_Status+0x44>
 8007e7c:	a201      	add	r2, pc, #4	; (adr r2, 8007e84 <USBD_Get_USB_Status+0x1c>)
 8007e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e82:	bf00      	nop
 8007e84:	08007e95 	.word	0x08007e95
 8007e88:	08007e9b 	.word	0x08007e9b
 8007e8c:	08007ea1 	.word	0x08007ea1
 8007e90:	08007ea7 	.word	0x08007ea7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007e94:	2300      	movs	r3, #0
 8007e96:	73fb      	strb	r3, [r7, #15]
    break;
 8007e98:	e00b      	b.n	8007eb2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007e9a:	2303      	movs	r3, #3
 8007e9c:	73fb      	strb	r3, [r7, #15]
    break;
 8007e9e:	e008      	b.n	8007eb2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	73fb      	strb	r3, [r7, #15]
    break;
 8007ea4:	e005      	b.n	8007eb2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007ea6:	2303      	movs	r3, #3
 8007ea8:	73fb      	strb	r3, [r7, #15]
    break;
 8007eaa:	e002      	b.n	8007eb2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007eac:	2303      	movs	r3, #3
 8007eae:	73fb      	strb	r3, [r7, #15]
    break;
 8007eb0:	bf00      	nop
  }
  return usb_status;
 8007eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3714      	adds	r7, #20
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <__errno>:
 8007ec0:	4b01      	ldr	r3, [pc, #4]	; (8007ec8 <__errno+0x8>)
 8007ec2:	6818      	ldr	r0, [r3, #0]
 8007ec4:	4770      	bx	lr
 8007ec6:	bf00      	nop
 8007ec8:	20000188 	.word	0x20000188

08007ecc <__libc_init_array>:
 8007ecc:	b570      	push	{r4, r5, r6, lr}
 8007ece:	4e0d      	ldr	r6, [pc, #52]	; (8007f04 <__libc_init_array+0x38>)
 8007ed0:	4c0d      	ldr	r4, [pc, #52]	; (8007f08 <__libc_init_array+0x3c>)
 8007ed2:	1ba4      	subs	r4, r4, r6
 8007ed4:	10a4      	asrs	r4, r4, #2
 8007ed6:	2500      	movs	r5, #0
 8007ed8:	42a5      	cmp	r5, r4
 8007eda:	d109      	bne.n	8007ef0 <__libc_init_array+0x24>
 8007edc:	4e0b      	ldr	r6, [pc, #44]	; (8007f0c <__libc_init_array+0x40>)
 8007ede:	4c0c      	ldr	r4, [pc, #48]	; (8007f10 <__libc_init_array+0x44>)
 8007ee0:	f000 f8ea 	bl	80080b8 <_init>
 8007ee4:	1ba4      	subs	r4, r4, r6
 8007ee6:	10a4      	asrs	r4, r4, #2
 8007ee8:	2500      	movs	r5, #0
 8007eea:	42a5      	cmp	r5, r4
 8007eec:	d105      	bne.n	8007efa <__libc_init_array+0x2e>
 8007eee:	bd70      	pop	{r4, r5, r6, pc}
 8007ef0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007ef4:	4798      	blx	r3
 8007ef6:	3501      	adds	r5, #1
 8007ef8:	e7ee      	b.n	8007ed8 <__libc_init_array+0xc>
 8007efa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007efe:	4798      	blx	r3
 8007f00:	3501      	adds	r5, #1
 8007f02:	e7f2      	b.n	8007eea <__libc_init_array+0x1e>
 8007f04:	08008120 	.word	0x08008120
 8007f08:	08008120 	.word	0x08008120
 8007f0c:	08008120 	.word	0x08008120
 8007f10:	08008124 	.word	0x08008124

08007f14 <malloc>:
 8007f14:	4b02      	ldr	r3, [pc, #8]	; (8007f20 <malloc+0xc>)
 8007f16:	4601      	mov	r1, r0
 8007f18:	6818      	ldr	r0, [r3, #0]
 8007f1a:	f000 b861 	b.w	8007fe0 <_malloc_r>
 8007f1e:	bf00      	nop
 8007f20:	20000188 	.word	0x20000188

08007f24 <free>:
 8007f24:	4b02      	ldr	r3, [pc, #8]	; (8007f30 <free+0xc>)
 8007f26:	4601      	mov	r1, r0
 8007f28:	6818      	ldr	r0, [r3, #0]
 8007f2a:	f000 b80b 	b.w	8007f44 <_free_r>
 8007f2e:	bf00      	nop
 8007f30:	20000188 	.word	0x20000188

08007f34 <memset>:
 8007f34:	4402      	add	r2, r0
 8007f36:	4603      	mov	r3, r0
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d100      	bne.n	8007f3e <memset+0xa>
 8007f3c:	4770      	bx	lr
 8007f3e:	f803 1b01 	strb.w	r1, [r3], #1
 8007f42:	e7f9      	b.n	8007f38 <memset+0x4>

08007f44 <_free_r>:
 8007f44:	b538      	push	{r3, r4, r5, lr}
 8007f46:	4605      	mov	r5, r0
 8007f48:	2900      	cmp	r1, #0
 8007f4a:	d045      	beq.n	8007fd8 <_free_r+0x94>
 8007f4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f50:	1f0c      	subs	r4, r1, #4
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	bfb8      	it	lt
 8007f56:	18e4      	addlt	r4, r4, r3
 8007f58:	f000 f8ac 	bl	80080b4 <__malloc_lock>
 8007f5c:	4a1f      	ldr	r2, [pc, #124]	; (8007fdc <_free_r+0x98>)
 8007f5e:	6813      	ldr	r3, [r2, #0]
 8007f60:	4610      	mov	r0, r2
 8007f62:	b933      	cbnz	r3, 8007f72 <_free_r+0x2e>
 8007f64:	6063      	str	r3, [r4, #4]
 8007f66:	6014      	str	r4, [r2, #0]
 8007f68:	4628      	mov	r0, r5
 8007f6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f6e:	f000 b8a2 	b.w	80080b6 <__malloc_unlock>
 8007f72:	42a3      	cmp	r3, r4
 8007f74:	d90c      	bls.n	8007f90 <_free_r+0x4c>
 8007f76:	6821      	ldr	r1, [r4, #0]
 8007f78:	1862      	adds	r2, r4, r1
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	bf04      	itt	eq
 8007f7e:	681a      	ldreq	r2, [r3, #0]
 8007f80:	685b      	ldreq	r3, [r3, #4]
 8007f82:	6063      	str	r3, [r4, #4]
 8007f84:	bf04      	itt	eq
 8007f86:	1852      	addeq	r2, r2, r1
 8007f88:	6022      	streq	r2, [r4, #0]
 8007f8a:	6004      	str	r4, [r0, #0]
 8007f8c:	e7ec      	b.n	8007f68 <_free_r+0x24>
 8007f8e:	4613      	mov	r3, r2
 8007f90:	685a      	ldr	r2, [r3, #4]
 8007f92:	b10a      	cbz	r2, 8007f98 <_free_r+0x54>
 8007f94:	42a2      	cmp	r2, r4
 8007f96:	d9fa      	bls.n	8007f8e <_free_r+0x4a>
 8007f98:	6819      	ldr	r1, [r3, #0]
 8007f9a:	1858      	adds	r0, r3, r1
 8007f9c:	42a0      	cmp	r0, r4
 8007f9e:	d10b      	bne.n	8007fb8 <_free_r+0x74>
 8007fa0:	6820      	ldr	r0, [r4, #0]
 8007fa2:	4401      	add	r1, r0
 8007fa4:	1858      	adds	r0, r3, r1
 8007fa6:	4282      	cmp	r2, r0
 8007fa8:	6019      	str	r1, [r3, #0]
 8007faa:	d1dd      	bne.n	8007f68 <_free_r+0x24>
 8007fac:	6810      	ldr	r0, [r2, #0]
 8007fae:	6852      	ldr	r2, [r2, #4]
 8007fb0:	605a      	str	r2, [r3, #4]
 8007fb2:	4401      	add	r1, r0
 8007fb4:	6019      	str	r1, [r3, #0]
 8007fb6:	e7d7      	b.n	8007f68 <_free_r+0x24>
 8007fb8:	d902      	bls.n	8007fc0 <_free_r+0x7c>
 8007fba:	230c      	movs	r3, #12
 8007fbc:	602b      	str	r3, [r5, #0]
 8007fbe:	e7d3      	b.n	8007f68 <_free_r+0x24>
 8007fc0:	6820      	ldr	r0, [r4, #0]
 8007fc2:	1821      	adds	r1, r4, r0
 8007fc4:	428a      	cmp	r2, r1
 8007fc6:	bf04      	itt	eq
 8007fc8:	6811      	ldreq	r1, [r2, #0]
 8007fca:	6852      	ldreq	r2, [r2, #4]
 8007fcc:	6062      	str	r2, [r4, #4]
 8007fce:	bf04      	itt	eq
 8007fd0:	1809      	addeq	r1, r1, r0
 8007fd2:	6021      	streq	r1, [r4, #0]
 8007fd4:	605c      	str	r4, [r3, #4]
 8007fd6:	e7c7      	b.n	8007f68 <_free_r+0x24>
 8007fd8:	bd38      	pop	{r3, r4, r5, pc}
 8007fda:	bf00      	nop
 8007fdc:	20000210 	.word	0x20000210

08007fe0 <_malloc_r>:
 8007fe0:	b570      	push	{r4, r5, r6, lr}
 8007fe2:	1ccd      	adds	r5, r1, #3
 8007fe4:	f025 0503 	bic.w	r5, r5, #3
 8007fe8:	3508      	adds	r5, #8
 8007fea:	2d0c      	cmp	r5, #12
 8007fec:	bf38      	it	cc
 8007fee:	250c      	movcc	r5, #12
 8007ff0:	2d00      	cmp	r5, #0
 8007ff2:	4606      	mov	r6, r0
 8007ff4:	db01      	blt.n	8007ffa <_malloc_r+0x1a>
 8007ff6:	42a9      	cmp	r1, r5
 8007ff8:	d903      	bls.n	8008002 <_malloc_r+0x22>
 8007ffa:	230c      	movs	r3, #12
 8007ffc:	6033      	str	r3, [r6, #0]
 8007ffe:	2000      	movs	r0, #0
 8008000:	bd70      	pop	{r4, r5, r6, pc}
 8008002:	f000 f857 	bl	80080b4 <__malloc_lock>
 8008006:	4a21      	ldr	r2, [pc, #132]	; (800808c <_malloc_r+0xac>)
 8008008:	6814      	ldr	r4, [r2, #0]
 800800a:	4621      	mov	r1, r4
 800800c:	b991      	cbnz	r1, 8008034 <_malloc_r+0x54>
 800800e:	4c20      	ldr	r4, [pc, #128]	; (8008090 <_malloc_r+0xb0>)
 8008010:	6823      	ldr	r3, [r4, #0]
 8008012:	b91b      	cbnz	r3, 800801c <_malloc_r+0x3c>
 8008014:	4630      	mov	r0, r6
 8008016:	f000 f83d 	bl	8008094 <_sbrk_r>
 800801a:	6020      	str	r0, [r4, #0]
 800801c:	4629      	mov	r1, r5
 800801e:	4630      	mov	r0, r6
 8008020:	f000 f838 	bl	8008094 <_sbrk_r>
 8008024:	1c43      	adds	r3, r0, #1
 8008026:	d124      	bne.n	8008072 <_malloc_r+0x92>
 8008028:	230c      	movs	r3, #12
 800802a:	6033      	str	r3, [r6, #0]
 800802c:	4630      	mov	r0, r6
 800802e:	f000 f842 	bl	80080b6 <__malloc_unlock>
 8008032:	e7e4      	b.n	8007ffe <_malloc_r+0x1e>
 8008034:	680b      	ldr	r3, [r1, #0]
 8008036:	1b5b      	subs	r3, r3, r5
 8008038:	d418      	bmi.n	800806c <_malloc_r+0x8c>
 800803a:	2b0b      	cmp	r3, #11
 800803c:	d90f      	bls.n	800805e <_malloc_r+0x7e>
 800803e:	600b      	str	r3, [r1, #0]
 8008040:	50cd      	str	r5, [r1, r3]
 8008042:	18cc      	adds	r4, r1, r3
 8008044:	4630      	mov	r0, r6
 8008046:	f000 f836 	bl	80080b6 <__malloc_unlock>
 800804a:	f104 000b 	add.w	r0, r4, #11
 800804e:	1d23      	adds	r3, r4, #4
 8008050:	f020 0007 	bic.w	r0, r0, #7
 8008054:	1ac3      	subs	r3, r0, r3
 8008056:	d0d3      	beq.n	8008000 <_malloc_r+0x20>
 8008058:	425a      	negs	r2, r3
 800805a:	50e2      	str	r2, [r4, r3]
 800805c:	e7d0      	b.n	8008000 <_malloc_r+0x20>
 800805e:	428c      	cmp	r4, r1
 8008060:	684b      	ldr	r3, [r1, #4]
 8008062:	bf16      	itet	ne
 8008064:	6063      	strne	r3, [r4, #4]
 8008066:	6013      	streq	r3, [r2, #0]
 8008068:	460c      	movne	r4, r1
 800806a:	e7eb      	b.n	8008044 <_malloc_r+0x64>
 800806c:	460c      	mov	r4, r1
 800806e:	6849      	ldr	r1, [r1, #4]
 8008070:	e7cc      	b.n	800800c <_malloc_r+0x2c>
 8008072:	1cc4      	adds	r4, r0, #3
 8008074:	f024 0403 	bic.w	r4, r4, #3
 8008078:	42a0      	cmp	r0, r4
 800807a:	d005      	beq.n	8008088 <_malloc_r+0xa8>
 800807c:	1a21      	subs	r1, r4, r0
 800807e:	4630      	mov	r0, r6
 8008080:	f000 f808 	bl	8008094 <_sbrk_r>
 8008084:	3001      	adds	r0, #1
 8008086:	d0cf      	beq.n	8008028 <_malloc_r+0x48>
 8008088:	6025      	str	r5, [r4, #0]
 800808a:	e7db      	b.n	8008044 <_malloc_r+0x64>
 800808c:	20000210 	.word	0x20000210
 8008090:	20000214 	.word	0x20000214

08008094 <_sbrk_r>:
 8008094:	b538      	push	{r3, r4, r5, lr}
 8008096:	4c06      	ldr	r4, [pc, #24]	; (80080b0 <_sbrk_r+0x1c>)
 8008098:	2300      	movs	r3, #0
 800809a:	4605      	mov	r5, r0
 800809c:	4608      	mov	r0, r1
 800809e:	6023      	str	r3, [r4, #0]
 80080a0:	f7f8 fd84 	bl	8000bac <_sbrk>
 80080a4:	1c43      	adds	r3, r0, #1
 80080a6:	d102      	bne.n	80080ae <_sbrk_r+0x1a>
 80080a8:	6823      	ldr	r3, [r4, #0]
 80080aa:	b103      	cbz	r3, 80080ae <_sbrk_r+0x1a>
 80080ac:	602b      	str	r3, [r5, #0]
 80080ae:	bd38      	pop	{r3, r4, r5, pc}
 80080b0:	20001da0 	.word	0x20001da0

080080b4 <__malloc_lock>:
 80080b4:	4770      	bx	lr

080080b6 <__malloc_unlock>:
 80080b6:	4770      	bx	lr

080080b8 <_init>:
 80080b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ba:	bf00      	nop
 80080bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080be:	bc08      	pop	{r3}
 80080c0:	469e      	mov	lr, r3
 80080c2:	4770      	bx	lr

080080c4 <_fini>:
 80080c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080c6:	bf00      	nop
 80080c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080ca:	bc08      	pop	{r3}
 80080cc:	469e      	mov	lr, r3
 80080ce:	4770      	bx	lr
