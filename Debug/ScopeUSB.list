
ScopeUSB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c7c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08008e04  08008e04  00018e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e4c  08008e4c  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  08008e4c  08008e4c  00018e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e54  08008e54  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e54  08008e54  00018e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e58  08008e58  00018e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08008e5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e0c  200001ec  08009048  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00001500  20001ff8  08009048  00021ff8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b47d  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003aed  00000000  00000000  0003b699  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001518  00000000  00000000  0003f188  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001360  00000000  00000000  000406a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025606  00000000  00000000  00041a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013121  00000000  00000000  00067006  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d42fe  00000000  00000000  0007a127  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014e425  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005980  00000000  00000000  0014e4a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001ec 	.word	0x200001ec
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008dec 	.word	0x08008dec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001f0 	.word	0x200001f0
 80001c4:	08008dec 	.word	0x08008dec

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_ADC_ConvHalfCpltCallback>:

 volatile uint16_t buffer[pkgSize*2];
 uint8_t timeToSendData=0;

 void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
 {
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	 timeToSendData=1;
 80004d0:	4b04      	ldr	r3, [pc, #16]	; (80004e4 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 80004d2:	2201      	movs	r2, #1
 80004d4:	701a      	strb	r2, [r3, #0]
 }
 80004d6:	bf00      	nop
 80004d8:	370c      	adds	r7, #12
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	20000208 	.word	0x20000208

080004e8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
	timeToSendData=2;
 80004f0:	4b04      	ldr	r3, [pc, #16]	; (8000504 <HAL_ADC_ConvCpltCallback+0x1c>)
 80004f2:	2202      	movs	r2, #2
 80004f4:	701a      	strb	r2, [r3, #0]
}
 80004f6:	bf00      	nop
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	20000208 	.word	0x20000208

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fcf8 	bl	8000f00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f842 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f9c6 	bl	80008a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000518:	f000 f9a4 	bl	8000864 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 800051c:	f007 fde8 	bl	80080f0 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000520:	f000 f8a4 	bl	800066c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000524:	f000 f974 	bl	8000810 <MX_USART2_UART_Init>
  MX_DAC_Init();
 8000528:	f000 f8f2 	bl	8000710 <MX_DAC_Init>
  MX_TIM2_Init();
 800052c:	f000 f924 	bl	8000778 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000530:	4813      	ldr	r0, [pc, #76]	; (8000580 <main+0x78>)
 8000532:	f003 ff02 	bl	800433a <HAL_TIM_Base_Start>
  HAL_DAC_Start(&hdac,DAC_CHANNEL_1);
 8000536:	2100      	movs	r1, #0
 8000538:	4812      	ldr	r0, [pc, #72]	; (8000584 <main+0x7c>)
 800053a:	f001 fa88 	bl	8001a4e <HAL_DAC_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_ADC_Start_DMA(&hadc1, (uint16_t*)&buffer,pkgSize*2);
 800053e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000542:	4911      	ldr	r1, [pc, #68]	; (8000588 <main+0x80>)
 8000544:	4811      	ldr	r0, [pc, #68]	; (800058c <main+0x84>)
 8000546:	f000 fdb3 	bl	80010b0 <HAL_ADC_Start_DMA>

  while (1)
  {
	  switch (timeToSendData) {
 800054a:	4b11      	ldr	r3, [pc, #68]	; (8000590 <main+0x88>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	2b01      	cmp	r3, #1
 8000550:	d002      	beq.n	8000558 <main+0x50>
 8000552:	2b02      	cmp	r3, #2
 8000554:	d009      	beq.n	800056a <main+0x62>
		case SECOND_BUF_HALF:
			timeToSendData=0;
			CDC_Transmit_FS((uint16_t*)&buffer+pkgSize, pkgSize*sizeof(uint16_t));
			break;
		default:
			break;
 8000556:	e012      	b.n	800057e <main+0x76>
			timeToSendData=0;
 8000558:	4b0d      	ldr	r3, [pc, #52]	; (8000590 <main+0x88>)
 800055a:	2200      	movs	r2, #0
 800055c:	701a      	strb	r2, [r3, #0]
			CDC_Transmit_FS((uint16_t*)&buffer, pkgSize*sizeof(uint16_t));
 800055e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8000562:	4809      	ldr	r0, [pc, #36]	; (8000588 <main+0x80>)
 8000564:	f007 fed2 	bl	800830c <CDC_Transmit_FS>
			break;
 8000568:	e009      	b.n	800057e <main+0x76>
			timeToSendData=0;
 800056a:	4b09      	ldr	r3, [pc, #36]	; (8000590 <main+0x88>)
 800056c:	2200      	movs	r2, #0
 800056e:	701a      	strb	r2, [r3, #0]
			CDC_Transmit_FS((uint16_t*)&buffer+pkgSize, pkgSize*sizeof(uint16_t));
 8000570:	4b08      	ldr	r3, [pc, #32]	; (8000594 <main+0x8c>)
 8000572:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8000576:	4618      	mov	r0, r3
 8000578:	f007 fec8 	bl	800830c <CDC_Transmit_FS>
			break;
 800057c:	bf00      	nop
	  switch (timeToSendData) {
 800057e:	e7e4      	b.n	800054a <main+0x42>
 8000580:	20000698 	.word	0x20000698
 8000584:	20000264 	.word	0x20000264
 8000588:	20000278 	.word	0x20000278
 800058c:	2000021c 	.word	0x2000021c
 8000590:	20000208 	.word	0x20000208
 8000594:	20000458 	.word	0x20000458

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b094      	sub	sp, #80	; 0x50
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 0320 	add.w	r3, r7, #32
 80005a2:	2230      	movs	r2, #48	; 0x30
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f008 fb5e 	bl	8008c68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	f107 030c 	add.w	r3, r7, #12
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005bc:	2300      	movs	r3, #0
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	4b28      	ldr	r3, [pc, #160]	; (8000664 <SystemClock_Config+0xcc>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c4:	4a27      	ldr	r2, [pc, #156]	; (8000664 <SystemClock_Config+0xcc>)
 80005c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ca:	6413      	str	r3, [r2, #64]	; 0x40
 80005cc:	4b25      	ldr	r3, [pc, #148]	; (8000664 <SystemClock_Config+0xcc>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d8:	2300      	movs	r3, #0
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	4b22      	ldr	r3, [pc, #136]	; (8000668 <SystemClock_Config+0xd0>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a21      	ldr	r2, [pc, #132]	; (8000668 <SystemClock_Config+0xd0>)
 80005e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	4b1f      	ldr	r3, [pc, #124]	; (8000668 <SystemClock_Config+0xd0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f4:	2301      	movs	r3, #1
 80005f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fe:	2302      	movs	r3, #2
 8000600:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000602:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000606:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000608:	2304      	movs	r3, #4
 800060a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800060c:	2390      	movs	r3, #144	; 0x90
 800060e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000610:	2302      	movs	r3, #2
 8000612:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000614:	2306      	movs	r3, #6
 8000616:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000618:	f107 0320 	add.w	r3, r7, #32
 800061c:	4618      	mov	r0, r3
 800061e:	f003 f9ff 	bl	8003a20 <HAL_RCC_OscConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000628:	f000 f9f6 	bl	8000a18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062c:	230f      	movs	r3, #15
 800062e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000630:	2302      	movs	r3, #2
 8000632:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000638:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800063c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800063e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000642:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000644:	f107 030c 	add.w	r3, r7, #12
 8000648:	2104      	movs	r1, #4
 800064a:	4618      	mov	r0, r3
 800064c:	f003 fc58 	bl	8003f00 <HAL_RCC_ClockConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000656:	f000 f9df 	bl	8000a18 <Error_Handler>
  }
}
 800065a:	bf00      	nop
 800065c:	3750      	adds	r7, #80	; 0x50
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40023800 	.word	0x40023800
 8000668:	40007000 	.word	0x40007000

0800066c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000672:	463b      	mov	r3, r7
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800067e:	4b21      	ldr	r3, [pc, #132]	; (8000704 <MX_ADC1_Init+0x98>)
 8000680:	4a21      	ldr	r2, [pc, #132]	; (8000708 <MX_ADC1_Init+0x9c>)
 8000682:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000684:	4b1f      	ldr	r3, [pc, #124]	; (8000704 <MX_ADC1_Init+0x98>)
 8000686:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800068a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800068c:	4b1d      	ldr	r3, [pc, #116]	; (8000704 <MX_ADC1_Init+0x98>)
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000692:	4b1c      	ldr	r3, [pc, #112]	; (8000704 <MX_ADC1_Init+0x98>)
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000698:	4b1a      	ldr	r3, [pc, #104]	; (8000704 <MX_ADC1_Init+0x98>)
 800069a:	2201      	movs	r2, #1
 800069c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800069e:	4b19      	ldr	r3, [pc, #100]	; (8000704 <MX_ADC1_Init+0x98>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006a6:	4b17      	ldr	r3, [pc, #92]	; (8000704 <MX_ADC1_Init+0x98>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006ac:	4b15      	ldr	r3, [pc, #84]	; (8000704 <MX_ADC1_Init+0x98>)
 80006ae:	4a17      	ldr	r2, [pc, #92]	; (800070c <MX_ADC1_Init+0xa0>)
 80006b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006b2:	4b14      	ldr	r3, [pc, #80]	; (8000704 <MX_ADC1_Init+0x98>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006b8:	4b12      	ldr	r3, [pc, #72]	; (8000704 <MX_ADC1_Init+0x98>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006be:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_ADC1_Init+0x98>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <MX_ADC1_Init+0x98>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006cc:	480d      	ldr	r0, [pc, #52]	; (8000704 <MX_ADC1_Init+0x98>)
 80006ce:	f000 fcab 	bl	8001028 <HAL_ADC_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006d8:	f000 f99e 	bl	8000a18 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006dc:	2305      	movs	r3, #5
 80006de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006e0:	2301      	movs	r3, #1
 80006e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80006e4:	2306      	movs	r3, #6
 80006e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_ADC1_Init+0x98>)
 80006ee:	f000 fddb 	bl	80012a8 <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006f8:	f000 f98e 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006fc:	bf00      	nop
 80006fe:	3710      	adds	r7, #16
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	2000021c 	.word	0x2000021c
 8000708:	40012000 	.word	0x40012000
 800070c:	0f000001 	.word	0x0f000001

08000710 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000716:	463b      	mov	r3, r7
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800071e:	4b14      	ldr	r3, [pc, #80]	; (8000770 <MX_DAC_Init+0x60>)
 8000720:	4a14      	ldr	r2, [pc, #80]	; (8000774 <MX_DAC_Init+0x64>)
 8000722:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000724:	4812      	ldr	r0, [pc, #72]	; (8000770 <MX_DAC_Init+0x60>)
 8000726:	f001 f970 	bl	8001a0a <HAL_DAC_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000730:	f000 f972 	bl	8000a18 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000734:	2324      	movs	r3, #36	; 0x24
 8000736:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000738:	2300      	movs	r3, #0
 800073a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800073c:	463b      	mov	r3, r7
 800073e:	2200      	movs	r2, #0
 8000740:	4619      	mov	r1, r3
 8000742:	480b      	ldr	r0, [pc, #44]	; (8000770 <MX_DAC_Init+0x60>)
 8000744:	f001 fa3d 	bl	8001bc2 <HAL_DAC_ConfigChannel>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800074e:	f000 f963 	bl	8000a18 <Error_Handler>
  }
  /** Configure Triangle wave generation on DAC OUT1
  */
  if (HAL_DACEx_TriangleWaveGenerate(&hdac, DAC_CHANNEL_1, DAC_TRIANGLEAMPLITUDE_4095) != HAL_OK)
 8000752:	f44f 6230 	mov.w	r2, #2816	; 0xb00
 8000756:	2100      	movs	r1, #0
 8000758:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_DAC_Init+0x60>)
 800075a:	f001 fa7f 	bl	8001c5c <HAL_DACEx_TriangleWaveGenerate>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000764:	f000 f958 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000768:	bf00      	nop
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000264 	.word	0x20000264
 8000774:	40007400 	.word	0x40007400

08000778 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800077e:	f107 0308 	add.w	r3, r7, #8
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800078c:	463b      	mov	r3, r7
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000794:	4b1d      	ldr	r3, [pc, #116]	; (800080c <MX_TIM2_Init+0x94>)
 8000796:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800079a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800079c:	4b1b      	ldr	r3, [pc, #108]	; (800080c <MX_TIM2_Init+0x94>)
 800079e:	2200      	movs	r2, #0
 80007a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a2:	4b1a      	ldr	r3, [pc, #104]	; (800080c <MX_TIM2_Init+0x94>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4;
 80007a8:	4b18      	ldr	r3, [pc, #96]	; (800080c <MX_TIM2_Init+0x94>)
 80007aa:	2204      	movs	r2, #4
 80007ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80007ae:	4b17      	ldr	r3, [pc, #92]	; (800080c <MX_TIM2_Init+0x94>)
 80007b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007b6:	4b15      	ldr	r3, [pc, #84]	; (800080c <MX_TIM2_Init+0x94>)
 80007b8:	2280      	movs	r2, #128	; 0x80
 80007ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007bc:	4813      	ldr	r0, [pc, #76]	; (800080c <MX_TIM2_Init+0x94>)
 80007be:	f003 fd91 	bl	80042e4 <HAL_TIM_Base_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80007c8:	f000 f926 	bl	8000a18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007d2:	f107 0308 	add.w	r3, r7, #8
 80007d6:	4619      	mov	r1, r3
 80007d8:	480c      	ldr	r0, [pc, #48]	; (800080c <MX_TIM2_Init+0x94>)
 80007da:	f003 feda 	bl	8004592 <HAL_TIM_ConfigClockSource>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80007e4:	f000 f918 	bl	8000a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80007e8:	2320      	movs	r3, #32
 80007ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ec:	2300      	movs	r3, #0
 80007ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007f0:	463b      	mov	r3, r7
 80007f2:	4619      	mov	r1, r3
 80007f4:	4805      	ldr	r0, [pc, #20]	; (800080c <MX_TIM2_Init+0x94>)
 80007f6:	f004 f8ef 	bl	80049d8 <HAL_TIMEx_MasterConfigSynchronization>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000800:	f000 f90a 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000804:	bf00      	nop
 8000806:	3718      	adds	r7, #24
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000698 	.word	0x20000698

08000810 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000814:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_USART2_UART_Init+0x4c>)
 8000816:	4a12      	ldr	r2, [pc, #72]	; (8000860 <MX_USART2_UART_Init+0x50>)
 8000818:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800081a:	4b10      	ldr	r3, [pc, #64]	; (800085c <MX_USART2_UART_Init+0x4c>)
 800081c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000820:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_USART2_UART_Init+0x4c>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <MX_USART2_UART_Init+0x4c>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <MX_USART2_UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000834:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_USART2_UART_Init+0x4c>)
 8000836:	220c      	movs	r2, #12
 8000838:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <MX_USART2_UART_Init+0x4c>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_USART2_UART_Init+0x4c>)
 8000842:	2200      	movs	r2, #0
 8000844:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000846:	4805      	ldr	r0, [pc, #20]	; (800085c <MX_USART2_UART_Init+0x4c>)
 8000848:	f004 f956 	bl	8004af8 <HAL_UART_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000852:	f000 f8e1 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200006d8 	.word	0x200006d8
 8000860:	40004400 	.word	0x40004400

08000864 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <MX_DMA_Init+0x3c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a0b      	ldr	r2, [pc, #44]	; (80008a0 <MX_DMA_Init+0x3c>)
 8000874:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <MX_DMA_Init+0x3c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000886:	2200      	movs	r2, #0
 8000888:	2100      	movs	r1, #0
 800088a:	2038      	movs	r0, #56	; 0x38
 800088c:	f001 f887 	bl	800199e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000890:	2038      	movs	r0, #56	; 0x38
 8000892:	f001 f8a0 	bl	80019d6 <HAL_NVIC_EnableIRQ>

}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40023800 	.word	0x40023800

080008a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08c      	sub	sp, #48	; 0x30
 80008a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
 80008b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	61bb      	str	r3, [r7, #24]
 80008be:	4b51      	ldr	r3, [pc, #324]	; (8000a04 <MX_GPIO_Init+0x160>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a50      	ldr	r2, [pc, #320]	; (8000a04 <MX_GPIO_Init+0x160>)
 80008c4:	f043 0310 	orr.w	r3, r3, #16
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b4e      	ldr	r3, [pc, #312]	; (8000a04 <MX_GPIO_Init+0x160>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0310 	and.w	r3, r3, #16
 80008d2:	61bb      	str	r3, [r7, #24]
 80008d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	617b      	str	r3, [r7, #20]
 80008da:	4b4a      	ldr	r3, [pc, #296]	; (8000a04 <MX_GPIO_Init+0x160>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a49      	ldr	r2, [pc, #292]	; (8000a04 <MX_GPIO_Init+0x160>)
 80008e0:	f043 0304 	orr.w	r3, r3, #4
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b47      	ldr	r3, [pc, #284]	; (8000a04 <MX_GPIO_Init+0x160>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0304 	and.w	r3, r3, #4
 80008ee:	617b      	str	r3, [r7, #20]
 80008f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	613b      	str	r3, [r7, #16]
 80008f6:	4b43      	ldr	r3, [pc, #268]	; (8000a04 <MX_GPIO_Init+0x160>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a42      	ldr	r2, [pc, #264]	; (8000a04 <MX_GPIO_Init+0x160>)
 80008fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b40      	ldr	r3, [pc, #256]	; (8000a04 <MX_GPIO_Init+0x160>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	60fb      	str	r3, [r7, #12]
 8000912:	4b3c      	ldr	r3, [pc, #240]	; (8000a04 <MX_GPIO_Init+0x160>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a3b      	ldr	r2, [pc, #236]	; (8000a04 <MX_GPIO_Init+0x160>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b39      	ldr	r3, [pc, #228]	; (8000a04 <MX_GPIO_Init+0x160>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	60bb      	str	r3, [r7, #8]
 800092e:	4b35      	ldr	r3, [pc, #212]	; (8000a04 <MX_GPIO_Init+0x160>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a34      	ldr	r2, [pc, #208]	; (8000a04 <MX_GPIO_Init+0x160>)
 8000934:	f043 0302 	orr.w	r3, r3, #2
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b32      	ldr	r3, [pc, #200]	; (8000a04 <MX_GPIO_Init+0x160>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0302 	and.w	r3, r3, #2
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	4b2e      	ldr	r3, [pc, #184]	; (8000a04 <MX_GPIO_Init+0x160>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a2d      	ldr	r2, [pc, #180]	; (8000a04 <MX_GPIO_Init+0x160>)
 8000950:	f043 0308 	orr.w	r3, r3, #8
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b2b      	ldr	r3, [pc, #172]	; (8000a04 <MX_GPIO_Init+0x160>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0308 	and.w	r3, r3, #8
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	2108      	movs	r1, #8
 8000966:	4828      	ldr	r0, [pc, #160]	; (8000a08 <MX_GPIO_Init+0x164>)
 8000968:	f001 febe 	bl	80026e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800096c:	2200      	movs	r2, #0
 800096e:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000972:	4826      	ldr	r0, [pc, #152]	; (8000a0c <MX_GPIO_Init+0x168>)
 8000974:	f001 feb8 	bl	80026e8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000978:	2308      	movs	r3, #8
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097c:	2301      	movs	r3, #1
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2300      	movs	r3, #0
 8000986:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	4619      	mov	r1, r3
 800098e:	481e      	ldr	r0, [pc, #120]	; (8000a08 <MX_GPIO_Init+0x164>)
 8000990:	f001 fd10 	bl	80023b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000994:	2304      	movs	r3, #4
 8000996:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000998:	2300      	movs	r3, #0
 800099a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	4619      	mov	r1, r3
 80009a6:	481a      	ldr	r0, [pc, #104]	; (8000a10 <MX_GPIO_Init+0x16c>)
 80009a8:	f001 fd04 	bl	80023b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009ac:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009b0:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	4811      	ldr	r0, [pc, #68]	; (8000a0c <MX_GPIO_Init+0x168>)
 80009c6:	f001 fcf5 	bl	80023b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009ca:	2320      	movs	r3, #32
 80009cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ce:	2300      	movs	r3, #0
 80009d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	4619      	mov	r1, r3
 80009dc:	480b      	ldr	r0, [pc, #44]	; (8000a0c <MX_GPIO_Init+0x168>)
 80009de:	f001 fce9 	bl	80023b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009e2:	2302      	movs	r3, #2
 80009e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <MX_GPIO_Init+0x170>)
 80009e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	4804      	ldr	r0, [pc, #16]	; (8000a08 <MX_GPIO_Init+0x164>)
 80009f6:	f001 fcdd 	bl	80023b4 <HAL_GPIO_Init>

}
 80009fa:	bf00      	nop
 80009fc:	3730      	adds	r7, #48	; 0x30
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	40020c00 	.word	0x40020c00
 8000a10:	40020400 	.word	0x40020400
 8000a14:	10120000 	.word	0x10120000

08000a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
	...

08000a28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <HAL_MspInit+0x4c>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a36:	4a0f      	ldr	r2, [pc, #60]	; (8000a74 <HAL_MspInit+0x4c>)
 8000a38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a3e:	4b0d      	ldr	r3, [pc, #52]	; (8000a74 <HAL_MspInit+0x4c>)
 8000a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	603b      	str	r3, [r7, #0]
 8000a4e:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <HAL_MspInit+0x4c>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a52:	4a08      	ldr	r2, [pc, #32]	; (8000a74 <HAL_MspInit+0x4c>)
 8000a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a58:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5a:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <HAL_MspInit+0x4c>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a62:	603b      	str	r3, [r7, #0]
 8000a64:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a66:	2007      	movs	r0, #7
 8000a68:	f000 ff8e 	bl	8001988 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40023800 	.word	0x40023800

08000a78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08a      	sub	sp, #40	; 0x28
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a2f      	ldr	r2, [pc, #188]	; (8000b54 <HAL_ADC_MspInit+0xdc>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d158      	bne.n	8000b4c <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	613b      	str	r3, [r7, #16]
 8000a9e:	4b2e      	ldr	r3, [pc, #184]	; (8000b58 <HAL_ADC_MspInit+0xe0>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa2:	4a2d      	ldr	r2, [pc, #180]	; (8000b58 <HAL_ADC_MspInit+0xe0>)
 8000aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aaa:	4b2b      	ldr	r3, [pc, #172]	; (8000b58 <HAL_ADC_MspInit+0xe0>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	4b27      	ldr	r3, [pc, #156]	; (8000b58 <HAL_ADC_MspInit+0xe0>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a26      	ldr	r2, [pc, #152]	; (8000b58 <HAL_ADC_MspInit+0xe0>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b24      	ldr	r3, [pc, #144]	; (8000b58 <HAL_ADC_MspInit+0xe0>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ad2:	2320      	movs	r3, #32
 8000ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ade:	f107 0314 	add.w	r3, r7, #20
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	481d      	ldr	r0, [pc, #116]	; (8000b5c <HAL_ADC_MspInit+0xe4>)
 8000ae6:	f001 fc65 	bl	80023b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000aea:	4b1d      	ldr	r3, [pc, #116]	; (8000b60 <HAL_ADC_MspInit+0xe8>)
 8000aec:	4a1d      	ldr	r2, [pc, #116]	; (8000b64 <HAL_ADC_MspInit+0xec>)
 8000aee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000af0:	4b1b      	ldr	r3, [pc, #108]	; (8000b60 <HAL_ADC_MspInit+0xe8>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000af6:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <HAL_ADC_MspInit+0xe8>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000afc:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <HAL_ADC_MspInit+0xe8>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b02:	4b17      	ldr	r3, [pc, #92]	; (8000b60 <HAL_ADC_MspInit+0xe8>)
 8000b04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b08:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <HAL_ADC_MspInit+0xe8>)
 8000b0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b10:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b12:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <HAL_ADC_MspInit+0xe8>)
 8000b14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b18:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b1a:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <HAL_ADC_MspInit+0xe8>)
 8000b1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b20:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000b22:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <HAL_ADC_MspInit+0xe8>)
 8000b24:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b28:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b2a:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <HAL_ADC_MspInit+0xe8>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b30:	480b      	ldr	r0, [pc, #44]	; (8000b60 <HAL_ADC_MspInit+0xe8>)
 8000b32:	f001 f8d1 	bl	8001cd8 <HAL_DMA_Init>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8000b3c:	f7ff ff6c 	bl	8000a18 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4a07      	ldr	r2, [pc, #28]	; (8000b60 <HAL_ADC_MspInit+0xe8>)
 8000b44:	639a      	str	r2, [r3, #56]	; 0x38
 8000b46:	4a06      	ldr	r2, [pc, #24]	; (8000b60 <HAL_ADC_MspInit+0xe8>)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b4c:	bf00      	nop
 8000b4e:	3728      	adds	r7, #40	; 0x28
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40012000 	.word	0x40012000
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40020000 	.word	0x40020000
 8000b60:	20000638 	.word	0x20000638
 8000b64:	40026410 	.word	0x40026410

08000b68 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08a      	sub	sp, #40	; 0x28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a1b      	ldr	r2, [pc, #108]	; (8000bf4 <HAL_DAC_MspInit+0x8c>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d12f      	bne.n	8000bea <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	613b      	str	r3, [r7, #16]
 8000b8e:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <HAL_DAC_MspInit+0x90>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b92:	4a19      	ldr	r2, [pc, #100]	; (8000bf8 <HAL_DAC_MspInit+0x90>)
 8000b94:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000b98:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9a:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <HAL_DAC_MspInit+0x90>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <HAL_DAC_MspInit+0x90>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a12      	ldr	r2, [pc, #72]	; (8000bf8 <HAL_DAC_MspInit+0x90>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <HAL_DAC_MspInit+0x90>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000bc2:	2310      	movs	r3, #16
 8000bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4809      	ldr	r0, [pc, #36]	; (8000bfc <HAL_DAC_MspInit+0x94>)
 8000bd6:	f001 fbed 	bl	80023b4 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2100      	movs	r1, #0
 8000bde:	2036      	movs	r0, #54	; 0x36
 8000be0:	f000 fedd 	bl	800199e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000be4:	2036      	movs	r0, #54	; 0x36
 8000be6:	f000 fef6 	bl	80019d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000bea:	bf00      	nop
 8000bec:	3728      	adds	r7, #40	; 0x28
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40007400 	.word	0x40007400
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	40020000 	.word	0x40020000

08000c00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c10:	d115      	bne.n	8000c3e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <HAL_TIM_Base_MspInit+0x48>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	4a0b      	ldr	r2, [pc, #44]	; (8000c48 <HAL_TIM_Base_MspInit+0x48>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	6413      	str	r3, [r2, #64]	; 0x40
 8000c22:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <HAL_TIM_Base_MspInit+0x48>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2100      	movs	r1, #0
 8000c32:	201c      	movs	r0, #28
 8000c34:	f000 feb3 	bl	800199e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c38:	201c      	movs	r0, #28
 8000c3a:	f000 fecc 	bl	80019d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c3e:	bf00      	nop
 8000c40:	3710      	adds	r7, #16
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40023800 	.word	0x40023800

08000c4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08a      	sub	sp, #40	; 0x28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a28      	ldr	r2, [pc, #160]	; (8000d0c <HAL_UART_MspInit+0xc0>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d149      	bne.n	8000d02 <HAL_UART_MspInit+0xb6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	613b      	str	r3, [r7, #16]
 8000c72:	4b27      	ldr	r3, [pc, #156]	; (8000d10 <HAL_UART_MspInit+0xc4>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c76:	4a26      	ldr	r2, [pc, #152]	; (8000d10 <HAL_UART_MspInit+0xc4>)
 8000c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7e:	4b24      	ldr	r3, [pc, #144]	; (8000d10 <HAL_UART_MspInit+0xc4>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	4b20      	ldr	r3, [pc, #128]	; (8000d10 <HAL_UART_MspInit+0xc4>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a1f      	ldr	r2, [pc, #124]	; (8000d10 <HAL_UART_MspInit+0xc4>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b1d      	ldr	r3, [pc, #116]	; (8000d10 <HAL_UART_MspInit+0xc4>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <HAL_UART_MspInit+0xc4>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a18      	ldr	r2, [pc, #96]	; (8000d10 <HAL_UART_MspInit+0xc4>)
 8000cb0:	f043 0308 	orr.w	r3, r3, #8
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <HAL_UART_MspInit+0xc4>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0308 	and.w	r3, r3, #8
 8000cbe:	60bb      	str	r3, [r7, #8]
 8000cc0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cc2:	2304      	movs	r3, #4
 8000cc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cd2:	2307      	movs	r3, #7
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd6:	f107 0314 	add.w	r3, r7, #20
 8000cda:	4619      	mov	r1, r3
 8000cdc:	480d      	ldr	r0, [pc, #52]	; (8000d14 <HAL_UART_MspInit+0xc8>)
 8000cde:	f001 fb69 	bl	80023b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ce2:	2340      	movs	r3, #64	; 0x40
 8000ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cf2:	2307      	movs	r3, #7
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cf6:	f107 0314 	add.w	r3, r7, #20
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4806      	ldr	r0, [pc, #24]	; (8000d18 <HAL_UART_MspInit+0xcc>)
 8000cfe:	f001 fb59 	bl	80023b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d02:	bf00      	nop
 8000d04:	3728      	adds	r7, #40	; 0x28
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40004400 	.word	0x40004400
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40020000 	.word	0x40020000
 8000d18:	40020c00 	.word	0x40020c00

08000d1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d2e:	e7fe      	b.n	8000d2e <HardFault_Handler+0x4>

08000d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <MemManage_Handler+0x4>

08000d36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d3a:	e7fe      	b.n	8000d3a <BusFault_Handler+0x4>

08000d3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <UsageFault_Handler+0x4>

08000d42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d70:	f000 f918 	bl	8000fa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d7c:	4802      	ldr	r0, [pc, #8]	; (8000d88 <TIM2_IRQHandler+0x10>)
 8000d7e:	f003 fb00 	bl	8004382 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000698 	.word	0x20000698

08000d8c <OTG_FS_WKUP_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS wake-up interrupt through EXTI line 18.
  */
void OTG_FS_WKUP_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_WKUP_IRQn 0 */

  /* USER CODE END OTG_FS_WKUP_IRQn 0 */
  if ((&hpcd_USB_OTG_FS)->Init.low_power_enable) {
 8000d90:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <OTG_FS_WKUP_IRQHandler+0x40>)
 8000d92:	6a1b      	ldr	r3, [r3, #32]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d007      	beq.n	8000da8 <OTG_FS_WKUP_IRQHandler+0x1c>
    /* Reset SLEEPDEEP bit of Cortex System Control Register */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8000d98:	4b0d      	ldr	r3, [pc, #52]	; (8000dd0 <OTG_FS_WKUP_IRQHandler+0x44>)
 8000d9a:	691b      	ldr	r3, [r3, #16]
 8000d9c:	4a0c      	ldr	r2, [pc, #48]	; (8000dd0 <OTG_FS_WKUP_IRQHandler+0x44>)
 8000d9e:	f023 0306 	bic.w	r3, r3, #6
 8000da2:	6113      	str	r3, [r2, #16]
    SystemClock_Config();
 8000da4:	f7ff fbf8 	bl	8000598 <SystemClock_Config>
  }
  __HAL_PCD_UNGATE_PHYCLOCK(&hpcd_USB_OTG_FS);
 8000da8:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <OTG_FS_WKUP_IRQHandler+0x40>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a06      	ldr	r2, [pc, #24]	; (8000dcc <OTG_FS_WKUP_IRQHandler+0x40>)
 8000db4:	6812      	ldr	r2, [r2, #0]
 8000db6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8000dba:	f023 0301 	bic.w	r3, r3, #1
 8000dbe:	6013      	str	r3, [r2, #0]
  /* Clear EXTI pending bit */
  __HAL_USB_OTG_FS_WAKEUP_EXTI_CLEAR_FLAG();
 8000dc0:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <OTG_FS_WKUP_IRQHandler+0x48>)
 8000dc2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000dc6:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN OTG_FS_WKUP_IRQn 1 */

  /* USER CODE END OTG_FS_WKUP_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20001bec 	.word	0x20001bec
 8000dd0:	e000ed00 	.word	0xe000ed00
 8000dd4:	40013c00 	.word	0x40013c00

08000dd8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8000ddc:	4802      	ldr	r0, [pc, #8]	; (8000de8 <TIM6_DAC_IRQHandler+0x10>)
 8000dde:	f000 fe9c 	bl	8001b1a <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000264 	.word	0x20000264

08000dec <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000df0:	4802      	ldr	r0, [pc, #8]	; (8000dfc <DMA2_Stream0_IRQHandler+0x10>)
 8000df2:	f001 f877 	bl	8001ee4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000638 	.word	0x20000638

08000e00 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e04:	4802      	ldr	r0, [pc, #8]	; (8000e10 <OTG_FS_IRQHandler+0x10>)
 8000e06:	f001 fdd8 	bl	80029ba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20001bec 	.word	0x20001bec

08000e14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e1c:	4a14      	ldr	r2, [pc, #80]	; (8000e70 <_sbrk+0x5c>)
 8000e1e:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <_sbrk+0x60>)
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e28:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <_sbrk+0x64>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d102      	bne.n	8000e36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e30:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <_sbrk+0x64>)
 8000e32:	4a12      	ldr	r2, [pc, #72]	; (8000e7c <_sbrk+0x68>)
 8000e34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e36:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <_sbrk+0x64>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d207      	bcs.n	8000e54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e44:	f007 fed6 	bl	8008bf4 <__errno>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	230c      	movs	r3, #12
 8000e4c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e52:	e009      	b.n	8000e68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e54:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <_sbrk+0x64>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e5a:	4b07      	ldr	r3, [pc, #28]	; (8000e78 <_sbrk+0x64>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4413      	add	r3, r2
 8000e62:	4a05      	ldr	r2, [pc, #20]	; (8000e78 <_sbrk+0x64>)
 8000e64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e66:	68fb      	ldr	r3, [r7, #12]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3718      	adds	r7, #24
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20020000 	.word	0x20020000
 8000e74:	00000500 	.word	0x00000500
 8000e78:	2000020c 	.word	0x2000020c
 8000e7c:	20001ff8 	.word	0x20001ff8

08000e80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e84:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <SystemInit+0x28>)
 8000e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e8a:	4a07      	ldr	r2, [pc, #28]	; (8000ea8 <SystemInit+0x28>)
 8000e8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e94:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <SystemInit+0x28>)
 8000e96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e9a:	609a      	str	r2, [r3, #8]
#endif
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000eac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ee4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000eb0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000eb2:	e003      	b.n	8000ebc <LoopCopyDataInit>

08000eb4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000eb6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000eb8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000eba:	3104      	adds	r1, #4

08000ebc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ebc:	480b      	ldr	r0, [pc, #44]	; (8000eec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ebe:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ec0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ec2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ec4:	d3f6      	bcc.n	8000eb4 <CopyDataInit>
  ldr  r2, =_sbss
 8000ec6:	4a0b      	ldr	r2, [pc, #44]	; (8000ef4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ec8:	e002      	b.n	8000ed0 <LoopFillZerobss>

08000eca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000eca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ecc:	f842 3b04 	str.w	r3, [r2], #4

08000ed0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ed0:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ed2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ed4:	d3f9      	bcc.n	8000eca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ed6:	f7ff ffd3 	bl	8000e80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eda:	f007 fe91 	bl	8008c00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ede:	f7ff fb13 	bl	8000508 <main>
  bx  lr    
 8000ee2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ee4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000ee8:	08008e5c 	.word	0x08008e5c
  ldr  r0, =_sdata
 8000eec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ef0:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 8000ef4:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 8000ef8:	20001ff8 	.word	0x20001ff8

08000efc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000efc:	e7fe      	b.n	8000efc <ADC_IRQHandler>
	...

08000f00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f04:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <HAL_Init+0x40>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a0d      	ldr	r2, [pc, #52]	; (8000f40 <HAL_Init+0x40>)
 8000f0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f10:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <HAL_Init+0x40>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a0a      	ldr	r2, [pc, #40]	; (8000f40 <HAL_Init+0x40>)
 8000f16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f1c:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <HAL_Init+0x40>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a07      	ldr	r2, [pc, #28]	; (8000f40 <HAL_Init+0x40>)
 8000f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f28:	2003      	movs	r0, #3
 8000f2a:	f000 fd2d 	bl	8001988 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f000 f808 	bl	8000f44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f34:	f7ff fd78 	bl	8000a28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40023c00 	.word	0x40023c00

08000f44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <HAL_InitTick+0x54>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <HAL_InitTick+0x58>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	4619      	mov	r1, r3
 8000f56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 fd45 	bl	80019f2 <HAL_SYSTICK_Config>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e00e      	b.n	8000f90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2b0f      	cmp	r3, #15
 8000f76:	d80a      	bhi.n	8000f8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	6879      	ldr	r1, [r7, #4]
 8000f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f80:	f000 fd0d 	bl	800199e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f84:	4a06      	ldr	r2, [pc, #24]	; (8000fa0 <HAL_InitTick+0x5c>)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	e000      	b.n	8000f90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000000 	.word	0x20000000
 8000f9c:	20000008 	.word	0x20000008
 8000fa0:	20000004 	.word	0x20000004

08000fa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <HAL_IncTick+0x20>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	461a      	mov	r2, r3
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HAL_IncTick+0x24>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	4a04      	ldr	r2, [pc, #16]	; (8000fc8 <HAL_IncTick+0x24>)
 8000fb6:	6013      	str	r3, [r2, #0]
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	20000008 	.word	0x20000008
 8000fc8:	20000718 	.word	0x20000718

08000fcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd0:	4b03      	ldr	r3, [pc, #12]	; (8000fe0 <HAL_GetTick+0x14>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	20000718 	.word	0x20000718

08000fe4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fec:	f7ff ffee 	bl	8000fcc <HAL_GetTick>
 8000ff0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ffc:	d005      	beq.n	800100a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ffe:	4b09      	ldr	r3, [pc, #36]	; (8001024 <HAL_Delay+0x40>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	461a      	mov	r2, r3
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	4413      	add	r3, r2
 8001008:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800100a:	bf00      	nop
 800100c:	f7ff ffde 	bl	8000fcc <HAL_GetTick>
 8001010:	4602      	mov	r2, r0
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	68fa      	ldr	r2, [r7, #12]
 8001018:	429a      	cmp	r2, r3
 800101a:	d8f7      	bhi.n	800100c <HAL_Delay+0x28>
  {
  }
}
 800101c:	bf00      	nop
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000008 	.word	0x20000008

08001028 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001030:	2300      	movs	r3, #0
 8001032:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d101      	bne.n	800103e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e033      	b.n	80010a6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	2b00      	cmp	r3, #0
 8001044:	d109      	bne.n	800105a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff fd16 	bl	8000a78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	f003 0310 	and.w	r3, r3, #16
 8001062:	2b00      	cmp	r3, #0
 8001064:	d118      	bne.n	8001098 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800106e:	f023 0302 	bic.w	r3, r3, #2
 8001072:	f043 0202 	orr.w	r2, r3, #2
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f000 fa36 	bl	80014ec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	f023 0303 	bic.w	r3, r3, #3
 800108e:	f043 0201 	orr.w	r2, r3, #1
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	641a      	str	r2, [r3, #64]	; 0x40
 8001096:	e001      	b.n	800109c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2200      	movs	r2, #0
 80010a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80010bc:	2300      	movs	r3, #0
 80010be:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d101      	bne.n	80010ce <HAL_ADC_Start_DMA+0x1e>
 80010ca:	2302      	movs	r3, #2
 80010cc:	e0cc      	b.n	8001268 <HAL_ADC_Start_DMA+0x1b8>
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	2201      	movs	r2, #1
 80010d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	f003 0301 	and.w	r3, r3, #1
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d018      	beq.n	8001116 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	689a      	ldr	r2, [r3, #8]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f042 0201 	orr.w	r2, r2, #1
 80010f2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010f4:	4b5e      	ldr	r3, [pc, #376]	; (8001270 <HAL_ADC_Start_DMA+0x1c0>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a5e      	ldr	r2, [pc, #376]	; (8001274 <HAL_ADC_Start_DMA+0x1c4>)
 80010fa:	fba2 2303 	umull	r2, r3, r2, r3
 80010fe:	0c9a      	lsrs	r2, r3, #18
 8001100:	4613      	mov	r3, r2
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	4413      	add	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001108:	e002      	b.n	8001110 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	3b01      	subs	r3, #1
 800110e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d1f9      	bne.n	800110a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	2b01      	cmp	r3, #1
 8001122:	f040 80a0 	bne.w	8001266 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800112e:	f023 0301 	bic.w	r3, r3, #1
 8001132:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001144:	2b00      	cmp	r3, #0
 8001146:	d007      	beq.n	8001158 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001150:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001160:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001164:	d106      	bne.n	8001174 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116a:	f023 0206 	bic.w	r2, r3, #6
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	645a      	str	r2, [r3, #68]	; 0x44
 8001172:	e002      	b.n	800117a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2200      	movs	r2, #0
 8001178:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	2200      	movs	r2, #0
 800117e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001182:	4b3d      	ldr	r3, [pc, #244]	; (8001278 <HAL_ADC_Start_DMA+0x1c8>)
 8001184:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800118a:	4a3c      	ldr	r2, [pc, #240]	; (800127c <HAL_ADC_Start_DMA+0x1cc>)
 800118c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001192:	4a3b      	ldr	r2, [pc, #236]	; (8001280 <HAL_ADC_Start_DMA+0x1d0>)
 8001194:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800119a:	4a3a      	ldr	r2, [pc, #232]	; (8001284 <HAL_ADC_Start_DMA+0x1d4>)
 800119c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011a6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	685a      	ldr	r2, [r3, #4]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80011b6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	689a      	ldr	r2, [r3, #8]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011c6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	334c      	adds	r3, #76	; 0x4c
 80011d2:	4619      	mov	r1, r3
 80011d4:	68ba      	ldr	r2, [r7, #8]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f000 fe2c 	bl	8001e34 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f003 031f 	and.w	r3, r3, #31
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d12a      	bne.n	800123e <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a26      	ldr	r2, [pc, #152]	; (8001288 <HAL_ADC_Start_DMA+0x1d8>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d015      	beq.n	800121e <HAL_ADC_Start_DMA+0x16e>
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a25      	ldr	r2, [pc, #148]	; (800128c <HAL_ADC_Start_DMA+0x1dc>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d105      	bne.n	8001208 <HAL_ADC_Start_DMA+0x158>
 80011fc:	4b1e      	ldr	r3, [pc, #120]	; (8001278 <HAL_ADC_Start_DMA+0x1c8>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f003 031f 	and.w	r3, r3, #31
 8001204:	2b00      	cmp	r3, #0
 8001206:	d00a      	beq.n	800121e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a20      	ldr	r2, [pc, #128]	; (8001290 <HAL_ADC_Start_DMA+0x1e0>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d129      	bne.n	8001266 <HAL_ADC_Start_DMA+0x1b6>
 8001212:	4b19      	ldr	r3, [pc, #100]	; (8001278 <HAL_ADC_Start_DMA+0x1c8>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f003 031f 	and.w	r3, r3, #31
 800121a:	2b0f      	cmp	r3, #15
 800121c:	d823      	bhi.n	8001266 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d11c      	bne.n	8001266 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	689a      	ldr	r2, [r3, #8]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	e013      	b.n	8001266 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a11      	ldr	r2, [pc, #68]	; (8001288 <HAL_ADC_Start_DMA+0x1d8>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d10e      	bne.n	8001266 <HAL_ADC_Start_DMA+0x1b6>
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d107      	bne.n	8001266 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	689a      	ldr	r2, [r3, #8]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001264:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001266:	2300      	movs	r3, #0
}
 8001268:	4618      	mov	r0, r3
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000000 	.word	0x20000000
 8001274:	431bde83 	.word	0x431bde83
 8001278:	40012300 	.word	0x40012300
 800127c:	080016e5 	.word	0x080016e5
 8001280:	0800179f 	.word	0x0800179f
 8001284:	080017bb 	.word	0x080017bb
 8001288:	40012000 	.word	0x40012000
 800128c:	40012100 	.word	0x40012100
 8001290:	40012200 	.word	0x40012200

08001294 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d101      	bne.n	80012c4 <HAL_ADC_ConfigChannel+0x1c>
 80012c0:	2302      	movs	r3, #2
 80012c2:	e105      	b.n	80014d0 <HAL_ADC_ConfigChannel+0x228>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2201      	movs	r2, #1
 80012c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b09      	cmp	r3, #9
 80012d2:	d925      	bls.n	8001320 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	68d9      	ldr	r1, [r3, #12]
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	b29b      	uxth	r3, r3
 80012e0:	461a      	mov	r2, r3
 80012e2:	4613      	mov	r3, r2
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	4413      	add	r3, r2
 80012e8:	3b1e      	subs	r3, #30
 80012ea:	2207      	movs	r2, #7
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	43da      	mvns	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	400a      	ands	r2, r1
 80012f8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	68d9      	ldr	r1, [r3, #12]
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	689a      	ldr	r2, [r3, #8]
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	b29b      	uxth	r3, r3
 800130a:	4618      	mov	r0, r3
 800130c:	4603      	mov	r3, r0
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	4403      	add	r3, r0
 8001312:	3b1e      	subs	r3, #30
 8001314:	409a      	lsls	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	430a      	orrs	r2, r1
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	e022      	b.n	8001366 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	6919      	ldr	r1, [r3, #16]
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	b29b      	uxth	r3, r3
 800132c:	461a      	mov	r2, r3
 800132e:	4613      	mov	r3, r2
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	4413      	add	r3, r2
 8001334:	2207      	movs	r2, #7
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43da      	mvns	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	400a      	ands	r2, r1
 8001342:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	6919      	ldr	r1, [r3, #16]
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	689a      	ldr	r2, [r3, #8]
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	b29b      	uxth	r3, r3
 8001354:	4618      	mov	r0, r3
 8001356:	4603      	mov	r3, r0
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	4403      	add	r3, r0
 800135c:	409a      	lsls	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	430a      	orrs	r2, r1
 8001364:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	2b06      	cmp	r3, #6
 800136c:	d824      	bhi.n	80013b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	4613      	mov	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4413      	add	r3, r2
 800137e:	3b05      	subs	r3, #5
 8001380:	221f      	movs	r2, #31
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43da      	mvns	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	400a      	ands	r2, r1
 800138e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	b29b      	uxth	r3, r3
 800139c:	4618      	mov	r0, r3
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685a      	ldr	r2, [r3, #4]
 80013a2:	4613      	mov	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	4413      	add	r3, r2
 80013a8:	3b05      	subs	r3, #5
 80013aa:	fa00 f203 	lsl.w	r2, r0, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	430a      	orrs	r2, r1
 80013b4:	635a      	str	r2, [r3, #52]	; 0x34
 80013b6:	e04c      	b.n	8001452 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	2b0c      	cmp	r3, #12
 80013be:	d824      	bhi.n	800140a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685a      	ldr	r2, [r3, #4]
 80013ca:	4613      	mov	r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	4413      	add	r3, r2
 80013d0:	3b23      	subs	r3, #35	; 0x23
 80013d2:	221f      	movs	r2, #31
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	43da      	mvns	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	400a      	ands	r2, r1
 80013e0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	4618      	mov	r0, r3
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685a      	ldr	r2, [r3, #4]
 80013f4:	4613      	mov	r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	4413      	add	r3, r2
 80013fa:	3b23      	subs	r3, #35	; 0x23
 80013fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	430a      	orrs	r2, r1
 8001406:	631a      	str	r2, [r3, #48]	; 0x30
 8001408:	e023      	b.n	8001452 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685a      	ldr	r2, [r3, #4]
 8001414:	4613      	mov	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	4413      	add	r3, r2
 800141a:	3b41      	subs	r3, #65	; 0x41
 800141c:	221f      	movs	r2, #31
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43da      	mvns	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	400a      	ands	r2, r1
 800142a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	b29b      	uxth	r3, r3
 8001438:	4618      	mov	r0, r3
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685a      	ldr	r2, [r3, #4]
 800143e:	4613      	mov	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4413      	add	r3, r2
 8001444:	3b41      	subs	r3, #65	; 0x41
 8001446:	fa00 f203 	lsl.w	r2, r0, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	430a      	orrs	r2, r1
 8001450:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001452:	4b22      	ldr	r3, [pc, #136]	; (80014dc <HAL_ADC_ConfigChannel+0x234>)
 8001454:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a21      	ldr	r2, [pc, #132]	; (80014e0 <HAL_ADC_ConfigChannel+0x238>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d109      	bne.n	8001474 <HAL_ADC_ConfigChannel+0x1cc>
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b12      	cmp	r3, #18
 8001466:	d105      	bne.n	8001474 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a19      	ldr	r2, [pc, #100]	; (80014e0 <HAL_ADC_ConfigChannel+0x238>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d123      	bne.n	80014c6 <HAL_ADC_ConfigChannel+0x21e>
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2b10      	cmp	r3, #16
 8001484:	d003      	beq.n	800148e <HAL_ADC_ConfigChannel+0x1e6>
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2b11      	cmp	r3, #17
 800148c:	d11b      	bne.n	80014c6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2b10      	cmp	r3, #16
 80014a0:	d111      	bne.n	80014c6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014a2:	4b10      	ldr	r3, [pc, #64]	; (80014e4 <HAL_ADC_ConfigChannel+0x23c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a10      	ldr	r2, [pc, #64]	; (80014e8 <HAL_ADC_ConfigChannel+0x240>)
 80014a8:	fba2 2303 	umull	r2, r3, r2, r3
 80014ac:	0c9a      	lsrs	r2, r3, #18
 80014ae:	4613      	mov	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	4413      	add	r3, r2
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80014b8:	e002      	b.n	80014c0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	3b01      	subs	r3, #1
 80014be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1f9      	bne.n	80014ba <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80014ce:	2300      	movs	r3, #0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3714      	adds	r7, #20
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	40012300 	.word	0x40012300
 80014e0:	40012000 	.word	0x40012000
 80014e4:	20000000 	.word	0x20000000
 80014e8:	431bde83 	.word	0x431bde83

080014ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014f4:	4b79      	ldr	r3, [pc, #484]	; (80016dc <ADC_Init+0x1f0>)
 80014f6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	685a      	ldr	r2, [r3, #4]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	431a      	orrs	r2, r3
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	685a      	ldr	r2, [r3, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001520:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	6859      	ldr	r1, [r3, #4]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	691b      	ldr	r3, [r3, #16]
 800152c:	021a      	lsls	r2, r3, #8
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	430a      	orrs	r2, r1
 8001534:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	685a      	ldr	r2, [r3, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001544:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6859      	ldr	r1, [r3, #4]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	430a      	orrs	r2, r1
 8001556:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	689a      	ldr	r2, [r3, #8]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001566:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6899      	ldr	r1, [r3, #8]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68da      	ldr	r2, [r3, #12]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	430a      	orrs	r2, r1
 8001578:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800157e:	4a58      	ldr	r2, [pc, #352]	; (80016e0 <ADC_Init+0x1f4>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d022      	beq.n	80015ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	689a      	ldr	r2, [r3, #8]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001592:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	6899      	ldr	r1, [r3, #8]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	430a      	orrs	r2, r1
 80015a4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	689a      	ldr	r2, [r3, #8]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	6899      	ldr	r1, [r3, #8]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	430a      	orrs	r2, r1
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	e00f      	b.n	80015ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	689a      	ldr	r2, [r3, #8]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f022 0202 	bic.w	r2, r2, #2
 80015f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	6899      	ldr	r1, [r3, #8]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	7e1b      	ldrb	r3, [r3, #24]
 8001604:	005a      	lsls	r2, r3, #1
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	430a      	orrs	r2, r1
 800160c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d01b      	beq.n	8001650 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	685a      	ldr	r2, [r3, #4]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001626:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	685a      	ldr	r2, [r3, #4]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001636:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	6859      	ldr	r1, [r3, #4]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001642:	3b01      	subs	r3, #1
 8001644:	035a      	lsls	r2, r3, #13
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	430a      	orrs	r2, r1
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	e007      	b.n	8001660 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	685a      	ldr	r2, [r3, #4]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800165e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800166e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	3b01      	subs	r3, #1
 800167c:	051a      	lsls	r2, r3, #20
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	430a      	orrs	r2, r1
 8001684:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	689a      	ldr	r2, [r3, #8]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001694:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	6899      	ldr	r1, [r3, #8]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016a2:	025a      	lsls	r2, r3, #9
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	430a      	orrs	r2, r1
 80016aa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	689a      	ldr	r2, [r3, #8]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6899      	ldr	r1, [r3, #8]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	695b      	ldr	r3, [r3, #20]
 80016c6:	029a      	lsls	r2, r3, #10
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	430a      	orrs	r2, r1
 80016ce:	609a      	str	r2, [r3, #8]
}
 80016d0:	bf00      	nop
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	40012300 	.word	0x40012300
 80016e0:	0f000001 	.word	0x0f000001

080016e4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016f0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d13c      	bne.n	8001778 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d12b      	bne.n	8001770 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800171c:	2b00      	cmp	r3, #0
 800171e:	d127      	bne.n	8001770 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001726:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800172a:	2b00      	cmp	r3, #0
 800172c:	d006      	beq.n	800173c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001738:	2b00      	cmp	r3, #0
 800173a:	d119      	bne.n	8001770 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	685a      	ldr	r2, [r3, #4]
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f022 0220 	bic.w	r2, r2, #32
 800174a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001750:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d105      	bne.n	8001770 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001768:	f043 0201 	orr.w	r2, r3, #1
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001770:	68f8      	ldr	r0, [r7, #12]
 8001772:	f7fe feb9 	bl	80004e8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001776:	e00e      	b.n	8001796 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177c:	f003 0310 	and.w	r3, r3, #16
 8001780:	2b00      	cmp	r3, #0
 8001782:	d003      	beq.n	800178c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001784:	68f8      	ldr	r0, [r7, #12]
 8001786:	f7ff fd85 	bl	8001294 <HAL_ADC_ErrorCallback>
}
 800178a:	e004      	b.n	8001796 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	4798      	blx	r3
}
 8001796:	bf00      	nop
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b084      	sub	sp, #16
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017aa:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80017ac:	68f8      	ldr	r0, [r7, #12]
 80017ae:	f7fe fe8b 	bl	80004c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017b2:	bf00      	nop
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b084      	sub	sp, #16
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017c6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2240      	movs	r2, #64	; 0x40
 80017cc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d2:	f043 0204 	orr.w	r2, r3, #4
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	f7ff fd5a 	bl	8001294 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017e0:	bf00      	nop
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f8:	4b0c      	ldr	r3, [pc, #48]	; (800182c <__NVIC_SetPriorityGrouping+0x44>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001804:	4013      	ands	r3, r2
 8001806:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001810:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800181a:	4a04      	ldr	r2, [pc, #16]	; (800182c <__NVIC_SetPriorityGrouping+0x44>)
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	60d3      	str	r3, [r2, #12]
}
 8001820:	bf00      	nop
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001834:	4b04      	ldr	r3, [pc, #16]	; (8001848 <__NVIC_GetPriorityGrouping+0x18>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	0a1b      	lsrs	r3, r3, #8
 800183a:	f003 0307 	and.w	r3, r3, #7
}
 800183e:	4618      	mov	r0, r3
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185a:	2b00      	cmp	r3, #0
 800185c:	db0b      	blt.n	8001876 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	f003 021f 	and.w	r2, r3, #31
 8001864:	4907      	ldr	r1, [pc, #28]	; (8001884 <__NVIC_EnableIRQ+0x38>)
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	095b      	lsrs	r3, r3, #5
 800186c:	2001      	movs	r0, #1
 800186e:	fa00 f202 	lsl.w	r2, r0, r2
 8001872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	e000e100 	.word	0xe000e100

08001888 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	6039      	str	r1, [r7, #0]
 8001892:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001898:	2b00      	cmp	r3, #0
 800189a:	db0a      	blt.n	80018b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	490c      	ldr	r1, [pc, #48]	; (80018d4 <__NVIC_SetPriority+0x4c>)
 80018a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a6:	0112      	lsls	r2, r2, #4
 80018a8:	b2d2      	uxtb	r2, r2
 80018aa:	440b      	add	r3, r1
 80018ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018b0:	e00a      	b.n	80018c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	4908      	ldr	r1, [pc, #32]	; (80018d8 <__NVIC_SetPriority+0x50>)
 80018b8:	79fb      	ldrb	r3, [r7, #7]
 80018ba:	f003 030f 	and.w	r3, r3, #15
 80018be:	3b04      	subs	r3, #4
 80018c0:	0112      	lsls	r2, r2, #4
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	440b      	add	r3, r1
 80018c6:	761a      	strb	r2, [r3, #24]
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	e000e100 	.word	0xe000e100
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018dc:	b480      	push	{r7}
 80018de:	b089      	sub	sp, #36	; 0x24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	f1c3 0307 	rsb	r3, r3, #7
 80018f6:	2b04      	cmp	r3, #4
 80018f8:	bf28      	it	cs
 80018fa:	2304      	movcs	r3, #4
 80018fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	3304      	adds	r3, #4
 8001902:	2b06      	cmp	r3, #6
 8001904:	d902      	bls.n	800190c <NVIC_EncodePriority+0x30>
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	3b03      	subs	r3, #3
 800190a:	e000      	b.n	800190e <NVIC_EncodePriority+0x32>
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001910:	f04f 32ff 	mov.w	r2, #4294967295
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43da      	mvns	r2, r3
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	401a      	ands	r2, r3
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001924:	f04f 31ff 	mov.w	r1, #4294967295
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	fa01 f303 	lsl.w	r3, r1, r3
 800192e:	43d9      	mvns	r1, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001934:	4313      	orrs	r3, r2
         );
}
 8001936:	4618      	mov	r0, r3
 8001938:	3724      	adds	r7, #36	; 0x24
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
	...

08001944 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3b01      	subs	r3, #1
 8001950:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001954:	d301      	bcc.n	800195a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001956:	2301      	movs	r3, #1
 8001958:	e00f      	b.n	800197a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800195a:	4a0a      	ldr	r2, [pc, #40]	; (8001984 <SysTick_Config+0x40>)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3b01      	subs	r3, #1
 8001960:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001962:	210f      	movs	r1, #15
 8001964:	f04f 30ff 	mov.w	r0, #4294967295
 8001968:	f7ff ff8e 	bl	8001888 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800196c:	4b05      	ldr	r3, [pc, #20]	; (8001984 <SysTick_Config+0x40>)
 800196e:	2200      	movs	r2, #0
 8001970:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001972:	4b04      	ldr	r3, [pc, #16]	; (8001984 <SysTick_Config+0x40>)
 8001974:	2207      	movs	r2, #7
 8001976:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	e000e010 	.word	0xe000e010

08001988 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7ff ff29 	bl	80017e8 <__NVIC_SetPriorityGrouping>
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800199e:	b580      	push	{r7, lr}
 80019a0:	b086      	sub	sp, #24
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	4603      	mov	r3, r0
 80019a6:	60b9      	str	r1, [r7, #8]
 80019a8:	607a      	str	r2, [r7, #4]
 80019aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019b0:	f7ff ff3e 	bl	8001830 <__NVIC_GetPriorityGrouping>
 80019b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	68b9      	ldr	r1, [r7, #8]
 80019ba:	6978      	ldr	r0, [r7, #20]
 80019bc:	f7ff ff8e 	bl	80018dc <NVIC_EncodePriority>
 80019c0:	4602      	mov	r2, r0
 80019c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019c6:	4611      	mov	r1, r2
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff ff5d 	bl	8001888 <__NVIC_SetPriority>
}
 80019ce:	bf00      	nop
 80019d0:	3718      	adds	r7, #24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b082      	sub	sp, #8
 80019da:	af00      	add	r7, sp, #0
 80019dc:	4603      	mov	r3, r0
 80019de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff ff31 	bl	800184c <__NVIC_EnableIRQ>
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b082      	sub	sp, #8
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff ffa2 	bl	8001944 <SysTick_Config>
 8001a00:	4603      	mov	r3, r0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e014      	b.n	8001a46 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	791b      	ldrb	r3, [r3, #4]
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d105      	bne.n	8001a32 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f7ff f89b 	bl	8000b68 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2202      	movs	r2, #2
 8001a36:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2201      	movs	r2, #1
 8001a42:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b085      	sub	sp, #20
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
 8001a56:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	795b      	ldrb	r3, [r3, #5]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d101      	bne.n	8001a6c <HAL_DAC_Start+0x1e>
 8001a68:	2302      	movs	r3, #2
 8001a6a:	e050      	b.n	8001b0e <HAL_DAC_Start+0xc0>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2202      	movs	r2, #2
 8001a76:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6819      	ldr	r1, [r3, #0]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	409a      	lsls	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d11a      	bne.n	8001ac8 <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001aa8:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2b04      	cmp	r3, #4
 8001aae:	d127      	bne.n	8001b00 <HAL_DAC_Start+0xb2>
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	2b38      	cmp	r3, #56	; 0x38
 8001ab4:	d124      	bne.n	8001b00 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f042 0201 	orr.w	r2, r2, #1
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	e01b      	b.n	8001b00 <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ad2:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8001ade:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001ae6:	d10b      	bne.n	8001b00 <HAL_DAC_Start+0xb2>
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8001aee:	d107      	bne.n	8001b00 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	685a      	ldr	r2, [r3, #4]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f042 0202 	orr.w	r2, r2, #2
 8001afe:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3714      	adds	r7, #20
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b30:	d118      	bne.n	8001b64 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2204      	movs	r2, #4
 8001b36:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	f043 0201 	orr.w	r2, r3, #1
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b4c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b5c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 f825 	bl	8001bae <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b72:	d118      	bne.n	8001ba6 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2204      	movs	r2, #4
 8001b78:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	f043 0202 	orr.w	r2, r3, #2
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001b8e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001b9e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f000 f88e 	bl	8001cc2 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8001ba6:	bf00      	nop
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b087      	sub	sp, #28
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	60f8      	str	r0, [r7, #12]
 8001bca:	60b9      	str	r1, [r7, #8]
 8001bcc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	617b      	str	r3, [r7, #20]
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	795b      	ldrb	r3, [r3, #5]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d101      	bne.n	8001be2 <HAL_DAC_ConfigChannel+0x20>
 8001bde:	2302      	movs	r3, #2
 8001be0:	e036      	b.n	8001c50 <HAL_DAC_ConfigChannel+0x8e>
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2201      	movs	r2, #1
 8001be6:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2202      	movs	r2, #2
 8001bec:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001bf6:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	43db      	mvns	r3, r3
 8001c02:	697a      	ldr	r2, [r7, #20]
 8001c04:	4013      	ands	r3, r2
 8001c06:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	697a      	ldr	r2, [r7, #20]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	697a      	ldr	r2, [r7, #20]
 8001c28:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6819      	ldr	r1, [r3, #0]
 8001c30:	22c0      	movs	r2, #192	; 0xc0
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	43da      	mvns	r2, r3
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	400a      	ands	r2, r1
 8001c40:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2201      	movs	r2, #1
 8001c46:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	371c      	adds	r7, #28
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <HAL_DACEx_TriangleWaveGenerate>:
  *            @arg DAC_TRIANGLEAMPLITUDE_2047: Select max triangle amplitude of 2047
  *            @arg DAC_TRIANGLEAMPLITUDE_4095: Select max triangle amplitude of 4095                               
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_TriangleWaveGenerate(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Amplitude)
{  
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	795b      	ldrb	r3, [r3, #5]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d101      	bne.n	8001c74 <HAL_DACEx_TriangleWaveGenerate+0x18>
 8001c70:	2302      	movs	r3, #2
 8001c72:	e020      	b.n	8001cb6 <HAL_DACEx_TriangleWaveGenerate+0x5a>
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2201      	movs	r2, #1
 8001c78:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2202      	movs	r2, #2
 8001c7e:	711a      	strb	r2, [r3, #4]
  
  /* Enable the selected wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, (DAC_CR_WAVE1 | DAC_CR_MAMP1) << Channel, (DAC_CR_WAVE1_1 | Amplitude) << Channel);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c90:	43db      	mvns	r3, r3
 8001c92:	ea02 0103 	and.w	r1, r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	409a      	lsls	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2201      	movs	r2, #1
 8001cac:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3714      	adds	r7, #20
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b083      	sub	sp, #12
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
	...

08001cd8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ce4:	f7ff f972 	bl	8000fcc <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d101      	bne.n	8001cf4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e099      	b.n	8001e28 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2202      	movs	r2, #2
 8001d00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 0201 	bic.w	r2, r2, #1
 8001d12:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d14:	e00f      	b.n	8001d36 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d16:	f7ff f959 	bl	8000fcc <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b05      	cmp	r3, #5
 8001d22:	d908      	bls.n	8001d36 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2220      	movs	r2, #32
 8001d28:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2203      	movs	r2, #3
 8001d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e078      	b.n	8001e28 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d1e8      	bne.n	8001d16 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	4b38      	ldr	r3, [pc, #224]	; (8001e30 <HAL_DMA_Init+0x158>)
 8001d50:	4013      	ands	r3, r2
 8001d52:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685a      	ldr	r2, [r3, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d62:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8c:	2b04      	cmp	r3, #4
 8001d8e:	d107      	bne.n	8001da0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	697a      	ldr	r2, [r7, #20]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	f023 0307 	bic.w	r3, r3, #7
 8001db6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	d117      	bne.n	8001dfa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dce:	697a      	ldr	r2, [r7, #20]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d00e      	beq.n	8001dfa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 fa6f 	bl	80022c0 <DMA_CheckFifoParam>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d008      	beq.n	8001dfa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2240      	movs	r2, #64	; 0x40
 8001dec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2201      	movs	r2, #1
 8001df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001df6:	2301      	movs	r3, #1
 8001df8:	e016      	b.n	8001e28 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 fa26 	bl	8002254 <DMA_CalcBaseAndBitshift>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e10:	223f      	movs	r2, #63	; 0x3f
 8001e12:	409a      	lsls	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3718      	adds	r7, #24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	f010803f 	.word	0xf010803f

08001e34 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
 8001e40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e42:	2300      	movs	r3, #0
 8001e44:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d101      	bne.n	8001e5a <HAL_DMA_Start_IT+0x26>
 8001e56:	2302      	movs	r3, #2
 8001e58:	e040      	b.n	8001edc <HAL_DMA_Start_IT+0xa8>
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d12f      	bne.n	8001ece <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2202      	movs	r2, #2
 8001e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	68b9      	ldr	r1, [r7, #8]
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	f000 f9b8 	bl	80021f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e8c:	223f      	movs	r2, #63	; 0x3f
 8001e8e:	409a      	lsls	r2, r3
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f042 0216 	orr.w	r2, r2, #22
 8001ea2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d007      	beq.n	8001ebc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f042 0208 	orr.w	r2, r2, #8
 8001eba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f042 0201 	orr.w	r2, r2, #1
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	e005      	b.n	8001eda <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001eec:	2300      	movs	r3, #0
 8001eee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ef0:	4b92      	ldr	r3, [pc, #584]	; (800213c <HAL_DMA_IRQHandler+0x258>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a92      	ldr	r2, [pc, #584]	; (8002140 <HAL_DMA_IRQHandler+0x25c>)
 8001ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8001efa:	0a9b      	lsrs	r3, r3, #10
 8001efc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f02:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0e:	2208      	movs	r2, #8
 8001f10:	409a      	lsls	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	4013      	ands	r3, r2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d01a      	beq.n	8001f50 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d013      	beq.n	8001f50 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f022 0204 	bic.w	r2, r2, #4
 8001f36:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f3c:	2208      	movs	r2, #8
 8001f3e:	409a      	lsls	r2, r3
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f48:	f043 0201 	orr.w	r2, r3, #1
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f54:	2201      	movs	r2, #1
 8001f56:	409a      	lsls	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d012      	beq.n	8001f86 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00b      	beq.n	8001f86 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f72:	2201      	movs	r2, #1
 8001f74:	409a      	lsls	r2, r3
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f7e:	f043 0202 	orr.w	r2, r3, #2
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f8a:	2204      	movs	r2, #4
 8001f8c:	409a      	lsls	r2, r3
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	4013      	ands	r3, r2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d012      	beq.n	8001fbc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00b      	beq.n	8001fbc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa8:	2204      	movs	r2, #4
 8001faa:	409a      	lsls	r2, r3
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb4:	f043 0204 	orr.w	r2, r3, #4
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc0:	2210      	movs	r2, #16
 8001fc2:	409a      	lsls	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d043      	beq.n	8002054 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0308 	and.w	r3, r3, #8
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d03c      	beq.n	8002054 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fde:	2210      	movs	r2, #16
 8001fe0:	409a      	lsls	r2, r3
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d018      	beq.n	8002026 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d108      	bne.n	8002014 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	2b00      	cmp	r3, #0
 8002008:	d024      	beq.n	8002054 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	4798      	blx	r3
 8002012:	e01f      	b.n	8002054 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002018:	2b00      	cmp	r3, #0
 800201a:	d01b      	beq.n	8002054 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	4798      	blx	r3
 8002024:	e016      	b.n	8002054 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002030:	2b00      	cmp	r3, #0
 8002032:	d107      	bne.n	8002044 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 0208 	bic.w	r2, r2, #8
 8002042:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002048:	2b00      	cmp	r3, #0
 800204a:	d003      	beq.n	8002054 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002058:	2220      	movs	r2, #32
 800205a:	409a      	lsls	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4013      	ands	r3, r2
 8002060:	2b00      	cmp	r3, #0
 8002062:	f000 808e 	beq.w	8002182 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0310 	and.w	r3, r3, #16
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 8086 	beq.w	8002182 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800207a:	2220      	movs	r2, #32
 800207c:	409a      	lsls	r2, r3
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b05      	cmp	r3, #5
 800208c:	d136      	bne.n	80020fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 0216 	bic.w	r2, r2, #22
 800209c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	695a      	ldr	r2, [r3, #20]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d103      	bne.n	80020be <HAL_DMA_IRQHandler+0x1da>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d007      	beq.n	80020ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 0208 	bic.w	r2, r2, #8
 80020cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d2:	223f      	movs	r2, #63	; 0x3f
 80020d4:	409a      	lsls	r2, r3
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d07d      	beq.n	80021ee <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	4798      	blx	r3
        }
        return;
 80020fa:	e078      	b.n	80021ee <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d01c      	beq.n	8002144 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d108      	bne.n	800212a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211c:	2b00      	cmp	r3, #0
 800211e:	d030      	beq.n	8002182 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	4798      	blx	r3
 8002128:	e02b      	b.n	8002182 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800212e:	2b00      	cmp	r3, #0
 8002130:	d027      	beq.n	8002182 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	4798      	blx	r3
 800213a:	e022      	b.n	8002182 <HAL_DMA_IRQHandler+0x29e>
 800213c:	20000000 	.word	0x20000000
 8002140:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800214e:	2b00      	cmp	r3, #0
 8002150:	d10f      	bne.n	8002172 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 0210 	bic.w	r2, r2, #16
 8002160:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002186:	2b00      	cmp	r3, #0
 8002188:	d032      	beq.n	80021f0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b00      	cmp	r3, #0
 8002194:	d022      	beq.n	80021dc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2205      	movs	r2, #5
 800219a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 0201 	bic.w	r2, r2, #1
 80021ac:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	3301      	adds	r3, #1
 80021b2:	60bb      	str	r3, [r7, #8]
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d307      	bcc.n	80021ca <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1f2      	bne.n	80021ae <HAL_DMA_IRQHandler+0x2ca>
 80021c8:	e000      	b.n	80021cc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80021ca:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d005      	beq.n	80021f0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	4798      	blx	r3
 80021ec:	e000      	b.n	80021f0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80021ee:	bf00      	nop
    }
  }
}
 80021f0:	3718      	adds	r7, #24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop

080021f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
 8002204:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002214:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	2b40      	cmp	r3, #64	; 0x40
 8002224:	d108      	bne.n	8002238 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68ba      	ldr	r2, [r7, #8]
 8002234:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002236:	e007      	b.n	8002248 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68ba      	ldr	r2, [r7, #8]
 800223e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	60da      	str	r2, [r3, #12]
}
 8002248:	bf00      	nop
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	b2db      	uxtb	r3, r3
 8002262:	3b10      	subs	r3, #16
 8002264:	4a14      	ldr	r2, [pc, #80]	; (80022b8 <DMA_CalcBaseAndBitshift+0x64>)
 8002266:	fba2 2303 	umull	r2, r3, r2, r3
 800226a:	091b      	lsrs	r3, r3, #4
 800226c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800226e:	4a13      	ldr	r2, [pc, #76]	; (80022bc <DMA_CalcBaseAndBitshift+0x68>)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4413      	add	r3, r2
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	461a      	mov	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2b03      	cmp	r3, #3
 8002280:	d909      	bls.n	8002296 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800228a:	f023 0303 	bic.w	r3, r3, #3
 800228e:	1d1a      	adds	r2, r3, #4
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	659a      	str	r2, [r3, #88]	; 0x58
 8002294:	e007      	b.n	80022a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800229e:	f023 0303 	bic.w	r3, r3, #3
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	aaaaaaab 	.word	0xaaaaaaab
 80022bc:	08008e44 	.word	0x08008e44

080022c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022c8:	2300      	movs	r3, #0
 80022ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d11f      	bne.n	800231a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	2b03      	cmp	r3, #3
 80022de:	d855      	bhi.n	800238c <DMA_CheckFifoParam+0xcc>
 80022e0:	a201      	add	r2, pc, #4	; (adr r2, 80022e8 <DMA_CheckFifoParam+0x28>)
 80022e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e6:	bf00      	nop
 80022e8:	080022f9 	.word	0x080022f9
 80022ec:	0800230b 	.word	0x0800230b
 80022f0:	080022f9 	.word	0x080022f9
 80022f4:	0800238d 	.word	0x0800238d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d045      	beq.n	8002390 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002308:	e042      	b.n	8002390 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002312:	d13f      	bne.n	8002394 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002318:	e03c      	b.n	8002394 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002322:	d121      	bne.n	8002368 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	2b03      	cmp	r3, #3
 8002328:	d836      	bhi.n	8002398 <DMA_CheckFifoParam+0xd8>
 800232a:	a201      	add	r2, pc, #4	; (adr r2, 8002330 <DMA_CheckFifoParam+0x70>)
 800232c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002330:	08002341 	.word	0x08002341
 8002334:	08002347 	.word	0x08002347
 8002338:	08002341 	.word	0x08002341
 800233c:	08002359 	.word	0x08002359
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	73fb      	strb	r3, [r7, #15]
      break;
 8002344:	e02f      	b.n	80023a6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d024      	beq.n	800239c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002356:	e021      	b.n	800239c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002360:	d11e      	bne.n	80023a0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002366:	e01b      	b.n	80023a0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	2b02      	cmp	r3, #2
 800236c:	d902      	bls.n	8002374 <DMA_CheckFifoParam+0xb4>
 800236e:	2b03      	cmp	r3, #3
 8002370:	d003      	beq.n	800237a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002372:	e018      	b.n	80023a6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	73fb      	strb	r3, [r7, #15]
      break;
 8002378:	e015      	b.n	80023a6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00e      	beq.n	80023a4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	73fb      	strb	r3, [r7, #15]
      break;
 800238a:	e00b      	b.n	80023a4 <DMA_CheckFifoParam+0xe4>
      break;
 800238c:	bf00      	nop
 800238e:	e00a      	b.n	80023a6 <DMA_CheckFifoParam+0xe6>
      break;
 8002390:	bf00      	nop
 8002392:	e008      	b.n	80023a6 <DMA_CheckFifoParam+0xe6>
      break;
 8002394:	bf00      	nop
 8002396:	e006      	b.n	80023a6 <DMA_CheckFifoParam+0xe6>
      break;
 8002398:	bf00      	nop
 800239a:	e004      	b.n	80023a6 <DMA_CheckFifoParam+0xe6>
      break;
 800239c:	bf00      	nop
 800239e:	e002      	b.n	80023a6 <DMA_CheckFifoParam+0xe6>
      break;   
 80023a0:	bf00      	nop
 80023a2:	e000      	b.n	80023a6 <DMA_CheckFifoParam+0xe6>
      break;
 80023a4:	bf00      	nop
    }
  } 
  
  return status; 
 80023a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b089      	sub	sp, #36	; 0x24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023be:	2300      	movs	r3, #0
 80023c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023c2:	2300      	movs	r3, #0
 80023c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023c6:	2300      	movs	r3, #0
 80023c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ca:	2300      	movs	r3, #0
 80023cc:	61fb      	str	r3, [r7, #28]
 80023ce:	e16b      	b.n	80026a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023d0:	2201      	movs	r2, #1
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	697a      	ldr	r2, [r7, #20]
 80023e0:	4013      	ands	r3, r2
 80023e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	f040 815a 	bne.w	80026a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d00b      	beq.n	800240e <HAL_GPIO_Init+0x5a>
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d007      	beq.n	800240e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002402:	2b11      	cmp	r3, #17
 8002404:	d003      	beq.n	800240e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b12      	cmp	r3, #18
 800240c:	d130      	bne.n	8002470 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	2203      	movs	r2, #3
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43db      	mvns	r3, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4013      	ands	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	68da      	ldr	r2, [r3, #12]
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4313      	orrs	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002444:	2201      	movs	r2, #1
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	091b      	lsrs	r3, r3, #4
 800245a:	f003 0201 	and.w	r2, r3, #1
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4313      	orrs	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	2203      	movs	r2, #3
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	43db      	mvns	r3, r3
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4013      	ands	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4313      	orrs	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d003      	beq.n	80024b0 <HAL_GPIO_Init+0xfc>
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2b12      	cmp	r3, #18
 80024ae:	d123      	bne.n	80024f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	08da      	lsrs	r2, r3, #3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3208      	adds	r2, #8
 80024b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	f003 0307 	and.w	r3, r3, #7
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	220f      	movs	r2, #15
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	43db      	mvns	r3, r3
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	4013      	ands	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	691a      	ldr	r2, [r3, #16]
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	f003 0307 	and.w	r3, r3, #7
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	08da      	lsrs	r2, r3, #3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	3208      	adds	r2, #8
 80024f2:	69b9      	ldr	r1, [r7, #24]
 80024f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	2203      	movs	r2, #3
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	43db      	mvns	r3, r3
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	4013      	ands	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f003 0203 	and.w	r2, r3, #3
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	4313      	orrs	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002534:	2b00      	cmp	r3, #0
 8002536:	f000 80b4 	beq.w	80026a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	4b5f      	ldr	r3, [pc, #380]	; (80026bc <HAL_GPIO_Init+0x308>)
 8002540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002542:	4a5e      	ldr	r2, [pc, #376]	; (80026bc <HAL_GPIO_Init+0x308>)
 8002544:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002548:	6453      	str	r3, [r2, #68]	; 0x44
 800254a:	4b5c      	ldr	r3, [pc, #368]	; (80026bc <HAL_GPIO_Init+0x308>)
 800254c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002556:	4a5a      	ldr	r2, [pc, #360]	; (80026c0 <HAL_GPIO_Init+0x30c>)
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	089b      	lsrs	r3, r3, #2
 800255c:	3302      	adds	r3, #2
 800255e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002562:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	f003 0303 	and.w	r3, r3, #3
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	220f      	movs	r2, #15
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	43db      	mvns	r3, r3
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	4013      	ands	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a51      	ldr	r2, [pc, #324]	; (80026c4 <HAL_GPIO_Init+0x310>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d02b      	beq.n	80025da <HAL_GPIO_Init+0x226>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a50      	ldr	r2, [pc, #320]	; (80026c8 <HAL_GPIO_Init+0x314>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d025      	beq.n	80025d6 <HAL_GPIO_Init+0x222>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a4f      	ldr	r2, [pc, #316]	; (80026cc <HAL_GPIO_Init+0x318>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d01f      	beq.n	80025d2 <HAL_GPIO_Init+0x21e>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a4e      	ldr	r2, [pc, #312]	; (80026d0 <HAL_GPIO_Init+0x31c>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d019      	beq.n	80025ce <HAL_GPIO_Init+0x21a>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a4d      	ldr	r2, [pc, #308]	; (80026d4 <HAL_GPIO_Init+0x320>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d013      	beq.n	80025ca <HAL_GPIO_Init+0x216>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a4c      	ldr	r2, [pc, #304]	; (80026d8 <HAL_GPIO_Init+0x324>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d00d      	beq.n	80025c6 <HAL_GPIO_Init+0x212>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a4b      	ldr	r2, [pc, #300]	; (80026dc <HAL_GPIO_Init+0x328>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d007      	beq.n	80025c2 <HAL_GPIO_Init+0x20e>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a4a      	ldr	r2, [pc, #296]	; (80026e0 <HAL_GPIO_Init+0x32c>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d101      	bne.n	80025be <HAL_GPIO_Init+0x20a>
 80025ba:	2307      	movs	r3, #7
 80025bc:	e00e      	b.n	80025dc <HAL_GPIO_Init+0x228>
 80025be:	2308      	movs	r3, #8
 80025c0:	e00c      	b.n	80025dc <HAL_GPIO_Init+0x228>
 80025c2:	2306      	movs	r3, #6
 80025c4:	e00a      	b.n	80025dc <HAL_GPIO_Init+0x228>
 80025c6:	2305      	movs	r3, #5
 80025c8:	e008      	b.n	80025dc <HAL_GPIO_Init+0x228>
 80025ca:	2304      	movs	r3, #4
 80025cc:	e006      	b.n	80025dc <HAL_GPIO_Init+0x228>
 80025ce:	2303      	movs	r3, #3
 80025d0:	e004      	b.n	80025dc <HAL_GPIO_Init+0x228>
 80025d2:	2302      	movs	r3, #2
 80025d4:	e002      	b.n	80025dc <HAL_GPIO_Init+0x228>
 80025d6:	2301      	movs	r3, #1
 80025d8:	e000      	b.n	80025dc <HAL_GPIO_Init+0x228>
 80025da:	2300      	movs	r3, #0
 80025dc:	69fa      	ldr	r2, [r7, #28]
 80025de:	f002 0203 	and.w	r2, r2, #3
 80025e2:	0092      	lsls	r2, r2, #2
 80025e4:	4093      	lsls	r3, r2
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025ec:	4934      	ldr	r1, [pc, #208]	; (80026c0 <HAL_GPIO_Init+0x30c>)
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	089b      	lsrs	r3, r3, #2
 80025f2:	3302      	adds	r3, #2
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025fa:	4b3a      	ldr	r3, [pc, #232]	; (80026e4 <HAL_GPIO_Init+0x330>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	43db      	mvns	r3, r3
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	4013      	ands	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	4313      	orrs	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800261e:	4a31      	ldr	r2, [pc, #196]	; (80026e4 <HAL_GPIO_Init+0x330>)
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002624:	4b2f      	ldr	r3, [pc, #188]	; (80026e4 <HAL_GPIO_Init+0x330>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	43db      	mvns	r3, r3
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4013      	ands	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	4313      	orrs	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002648:	4a26      	ldr	r2, [pc, #152]	; (80026e4 <HAL_GPIO_Init+0x330>)
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800264e:	4b25      	ldr	r3, [pc, #148]	; (80026e4 <HAL_GPIO_Init+0x330>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	43db      	mvns	r3, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4013      	ands	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002672:	4a1c      	ldr	r2, [pc, #112]	; (80026e4 <HAL_GPIO_Init+0x330>)
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002678:	4b1a      	ldr	r3, [pc, #104]	; (80026e4 <HAL_GPIO_Init+0x330>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	43db      	mvns	r3, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4013      	ands	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	4313      	orrs	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800269c:	4a11      	ldr	r2, [pc, #68]	; (80026e4 <HAL_GPIO_Init+0x330>)
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	3301      	adds	r3, #1
 80026a6:	61fb      	str	r3, [r7, #28]
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	2b0f      	cmp	r3, #15
 80026ac:	f67f ae90 	bls.w	80023d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026b0:	bf00      	nop
 80026b2:	3724      	adds	r7, #36	; 0x24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	40023800 	.word	0x40023800
 80026c0:	40013800 	.word	0x40013800
 80026c4:	40020000 	.word	0x40020000
 80026c8:	40020400 	.word	0x40020400
 80026cc:	40020800 	.word	0x40020800
 80026d0:	40020c00 	.word	0x40020c00
 80026d4:	40021000 	.word	0x40021000
 80026d8:	40021400 	.word	0x40021400
 80026dc:	40021800 	.word	0x40021800
 80026e0:	40021c00 	.word	0x40021c00
 80026e4:	40013c00 	.word	0x40013c00

080026e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	460b      	mov	r3, r1
 80026f2:	807b      	strh	r3, [r7, #2]
 80026f4:	4613      	mov	r3, r2
 80026f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026f8:	787b      	ldrb	r3, [r7, #1]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026fe:	887a      	ldrh	r2, [r7, #2]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002704:	e003      	b.n	800270e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002706:	887b      	ldrh	r3, [r7, #2]
 8002708:	041a      	lsls	r2, r3, #16
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	619a      	str	r2, [r3, #24]
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800271a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800271c:	b08f      	sub	sp, #60	; 0x3c
 800271e:	af0a      	add	r7, sp, #40	; 0x28
 8002720:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d101      	bne.n	800272c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e10f      	b.n	800294c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d106      	bne.n	800274c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f005 ff26 	bl	8008598 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2203      	movs	r2, #3
 8002750:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275c:	2b00      	cmp	r3, #0
 800275e:	d102      	bne.n	8002766 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f002 fea3 	bl	80054b6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	603b      	str	r3, [r7, #0]
 8002776:	687e      	ldr	r6, [r7, #4]
 8002778:	466d      	mov	r5, sp
 800277a:	f106 0410 	add.w	r4, r6, #16
 800277e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002780:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002782:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002784:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002786:	e894 0003 	ldmia.w	r4, {r0, r1}
 800278a:	e885 0003 	stmia.w	r5, {r0, r1}
 800278e:	1d33      	adds	r3, r6, #4
 8002790:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002792:	6838      	ldr	r0, [r7, #0]
 8002794:	f002 fd7a 	bl	800528c <USB_CoreInit>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d005      	beq.n	80027aa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2202      	movs	r2, #2
 80027a2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e0d0      	b.n	800294c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2100      	movs	r1, #0
 80027b0:	4618      	mov	r0, r3
 80027b2:	f002 fe91 	bl	80054d8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027b6:	2300      	movs	r3, #0
 80027b8:	73fb      	strb	r3, [r7, #15]
 80027ba:	e04a      	b.n	8002852 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80027bc:	7bfa      	ldrb	r2, [r7, #15]
 80027be:	6879      	ldr	r1, [r7, #4]
 80027c0:	4613      	mov	r3, r2
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	1a9b      	subs	r3, r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	333d      	adds	r3, #61	; 0x3d
 80027cc:	2201      	movs	r2, #1
 80027ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80027d0:	7bfa      	ldrb	r2, [r7, #15]
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	4613      	mov	r3, r2
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	1a9b      	subs	r3, r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	440b      	add	r3, r1
 80027de:	333c      	adds	r3, #60	; 0x3c
 80027e0:	7bfa      	ldrb	r2, [r7, #15]
 80027e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80027e4:	7bfa      	ldrb	r2, [r7, #15]
 80027e6:	7bfb      	ldrb	r3, [r7, #15]
 80027e8:	b298      	uxth	r0, r3
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	4613      	mov	r3, r2
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	1a9b      	subs	r3, r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	440b      	add	r3, r1
 80027f6:	3342      	adds	r3, #66	; 0x42
 80027f8:	4602      	mov	r2, r0
 80027fa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80027fc:	7bfa      	ldrb	r2, [r7, #15]
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	4613      	mov	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	1a9b      	subs	r3, r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	333f      	adds	r3, #63	; 0x3f
 800280c:	2200      	movs	r2, #0
 800280e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002810:	7bfa      	ldrb	r2, [r7, #15]
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	4613      	mov	r3, r2
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	1a9b      	subs	r3, r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	3344      	adds	r3, #68	; 0x44
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002824:	7bfa      	ldrb	r2, [r7, #15]
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	4613      	mov	r3, r2
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	1a9b      	subs	r3, r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	440b      	add	r3, r1
 8002832:	3348      	adds	r3, #72	; 0x48
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002838:	7bfa      	ldrb	r2, [r7, #15]
 800283a:	6879      	ldr	r1, [r7, #4]
 800283c:	4613      	mov	r3, r2
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	1a9b      	subs	r3, r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	440b      	add	r3, r1
 8002846:	3350      	adds	r3, #80	; 0x50
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800284c:	7bfb      	ldrb	r3, [r7, #15]
 800284e:	3301      	adds	r3, #1
 8002850:	73fb      	strb	r3, [r7, #15]
 8002852:	7bfa      	ldrb	r2, [r7, #15]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	429a      	cmp	r2, r3
 800285a:	d3af      	bcc.n	80027bc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800285c:	2300      	movs	r3, #0
 800285e:	73fb      	strb	r3, [r7, #15]
 8002860:	e044      	b.n	80028ec <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002862:	7bfa      	ldrb	r2, [r7, #15]
 8002864:	6879      	ldr	r1, [r7, #4]
 8002866:	4613      	mov	r3, r2
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	1a9b      	subs	r3, r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	440b      	add	r3, r1
 8002870:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002874:	2200      	movs	r2, #0
 8002876:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002878:	7bfa      	ldrb	r2, [r7, #15]
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	4613      	mov	r3, r2
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	1a9b      	subs	r3, r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	440b      	add	r3, r1
 8002886:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800288a:	7bfa      	ldrb	r2, [r7, #15]
 800288c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800288e:	7bfa      	ldrb	r2, [r7, #15]
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	4613      	mov	r3, r2
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	1a9b      	subs	r3, r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	440b      	add	r3, r1
 800289c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80028a0:	2200      	movs	r2, #0
 80028a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80028a4:	7bfa      	ldrb	r2, [r7, #15]
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	4613      	mov	r3, r2
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	1a9b      	subs	r3, r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	440b      	add	r3, r1
 80028b2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80028b6:	2200      	movs	r2, #0
 80028b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80028ba:	7bfa      	ldrb	r2, [r7, #15]
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	4613      	mov	r3, r2
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	1a9b      	subs	r3, r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	440b      	add	r3, r1
 80028c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80028d0:	7bfa      	ldrb	r2, [r7, #15]
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	4613      	mov	r3, r2
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	1a9b      	subs	r3, r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80028e2:	2200      	movs	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028e6:	7bfb      	ldrb	r3, [r7, #15]
 80028e8:	3301      	adds	r3, #1
 80028ea:	73fb      	strb	r3, [r7, #15]
 80028ec:	7bfa      	ldrb	r2, [r7, #15]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d3b5      	bcc.n	8002862 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	603b      	str	r3, [r7, #0]
 80028fc:	687e      	ldr	r6, [r7, #4]
 80028fe:	466d      	mov	r5, sp
 8002900:	f106 0410 	add.w	r4, r6, #16
 8002904:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002906:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002908:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800290a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800290c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002910:	e885 0003 	stmia.w	r5, {r0, r1}
 8002914:	1d33      	adds	r3, r6, #4
 8002916:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002918:	6838      	ldr	r0, [r7, #0]
 800291a:	f002 fe07 	bl	800552c <USB_DevInit>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d005      	beq.n	8002930 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2202      	movs	r2, #2
 8002928:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e00d      	b.n	800294c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4618      	mov	r0, r3
 8002946:	f003 fe4f 	bl	80065e8 <USB_DevDisconnect>

  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3714      	adds	r7, #20
 8002950:	46bd      	mov	sp, r7
 8002952:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002954 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002968:	2b01      	cmp	r3, #1
 800296a:	d101      	bne.n	8002970 <HAL_PCD_Start+0x1c>
 800296c:	2302      	movs	r3, #2
 800296e:	e020      	b.n	80029b2 <HAL_PCD_Start+0x5e>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297c:	2b01      	cmp	r3, #1
 800297e:	d109      	bne.n	8002994 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002984:	2b01      	cmp	r3, #1
 8002986:	d005      	beq.n	8002994 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800298c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f002 fd7b 	bl	8005494 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f003 fdff 	bl	80065a6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80029ba:	b590      	push	{r4, r7, lr}
 80029bc:	b08d      	sub	sp, #52	; 0x34
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029c8:	6a3b      	ldr	r3, [r7, #32]
 80029ca:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f003 febd 	bl	8006750 <USB_GetMode>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f040 839d 	bne.w	8003118 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f003 fe21 	bl	800662a <USB_ReadInterrupts>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f000 8393 	beq.w	8003116 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f003 fe18 	bl	800662a <USB_ReadInterrupts>
 80029fa:	4603      	mov	r3, r0
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d107      	bne.n	8002a14 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	695a      	ldr	r2, [r3, #20]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f002 0202 	and.w	r2, r2, #2
 8002a12:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f003 fe06 	bl	800662a <USB_ReadInterrupts>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	f003 0310 	and.w	r3, r3, #16
 8002a24:	2b10      	cmp	r3, #16
 8002a26:	d161      	bne.n	8002aec <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	699a      	ldr	r2, [r3, #24]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f022 0210 	bic.w	r2, r2, #16
 8002a36:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002a38:	6a3b      	ldr	r3, [r7, #32]
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	f003 020f 	and.w	r2, r3, #15
 8002a44:	4613      	mov	r3, r2
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	1a9b      	subs	r3, r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	4413      	add	r3, r2
 8002a54:	3304      	adds	r3, #4
 8002a56:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	0c5b      	lsrs	r3, r3, #17
 8002a5c:	f003 030f 	and.w	r3, r3, #15
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d124      	bne.n	8002aae <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d035      	beq.n	8002adc <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	091b      	lsrs	r3, r3, #4
 8002a78:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002a7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	461a      	mov	r2, r3
 8002a82:	6a38      	ldr	r0, [r7, #32]
 8002a84:	f003 fc6c 	bl	8006360 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	68da      	ldr	r2, [r3, #12]
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	091b      	lsrs	r3, r3, #4
 8002a90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a94:	441a      	add	r2, r3
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	699a      	ldr	r2, [r3, #24]
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	091b      	lsrs	r3, r3, #4
 8002aa2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002aa6:	441a      	add	r2, r3
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	619a      	str	r2, [r3, #24]
 8002aac:	e016      	b.n	8002adc <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	0c5b      	lsrs	r3, r3, #17
 8002ab2:	f003 030f 	and.w	r3, r3, #15
 8002ab6:	2b06      	cmp	r3, #6
 8002ab8:	d110      	bne.n	8002adc <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ac0:	2208      	movs	r2, #8
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	6a38      	ldr	r0, [r7, #32]
 8002ac6:	f003 fc4b 	bl	8006360 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	699a      	ldr	r2, [r3, #24]
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	091b      	lsrs	r3, r3, #4
 8002ad2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ad6:	441a      	add	r2, r3
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	699a      	ldr	r2, [r3, #24]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f042 0210 	orr.w	r2, r2, #16
 8002aea:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f003 fd9a 	bl	800662a <USB_ReadInterrupts>
 8002af6:	4603      	mov	r3, r0
 8002af8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002afc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002b00:	d16e      	bne.n	8002be0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002b02:	2300      	movs	r3, #0
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f003 fda0 	bl	8006650 <USB_ReadDevAllOutEpInterrupt>
 8002b10:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002b12:	e062      	b.n	8002bda <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d057      	beq.n	8002bce <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b24:	b2d2      	uxtb	r2, r2
 8002b26:	4611      	mov	r1, r2
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f003 fdc5 	bl	80066b8 <USB_ReadDevOutEPInterrupt>
 8002b2e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00c      	beq.n	8002b54 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3c:	015a      	lsls	r2, r3, #5
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	4413      	add	r3, r2
 8002b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b46:	461a      	mov	r2, r3
 8002b48:	2301      	movs	r3, #1
 8002b4a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002b4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 fdb0 	bl	80036b4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	f003 0308 	and.w	r3, r3, #8
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00c      	beq.n	8002b78 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	015a      	lsls	r2, r3, #5
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	4413      	add	r3, r2
 8002b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	2308      	movs	r3, #8
 8002b6e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002b70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 feaa 	bl	80038cc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	f003 0310 	and.w	r3, r3, #16
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d008      	beq.n	8002b94 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b84:	015a      	lsls	r2, r3, #5
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	4413      	add	r3, r2
 8002b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b8e:	461a      	mov	r2, r3
 8002b90:	2310      	movs	r3, #16
 8002b92:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	f003 0320 	and.w	r3, r3, #32
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d008      	beq.n	8002bb0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba0:	015a      	lsls	r2, r3, #5
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002baa:	461a      	mov	r2, r3
 8002bac:	2320      	movs	r3, #32
 8002bae:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d009      	beq.n	8002bce <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbc:	015a      	lsls	r2, r3, #5
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bcc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd6:	085b      	lsrs	r3, r3, #1
 8002bd8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d199      	bne.n	8002b14 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f003 fd20 	bl	800662a <USB_ReadInterrupts>
 8002bea:	4603      	mov	r3, r0
 8002bec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bf0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bf4:	f040 80c0 	bne.w	8002d78 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f003 fd41 	bl	8006684 <USB_ReadDevAllInEpInterrupt>
 8002c02:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002c04:	2300      	movs	r3, #0
 8002c06:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002c08:	e0b2      	b.n	8002d70 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f000 80a7 	beq.w	8002d64 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c1c:	b2d2      	uxtb	r2, r2
 8002c1e:	4611      	mov	r1, r2
 8002c20:	4618      	mov	r0, r3
 8002c22:	f003 fd67 	bl	80066f4 <USB_ReadDevInEPInterrupt>
 8002c26:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d057      	beq.n	8002ce2 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c34:	f003 030f 	and.w	r3, r3, #15
 8002c38:	2201      	movs	r2, #1
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	69f9      	ldr	r1, [r7, #28]
 8002c4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002c52:	4013      	ands	r3, r2
 8002c54:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	015a      	lsls	r2, r3, #5
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c62:	461a      	mov	r2, r3
 8002c64:	2301      	movs	r3, #1
 8002c66:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d132      	bne.n	8002cd6 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002c70:	6879      	ldr	r1, [r7, #4]
 8002c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c74:	4613      	mov	r3, r2
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	1a9b      	subs	r3, r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	3348      	adds	r3, #72	; 0x48
 8002c80:	6819      	ldr	r1, [r3, #0]
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c86:	4613      	mov	r3, r2
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	1a9b      	subs	r3, r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4403      	add	r3, r0
 8002c90:	3344      	adds	r3, #68	; 0x44
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4419      	add	r1, r3
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	1a9b      	subs	r3, r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4403      	add	r3, r0
 8002ca4:	3348      	adds	r3, #72	; 0x48
 8002ca6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d113      	bne.n	8002cd6 <HAL_PCD_IRQHandler+0x31c>
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	1a9b      	subs	r3, r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	440b      	add	r3, r1
 8002cbc:	3350      	adds	r3, #80	; 0x50
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d108      	bne.n	8002cd6 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6818      	ldr	r0, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002cce:	461a      	mov	r2, r3
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	f003 fd6f 	bl	80067b4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	4619      	mov	r1, r3
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f005 fd0e 	bl	80086fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	f003 0308 	and.w	r3, r3, #8
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d008      	beq.n	8002cfe <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cee:	015a      	lsls	r2, r3, #5
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	2308      	movs	r3, #8
 8002cfc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	f003 0310 	and.w	r3, r3, #16
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d008      	beq.n	8002d1a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0a:	015a      	lsls	r2, r3, #5
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	4413      	add	r3, r2
 8002d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d14:	461a      	mov	r2, r3
 8002d16:	2310      	movs	r3, #16
 8002d18:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d008      	beq.n	8002d36 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d26:	015a      	lsls	r2, r3, #5
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d30:	461a      	mov	r2, r3
 8002d32:	2340      	movs	r3, #64	; 0x40
 8002d34:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d008      	beq.n	8002d52 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d42:	015a      	lsls	r2, r3, #5
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	4413      	add	r3, r2
 8002d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	2302      	movs	r3, #2
 8002d50:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d003      	beq.n	8002d64 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002d5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 fc1b 	bl	800359a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	3301      	adds	r3, #1
 8002d68:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d6c:	085b      	lsrs	r3, r3, #1
 8002d6e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f47f af49 	bne.w	8002c0a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f003 fc54 	bl	800662a <USB_ReadInterrupts>
 8002d82:	4603      	mov	r3, r0
 8002d84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d8c:	d122      	bne.n	8002dd4 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	69fa      	ldr	r2, [r7, #28]
 8002d98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d9c:	f023 0301 	bic.w	r3, r3, #1
 8002da0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d108      	bne.n	8002dbe <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002db4:	2100      	movs	r1, #0
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 fe26 	bl	8003a08 <HAL_PCDEx_LPM_Callback>
 8002dbc:	e002      	b.n	8002dc4 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f005 fd14 	bl	80087ec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	695a      	ldr	r2, [r3, #20]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002dd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f003 fc26 	bl	800662a <USB_ReadInterrupts>
 8002dde:	4603      	mov	r3, r0
 8002de0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002de4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002de8:	d112      	bne.n	8002e10 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d102      	bne.n	8002e00 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f005 fcd0 	bl	80087a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695a      	ldr	r2, [r3, #20]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002e0e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f003 fc08 	bl	800662a <USB_ReadInterrupts>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e24:	f040 80c7 	bne.w	8002fb6 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	69fa      	ldr	r2, [r7, #28]
 8002e32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e36:	f023 0301 	bic.w	r3, r3, #1
 8002e3a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2110      	movs	r1, #16
 8002e42:	4618      	mov	r0, r3
 8002e44:	f002 fcd6 	bl	80057f4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e48:	2300      	movs	r3, #0
 8002e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e4c:	e056      	b.n	8002efc <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e50:	015a      	lsls	r2, r3, #5
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	4413      	add	r3, r2
 8002e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e60:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e64:	015a      	lsls	r2, r3, #5
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	4413      	add	r3, r2
 8002e6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e72:	0151      	lsls	r1, r2, #5
 8002e74:	69fa      	ldr	r2, [r7, #28]
 8002e76:	440a      	add	r2, r1
 8002e78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002e7c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e80:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e84:	015a      	lsls	r2, r3, #5
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	4413      	add	r3, r2
 8002e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e92:	0151      	lsls	r1, r2, #5
 8002e94:	69fa      	ldr	r2, [r7, #28]
 8002e96:	440a      	add	r2, r1
 8002e98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002e9c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002ea0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea4:	015a      	lsls	r2, r3, #5
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eae:	461a      	mov	r2, r3
 8002eb0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002eb4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb8:	015a      	lsls	r2, r3, #5
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ec6:	0151      	lsls	r1, r2, #5
 8002ec8:	69fa      	ldr	r2, [r7, #28]
 8002eca:	440a      	add	r2, r1
 8002ecc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002ed0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ed4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed8:	015a      	lsls	r2, r3, #5
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	4413      	add	r3, r2
 8002ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ee6:	0151      	lsls	r1, r2, #5
 8002ee8:	69fa      	ldr	r2, [r7, #28]
 8002eea:	440a      	add	r2, r1
 8002eec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002ef0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002ef4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef8:	3301      	adds	r3, #1
 8002efa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d3a3      	bcc.n	8002e4e <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f0c:	69db      	ldr	r3, [r3, #28]
 8002f0e:	69fa      	ldr	r2, [r7, #28]
 8002f10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f14:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002f18:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d016      	beq.n	8002f50 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f2c:	69fa      	ldr	r2, [r7, #28]
 8002f2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f32:	f043 030b 	orr.w	r3, r3, #11
 8002f36:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f42:	69fa      	ldr	r2, [r7, #28]
 8002f44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f48:	f043 030b 	orr.w	r3, r3, #11
 8002f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f4e:	e015      	b.n	8002f7c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	69fa      	ldr	r2, [r7, #28]
 8002f5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f5e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f62:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002f66:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	69fa      	ldr	r2, [r7, #28]
 8002f72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f76:	f043 030b 	orr.w	r3, r3, #11
 8002f7a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	69fa      	ldr	r2, [r7, #28]
 8002f86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f8a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002f8e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6818      	ldr	r0, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	f003 fc07 	bl	80067b4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	695a      	ldr	r2, [r3, #20]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002fb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f003 fb35 	bl	800662a <USB_ReadInterrupts>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fca:	d124      	bne.n	8003016 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f003 fbcb 	bl	800676c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f002 fc6b 	bl	80058b6 <USB_GetDevSpeed>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681c      	ldr	r4, [r3, #0]
 8002fec:	f001 f946 	bl	800427c <HAL_RCC_GetHCLKFreq>
 8002ff0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	4620      	mov	r0, r4
 8002ffc:	f002 f9a8 	bl	8005350 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f005 fba4 	bl	800874e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	695a      	ldr	r2, [r3, #20]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003014:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4618      	mov	r0, r3
 800301c:	f003 fb05 	bl	800662a <USB_ReadInterrupts>
 8003020:	4603      	mov	r3, r0
 8003022:	f003 0308 	and.w	r3, r3, #8
 8003026:	2b08      	cmp	r3, #8
 8003028:	d10a      	bne.n	8003040 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f005 fb81 	bl	8008732 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	695a      	ldr	r2, [r3, #20]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f002 0208 	and.w	r2, r2, #8
 800303e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4618      	mov	r0, r3
 8003046:	f003 faf0 	bl	800662a <USB_ReadInterrupts>
 800304a:	4603      	mov	r3, r0
 800304c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003050:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003054:	d10f      	bne.n	8003076 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003056:	2300      	movs	r3, #0
 8003058:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305c:	b2db      	uxtb	r3, r3
 800305e:	4619      	mov	r1, r3
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f005 fbe3 	bl	800882c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	695a      	ldr	r2, [r3, #20]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003074:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f003 fad5 	bl	800662a <USB_ReadInterrupts>
 8003080:	4603      	mov	r3, r0
 8003082:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003086:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800308a:	d10f      	bne.n	80030ac <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800308c:	2300      	movs	r3, #0
 800308e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003092:	b2db      	uxtb	r3, r3
 8003094:	4619      	mov	r1, r3
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f005 fbb6 	bl	8008808 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	695a      	ldr	r2, [r3, #20]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80030aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f003 faba 	bl	800662a <USB_ReadInterrupts>
 80030b6:	4603      	mov	r3, r0
 80030b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80030bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030c0:	d10a      	bne.n	80030d8 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f005 fbc4 	bl	8008850 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	695a      	ldr	r2, [r3, #20]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80030d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4618      	mov	r0, r3
 80030de:	f003 faa4 	bl	800662a <USB_ReadInterrupts>
 80030e2:	4603      	mov	r3, r0
 80030e4:	f003 0304 	and.w	r3, r3, #4
 80030e8:	2b04      	cmp	r3, #4
 80030ea:	d115      	bne.n	8003118 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	f003 0304 	and.w	r3, r3, #4
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d002      	beq.n	8003104 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f005 fbb4 	bl	800886c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6859      	ldr	r1, [r3, #4]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	430a      	orrs	r2, r1
 8003112:	605a      	str	r2, [r3, #4]
 8003114:	e000      	b.n	8003118 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003116:	bf00      	nop
    }
  }
}
 8003118:	3734      	adds	r7, #52	; 0x34
 800311a:	46bd      	mov	sp, r7
 800311c:	bd90      	pop	{r4, r7, pc}

0800311e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b082      	sub	sp, #8
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
 8003126:	460b      	mov	r3, r1
 8003128:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003130:	2b01      	cmp	r3, #1
 8003132:	d101      	bne.n	8003138 <HAL_PCD_SetAddress+0x1a>
 8003134:	2302      	movs	r3, #2
 8003136:	e013      	b.n	8003160 <HAL_PCD_SetAddress+0x42>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	78fa      	ldrb	r2, [r7, #3]
 8003144:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	78fa      	ldrb	r2, [r7, #3]
 800314e:	4611      	mov	r1, r2
 8003150:	4618      	mov	r0, r3
 8003152:	f003 fa02 	bl	800655a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	4608      	mov	r0, r1
 8003172:	4611      	mov	r1, r2
 8003174:	461a      	mov	r2, r3
 8003176:	4603      	mov	r3, r0
 8003178:	70fb      	strb	r3, [r7, #3]
 800317a:	460b      	mov	r3, r1
 800317c:	803b      	strh	r3, [r7, #0]
 800317e:	4613      	mov	r3, r2
 8003180:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003182:	2300      	movs	r3, #0
 8003184:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003186:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800318a:	2b00      	cmp	r3, #0
 800318c:	da0f      	bge.n	80031ae <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800318e:	78fb      	ldrb	r3, [r7, #3]
 8003190:	f003 020f 	and.w	r2, r3, #15
 8003194:	4613      	mov	r3, r2
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	1a9b      	subs	r3, r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	3338      	adds	r3, #56	; 0x38
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	4413      	add	r3, r2
 80031a2:	3304      	adds	r3, #4
 80031a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2201      	movs	r2, #1
 80031aa:	705a      	strb	r2, [r3, #1]
 80031ac:	e00f      	b.n	80031ce <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031ae:	78fb      	ldrb	r3, [r7, #3]
 80031b0:	f003 020f 	and.w	r2, r3, #15
 80031b4:	4613      	mov	r3, r2
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	1a9b      	subs	r3, r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	4413      	add	r3, r2
 80031c4:	3304      	adds	r3, #4
 80031c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80031ce:	78fb      	ldrb	r3, [r7, #3]
 80031d0:	f003 030f 	and.w	r3, r3, #15
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80031da:	883a      	ldrh	r2, [r7, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	78ba      	ldrb	r2, [r7, #2]
 80031e4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	785b      	ldrb	r3, [r3, #1]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d004      	beq.n	80031f8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80031f8:	78bb      	ldrb	r3, [r7, #2]
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d102      	bne.n	8003204 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800320a:	2b01      	cmp	r3, #1
 800320c:	d101      	bne.n	8003212 <HAL_PCD_EP_Open+0xaa>
 800320e:	2302      	movs	r3, #2
 8003210:	e00e      	b.n	8003230 <HAL_PCD_EP_Open+0xc8>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68f9      	ldr	r1, [r7, #12]
 8003220:	4618      	mov	r0, r3
 8003222:	f002 fb6d 	bl	8005900 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800322e:	7afb      	ldrb	r3, [r7, #11]
}
 8003230:	4618      	mov	r0, r3
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	460b      	mov	r3, r1
 8003242:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003244:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003248:	2b00      	cmp	r3, #0
 800324a:	da0f      	bge.n	800326c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800324c:	78fb      	ldrb	r3, [r7, #3]
 800324e:	f003 020f 	and.w	r2, r3, #15
 8003252:	4613      	mov	r3, r2
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	1a9b      	subs	r3, r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	3338      	adds	r3, #56	; 0x38
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	4413      	add	r3, r2
 8003260:	3304      	adds	r3, #4
 8003262:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2201      	movs	r2, #1
 8003268:	705a      	strb	r2, [r3, #1]
 800326a:	e00f      	b.n	800328c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800326c:	78fb      	ldrb	r3, [r7, #3]
 800326e:	f003 020f 	and.w	r2, r3, #15
 8003272:	4613      	mov	r3, r2
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	1a9b      	subs	r3, r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	4413      	add	r3, r2
 8003282:	3304      	adds	r3, #4
 8003284:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800328c:	78fb      	ldrb	r3, [r7, #3]
 800328e:	f003 030f 	and.w	r3, r3, #15
 8003292:	b2da      	uxtb	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d101      	bne.n	80032a6 <HAL_PCD_EP_Close+0x6e>
 80032a2:	2302      	movs	r3, #2
 80032a4:	e00e      	b.n	80032c4 <HAL_PCD_EP_Close+0x8c>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68f9      	ldr	r1, [r7, #12]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f002 fbab 	bl	8005a10 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	607a      	str	r2, [r7, #4]
 80032d6:	603b      	str	r3, [r7, #0]
 80032d8:	460b      	mov	r3, r1
 80032da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032dc:	7afb      	ldrb	r3, [r7, #11]
 80032de:	f003 020f 	and.w	r2, r3, #15
 80032e2:	4613      	mov	r3, r2
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	1a9b      	subs	r3, r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	4413      	add	r3, r2
 80032f2:	3304      	adds	r3, #4
 80032f4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	683a      	ldr	r2, [r7, #0]
 8003300:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	2200      	movs	r2, #0
 8003306:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	2200      	movs	r2, #0
 800330c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800330e:	7afb      	ldrb	r3, [r7, #11]
 8003310:	f003 030f 	and.w	r3, r3, #15
 8003314:	b2da      	uxtb	r2, r3
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d102      	bne.n	8003328 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003328:	7afb      	ldrb	r3, [r7, #11]
 800332a:	f003 030f 	and.w	r3, r3, #15
 800332e:	2b00      	cmp	r3, #0
 8003330:	d109      	bne.n	8003346 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6818      	ldr	r0, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	b2db      	uxtb	r3, r3
 800333c:	461a      	mov	r2, r3
 800333e:	6979      	ldr	r1, [r7, #20]
 8003340:	f002 fe86 	bl	8006050 <USB_EP0StartXfer>
 8003344:	e008      	b.n	8003358 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6818      	ldr	r0, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	b2db      	uxtb	r3, r3
 8003350:	461a      	mov	r2, r3
 8003352:	6979      	ldr	r1, [r7, #20]
 8003354:	f002 fc38 	bl	8005bc8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3718      	adds	r7, #24
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003362:	b480      	push	{r7}
 8003364:	b083      	sub	sp, #12
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
 800336a:	460b      	mov	r3, r1
 800336c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800336e:	78fb      	ldrb	r3, [r7, #3]
 8003370:	f003 020f 	and.w	r2, r3, #15
 8003374:	6879      	ldr	r1, [r7, #4]
 8003376:	4613      	mov	r3, r2
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	1a9b      	subs	r3, r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	440b      	add	r3, r1
 8003380:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003384:	681b      	ldr	r3, [r3, #0]
}
 8003386:	4618      	mov	r0, r3
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr

08003392 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b086      	sub	sp, #24
 8003396:	af00      	add	r7, sp, #0
 8003398:	60f8      	str	r0, [r7, #12]
 800339a:	607a      	str	r2, [r7, #4]
 800339c:	603b      	str	r3, [r7, #0]
 800339e:	460b      	mov	r3, r1
 80033a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033a2:	7afb      	ldrb	r3, [r7, #11]
 80033a4:	f003 020f 	and.w	r2, r3, #15
 80033a8:	4613      	mov	r3, r2
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	1a9b      	subs	r3, r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	3338      	adds	r3, #56	; 0x38
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	4413      	add	r3, r2
 80033b6:	3304      	adds	r3, #4
 80033b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	2200      	movs	r2, #0
 80033ca:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	2201      	movs	r2, #1
 80033d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033d2:	7afb      	ldrb	r3, [r7, #11]
 80033d4:	f003 030f 	and.w	r3, r3, #15
 80033d8:	b2da      	uxtb	r2, r3
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d102      	bne.n	80033ec <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033ec:	7afb      	ldrb	r3, [r7, #11]
 80033ee:	f003 030f 	and.w	r3, r3, #15
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d109      	bne.n	800340a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6818      	ldr	r0, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	461a      	mov	r2, r3
 8003402:	6979      	ldr	r1, [r7, #20]
 8003404:	f002 fe24 	bl	8006050 <USB_EP0StartXfer>
 8003408:	e008      	b.n	800341c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6818      	ldr	r0, [r3, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	b2db      	uxtb	r3, r3
 8003414:	461a      	mov	r2, r3
 8003416:	6979      	ldr	r1, [r7, #20]
 8003418:	f002 fbd6 	bl	8005bc8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3718      	adds	r7, #24
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b084      	sub	sp, #16
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
 800342e:	460b      	mov	r3, r1
 8003430:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003432:	78fb      	ldrb	r3, [r7, #3]
 8003434:	f003 020f 	and.w	r2, r3, #15
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	429a      	cmp	r2, r3
 800343e:	d901      	bls.n	8003444 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e050      	b.n	80034e6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003444:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003448:	2b00      	cmp	r3, #0
 800344a:	da0f      	bge.n	800346c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800344c:	78fb      	ldrb	r3, [r7, #3]
 800344e:	f003 020f 	and.w	r2, r3, #15
 8003452:	4613      	mov	r3, r2
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	1a9b      	subs	r3, r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	3338      	adds	r3, #56	; 0x38
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	4413      	add	r3, r2
 8003460:	3304      	adds	r3, #4
 8003462:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2201      	movs	r2, #1
 8003468:	705a      	strb	r2, [r3, #1]
 800346a:	e00d      	b.n	8003488 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800346c:	78fa      	ldrb	r2, [r7, #3]
 800346e:	4613      	mov	r3, r2
 8003470:	00db      	lsls	r3, r3, #3
 8003472:	1a9b      	subs	r3, r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	4413      	add	r3, r2
 800347e:	3304      	adds	r3, #4
 8003480:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2201      	movs	r2, #1
 800348c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800348e:	78fb      	ldrb	r3, [r7, #3]
 8003490:	f003 030f 	and.w	r3, r3, #15
 8003494:	b2da      	uxtb	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d101      	bne.n	80034a8 <HAL_PCD_EP_SetStall+0x82>
 80034a4:	2302      	movs	r3, #2
 80034a6:	e01e      	b.n	80034e6 <HAL_PCD_EP_SetStall+0xc0>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68f9      	ldr	r1, [r7, #12]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f002 ff7b 	bl	80063b2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034bc:	78fb      	ldrb	r3, [r7, #3]
 80034be:	f003 030f 	and.w	r3, r3, #15
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10a      	bne.n	80034dc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6818      	ldr	r0, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	b2d9      	uxtb	r1, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80034d6:	461a      	mov	r2, r3
 80034d8:	f003 f96c 	bl	80067b4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b084      	sub	sp, #16
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
 80034f6:	460b      	mov	r3, r1
 80034f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80034fa:	78fb      	ldrb	r3, [r7, #3]
 80034fc:	f003 020f 	and.w	r2, r3, #15
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	429a      	cmp	r2, r3
 8003506:	d901      	bls.n	800350c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e042      	b.n	8003592 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800350c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003510:	2b00      	cmp	r3, #0
 8003512:	da0f      	bge.n	8003534 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003514:	78fb      	ldrb	r3, [r7, #3]
 8003516:	f003 020f 	and.w	r2, r3, #15
 800351a:	4613      	mov	r3, r2
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	1a9b      	subs	r3, r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	3338      	adds	r3, #56	; 0x38
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	4413      	add	r3, r2
 8003528:	3304      	adds	r3, #4
 800352a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2201      	movs	r2, #1
 8003530:	705a      	strb	r2, [r3, #1]
 8003532:	e00f      	b.n	8003554 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003534:	78fb      	ldrb	r3, [r7, #3]
 8003536:	f003 020f 	and.w	r2, r3, #15
 800353a:	4613      	mov	r3, r2
 800353c:	00db      	lsls	r3, r3, #3
 800353e:	1a9b      	subs	r3, r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	4413      	add	r3, r2
 800354a:	3304      	adds	r3, #4
 800354c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800355a:	78fb      	ldrb	r3, [r7, #3]
 800355c:	f003 030f 	and.w	r3, r3, #15
 8003560:	b2da      	uxtb	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800356c:	2b01      	cmp	r3, #1
 800356e:	d101      	bne.n	8003574 <HAL_PCD_EP_ClrStall+0x86>
 8003570:	2302      	movs	r3, #2
 8003572:	e00e      	b.n	8003592 <HAL_PCD_EP_ClrStall+0xa4>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68f9      	ldr	r1, [r7, #12]
 8003582:	4618      	mov	r0, r3
 8003584:	f002 ff83 	bl	800648e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b08a      	sub	sp, #40	; 0x28
 800359e:	af02      	add	r7, sp, #8
 80035a0:	6078      	str	r0, [r7, #4]
 80035a2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80035ae:	683a      	ldr	r2, [r7, #0]
 80035b0:	4613      	mov	r3, r2
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	1a9b      	subs	r3, r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	3338      	adds	r3, #56	; 0x38
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	4413      	add	r3, r2
 80035be:	3304      	adds	r3, #4
 80035c0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	699a      	ldr	r2, [r3, #24]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d901      	bls.n	80035d2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e06c      	b.n	80036ac <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	695a      	ldr	r2, [r3, #20]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	69fa      	ldr	r2, [r7, #28]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d902      	bls.n	80035ee <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	3303      	adds	r3, #3
 80035f2:	089b      	lsrs	r3, r3, #2
 80035f4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035f6:	e02b      	b.n	8003650 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	695a      	ldr	r2, [r3, #20]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	69fa      	ldr	r2, [r7, #28]
 800360a:	429a      	cmp	r2, r3
 800360c:	d902      	bls.n	8003614 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	3303      	adds	r3, #3
 8003618:	089b      	lsrs	r3, r3, #2
 800361a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	68d9      	ldr	r1, [r3, #12]
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	b2da      	uxtb	r2, r3
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800362c:	b2db      	uxtb	r3, r3
 800362e:	9300      	str	r3, [sp, #0]
 8003630:	4603      	mov	r3, r0
 8003632:	6978      	ldr	r0, [r7, #20]
 8003634:	f002 fe5f 	bl	80062f6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	68da      	ldr	r2, [r3, #12]
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	441a      	add	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	699a      	ldr	r2, [r3, #24]
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	441a      	add	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	015a      	lsls	r2, r3, #5
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	4413      	add	r3, r2
 8003658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	b29b      	uxth	r3, r3
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	429a      	cmp	r2, r3
 8003664:	d809      	bhi.n	800367a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	699a      	ldr	r2, [r3, #24]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800366e:	429a      	cmp	r2, r3
 8003670:	d203      	bcs.n	800367a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1be      	bne.n	80035f8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	695a      	ldr	r2, [r3, #20]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	429a      	cmp	r2, r3
 8003684:	d811      	bhi.n	80036aa <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	f003 030f 	and.w	r3, r3, #15
 800368c:	2201      	movs	r2, #1
 800368e:	fa02 f303 	lsl.w	r3, r2, r3
 8003692:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800369a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	43db      	mvns	r3, r3
 80036a0:	6939      	ldr	r1, [r7, #16]
 80036a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036a6:	4013      	ands	r3, r2
 80036a8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3720      	adds	r7, #32
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b086      	sub	sp, #24
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	333c      	adds	r3, #60	; 0x3c
 80036cc:	3304      	adds	r3, #4
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	015a      	lsls	r2, r3, #5
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	4413      	add	r3, r2
 80036da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	f040 80a0 	bne.w	800382c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	f003 0308 	and.w	r3, r3, #8
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d015      	beq.n	8003722 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	4a72      	ldr	r2, [pc, #456]	; (80038c4 <PCD_EP_OutXfrComplete_int+0x210>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	f240 80dd 	bls.w	80038ba <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003706:	2b00      	cmp	r3, #0
 8003708:	f000 80d7 	beq.w	80038ba <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	015a      	lsls	r2, r3, #5
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	4413      	add	r3, r2
 8003714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003718:	461a      	mov	r2, r3
 800371a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800371e:	6093      	str	r3, [r2, #8]
 8003720:	e0cb      	b.n	80038ba <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	f003 0320 	and.w	r3, r3, #32
 8003728:	2b00      	cmp	r3, #0
 800372a:	d009      	beq.n	8003740 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	015a      	lsls	r2, r3, #5
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	4413      	add	r3, r2
 8003734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003738:	461a      	mov	r2, r3
 800373a:	2320      	movs	r3, #32
 800373c:	6093      	str	r3, [r2, #8]
 800373e:	e0bc      	b.n	80038ba <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003746:	2b00      	cmp	r3, #0
 8003748:	f040 80b7 	bne.w	80038ba <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	4a5d      	ldr	r2, [pc, #372]	; (80038c4 <PCD_EP_OutXfrComplete_int+0x210>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d90f      	bls.n	8003774 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00a      	beq.n	8003774 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	015a      	lsls	r2, r3, #5
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	4413      	add	r3, r2
 8003766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800376a:	461a      	mov	r2, r3
 800376c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003770:	6093      	str	r3, [r2, #8]
 8003772:	e0a2      	b.n	80038ba <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003774:	6879      	ldr	r1, [r7, #4]
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	4613      	mov	r3, r2
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	1a9b      	subs	r3, r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	440b      	add	r3, r1
 8003782:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003786:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	0159      	lsls	r1, r3, #5
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	440b      	add	r3, r1
 8003790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800379a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	4613      	mov	r3, r2
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	1a9b      	subs	r3, r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	4403      	add	r3, r0
 80037aa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80037ae:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80037b0:	6879      	ldr	r1, [r7, #4]
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	4613      	mov	r3, r2
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	1a9b      	subs	r3, r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	440b      	add	r3, r1
 80037be:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80037c2:	6819      	ldr	r1, [r3, #0]
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	4613      	mov	r3, r2
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	1a9b      	subs	r3, r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4403      	add	r3, r0
 80037d2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4419      	add	r1, r3
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	4613      	mov	r3, r2
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	1a9b      	subs	r3, r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	4403      	add	r3, r0
 80037e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80037ec:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d114      	bne.n	800381e <PCD_EP_OutXfrComplete_int+0x16a>
 80037f4:	6879      	ldr	r1, [r7, #4]
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	4613      	mov	r3, r2
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	1a9b      	subs	r3, r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	440b      	add	r3, r1
 8003802:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d108      	bne.n	800381e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6818      	ldr	r0, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003816:	461a      	mov	r2, r3
 8003818:	2101      	movs	r1, #1
 800381a:	f002 ffcb 	bl	80067b4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	b2db      	uxtb	r3, r3
 8003822:	4619      	mov	r1, r3
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f004 ff4f 	bl	80086c8 <HAL_PCD_DataOutStageCallback>
 800382a:	e046      	b.n	80038ba <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	4a26      	ldr	r2, [pc, #152]	; (80038c8 <PCD_EP_OutXfrComplete_int+0x214>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d124      	bne.n	800387e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00a      	beq.n	8003854 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	015a      	lsls	r2, r3, #5
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	4413      	add	r3, r2
 8003846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800384a:	461a      	mov	r2, r3
 800384c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003850:	6093      	str	r3, [r2, #8]
 8003852:	e032      	b.n	80038ba <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	f003 0320 	and.w	r3, r3, #32
 800385a:	2b00      	cmp	r3, #0
 800385c:	d008      	beq.n	8003870 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	015a      	lsls	r2, r3, #5
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	4413      	add	r3, r2
 8003866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800386a:	461a      	mov	r2, r3
 800386c:	2320      	movs	r3, #32
 800386e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	b2db      	uxtb	r3, r3
 8003874:	4619      	mov	r1, r3
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f004 ff26 	bl	80086c8 <HAL_PCD_DataOutStageCallback>
 800387c:	e01d      	b.n	80038ba <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d114      	bne.n	80038ae <PCD_EP_OutXfrComplete_int+0x1fa>
 8003884:	6879      	ldr	r1, [r7, #4]
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	4613      	mov	r3, r2
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	1a9b      	subs	r3, r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d108      	bne.n	80038ae <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6818      	ldr	r0, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80038a6:	461a      	mov	r2, r3
 80038a8:	2100      	movs	r1, #0
 80038aa:	f002 ff83 	bl	80067b4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	4619      	mov	r1, r3
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f004 ff07 	bl	80086c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3718      	adds	r7, #24
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	4f54300a 	.word	0x4f54300a
 80038c8:	4f54310a 	.word	0x4f54310a

080038cc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	333c      	adds	r3, #60	; 0x3c
 80038e4:	3304      	adds	r3, #4
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	015a      	lsls	r2, r3, #5
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	4413      	add	r3, r2
 80038f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	4a15      	ldr	r2, [pc, #84]	; (8003954 <PCD_EP_OutSetupPacket_int+0x88>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d90e      	bls.n	8003920 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003908:	2b00      	cmp	r3, #0
 800390a:	d009      	beq.n	8003920 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	015a      	lsls	r2, r3, #5
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	4413      	add	r3, r2
 8003914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003918:	461a      	mov	r2, r3
 800391a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800391e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f004 febf 	bl	80086a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	4a0a      	ldr	r2, [pc, #40]	; (8003954 <PCD_EP_OutSetupPacket_int+0x88>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d90c      	bls.n	8003948 <PCD_EP_OutSetupPacket_int+0x7c>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d108      	bne.n	8003948 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6818      	ldr	r0, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003940:	461a      	mov	r2, r3
 8003942:	2101      	movs	r1, #1
 8003944:	f002 ff36 	bl	80067b4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3718      	adds	r7, #24
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	4f54300a 	.word	0x4f54300a

08003958 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	460b      	mov	r3, r1
 8003962:	70fb      	strb	r3, [r7, #3]
 8003964:	4613      	mov	r3, r2
 8003966:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003970:	78fb      	ldrb	r3, [r7, #3]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d107      	bne.n	8003986 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003976:	883b      	ldrh	r3, [r7, #0]
 8003978:	0419      	lsls	r1, r3, #16
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68ba      	ldr	r2, [r7, #8]
 8003980:	430a      	orrs	r2, r1
 8003982:	629a      	str	r2, [r3, #40]	; 0x28
 8003984:	e028      	b.n	80039d8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398c:	0c1b      	lsrs	r3, r3, #16
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	4413      	add	r3, r2
 8003992:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003994:	2300      	movs	r3, #0
 8003996:	73fb      	strb	r3, [r7, #15]
 8003998:	e00d      	b.n	80039b6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	7bfb      	ldrb	r3, [r7, #15]
 80039a0:	3340      	adds	r3, #64	; 0x40
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	4413      	add	r3, r2
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	0c1b      	lsrs	r3, r3, #16
 80039aa:	68ba      	ldr	r2, [r7, #8]
 80039ac:	4413      	add	r3, r2
 80039ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80039b0:	7bfb      	ldrb	r3, [r7, #15]
 80039b2:	3301      	adds	r3, #1
 80039b4:	73fb      	strb	r3, [r7, #15]
 80039b6:	7bfa      	ldrb	r2, [r7, #15]
 80039b8:	78fb      	ldrb	r3, [r7, #3]
 80039ba:	3b01      	subs	r3, #1
 80039bc:	429a      	cmp	r2, r3
 80039be:	d3ec      	bcc.n	800399a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80039c0:	883b      	ldrh	r3, [r7, #0]
 80039c2:	0418      	lsls	r0, r3, #16
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6819      	ldr	r1, [r3, #0]
 80039c8:	78fb      	ldrb	r3, [r7, #3]
 80039ca:	3b01      	subs	r3, #1
 80039cc:	68ba      	ldr	r2, [r7, #8]
 80039ce:	4302      	orrs	r2, r0
 80039d0:	3340      	adds	r3, #64	; 0x40
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	440b      	add	r3, r1
 80039d6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3714      	adds	r7, #20
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr

080039e6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80039e6:	b480      	push	{r7}
 80039e8:	b083      	sub	sp, #12
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
 80039ee:	460b      	mov	r3, r1
 80039f0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	887a      	ldrh	r2, [r7, #2]
 80039f8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	460b      	mov	r3, r1
 8003a12:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b086      	sub	sp, #24
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d101      	bne.n	8003a32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e25b      	b.n	8003eea <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d075      	beq.n	8003b2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a3e:	4ba3      	ldr	r3, [pc, #652]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f003 030c 	and.w	r3, r3, #12
 8003a46:	2b04      	cmp	r3, #4
 8003a48:	d00c      	beq.n	8003a64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a4a:	4ba0      	ldr	r3, [pc, #640]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a52:	2b08      	cmp	r3, #8
 8003a54:	d112      	bne.n	8003a7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a56:	4b9d      	ldr	r3, [pc, #628]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a62:	d10b      	bne.n	8003a7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a64:	4b99      	ldr	r3, [pc, #612]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d05b      	beq.n	8003b28 <HAL_RCC_OscConfig+0x108>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d157      	bne.n	8003b28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e236      	b.n	8003eea <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a84:	d106      	bne.n	8003a94 <HAL_RCC_OscConfig+0x74>
 8003a86:	4b91      	ldr	r3, [pc, #580]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a90      	ldr	r2, [pc, #576]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a90:	6013      	str	r3, [r2, #0]
 8003a92:	e01d      	b.n	8003ad0 <HAL_RCC_OscConfig+0xb0>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a9c:	d10c      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x98>
 8003a9e:	4b8b      	ldr	r3, [pc, #556]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a8a      	ldr	r2, [pc, #552]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003aa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003aa8:	6013      	str	r3, [r2, #0]
 8003aaa:	4b88      	ldr	r3, [pc, #544]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a87      	ldr	r2, [pc, #540]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ab4:	6013      	str	r3, [r2, #0]
 8003ab6:	e00b      	b.n	8003ad0 <HAL_RCC_OscConfig+0xb0>
 8003ab8:	4b84      	ldr	r3, [pc, #528]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a83      	ldr	r2, [pc, #524]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003abe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ac2:	6013      	str	r3, [r2, #0]
 8003ac4:	4b81      	ldr	r3, [pc, #516]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a80      	ldr	r2, [pc, #512]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003aca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ace:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d013      	beq.n	8003b00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad8:	f7fd fa78 	bl	8000fcc <HAL_GetTick>
 8003adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ade:	e008      	b.n	8003af2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ae0:	f7fd fa74 	bl	8000fcc <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b64      	cmp	r3, #100	; 0x64
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e1fb      	b.n	8003eea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003af2:	4b76      	ldr	r3, [pc, #472]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d0f0      	beq.n	8003ae0 <HAL_RCC_OscConfig+0xc0>
 8003afe:	e014      	b.n	8003b2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b00:	f7fd fa64 	bl	8000fcc <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b06:	e008      	b.n	8003b1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b08:	f7fd fa60 	bl	8000fcc <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b64      	cmp	r3, #100	; 0x64
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e1e7      	b.n	8003eea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b1a:	4b6c      	ldr	r3, [pc, #432]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1f0      	bne.n	8003b08 <HAL_RCC_OscConfig+0xe8>
 8003b26:	e000      	b.n	8003b2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d063      	beq.n	8003bfe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b36:	4b65      	ldr	r3, [pc, #404]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f003 030c 	and.w	r3, r3, #12
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00b      	beq.n	8003b5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b42:	4b62      	ldr	r3, [pc, #392]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b4a:	2b08      	cmp	r3, #8
 8003b4c:	d11c      	bne.n	8003b88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b4e:	4b5f      	ldr	r3, [pc, #380]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d116      	bne.n	8003b88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b5a:	4b5c      	ldr	r3, [pc, #368]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d005      	beq.n	8003b72 <HAL_RCC_OscConfig+0x152>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d001      	beq.n	8003b72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e1bb      	b.n	8003eea <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b72:	4b56      	ldr	r3, [pc, #344]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	00db      	lsls	r3, r3, #3
 8003b80:	4952      	ldr	r1, [pc, #328]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b86:	e03a      	b.n	8003bfe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d020      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b90:	4b4f      	ldr	r3, [pc, #316]	; (8003cd0 <HAL_RCC_OscConfig+0x2b0>)
 8003b92:	2201      	movs	r2, #1
 8003b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b96:	f7fd fa19 	bl	8000fcc <HAL_GetTick>
 8003b9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b9c:	e008      	b.n	8003bb0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b9e:	f7fd fa15 	bl	8000fcc <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d901      	bls.n	8003bb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e19c      	b.n	8003eea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bb0:	4b46      	ldr	r3, [pc, #280]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d0f0      	beq.n	8003b9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bbc:	4b43      	ldr	r3, [pc, #268]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	00db      	lsls	r3, r3, #3
 8003bca:	4940      	ldr	r1, [pc, #256]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	600b      	str	r3, [r1, #0]
 8003bd0:	e015      	b.n	8003bfe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bd2:	4b3f      	ldr	r3, [pc, #252]	; (8003cd0 <HAL_RCC_OscConfig+0x2b0>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd8:	f7fd f9f8 	bl	8000fcc <HAL_GetTick>
 8003bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bde:	e008      	b.n	8003bf2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003be0:	f7fd f9f4 	bl	8000fcc <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e17b      	b.n	8003eea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bf2:	4b36      	ldr	r3, [pc, #216]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1f0      	bne.n	8003be0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0308 	and.w	r3, r3, #8
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d030      	beq.n	8003c6c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d016      	beq.n	8003c40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c12:	4b30      	ldr	r3, [pc, #192]	; (8003cd4 <HAL_RCC_OscConfig+0x2b4>)
 8003c14:	2201      	movs	r2, #1
 8003c16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c18:	f7fd f9d8 	bl	8000fcc <HAL_GetTick>
 8003c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c1e:	e008      	b.n	8003c32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c20:	f7fd f9d4 	bl	8000fcc <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e15b      	b.n	8003eea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c32:	4b26      	ldr	r3, [pc, #152]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003c34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d0f0      	beq.n	8003c20 <HAL_RCC_OscConfig+0x200>
 8003c3e:	e015      	b.n	8003c6c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c40:	4b24      	ldr	r3, [pc, #144]	; (8003cd4 <HAL_RCC_OscConfig+0x2b4>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c46:	f7fd f9c1 	bl	8000fcc <HAL_GetTick>
 8003c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c4c:	e008      	b.n	8003c60 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c4e:	f7fd f9bd 	bl	8000fcc <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e144      	b.n	8003eea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c60:	4b1a      	ldr	r3, [pc, #104]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003c62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1f0      	bne.n	8003c4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0304 	and.w	r3, r3, #4
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f000 80a0 	beq.w	8003dba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c7e:	4b13      	ldr	r3, [pc, #76]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10f      	bne.n	8003caa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	60bb      	str	r3, [r7, #8]
 8003c8e:	4b0f      	ldr	r3, [pc, #60]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c92:	4a0e      	ldr	r2, [pc, #56]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c98:	6413      	str	r3, [r2, #64]	; 0x40
 8003c9a:	4b0c      	ldr	r3, [pc, #48]	; (8003ccc <HAL_RCC_OscConfig+0x2ac>)
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca2:	60bb      	str	r3, [r7, #8]
 8003ca4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003caa:	4b0b      	ldr	r3, [pc, #44]	; (8003cd8 <HAL_RCC_OscConfig+0x2b8>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d121      	bne.n	8003cfa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cb6:	4b08      	ldr	r3, [pc, #32]	; (8003cd8 <HAL_RCC_OscConfig+0x2b8>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a07      	ldr	r2, [pc, #28]	; (8003cd8 <HAL_RCC_OscConfig+0x2b8>)
 8003cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cc2:	f7fd f983 	bl	8000fcc <HAL_GetTick>
 8003cc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc8:	e011      	b.n	8003cee <HAL_RCC_OscConfig+0x2ce>
 8003cca:	bf00      	nop
 8003ccc:	40023800 	.word	0x40023800
 8003cd0:	42470000 	.word	0x42470000
 8003cd4:	42470e80 	.word	0x42470e80
 8003cd8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cdc:	f7fd f976 	bl	8000fcc <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e0fd      	b.n	8003eea <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cee:	4b81      	ldr	r3, [pc, #516]	; (8003ef4 <HAL_RCC_OscConfig+0x4d4>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d0f0      	beq.n	8003cdc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d106      	bne.n	8003d10 <HAL_RCC_OscConfig+0x2f0>
 8003d02:	4b7d      	ldr	r3, [pc, #500]	; (8003ef8 <HAL_RCC_OscConfig+0x4d8>)
 8003d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d06:	4a7c      	ldr	r2, [pc, #496]	; (8003ef8 <HAL_RCC_OscConfig+0x4d8>)
 8003d08:	f043 0301 	orr.w	r3, r3, #1
 8003d0c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d0e:	e01c      	b.n	8003d4a <HAL_RCC_OscConfig+0x32a>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	2b05      	cmp	r3, #5
 8003d16:	d10c      	bne.n	8003d32 <HAL_RCC_OscConfig+0x312>
 8003d18:	4b77      	ldr	r3, [pc, #476]	; (8003ef8 <HAL_RCC_OscConfig+0x4d8>)
 8003d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1c:	4a76      	ldr	r2, [pc, #472]	; (8003ef8 <HAL_RCC_OscConfig+0x4d8>)
 8003d1e:	f043 0304 	orr.w	r3, r3, #4
 8003d22:	6713      	str	r3, [r2, #112]	; 0x70
 8003d24:	4b74      	ldr	r3, [pc, #464]	; (8003ef8 <HAL_RCC_OscConfig+0x4d8>)
 8003d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d28:	4a73      	ldr	r2, [pc, #460]	; (8003ef8 <HAL_RCC_OscConfig+0x4d8>)
 8003d2a:	f043 0301 	orr.w	r3, r3, #1
 8003d2e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d30:	e00b      	b.n	8003d4a <HAL_RCC_OscConfig+0x32a>
 8003d32:	4b71      	ldr	r3, [pc, #452]	; (8003ef8 <HAL_RCC_OscConfig+0x4d8>)
 8003d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d36:	4a70      	ldr	r2, [pc, #448]	; (8003ef8 <HAL_RCC_OscConfig+0x4d8>)
 8003d38:	f023 0301 	bic.w	r3, r3, #1
 8003d3c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d3e:	4b6e      	ldr	r3, [pc, #440]	; (8003ef8 <HAL_RCC_OscConfig+0x4d8>)
 8003d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d42:	4a6d      	ldr	r2, [pc, #436]	; (8003ef8 <HAL_RCC_OscConfig+0x4d8>)
 8003d44:	f023 0304 	bic.w	r3, r3, #4
 8003d48:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d015      	beq.n	8003d7e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d52:	f7fd f93b 	bl	8000fcc <HAL_GetTick>
 8003d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d58:	e00a      	b.n	8003d70 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d5a:	f7fd f937 	bl	8000fcc <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d901      	bls.n	8003d70 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e0bc      	b.n	8003eea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d70:	4b61      	ldr	r3, [pc, #388]	; (8003ef8 <HAL_RCC_OscConfig+0x4d8>)
 8003d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d0ee      	beq.n	8003d5a <HAL_RCC_OscConfig+0x33a>
 8003d7c:	e014      	b.n	8003da8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d7e:	f7fd f925 	bl	8000fcc <HAL_GetTick>
 8003d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d84:	e00a      	b.n	8003d9c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d86:	f7fd f921 	bl	8000fcc <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d901      	bls.n	8003d9c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e0a6      	b.n	8003eea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d9c:	4b56      	ldr	r3, [pc, #344]	; (8003ef8 <HAL_RCC_OscConfig+0x4d8>)
 8003d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1ee      	bne.n	8003d86 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003da8:	7dfb      	ldrb	r3, [r7, #23]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d105      	bne.n	8003dba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dae:	4b52      	ldr	r3, [pc, #328]	; (8003ef8 <HAL_RCC_OscConfig+0x4d8>)
 8003db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db2:	4a51      	ldr	r2, [pc, #324]	; (8003ef8 <HAL_RCC_OscConfig+0x4d8>)
 8003db4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003db8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f000 8092 	beq.w	8003ee8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dc4:	4b4c      	ldr	r3, [pc, #304]	; (8003ef8 <HAL_RCC_OscConfig+0x4d8>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f003 030c 	and.w	r3, r3, #12
 8003dcc:	2b08      	cmp	r3, #8
 8003dce:	d05c      	beq.n	8003e8a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d141      	bne.n	8003e5c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dd8:	4b48      	ldr	r3, [pc, #288]	; (8003efc <HAL_RCC_OscConfig+0x4dc>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dde:	f7fd f8f5 	bl	8000fcc <HAL_GetTick>
 8003de2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003de4:	e008      	b.n	8003df8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003de6:	f7fd f8f1 	bl	8000fcc <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d901      	bls.n	8003df8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e078      	b.n	8003eea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003df8:	4b3f      	ldr	r3, [pc, #252]	; (8003ef8 <HAL_RCC_OscConfig+0x4d8>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1f0      	bne.n	8003de6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	69da      	ldr	r2, [r3, #28]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a1b      	ldr	r3, [r3, #32]
 8003e0c:	431a      	orrs	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e12:	019b      	lsls	r3, r3, #6
 8003e14:	431a      	orrs	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1a:	085b      	lsrs	r3, r3, #1
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	041b      	lsls	r3, r3, #16
 8003e20:	431a      	orrs	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e26:	061b      	lsls	r3, r3, #24
 8003e28:	4933      	ldr	r1, [pc, #204]	; (8003ef8 <HAL_RCC_OscConfig+0x4d8>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e2e:	4b33      	ldr	r3, [pc, #204]	; (8003efc <HAL_RCC_OscConfig+0x4dc>)
 8003e30:	2201      	movs	r2, #1
 8003e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e34:	f7fd f8ca 	bl	8000fcc <HAL_GetTick>
 8003e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e3a:	e008      	b.n	8003e4e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e3c:	f7fd f8c6 	bl	8000fcc <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e04d      	b.n	8003eea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e4e:	4b2a      	ldr	r3, [pc, #168]	; (8003ef8 <HAL_RCC_OscConfig+0x4d8>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d0f0      	beq.n	8003e3c <HAL_RCC_OscConfig+0x41c>
 8003e5a:	e045      	b.n	8003ee8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e5c:	4b27      	ldr	r3, [pc, #156]	; (8003efc <HAL_RCC_OscConfig+0x4dc>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e62:	f7fd f8b3 	bl	8000fcc <HAL_GetTick>
 8003e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e68:	e008      	b.n	8003e7c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e6a:	f7fd f8af 	bl	8000fcc <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d901      	bls.n	8003e7c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e036      	b.n	8003eea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e7c:	4b1e      	ldr	r3, [pc, #120]	; (8003ef8 <HAL_RCC_OscConfig+0x4d8>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1f0      	bne.n	8003e6a <HAL_RCC_OscConfig+0x44a>
 8003e88:	e02e      	b.n	8003ee8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d101      	bne.n	8003e96 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e029      	b.n	8003eea <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e96:	4b18      	ldr	r3, [pc, #96]	; (8003ef8 <HAL_RCC_OscConfig+0x4d8>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	69db      	ldr	r3, [r3, #28]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d11c      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d115      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d10d      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d106      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d001      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e000      	b.n	8003eea <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3718      	adds	r7, #24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	40007000 	.word	0x40007000
 8003ef8:	40023800 	.word	0x40023800
 8003efc:	42470060 	.word	0x42470060

08003f00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d101      	bne.n	8003f14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e0cc      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f14:	4b68      	ldr	r3, [pc, #416]	; (80040b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 030f 	and.w	r3, r3, #15
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d90c      	bls.n	8003f3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f22:	4b65      	ldr	r3, [pc, #404]	; (80040b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f24:	683a      	ldr	r2, [r7, #0]
 8003f26:	b2d2      	uxtb	r2, r2
 8003f28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f2a:	4b63      	ldr	r3, [pc, #396]	; (80040b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 030f 	and.w	r3, r3, #15
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d001      	beq.n	8003f3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e0b8      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d020      	beq.n	8003f8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0304 	and.w	r3, r3, #4
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d005      	beq.n	8003f60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f54:	4b59      	ldr	r3, [pc, #356]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	4a58      	ldr	r2, [pc, #352]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003f5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0308 	and.w	r3, r3, #8
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d005      	beq.n	8003f78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f6c:	4b53      	ldr	r3, [pc, #332]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	4a52      	ldr	r2, [pc, #328]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003f72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f78:	4b50      	ldr	r3, [pc, #320]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	494d      	ldr	r1, [pc, #308]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d044      	beq.n	8004020 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d107      	bne.n	8003fae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f9e:	4b47      	ldr	r3, [pc, #284]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d119      	bne.n	8003fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e07f      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d003      	beq.n	8003fbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fba:	2b03      	cmp	r3, #3
 8003fbc:	d107      	bne.n	8003fce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fbe:	4b3f      	ldr	r3, [pc, #252]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d109      	bne.n	8003fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e06f      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fce:	4b3b      	ldr	r3, [pc, #236]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e067      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fde:	4b37      	ldr	r3, [pc, #220]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f023 0203 	bic.w	r2, r3, #3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	4934      	ldr	r1, [pc, #208]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ff0:	f7fc ffec 	bl	8000fcc <HAL_GetTick>
 8003ff4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ff6:	e00a      	b.n	800400e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ff8:	f7fc ffe8 	bl	8000fcc <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	f241 3288 	movw	r2, #5000	; 0x1388
 8004006:	4293      	cmp	r3, r2
 8004008:	d901      	bls.n	800400e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e04f      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800400e:	4b2b      	ldr	r3, [pc, #172]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f003 020c 	and.w	r2, r3, #12
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	429a      	cmp	r2, r3
 800401e:	d1eb      	bne.n	8003ff8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004020:	4b25      	ldr	r3, [pc, #148]	; (80040b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 030f 	and.w	r3, r3, #15
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	429a      	cmp	r2, r3
 800402c:	d20c      	bcs.n	8004048 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800402e:	4b22      	ldr	r3, [pc, #136]	; (80040b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	b2d2      	uxtb	r2, r2
 8004034:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004036:	4b20      	ldr	r3, [pc, #128]	; (80040b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 030f 	and.w	r3, r3, #15
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	429a      	cmp	r2, r3
 8004042:	d001      	beq.n	8004048 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e032      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0304 	and.w	r3, r3, #4
 8004050:	2b00      	cmp	r3, #0
 8004052:	d008      	beq.n	8004066 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004054:	4b19      	ldr	r3, [pc, #100]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	4916      	ldr	r1, [pc, #88]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8004062:	4313      	orrs	r3, r2
 8004064:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0308 	and.w	r3, r3, #8
 800406e:	2b00      	cmp	r3, #0
 8004070:	d009      	beq.n	8004086 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004072:	4b12      	ldr	r3, [pc, #72]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	490e      	ldr	r1, [pc, #56]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8004082:	4313      	orrs	r3, r2
 8004084:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004086:	f000 f821 	bl	80040cc <HAL_RCC_GetSysClockFreq>
 800408a:	4601      	mov	r1, r0
 800408c:	4b0b      	ldr	r3, [pc, #44]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	091b      	lsrs	r3, r3, #4
 8004092:	f003 030f 	and.w	r3, r3, #15
 8004096:	4a0a      	ldr	r2, [pc, #40]	; (80040c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004098:	5cd3      	ldrb	r3, [r2, r3]
 800409a:	fa21 f303 	lsr.w	r3, r1, r3
 800409e:	4a09      	ldr	r2, [pc, #36]	; (80040c4 <HAL_RCC_ClockConfig+0x1c4>)
 80040a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040a2:	4b09      	ldr	r3, [pc, #36]	; (80040c8 <HAL_RCC_ClockConfig+0x1c8>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7fc ff4c 	bl	8000f44 <HAL_InitTick>

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	40023c00 	.word	0x40023c00
 80040bc:	40023800 	.word	0x40023800
 80040c0:	08008e2c 	.word	0x08008e2c
 80040c4:	20000000 	.word	0x20000000
 80040c8:	20000004 	.word	0x20000004

080040cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040d2:	2300      	movs	r3, #0
 80040d4:	607b      	str	r3, [r7, #4]
 80040d6:	2300      	movs	r3, #0
 80040d8:	60fb      	str	r3, [r7, #12]
 80040da:	2300      	movs	r3, #0
 80040dc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80040de:	2300      	movs	r3, #0
 80040e0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040e2:	4b63      	ldr	r3, [pc, #396]	; (8004270 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f003 030c 	and.w	r3, r3, #12
 80040ea:	2b04      	cmp	r3, #4
 80040ec:	d007      	beq.n	80040fe <HAL_RCC_GetSysClockFreq+0x32>
 80040ee:	2b08      	cmp	r3, #8
 80040f0:	d008      	beq.n	8004104 <HAL_RCC_GetSysClockFreq+0x38>
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f040 80b4 	bne.w	8004260 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040f8:	4b5e      	ldr	r3, [pc, #376]	; (8004274 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80040fa:	60bb      	str	r3, [r7, #8]
       break;
 80040fc:	e0b3      	b.n	8004266 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040fe:	4b5e      	ldr	r3, [pc, #376]	; (8004278 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004100:	60bb      	str	r3, [r7, #8]
      break;
 8004102:	e0b0      	b.n	8004266 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004104:	4b5a      	ldr	r3, [pc, #360]	; (8004270 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800410c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800410e:	4b58      	ldr	r3, [pc, #352]	; (8004270 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d04a      	beq.n	80041b0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800411a:	4b55      	ldr	r3, [pc, #340]	; (8004270 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	099b      	lsrs	r3, r3, #6
 8004120:	f04f 0400 	mov.w	r4, #0
 8004124:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004128:	f04f 0200 	mov.w	r2, #0
 800412c:	ea03 0501 	and.w	r5, r3, r1
 8004130:	ea04 0602 	and.w	r6, r4, r2
 8004134:	4629      	mov	r1, r5
 8004136:	4632      	mov	r2, r6
 8004138:	f04f 0300 	mov.w	r3, #0
 800413c:	f04f 0400 	mov.w	r4, #0
 8004140:	0154      	lsls	r4, r2, #5
 8004142:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004146:	014b      	lsls	r3, r1, #5
 8004148:	4619      	mov	r1, r3
 800414a:	4622      	mov	r2, r4
 800414c:	1b49      	subs	r1, r1, r5
 800414e:	eb62 0206 	sbc.w	r2, r2, r6
 8004152:	f04f 0300 	mov.w	r3, #0
 8004156:	f04f 0400 	mov.w	r4, #0
 800415a:	0194      	lsls	r4, r2, #6
 800415c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004160:	018b      	lsls	r3, r1, #6
 8004162:	1a5b      	subs	r3, r3, r1
 8004164:	eb64 0402 	sbc.w	r4, r4, r2
 8004168:	f04f 0100 	mov.w	r1, #0
 800416c:	f04f 0200 	mov.w	r2, #0
 8004170:	00e2      	lsls	r2, r4, #3
 8004172:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004176:	00d9      	lsls	r1, r3, #3
 8004178:	460b      	mov	r3, r1
 800417a:	4614      	mov	r4, r2
 800417c:	195b      	adds	r3, r3, r5
 800417e:	eb44 0406 	adc.w	r4, r4, r6
 8004182:	f04f 0100 	mov.w	r1, #0
 8004186:	f04f 0200 	mov.w	r2, #0
 800418a:	0262      	lsls	r2, r4, #9
 800418c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004190:	0259      	lsls	r1, r3, #9
 8004192:	460b      	mov	r3, r1
 8004194:	4614      	mov	r4, r2
 8004196:	4618      	mov	r0, r3
 8004198:	4621      	mov	r1, r4
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f04f 0400 	mov.w	r4, #0
 80041a0:	461a      	mov	r2, r3
 80041a2:	4623      	mov	r3, r4
 80041a4:	f7fc f810 	bl	80001c8 <__aeabi_uldivmod>
 80041a8:	4603      	mov	r3, r0
 80041aa:	460c      	mov	r4, r1
 80041ac:	60fb      	str	r3, [r7, #12]
 80041ae:	e049      	b.n	8004244 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041b0:	4b2f      	ldr	r3, [pc, #188]	; (8004270 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	099b      	lsrs	r3, r3, #6
 80041b6:	f04f 0400 	mov.w	r4, #0
 80041ba:	f240 11ff 	movw	r1, #511	; 0x1ff
 80041be:	f04f 0200 	mov.w	r2, #0
 80041c2:	ea03 0501 	and.w	r5, r3, r1
 80041c6:	ea04 0602 	and.w	r6, r4, r2
 80041ca:	4629      	mov	r1, r5
 80041cc:	4632      	mov	r2, r6
 80041ce:	f04f 0300 	mov.w	r3, #0
 80041d2:	f04f 0400 	mov.w	r4, #0
 80041d6:	0154      	lsls	r4, r2, #5
 80041d8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80041dc:	014b      	lsls	r3, r1, #5
 80041de:	4619      	mov	r1, r3
 80041e0:	4622      	mov	r2, r4
 80041e2:	1b49      	subs	r1, r1, r5
 80041e4:	eb62 0206 	sbc.w	r2, r2, r6
 80041e8:	f04f 0300 	mov.w	r3, #0
 80041ec:	f04f 0400 	mov.w	r4, #0
 80041f0:	0194      	lsls	r4, r2, #6
 80041f2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80041f6:	018b      	lsls	r3, r1, #6
 80041f8:	1a5b      	subs	r3, r3, r1
 80041fa:	eb64 0402 	sbc.w	r4, r4, r2
 80041fe:	f04f 0100 	mov.w	r1, #0
 8004202:	f04f 0200 	mov.w	r2, #0
 8004206:	00e2      	lsls	r2, r4, #3
 8004208:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800420c:	00d9      	lsls	r1, r3, #3
 800420e:	460b      	mov	r3, r1
 8004210:	4614      	mov	r4, r2
 8004212:	195b      	adds	r3, r3, r5
 8004214:	eb44 0406 	adc.w	r4, r4, r6
 8004218:	f04f 0100 	mov.w	r1, #0
 800421c:	f04f 0200 	mov.w	r2, #0
 8004220:	02a2      	lsls	r2, r4, #10
 8004222:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004226:	0299      	lsls	r1, r3, #10
 8004228:	460b      	mov	r3, r1
 800422a:	4614      	mov	r4, r2
 800422c:	4618      	mov	r0, r3
 800422e:	4621      	mov	r1, r4
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f04f 0400 	mov.w	r4, #0
 8004236:	461a      	mov	r2, r3
 8004238:	4623      	mov	r3, r4
 800423a:	f7fb ffc5 	bl	80001c8 <__aeabi_uldivmod>
 800423e:	4603      	mov	r3, r0
 8004240:	460c      	mov	r4, r1
 8004242:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004244:	4b0a      	ldr	r3, [pc, #40]	; (8004270 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	0c1b      	lsrs	r3, r3, #16
 800424a:	f003 0303 	and.w	r3, r3, #3
 800424e:	3301      	adds	r3, #1
 8004250:	005b      	lsls	r3, r3, #1
 8004252:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	fbb2 f3f3 	udiv	r3, r2, r3
 800425c:	60bb      	str	r3, [r7, #8]
      break;
 800425e:	e002      	b.n	8004266 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004260:	4b04      	ldr	r3, [pc, #16]	; (8004274 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004262:	60bb      	str	r3, [r7, #8]
      break;
 8004264:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004266:	68bb      	ldr	r3, [r7, #8]
}
 8004268:	4618      	mov	r0, r3
 800426a:	3714      	adds	r7, #20
 800426c:	46bd      	mov	sp, r7
 800426e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004270:	40023800 	.word	0x40023800
 8004274:	00f42400 	.word	0x00f42400
 8004278:	007a1200 	.word	0x007a1200

0800427c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004280:	4b03      	ldr	r3, [pc, #12]	; (8004290 <HAL_RCC_GetHCLKFreq+0x14>)
 8004282:	681b      	ldr	r3, [r3, #0]
}
 8004284:	4618      	mov	r0, r3
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	20000000 	.word	0x20000000

08004294 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004298:	f7ff fff0 	bl	800427c <HAL_RCC_GetHCLKFreq>
 800429c:	4601      	mov	r1, r0
 800429e:	4b05      	ldr	r3, [pc, #20]	; (80042b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	0a9b      	lsrs	r3, r3, #10
 80042a4:	f003 0307 	and.w	r3, r3, #7
 80042a8:	4a03      	ldr	r2, [pc, #12]	; (80042b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042aa:	5cd3      	ldrb	r3, [r2, r3]
 80042ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	40023800 	.word	0x40023800
 80042b8:	08008e3c 	.word	0x08008e3c

080042bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80042c0:	f7ff ffdc 	bl	800427c <HAL_RCC_GetHCLKFreq>
 80042c4:	4601      	mov	r1, r0
 80042c6:	4b05      	ldr	r3, [pc, #20]	; (80042dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	0b5b      	lsrs	r3, r3, #13
 80042cc:	f003 0307 	and.w	r3, r3, #7
 80042d0:	4a03      	ldr	r2, [pc, #12]	; (80042e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042d2:	5cd3      	ldrb	r3, [r2, r3]
 80042d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80042d8:	4618      	mov	r0, r3
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	40023800 	.word	0x40023800
 80042e0:	08008e3c 	.word	0x08008e3c

080042e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e01d      	b.n	8004332 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d106      	bne.n	8004310 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7fc fc78 	bl	8000c00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2202      	movs	r2, #2
 8004314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	3304      	adds	r3, #4
 8004320:	4619      	mov	r1, r3
 8004322:	4610      	mov	r0, r2
 8004324:	f000 fa1e 	bl	8004764 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3708      	adds	r7, #8
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800433a:	b480      	push	{r7}
 800433c:	b085      	sub	sp, #20
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2202      	movs	r2, #2
 8004346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f003 0307 	and.w	r3, r3, #7
 8004354:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2b06      	cmp	r3, #6
 800435a:	d007      	beq.n	800436c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f042 0201 	orr.w	r2, r2, #1
 800436a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3714      	adds	r7, #20
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr

08004382 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b082      	sub	sp, #8
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b02      	cmp	r3, #2
 8004396:	d122      	bne.n	80043de <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d11b      	bne.n	80043de <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f06f 0202 	mvn.w	r2, #2
 80043ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	f003 0303 	and.w	r3, r3, #3
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 f9af 	bl	8004728 <HAL_TIM_IC_CaptureCallback>
 80043ca:	e005      	b.n	80043d8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 f9a1 	bl	8004714 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f9b2 	bl	800473c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	f003 0304 	and.w	r3, r3, #4
 80043e8:	2b04      	cmp	r3, #4
 80043ea:	d122      	bne.n	8004432 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	f003 0304 	and.w	r3, r3, #4
 80043f6:	2b04      	cmp	r3, #4
 80043f8:	d11b      	bne.n	8004432 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f06f 0204 	mvn.w	r2, #4
 8004402:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2202      	movs	r2, #2
 8004408:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004414:	2b00      	cmp	r3, #0
 8004416:	d003      	beq.n	8004420 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f000 f985 	bl	8004728 <HAL_TIM_IC_CaptureCallback>
 800441e:	e005      	b.n	800442c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 f977 	bl	8004714 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 f988 	bl	800473c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	f003 0308 	and.w	r3, r3, #8
 800443c:	2b08      	cmp	r3, #8
 800443e:	d122      	bne.n	8004486 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	f003 0308 	and.w	r3, r3, #8
 800444a:	2b08      	cmp	r3, #8
 800444c:	d11b      	bne.n	8004486 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f06f 0208 	mvn.w	r2, #8
 8004456:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2204      	movs	r2, #4
 800445c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	69db      	ldr	r3, [r3, #28]
 8004464:	f003 0303 	and.w	r3, r3, #3
 8004468:	2b00      	cmp	r3, #0
 800446a:	d003      	beq.n	8004474 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 f95b 	bl	8004728 <HAL_TIM_IC_CaptureCallback>
 8004472:	e005      	b.n	8004480 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 f94d 	bl	8004714 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 f95e 	bl	800473c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	f003 0310 	and.w	r3, r3, #16
 8004490:	2b10      	cmp	r3, #16
 8004492:	d122      	bne.n	80044da <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	f003 0310 	and.w	r3, r3, #16
 800449e:	2b10      	cmp	r3, #16
 80044a0:	d11b      	bne.n	80044da <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f06f 0210 	mvn.w	r2, #16
 80044aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2208      	movs	r2, #8
 80044b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	69db      	ldr	r3, [r3, #28]
 80044b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d003      	beq.n	80044c8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 f931 	bl	8004728 <HAL_TIM_IC_CaptureCallback>
 80044c6:	e005      	b.n	80044d4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 f923 	bl	8004714 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 f934 	bl	800473c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d10e      	bne.n	8004506 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	f003 0301 	and.w	r3, r3, #1
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d107      	bne.n	8004506 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f06f 0201 	mvn.w	r2, #1
 80044fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 f8fd 	bl	8004700 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004510:	2b80      	cmp	r3, #128	; 0x80
 8004512:	d10e      	bne.n	8004532 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800451e:	2b80      	cmp	r3, #128	; 0x80
 8004520:	d107      	bne.n	8004532 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800452a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 fad9 	bl	8004ae4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800453c:	2b40      	cmp	r3, #64	; 0x40
 800453e:	d10e      	bne.n	800455e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800454a:	2b40      	cmp	r3, #64	; 0x40
 800454c:	d107      	bne.n	800455e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004556:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 f8f9 	bl	8004750 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	f003 0320 	and.w	r3, r3, #32
 8004568:	2b20      	cmp	r3, #32
 800456a:	d10e      	bne.n	800458a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	f003 0320 	and.w	r3, r3, #32
 8004576:	2b20      	cmp	r3, #32
 8004578:	d107      	bne.n	800458a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f06f 0220 	mvn.w	r2, #32
 8004582:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 faa3 	bl	8004ad0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800458a:	bf00      	nop
 800458c:	3708      	adds	r7, #8
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b084      	sub	sp, #16
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
 800459a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d101      	bne.n	80045aa <HAL_TIM_ConfigClockSource+0x18>
 80045a6:	2302      	movs	r3, #2
 80045a8:	e0a6      	b.n	80046f8 <HAL_TIM_ConfigClockSource+0x166>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2202      	movs	r2, #2
 80045b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80045c8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045d0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2b40      	cmp	r3, #64	; 0x40
 80045e0:	d067      	beq.n	80046b2 <HAL_TIM_ConfigClockSource+0x120>
 80045e2:	2b40      	cmp	r3, #64	; 0x40
 80045e4:	d80b      	bhi.n	80045fe <HAL_TIM_ConfigClockSource+0x6c>
 80045e6:	2b10      	cmp	r3, #16
 80045e8:	d073      	beq.n	80046d2 <HAL_TIM_ConfigClockSource+0x140>
 80045ea:	2b10      	cmp	r3, #16
 80045ec:	d802      	bhi.n	80045f4 <HAL_TIM_ConfigClockSource+0x62>
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d06f      	beq.n	80046d2 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80045f2:	e078      	b.n	80046e6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80045f4:	2b20      	cmp	r3, #32
 80045f6:	d06c      	beq.n	80046d2 <HAL_TIM_ConfigClockSource+0x140>
 80045f8:	2b30      	cmp	r3, #48	; 0x30
 80045fa:	d06a      	beq.n	80046d2 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80045fc:	e073      	b.n	80046e6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80045fe:	2b70      	cmp	r3, #112	; 0x70
 8004600:	d00d      	beq.n	800461e <HAL_TIM_ConfigClockSource+0x8c>
 8004602:	2b70      	cmp	r3, #112	; 0x70
 8004604:	d804      	bhi.n	8004610 <HAL_TIM_ConfigClockSource+0x7e>
 8004606:	2b50      	cmp	r3, #80	; 0x50
 8004608:	d033      	beq.n	8004672 <HAL_TIM_ConfigClockSource+0xe0>
 800460a:	2b60      	cmp	r3, #96	; 0x60
 800460c:	d041      	beq.n	8004692 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800460e:	e06a      	b.n	80046e6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004610:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004614:	d066      	beq.n	80046e4 <HAL_TIM_ConfigClockSource+0x152>
 8004616:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800461a:	d017      	beq.n	800464c <HAL_TIM_ConfigClockSource+0xba>
      break;
 800461c:	e063      	b.n	80046e6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6818      	ldr	r0, [r3, #0]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	6899      	ldr	r1, [r3, #8]
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	685a      	ldr	r2, [r3, #4]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	f000 f9b3 	bl	8004998 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004640:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	609a      	str	r2, [r3, #8]
      break;
 800464a:	e04c      	b.n	80046e6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6818      	ldr	r0, [r3, #0]
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	6899      	ldr	r1, [r3, #8]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	685a      	ldr	r2, [r3, #4]
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	f000 f99c 	bl	8004998 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689a      	ldr	r2, [r3, #8]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800466e:	609a      	str	r2, [r3, #8]
      break;
 8004670:	e039      	b.n	80046e6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6818      	ldr	r0, [r3, #0]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	6859      	ldr	r1, [r3, #4]
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	461a      	mov	r2, r3
 8004680:	f000 f910 	bl	80048a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2150      	movs	r1, #80	; 0x50
 800468a:	4618      	mov	r0, r3
 800468c:	f000 f969 	bl	8004962 <TIM_ITRx_SetConfig>
      break;
 8004690:	e029      	b.n	80046e6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6818      	ldr	r0, [r3, #0]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	6859      	ldr	r1, [r3, #4]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	461a      	mov	r2, r3
 80046a0:	f000 f92f 	bl	8004902 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2160      	movs	r1, #96	; 0x60
 80046aa:	4618      	mov	r0, r3
 80046ac:	f000 f959 	bl	8004962 <TIM_ITRx_SetConfig>
      break;
 80046b0:	e019      	b.n	80046e6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6818      	ldr	r0, [r3, #0]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	6859      	ldr	r1, [r3, #4]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	461a      	mov	r2, r3
 80046c0:	f000 f8f0 	bl	80048a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2140      	movs	r1, #64	; 0x40
 80046ca:	4618      	mov	r0, r3
 80046cc:	f000 f949 	bl	8004962 <TIM_ITRx_SetConfig>
      break;
 80046d0:	e009      	b.n	80046e6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4619      	mov	r1, r3
 80046dc:	4610      	mov	r0, r2
 80046de:	f000 f940 	bl	8004962 <TIM_ITRx_SetConfig>
      break;
 80046e2:	e000      	b.n	80046e6 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80046e4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a40      	ldr	r2, [pc, #256]	; (8004878 <TIM_Base_SetConfig+0x114>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d013      	beq.n	80047a4 <TIM_Base_SetConfig+0x40>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004782:	d00f      	beq.n	80047a4 <TIM_Base_SetConfig+0x40>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a3d      	ldr	r2, [pc, #244]	; (800487c <TIM_Base_SetConfig+0x118>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d00b      	beq.n	80047a4 <TIM_Base_SetConfig+0x40>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a3c      	ldr	r2, [pc, #240]	; (8004880 <TIM_Base_SetConfig+0x11c>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d007      	beq.n	80047a4 <TIM_Base_SetConfig+0x40>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a3b      	ldr	r2, [pc, #236]	; (8004884 <TIM_Base_SetConfig+0x120>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d003      	beq.n	80047a4 <TIM_Base_SetConfig+0x40>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a3a      	ldr	r2, [pc, #232]	; (8004888 <TIM_Base_SetConfig+0x124>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d108      	bne.n	80047b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a2f      	ldr	r2, [pc, #188]	; (8004878 <TIM_Base_SetConfig+0x114>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d02b      	beq.n	8004816 <TIM_Base_SetConfig+0xb2>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047c4:	d027      	beq.n	8004816 <TIM_Base_SetConfig+0xb2>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a2c      	ldr	r2, [pc, #176]	; (800487c <TIM_Base_SetConfig+0x118>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d023      	beq.n	8004816 <TIM_Base_SetConfig+0xb2>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a2b      	ldr	r2, [pc, #172]	; (8004880 <TIM_Base_SetConfig+0x11c>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d01f      	beq.n	8004816 <TIM_Base_SetConfig+0xb2>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a2a      	ldr	r2, [pc, #168]	; (8004884 <TIM_Base_SetConfig+0x120>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d01b      	beq.n	8004816 <TIM_Base_SetConfig+0xb2>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a29      	ldr	r2, [pc, #164]	; (8004888 <TIM_Base_SetConfig+0x124>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d017      	beq.n	8004816 <TIM_Base_SetConfig+0xb2>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a28      	ldr	r2, [pc, #160]	; (800488c <TIM_Base_SetConfig+0x128>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d013      	beq.n	8004816 <TIM_Base_SetConfig+0xb2>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a27      	ldr	r2, [pc, #156]	; (8004890 <TIM_Base_SetConfig+0x12c>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d00f      	beq.n	8004816 <TIM_Base_SetConfig+0xb2>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a26      	ldr	r2, [pc, #152]	; (8004894 <TIM_Base_SetConfig+0x130>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d00b      	beq.n	8004816 <TIM_Base_SetConfig+0xb2>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a25      	ldr	r2, [pc, #148]	; (8004898 <TIM_Base_SetConfig+0x134>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d007      	beq.n	8004816 <TIM_Base_SetConfig+0xb2>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a24      	ldr	r2, [pc, #144]	; (800489c <TIM_Base_SetConfig+0x138>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d003      	beq.n	8004816 <TIM_Base_SetConfig+0xb2>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a23      	ldr	r2, [pc, #140]	; (80048a0 <TIM_Base_SetConfig+0x13c>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d108      	bne.n	8004828 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800481c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	4313      	orrs	r3, r2
 8004826:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	4313      	orrs	r3, r2
 8004834:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	689a      	ldr	r2, [r3, #8]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a0a      	ldr	r2, [pc, #40]	; (8004878 <TIM_Base_SetConfig+0x114>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d003      	beq.n	800485c <TIM_Base_SetConfig+0xf8>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a0c      	ldr	r2, [pc, #48]	; (8004888 <TIM_Base_SetConfig+0x124>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d103      	bne.n	8004864 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	691a      	ldr	r2, [r3, #16]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	615a      	str	r2, [r3, #20]
}
 800486a:	bf00      	nop
 800486c:	3714      	adds	r7, #20
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	40010000 	.word	0x40010000
 800487c:	40000400 	.word	0x40000400
 8004880:	40000800 	.word	0x40000800
 8004884:	40000c00 	.word	0x40000c00
 8004888:	40010400 	.word	0x40010400
 800488c:	40014000 	.word	0x40014000
 8004890:	40014400 	.word	0x40014400
 8004894:	40014800 	.word	0x40014800
 8004898:	40001800 	.word	0x40001800
 800489c:	40001c00 	.word	0x40001c00
 80048a0:	40002000 	.word	0x40002000

080048a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b087      	sub	sp, #28
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	f023 0201 	bic.w	r2, r3, #1
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	011b      	lsls	r3, r3, #4
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	f023 030a 	bic.w	r3, r3, #10
 80048e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	621a      	str	r2, [r3, #32]
}
 80048f6:	bf00      	nop
 80048f8:	371c      	adds	r7, #28
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004902:	b480      	push	{r7}
 8004904:	b087      	sub	sp, #28
 8004906:	af00      	add	r7, sp, #0
 8004908:	60f8      	str	r0, [r7, #12]
 800490a:	60b9      	str	r1, [r7, #8]
 800490c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	f023 0210 	bic.w	r2, r3, #16
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800492c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	031b      	lsls	r3, r3, #12
 8004932:	697a      	ldr	r2, [r7, #20]
 8004934:	4313      	orrs	r3, r2
 8004936:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800493e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	011b      	lsls	r3, r3, #4
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	4313      	orrs	r3, r2
 8004948:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	697a      	ldr	r2, [r7, #20]
 800494e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	693a      	ldr	r2, [r7, #16]
 8004954:	621a      	str	r2, [r3, #32]
}
 8004956:	bf00      	nop
 8004958:	371c      	adds	r7, #28
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004962:	b480      	push	{r7}
 8004964:	b085      	sub	sp, #20
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
 800496a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004978:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800497a:	683a      	ldr	r2, [r7, #0]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	4313      	orrs	r3, r2
 8004980:	f043 0307 	orr.w	r3, r3, #7
 8004984:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	609a      	str	r2, [r3, #8]
}
 800498c:	bf00      	nop
 800498e:	3714      	adds	r7, #20
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004998:	b480      	push	{r7}
 800499a:	b087      	sub	sp, #28
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
 80049a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	021a      	lsls	r2, r3, #8
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	431a      	orrs	r2, r3
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	4313      	orrs	r3, r2
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	697a      	ldr	r2, [r7, #20]
 80049ca:	609a      	str	r2, [r3, #8]
}
 80049cc:	bf00      	nop
 80049ce:	371c      	adds	r7, #28
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d101      	bne.n	80049f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049ec:	2302      	movs	r3, #2
 80049ee:	e05a      	b.n	8004aa6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2202      	movs	r2, #2
 80049fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a21      	ldr	r2, [pc, #132]	; (8004ab4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d022      	beq.n	8004a7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a3c:	d01d      	beq.n	8004a7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a1d      	ldr	r2, [pc, #116]	; (8004ab8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d018      	beq.n	8004a7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a1b      	ldr	r2, [pc, #108]	; (8004abc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d013      	beq.n	8004a7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a1a      	ldr	r2, [pc, #104]	; (8004ac0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d00e      	beq.n	8004a7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a18      	ldr	r2, [pc, #96]	; (8004ac4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d009      	beq.n	8004a7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a17      	ldr	r2, [pc, #92]	; (8004ac8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d004      	beq.n	8004a7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a15      	ldr	r2, [pc, #84]	; (8004acc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d10c      	bne.n	8004a94 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	68ba      	ldr	r2, [r7, #8]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3714      	adds	r7, #20
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	40010000 	.word	0x40010000
 8004ab8:	40000400 	.word	0x40000400
 8004abc:	40000800 	.word	0x40000800
 8004ac0:	40000c00 	.word	0x40000c00
 8004ac4:	40010400 	.word	0x40010400
 8004ac8:	40014000 	.word	0x40014000
 8004acc:	40001800 	.word	0x40001800

08004ad0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d101      	bne.n	8004b0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e03f      	b.n	8004b8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d106      	bne.n	8004b24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f7fc f894 	bl	8000c4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2224      	movs	r2, #36	; 0x24
 8004b28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68da      	ldr	r2, [r3, #12]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f829 	bl	8004b94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	691a      	ldr	r2, [r3, #16]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	695a      	ldr	r2, [r3, #20]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68da      	ldr	r2, [r3, #12]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2220      	movs	r2, #32
 8004b7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2220      	movs	r2, #32
 8004b84:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3708      	adds	r7, #8
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
	...

08004b94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b98:	b085      	sub	sp, #20
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	68da      	ldr	r2, [r3, #12]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	689a      	ldr	r2, [r3, #8]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	431a      	orrs	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	431a      	orrs	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	69db      	ldr	r3, [r3, #28]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004bd6:	f023 030c 	bic.w	r3, r3, #12
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	6812      	ldr	r2, [r2, #0]
 8004bde:	68f9      	ldr	r1, [r7, #12]
 8004be0:	430b      	orrs	r3, r1
 8004be2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	699a      	ldr	r2, [r3, #24]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	69db      	ldr	r3, [r3, #28]
 8004bfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c02:	f040 818b 	bne.w	8004f1c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4ac1      	ldr	r2, [pc, #772]	; (8004f10 <UART_SetConfig+0x37c>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d005      	beq.n	8004c1c <UART_SetConfig+0x88>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4abf      	ldr	r2, [pc, #764]	; (8004f14 <UART_SetConfig+0x380>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	f040 80bd 	bne.w	8004d96 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c1c:	f7ff fb4e 	bl	80042bc <HAL_RCC_GetPCLK2Freq>
 8004c20:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	461d      	mov	r5, r3
 8004c26:	f04f 0600 	mov.w	r6, #0
 8004c2a:	46a8      	mov	r8, r5
 8004c2c:	46b1      	mov	r9, r6
 8004c2e:	eb18 0308 	adds.w	r3, r8, r8
 8004c32:	eb49 0409 	adc.w	r4, r9, r9
 8004c36:	4698      	mov	r8, r3
 8004c38:	46a1      	mov	r9, r4
 8004c3a:	eb18 0805 	adds.w	r8, r8, r5
 8004c3e:	eb49 0906 	adc.w	r9, r9, r6
 8004c42:	f04f 0100 	mov.w	r1, #0
 8004c46:	f04f 0200 	mov.w	r2, #0
 8004c4a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004c4e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004c52:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004c56:	4688      	mov	r8, r1
 8004c58:	4691      	mov	r9, r2
 8004c5a:	eb18 0005 	adds.w	r0, r8, r5
 8004c5e:	eb49 0106 	adc.w	r1, r9, r6
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	461d      	mov	r5, r3
 8004c68:	f04f 0600 	mov.w	r6, #0
 8004c6c:	196b      	adds	r3, r5, r5
 8004c6e:	eb46 0406 	adc.w	r4, r6, r6
 8004c72:	461a      	mov	r2, r3
 8004c74:	4623      	mov	r3, r4
 8004c76:	f7fb faa7 	bl	80001c8 <__aeabi_uldivmod>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	460c      	mov	r4, r1
 8004c7e:	461a      	mov	r2, r3
 8004c80:	4ba5      	ldr	r3, [pc, #660]	; (8004f18 <UART_SetConfig+0x384>)
 8004c82:	fba3 2302 	umull	r2, r3, r3, r2
 8004c86:	095b      	lsrs	r3, r3, #5
 8004c88:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	461d      	mov	r5, r3
 8004c90:	f04f 0600 	mov.w	r6, #0
 8004c94:	46a9      	mov	r9, r5
 8004c96:	46b2      	mov	sl, r6
 8004c98:	eb19 0309 	adds.w	r3, r9, r9
 8004c9c:	eb4a 040a 	adc.w	r4, sl, sl
 8004ca0:	4699      	mov	r9, r3
 8004ca2:	46a2      	mov	sl, r4
 8004ca4:	eb19 0905 	adds.w	r9, r9, r5
 8004ca8:	eb4a 0a06 	adc.w	sl, sl, r6
 8004cac:	f04f 0100 	mov.w	r1, #0
 8004cb0:	f04f 0200 	mov.w	r2, #0
 8004cb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cb8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004cbc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004cc0:	4689      	mov	r9, r1
 8004cc2:	4692      	mov	sl, r2
 8004cc4:	eb19 0005 	adds.w	r0, r9, r5
 8004cc8:	eb4a 0106 	adc.w	r1, sl, r6
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	461d      	mov	r5, r3
 8004cd2:	f04f 0600 	mov.w	r6, #0
 8004cd6:	196b      	adds	r3, r5, r5
 8004cd8:	eb46 0406 	adc.w	r4, r6, r6
 8004cdc:	461a      	mov	r2, r3
 8004cde:	4623      	mov	r3, r4
 8004ce0:	f7fb fa72 	bl	80001c8 <__aeabi_uldivmod>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	460c      	mov	r4, r1
 8004ce8:	461a      	mov	r2, r3
 8004cea:	4b8b      	ldr	r3, [pc, #556]	; (8004f18 <UART_SetConfig+0x384>)
 8004cec:	fba3 1302 	umull	r1, r3, r3, r2
 8004cf0:	095b      	lsrs	r3, r3, #5
 8004cf2:	2164      	movs	r1, #100	; 0x64
 8004cf4:	fb01 f303 	mul.w	r3, r1, r3
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	00db      	lsls	r3, r3, #3
 8004cfc:	3332      	adds	r3, #50	; 0x32
 8004cfe:	4a86      	ldr	r2, [pc, #536]	; (8004f18 <UART_SetConfig+0x384>)
 8004d00:	fba2 2303 	umull	r2, r3, r2, r3
 8004d04:	095b      	lsrs	r3, r3, #5
 8004d06:	005b      	lsls	r3, r3, #1
 8004d08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d0c:	4498      	add	r8, r3
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	461d      	mov	r5, r3
 8004d12:	f04f 0600 	mov.w	r6, #0
 8004d16:	46a9      	mov	r9, r5
 8004d18:	46b2      	mov	sl, r6
 8004d1a:	eb19 0309 	adds.w	r3, r9, r9
 8004d1e:	eb4a 040a 	adc.w	r4, sl, sl
 8004d22:	4699      	mov	r9, r3
 8004d24:	46a2      	mov	sl, r4
 8004d26:	eb19 0905 	adds.w	r9, r9, r5
 8004d2a:	eb4a 0a06 	adc.w	sl, sl, r6
 8004d2e:	f04f 0100 	mov.w	r1, #0
 8004d32:	f04f 0200 	mov.w	r2, #0
 8004d36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d3a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004d3e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d42:	4689      	mov	r9, r1
 8004d44:	4692      	mov	sl, r2
 8004d46:	eb19 0005 	adds.w	r0, r9, r5
 8004d4a:	eb4a 0106 	adc.w	r1, sl, r6
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	461d      	mov	r5, r3
 8004d54:	f04f 0600 	mov.w	r6, #0
 8004d58:	196b      	adds	r3, r5, r5
 8004d5a:	eb46 0406 	adc.w	r4, r6, r6
 8004d5e:	461a      	mov	r2, r3
 8004d60:	4623      	mov	r3, r4
 8004d62:	f7fb fa31 	bl	80001c8 <__aeabi_uldivmod>
 8004d66:	4603      	mov	r3, r0
 8004d68:	460c      	mov	r4, r1
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	4b6a      	ldr	r3, [pc, #424]	; (8004f18 <UART_SetConfig+0x384>)
 8004d6e:	fba3 1302 	umull	r1, r3, r3, r2
 8004d72:	095b      	lsrs	r3, r3, #5
 8004d74:	2164      	movs	r1, #100	; 0x64
 8004d76:	fb01 f303 	mul.w	r3, r1, r3
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	00db      	lsls	r3, r3, #3
 8004d7e:	3332      	adds	r3, #50	; 0x32
 8004d80:	4a65      	ldr	r2, [pc, #404]	; (8004f18 <UART_SetConfig+0x384>)
 8004d82:	fba2 2303 	umull	r2, r3, r2, r3
 8004d86:	095b      	lsrs	r3, r3, #5
 8004d88:	f003 0207 	and.w	r2, r3, #7
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4442      	add	r2, r8
 8004d92:	609a      	str	r2, [r3, #8]
 8004d94:	e26f      	b.n	8005276 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d96:	f7ff fa7d 	bl	8004294 <HAL_RCC_GetPCLK1Freq>
 8004d9a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	461d      	mov	r5, r3
 8004da0:	f04f 0600 	mov.w	r6, #0
 8004da4:	46a8      	mov	r8, r5
 8004da6:	46b1      	mov	r9, r6
 8004da8:	eb18 0308 	adds.w	r3, r8, r8
 8004dac:	eb49 0409 	adc.w	r4, r9, r9
 8004db0:	4698      	mov	r8, r3
 8004db2:	46a1      	mov	r9, r4
 8004db4:	eb18 0805 	adds.w	r8, r8, r5
 8004db8:	eb49 0906 	adc.w	r9, r9, r6
 8004dbc:	f04f 0100 	mov.w	r1, #0
 8004dc0:	f04f 0200 	mov.w	r2, #0
 8004dc4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004dc8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004dcc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004dd0:	4688      	mov	r8, r1
 8004dd2:	4691      	mov	r9, r2
 8004dd4:	eb18 0005 	adds.w	r0, r8, r5
 8004dd8:	eb49 0106 	adc.w	r1, r9, r6
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	461d      	mov	r5, r3
 8004de2:	f04f 0600 	mov.w	r6, #0
 8004de6:	196b      	adds	r3, r5, r5
 8004de8:	eb46 0406 	adc.w	r4, r6, r6
 8004dec:	461a      	mov	r2, r3
 8004dee:	4623      	mov	r3, r4
 8004df0:	f7fb f9ea 	bl	80001c8 <__aeabi_uldivmod>
 8004df4:	4603      	mov	r3, r0
 8004df6:	460c      	mov	r4, r1
 8004df8:	461a      	mov	r2, r3
 8004dfa:	4b47      	ldr	r3, [pc, #284]	; (8004f18 <UART_SetConfig+0x384>)
 8004dfc:	fba3 2302 	umull	r2, r3, r3, r2
 8004e00:	095b      	lsrs	r3, r3, #5
 8004e02:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	461d      	mov	r5, r3
 8004e0a:	f04f 0600 	mov.w	r6, #0
 8004e0e:	46a9      	mov	r9, r5
 8004e10:	46b2      	mov	sl, r6
 8004e12:	eb19 0309 	adds.w	r3, r9, r9
 8004e16:	eb4a 040a 	adc.w	r4, sl, sl
 8004e1a:	4699      	mov	r9, r3
 8004e1c:	46a2      	mov	sl, r4
 8004e1e:	eb19 0905 	adds.w	r9, r9, r5
 8004e22:	eb4a 0a06 	adc.w	sl, sl, r6
 8004e26:	f04f 0100 	mov.w	r1, #0
 8004e2a:	f04f 0200 	mov.w	r2, #0
 8004e2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e32:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e36:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e3a:	4689      	mov	r9, r1
 8004e3c:	4692      	mov	sl, r2
 8004e3e:	eb19 0005 	adds.w	r0, r9, r5
 8004e42:	eb4a 0106 	adc.w	r1, sl, r6
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	461d      	mov	r5, r3
 8004e4c:	f04f 0600 	mov.w	r6, #0
 8004e50:	196b      	adds	r3, r5, r5
 8004e52:	eb46 0406 	adc.w	r4, r6, r6
 8004e56:	461a      	mov	r2, r3
 8004e58:	4623      	mov	r3, r4
 8004e5a:	f7fb f9b5 	bl	80001c8 <__aeabi_uldivmod>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	460c      	mov	r4, r1
 8004e62:	461a      	mov	r2, r3
 8004e64:	4b2c      	ldr	r3, [pc, #176]	; (8004f18 <UART_SetConfig+0x384>)
 8004e66:	fba3 1302 	umull	r1, r3, r3, r2
 8004e6a:	095b      	lsrs	r3, r3, #5
 8004e6c:	2164      	movs	r1, #100	; 0x64
 8004e6e:	fb01 f303 	mul.w	r3, r1, r3
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	00db      	lsls	r3, r3, #3
 8004e76:	3332      	adds	r3, #50	; 0x32
 8004e78:	4a27      	ldr	r2, [pc, #156]	; (8004f18 <UART_SetConfig+0x384>)
 8004e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7e:	095b      	lsrs	r3, r3, #5
 8004e80:	005b      	lsls	r3, r3, #1
 8004e82:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e86:	4498      	add	r8, r3
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	461d      	mov	r5, r3
 8004e8c:	f04f 0600 	mov.w	r6, #0
 8004e90:	46a9      	mov	r9, r5
 8004e92:	46b2      	mov	sl, r6
 8004e94:	eb19 0309 	adds.w	r3, r9, r9
 8004e98:	eb4a 040a 	adc.w	r4, sl, sl
 8004e9c:	4699      	mov	r9, r3
 8004e9e:	46a2      	mov	sl, r4
 8004ea0:	eb19 0905 	adds.w	r9, r9, r5
 8004ea4:	eb4a 0a06 	adc.w	sl, sl, r6
 8004ea8:	f04f 0100 	mov.w	r1, #0
 8004eac:	f04f 0200 	mov.w	r2, #0
 8004eb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004eb4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004eb8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004ebc:	4689      	mov	r9, r1
 8004ebe:	4692      	mov	sl, r2
 8004ec0:	eb19 0005 	adds.w	r0, r9, r5
 8004ec4:	eb4a 0106 	adc.w	r1, sl, r6
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	461d      	mov	r5, r3
 8004ece:	f04f 0600 	mov.w	r6, #0
 8004ed2:	196b      	adds	r3, r5, r5
 8004ed4:	eb46 0406 	adc.w	r4, r6, r6
 8004ed8:	461a      	mov	r2, r3
 8004eda:	4623      	mov	r3, r4
 8004edc:	f7fb f974 	bl	80001c8 <__aeabi_uldivmod>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	460c      	mov	r4, r1
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	4b0c      	ldr	r3, [pc, #48]	; (8004f18 <UART_SetConfig+0x384>)
 8004ee8:	fba3 1302 	umull	r1, r3, r3, r2
 8004eec:	095b      	lsrs	r3, r3, #5
 8004eee:	2164      	movs	r1, #100	; 0x64
 8004ef0:	fb01 f303 	mul.w	r3, r1, r3
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	00db      	lsls	r3, r3, #3
 8004ef8:	3332      	adds	r3, #50	; 0x32
 8004efa:	4a07      	ldr	r2, [pc, #28]	; (8004f18 <UART_SetConfig+0x384>)
 8004efc:	fba2 2303 	umull	r2, r3, r2, r3
 8004f00:	095b      	lsrs	r3, r3, #5
 8004f02:	f003 0207 	and.w	r2, r3, #7
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4442      	add	r2, r8
 8004f0c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004f0e:	e1b2      	b.n	8005276 <UART_SetConfig+0x6e2>
 8004f10:	40011000 	.word	0x40011000
 8004f14:	40011400 	.word	0x40011400
 8004f18:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4ad7      	ldr	r2, [pc, #860]	; (8005280 <UART_SetConfig+0x6ec>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d005      	beq.n	8004f32 <UART_SetConfig+0x39e>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4ad6      	ldr	r2, [pc, #856]	; (8005284 <UART_SetConfig+0x6f0>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	f040 80d1 	bne.w	80050d4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f32:	f7ff f9c3 	bl	80042bc <HAL_RCC_GetPCLK2Freq>
 8004f36:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	469a      	mov	sl, r3
 8004f3c:	f04f 0b00 	mov.w	fp, #0
 8004f40:	46d0      	mov	r8, sl
 8004f42:	46d9      	mov	r9, fp
 8004f44:	eb18 0308 	adds.w	r3, r8, r8
 8004f48:	eb49 0409 	adc.w	r4, r9, r9
 8004f4c:	4698      	mov	r8, r3
 8004f4e:	46a1      	mov	r9, r4
 8004f50:	eb18 080a 	adds.w	r8, r8, sl
 8004f54:	eb49 090b 	adc.w	r9, r9, fp
 8004f58:	f04f 0100 	mov.w	r1, #0
 8004f5c:	f04f 0200 	mov.w	r2, #0
 8004f60:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004f64:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004f68:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004f6c:	4688      	mov	r8, r1
 8004f6e:	4691      	mov	r9, r2
 8004f70:	eb1a 0508 	adds.w	r5, sl, r8
 8004f74:	eb4b 0609 	adc.w	r6, fp, r9
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	f04f 0200 	mov.w	r2, #0
 8004f82:	f04f 0300 	mov.w	r3, #0
 8004f86:	f04f 0400 	mov.w	r4, #0
 8004f8a:	0094      	lsls	r4, r2, #2
 8004f8c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004f90:	008b      	lsls	r3, r1, #2
 8004f92:	461a      	mov	r2, r3
 8004f94:	4623      	mov	r3, r4
 8004f96:	4628      	mov	r0, r5
 8004f98:	4631      	mov	r1, r6
 8004f9a:	f7fb f915 	bl	80001c8 <__aeabi_uldivmod>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	460c      	mov	r4, r1
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	4bb8      	ldr	r3, [pc, #736]	; (8005288 <UART_SetConfig+0x6f4>)
 8004fa6:	fba3 2302 	umull	r2, r3, r3, r2
 8004faa:	095b      	lsrs	r3, r3, #5
 8004fac:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	469b      	mov	fp, r3
 8004fb4:	f04f 0c00 	mov.w	ip, #0
 8004fb8:	46d9      	mov	r9, fp
 8004fba:	46e2      	mov	sl, ip
 8004fbc:	eb19 0309 	adds.w	r3, r9, r9
 8004fc0:	eb4a 040a 	adc.w	r4, sl, sl
 8004fc4:	4699      	mov	r9, r3
 8004fc6:	46a2      	mov	sl, r4
 8004fc8:	eb19 090b 	adds.w	r9, r9, fp
 8004fcc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004fd0:	f04f 0100 	mov.w	r1, #0
 8004fd4:	f04f 0200 	mov.w	r2, #0
 8004fd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fdc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004fe0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004fe4:	4689      	mov	r9, r1
 8004fe6:	4692      	mov	sl, r2
 8004fe8:	eb1b 0509 	adds.w	r5, fp, r9
 8004fec:	eb4c 060a 	adc.w	r6, ip, sl
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	f04f 0200 	mov.w	r2, #0
 8004ffa:	f04f 0300 	mov.w	r3, #0
 8004ffe:	f04f 0400 	mov.w	r4, #0
 8005002:	0094      	lsls	r4, r2, #2
 8005004:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005008:	008b      	lsls	r3, r1, #2
 800500a:	461a      	mov	r2, r3
 800500c:	4623      	mov	r3, r4
 800500e:	4628      	mov	r0, r5
 8005010:	4631      	mov	r1, r6
 8005012:	f7fb f8d9 	bl	80001c8 <__aeabi_uldivmod>
 8005016:	4603      	mov	r3, r0
 8005018:	460c      	mov	r4, r1
 800501a:	461a      	mov	r2, r3
 800501c:	4b9a      	ldr	r3, [pc, #616]	; (8005288 <UART_SetConfig+0x6f4>)
 800501e:	fba3 1302 	umull	r1, r3, r3, r2
 8005022:	095b      	lsrs	r3, r3, #5
 8005024:	2164      	movs	r1, #100	; 0x64
 8005026:	fb01 f303 	mul.w	r3, r1, r3
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	011b      	lsls	r3, r3, #4
 800502e:	3332      	adds	r3, #50	; 0x32
 8005030:	4a95      	ldr	r2, [pc, #596]	; (8005288 <UART_SetConfig+0x6f4>)
 8005032:	fba2 2303 	umull	r2, r3, r2, r3
 8005036:	095b      	lsrs	r3, r3, #5
 8005038:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800503c:	4498      	add	r8, r3
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	469b      	mov	fp, r3
 8005042:	f04f 0c00 	mov.w	ip, #0
 8005046:	46d9      	mov	r9, fp
 8005048:	46e2      	mov	sl, ip
 800504a:	eb19 0309 	adds.w	r3, r9, r9
 800504e:	eb4a 040a 	adc.w	r4, sl, sl
 8005052:	4699      	mov	r9, r3
 8005054:	46a2      	mov	sl, r4
 8005056:	eb19 090b 	adds.w	r9, r9, fp
 800505a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800505e:	f04f 0100 	mov.w	r1, #0
 8005062:	f04f 0200 	mov.w	r2, #0
 8005066:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800506a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800506e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005072:	4689      	mov	r9, r1
 8005074:	4692      	mov	sl, r2
 8005076:	eb1b 0509 	adds.w	r5, fp, r9
 800507a:	eb4c 060a 	adc.w	r6, ip, sl
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	4619      	mov	r1, r3
 8005084:	f04f 0200 	mov.w	r2, #0
 8005088:	f04f 0300 	mov.w	r3, #0
 800508c:	f04f 0400 	mov.w	r4, #0
 8005090:	0094      	lsls	r4, r2, #2
 8005092:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005096:	008b      	lsls	r3, r1, #2
 8005098:	461a      	mov	r2, r3
 800509a:	4623      	mov	r3, r4
 800509c:	4628      	mov	r0, r5
 800509e:	4631      	mov	r1, r6
 80050a0:	f7fb f892 	bl	80001c8 <__aeabi_uldivmod>
 80050a4:	4603      	mov	r3, r0
 80050a6:	460c      	mov	r4, r1
 80050a8:	461a      	mov	r2, r3
 80050aa:	4b77      	ldr	r3, [pc, #476]	; (8005288 <UART_SetConfig+0x6f4>)
 80050ac:	fba3 1302 	umull	r1, r3, r3, r2
 80050b0:	095b      	lsrs	r3, r3, #5
 80050b2:	2164      	movs	r1, #100	; 0x64
 80050b4:	fb01 f303 	mul.w	r3, r1, r3
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	011b      	lsls	r3, r3, #4
 80050bc:	3332      	adds	r3, #50	; 0x32
 80050be:	4a72      	ldr	r2, [pc, #456]	; (8005288 <UART_SetConfig+0x6f4>)
 80050c0:	fba2 2303 	umull	r2, r3, r2, r3
 80050c4:	095b      	lsrs	r3, r3, #5
 80050c6:	f003 020f 	and.w	r2, r3, #15
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4442      	add	r2, r8
 80050d0:	609a      	str	r2, [r3, #8]
 80050d2:	e0d0      	b.n	8005276 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80050d4:	f7ff f8de 	bl	8004294 <HAL_RCC_GetPCLK1Freq>
 80050d8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	469a      	mov	sl, r3
 80050de:	f04f 0b00 	mov.w	fp, #0
 80050e2:	46d0      	mov	r8, sl
 80050e4:	46d9      	mov	r9, fp
 80050e6:	eb18 0308 	adds.w	r3, r8, r8
 80050ea:	eb49 0409 	adc.w	r4, r9, r9
 80050ee:	4698      	mov	r8, r3
 80050f0:	46a1      	mov	r9, r4
 80050f2:	eb18 080a 	adds.w	r8, r8, sl
 80050f6:	eb49 090b 	adc.w	r9, r9, fp
 80050fa:	f04f 0100 	mov.w	r1, #0
 80050fe:	f04f 0200 	mov.w	r2, #0
 8005102:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005106:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800510a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800510e:	4688      	mov	r8, r1
 8005110:	4691      	mov	r9, r2
 8005112:	eb1a 0508 	adds.w	r5, sl, r8
 8005116:	eb4b 0609 	adc.w	r6, fp, r9
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	4619      	mov	r1, r3
 8005120:	f04f 0200 	mov.w	r2, #0
 8005124:	f04f 0300 	mov.w	r3, #0
 8005128:	f04f 0400 	mov.w	r4, #0
 800512c:	0094      	lsls	r4, r2, #2
 800512e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005132:	008b      	lsls	r3, r1, #2
 8005134:	461a      	mov	r2, r3
 8005136:	4623      	mov	r3, r4
 8005138:	4628      	mov	r0, r5
 800513a:	4631      	mov	r1, r6
 800513c:	f7fb f844 	bl	80001c8 <__aeabi_uldivmod>
 8005140:	4603      	mov	r3, r0
 8005142:	460c      	mov	r4, r1
 8005144:	461a      	mov	r2, r3
 8005146:	4b50      	ldr	r3, [pc, #320]	; (8005288 <UART_SetConfig+0x6f4>)
 8005148:	fba3 2302 	umull	r2, r3, r3, r2
 800514c:	095b      	lsrs	r3, r3, #5
 800514e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	469b      	mov	fp, r3
 8005156:	f04f 0c00 	mov.w	ip, #0
 800515a:	46d9      	mov	r9, fp
 800515c:	46e2      	mov	sl, ip
 800515e:	eb19 0309 	adds.w	r3, r9, r9
 8005162:	eb4a 040a 	adc.w	r4, sl, sl
 8005166:	4699      	mov	r9, r3
 8005168:	46a2      	mov	sl, r4
 800516a:	eb19 090b 	adds.w	r9, r9, fp
 800516e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005172:	f04f 0100 	mov.w	r1, #0
 8005176:	f04f 0200 	mov.w	r2, #0
 800517a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800517e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005182:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005186:	4689      	mov	r9, r1
 8005188:	4692      	mov	sl, r2
 800518a:	eb1b 0509 	adds.w	r5, fp, r9
 800518e:	eb4c 060a 	adc.w	r6, ip, sl
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	4619      	mov	r1, r3
 8005198:	f04f 0200 	mov.w	r2, #0
 800519c:	f04f 0300 	mov.w	r3, #0
 80051a0:	f04f 0400 	mov.w	r4, #0
 80051a4:	0094      	lsls	r4, r2, #2
 80051a6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80051aa:	008b      	lsls	r3, r1, #2
 80051ac:	461a      	mov	r2, r3
 80051ae:	4623      	mov	r3, r4
 80051b0:	4628      	mov	r0, r5
 80051b2:	4631      	mov	r1, r6
 80051b4:	f7fb f808 	bl	80001c8 <__aeabi_uldivmod>
 80051b8:	4603      	mov	r3, r0
 80051ba:	460c      	mov	r4, r1
 80051bc:	461a      	mov	r2, r3
 80051be:	4b32      	ldr	r3, [pc, #200]	; (8005288 <UART_SetConfig+0x6f4>)
 80051c0:	fba3 1302 	umull	r1, r3, r3, r2
 80051c4:	095b      	lsrs	r3, r3, #5
 80051c6:	2164      	movs	r1, #100	; 0x64
 80051c8:	fb01 f303 	mul.w	r3, r1, r3
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	011b      	lsls	r3, r3, #4
 80051d0:	3332      	adds	r3, #50	; 0x32
 80051d2:	4a2d      	ldr	r2, [pc, #180]	; (8005288 <UART_SetConfig+0x6f4>)
 80051d4:	fba2 2303 	umull	r2, r3, r2, r3
 80051d8:	095b      	lsrs	r3, r3, #5
 80051da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051de:	4498      	add	r8, r3
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	469b      	mov	fp, r3
 80051e4:	f04f 0c00 	mov.w	ip, #0
 80051e8:	46d9      	mov	r9, fp
 80051ea:	46e2      	mov	sl, ip
 80051ec:	eb19 0309 	adds.w	r3, r9, r9
 80051f0:	eb4a 040a 	adc.w	r4, sl, sl
 80051f4:	4699      	mov	r9, r3
 80051f6:	46a2      	mov	sl, r4
 80051f8:	eb19 090b 	adds.w	r9, r9, fp
 80051fc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005200:	f04f 0100 	mov.w	r1, #0
 8005204:	f04f 0200 	mov.w	r2, #0
 8005208:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800520c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005210:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005214:	4689      	mov	r9, r1
 8005216:	4692      	mov	sl, r2
 8005218:	eb1b 0509 	adds.w	r5, fp, r9
 800521c:	eb4c 060a 	adc.w	r6, ip, sl
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	4619      	mov	r1, r3
 8005226:	f04f 0200 	mov.w	r2, #0
 800522a:	f04f 0300 	mov.w	r3, #0
 800522e:	f04f 0400 	mov.w	r4, #0
 8005232:	0094      	lsls	r4, r2, #2
 8005234:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005238:	008b      	lsls	r3, r1, #2
 800523a:	461a      	mov	r2, r3
 800523c:	4623      	mov	r3, r4
 800523e:	4628      	mov	r0, r5
 8005240:	4631      	mov	r1, r6
 8005242:	f7fa ffc1 	bl	80001c8 <__aeabi_uldivmod>
 8005246:	4603      	mov	r3, r0
 8005248:	460c      	mov	r4, r1
 800524a:	461a      	mov	r2, r3
 800524c:	4b0e      	ldr	r3, [pc, #56]	; (8005288 <UART_SetConfig+0x6f4>)
 800524e:	fba3 1302 	umull	r1, r3, r3, r2
 8005252:	095b      	lsrs	r3, r3, #5
 8005254:	2164      	movs	r1, #100	; 0x64
 8005256:	fb01 f303 	mul.w	r3, r1, r3
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	011b      	lsls	r3, r3, #4
 800525e:	3332      	adds	r3, #50	; 0x32
 8005260:	4a09      	ldr	r2, [pc, #36]	; (8005288 <UART_SetConfig+0x6f4>)
 8005262:	fba2 2303 	umull	r2, r3, r2, r3
 8005266:	095b      	lsrs	r3, r3, #5
 8005268:	f003 020f 	and.w	r2, r3, #15
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4442      	add	r2, r8
 8005272:	609a      	str	r2, [r3, #8]
}
 8005274:	e7ff      	b.n	8005276 <UART_SetConfig+0x6e2>
 8005276:	bf00      	nop
 8005278:	3714      	adds	r7, #20
 800527a:	46bd      	mov	sp, r7
 800527c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005280:	40011000 	.word	0x40011000
 8005284:	40011400 	.word	0x40011400
 8005288:	51eb851f 	.word	0x51eb851f

0800528c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800528c:	b084      	sub	sp, #16
 800528e:	b580      	push	{r7, lr}
 8005290:	b084      	sub	sp, #16
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
 8005296:	f107 001c 	add.w	r0, r7, #28
 800529a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800529e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d122      	bne.n	80052ea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80052b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80052cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d105      	bne.n	80052de <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f001 fac6 	bl	8006870 <USB_CoreReset>
 80052e4:	4603      	mov	r3, r0
 80052e6:	73fb      	strb	r3, [r7, #15]
 80052e8:	e01a      	b.n	8005320 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f001 faba 	bl	8006870 <USB_CoreReset>
 80052fc:	4603      	mov	r3, r0
 80052fe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005302:	2b00      	cmp	r3, #0
 8005304:	d106      	bne.n	8005314 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	639a      	str	r2, [r3, #56]	; 0x38
 8005312:	e005      	b.n	8005320 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005318:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005322:	2b01      	cmp	r3, #1
 8005324:	d10b      	bne.n	800533e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f043 0206 	orr.w	r2, r3, #6
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f043 0220 	orr.w	r2, r3, #32
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800533e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005340:	4618      	mov	r0, r3
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800534a:	b004      	add	sp, #16
 800534c:	4770      	bx	lr
	...

08005350 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005350:	b480      	push	{r7}
 8005352:	b087      	sub	sp, #28
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	4613      	mov	r3, r2
 800535c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800535e:	79fb      	ldrb	r3, [r7, #7]
 8005360:	2b02      	cmp	r3, #2
 8005362:	d165      	bne.n	8005430 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	4a41      	ldr	r2, [pc, #260]	; (800546c <USB_SetTurnaroundTime+0x11c>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d906      	bls.n	800537a <USB_SetTurnaroundTime+0x2a>
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	4a40      	ldr	r2, [pc, #256]	; (8005470 <USB_SetTurnaroundTime+0x120>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d802      	bhi.n	800537a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005374:	230f      	movs	r3, #15
 8005376:	617b      	str	r3, [r7, #20]
 8005378:	e062      	b.n	8005440 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	4a3c      	ldr	r2, [pc, #240]	; (8005470 <USB_SetTurnaroundTime+0x120>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d906      	bls.n	8005390 <USB_SetTurnaroundTime+0x40>
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	4a3b      	ldr	r2, [pc, #236]	; (8005474 <USB_SetTurnaroundTime+0x124>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d802      	bhi.n	8005390 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800538a:	230e      	movs	r3, #14
 800538c:	617b      	str	r3, [r7, #20]
 800538e:	e057      	b.n	8005440 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	4a38      	ldr	r2, [pc, #224]	; (8005474 <USB_SetTurnaroundTime+0x124>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d906      	bls.n	80053a6 <USB_SetTurnaroundTime+0x56>
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	4a37      	ldr	r2, [pc, #220]	; (8005478 <USB_SetTurnaroundTime+0x128>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d802      	bhi.n	80053a6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80053a0:	230d      	movs	r3, #13
 80053a2:	617b      	str	r3, [r7, #20]
 80053a4:	e04c      	b.n	8005440 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	4a33      	ldr	r2, [pc, #204]	; (8005478 <USB_SetTurnaroundTime+0x128>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d906      	bls.n	80053bc <USB_SetTurnaroundTime+0x6c>
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	4a32      	ldr	r2, [pc, #200]	; (800547c <USB_SetTurnaroundTime+0x12c>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d802      	bhi.n	80053bc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80053b6:	230c      	movs	r3, #12
 80053b8:	617b      	str	r3, [r7, #20]
 80053ba:	e041      	b.n	8005440 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	4a2f      	ldr	r2, [pc, #188]	; (800547c <USB_SetTurnaroundTime+0x12c>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d906      	bls.n	80053d2 <USB_SetTurnaroundTime+0x82>
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	4a2e      	ldr	r2, [pc, #184]	; (8005480 <USB_SetTurnaroundTime+0x130>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d802      	bhi.n	80053d2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80053cc:	230b      	movs	r3, #11
 80053ce:	617b      	str	r3, [r7, #20]
 80053d0:	e036      	b.n	8005440 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	4a2a      	ldr	r2, [pc, #168]	; (8005480 <USB_SetTurnaroundTime+0x130>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d906      	bls.n	80053e8 <USB_SetTurnaroundTime+0x98>
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	4a29      	ldr	r2, [pc, #164]	; (8005484 <USB_SetTurnaroundTime+0x134>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d802      	bhi.n	80053e8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80053e2:	230a      	movs	r3, #10
 80053e4:	617b      	str	r3, [r7, #20]
 80053e6:	e02b      	b.n	8005440 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	4a26      	ldr	r2, [pc, #152]	; (8005484 <USB_SetTurnaroundTime+0x134>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d906      	bls.n	80053fe <USB_SetTurnaroundTime+0xae>
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	4a25      	ldr	r2, [pc, #148]	; (8005488 <USB_SetTurnaroundTime+0x138>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d802      	bhi.n	80053fe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80053f8:	2309      	movs	r3, #9
 80053fa:	617b      	str	r3, [r7, #20]
 80053fc:	e020      	b.n	8005440 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	4a21      	ldr	r2, [pc, #132]	; (8005488 <USB_SetTurnaroundTime+0x138>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d906      	bls.n	8005414 <USB_SetTurnaroundTime+0xc4>
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	4a20      	ldr	r2, [pc, #128]	; (800548c <USB_SetTurnaroundTime+0x13c>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d802      	bhi.n	8005414 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800540e:	2308      	movs	r3, #8
 8005410:	617b      	str	r3, [r7, #20]
 8005412:	e015      	b.n	8005440 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	4a1d      	ldr	r2, [pc, #116]	; (800548c <USB_SetTurnaroundTime+0x13c>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d906      	bls.n	800542a <USB_SetTurnaroundTime+0xda>
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	4a1c      	ldr	r2, [pc, #112]	; (8005490 <USB_SetTurnaroundTime+0x140>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d802      	bhi.n	800542a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005424:	2307      	movs	r3, #7
 8005426:	617b      	str	r3, [r7, #20]
 8005428:	e00a      	b.n	8005440 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800542a:	2306      	movs	r3, #6
 800542c:	617b      	str	r3, [r7, #20]
 800542e:	e007      	b.n	8005440 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005430:	79fb      	ldrb	r3, [r7, #7]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d102      	bne.n	800543c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005436:	2309      	movs	r3, #9
 8005438:	617b      	str	r3, [r7, #20]
 800543a:	e001      	b.n	8005440 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800543c:	2309      	movs	r3, #9
 800543e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	68da      	ldr	r2, [r3, #12]
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	029b      	lsls	r3, r3, #10
 8005454:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005458:	431a      	orrs	r2, r3
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	371c      	adds	r7, #28
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr
 800546c:	00d8acbf 	.word	0x00d8acbf
 8005470:	00e4e1bf 	.word	0x00e4e1bf
 8005474:	00f423ff 	.word	0x00f423ff
 8005478:	0106737f 	.word	0x0106737f
 800547c:	011a499f 	.word	0x011a499f
 8005480:	01312cff 	.word	0x01312cff
 8005484:	014ca43f 	.word	0x014ca43f
 8005488:	016e35ff 	.word	0x016e35ff
 800548c:	01a6ab1f 	.word	0x01a6ab1f
 8005490:	01e847ff 	.word	0x01e847ff

08005494 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f043 0201 	orr.w	r2, r3, #1
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	370c      	adds	r7, #12
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr

080054b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80054b6:	b480      	push	{r7}
 80054b8:	b083      	sub	sp, #12
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	f023 0201 	bic.w	r2, r3, #1
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	460b      	mov	r3, r1
 80054e2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80054f0:	78fb      	ldrb	r3, [r7, #3]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d106      	bne.n	8005504 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	60da      	str	r2, [r3, #12]
 8005502:	e00b      	b.n	800551c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005504:	78fb      	ldrb	r3, [r7, #3]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d106      	bne.n	8005518 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	60da      	str	r2, [r3, #12]
 8005516:	e001      	b.n	800551c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e003      	b.n	8005524 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800551c:	2032      	movs	r0, #50	; 0x32
 800551e:	f7fb fd61 	bl	8000fe4 <HAL_Delay>

  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3708      	adds	r7, #8
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800552c:	b084      	sub	sp, #16
 800552e:	b580      	push	{r7, lr}
 8005530:	b086      	sub	sp, #24
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
 8005536:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800553a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800553e:	2300      	movs	r3, #0
 8005540:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005546:	2300      	movs	r3, #0
 8005548:	613b      	str	r3, [r7, #16]
 800554a:	e009      	b.n	8005560 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	3340      	adds	r3, #64	; 0x40
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	4413      	add	r3, r2
 8005556:	2200      	movs	r2, #0
 8005558:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	3301      	adds	r3, #1
 800555e:	613b      	str	r3, [r7, #16]
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	2b0e      	cmp	r3, #14
 8005564:	d9f2      	bls.n	800554c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005568:	2b00      	cmp	r3, #0
 800556a:	d11c      	bne.n	80055a6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800557a:	f043 0302 	orr.w	r3, r3, #2
 800557e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005584:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005590:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	639a      	str	r2, [r3, #56]	; 0x38
 80055a4:	e00b      	b.n	80055be <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055aa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80055c4:	461a      	mov	r2, r3
 80055c6:	2300      	movs	r3, #0
 80055c8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d0:	4619      	mov	r1, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d8:	461a      	mov	r2, r3
 80055da:	680b      	ldr	r3, [r1, #0]
 80055dc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80055de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d10c      	bne.n	80055fe <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80055e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d104      	bne.n	80055f4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80055ea:	2100      	movs	r1, #0
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 f949 	bl	8005884 <USB_SetDevSpeed>
 80055f2:	e008      	b.n	8005606 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80055f4:	2101      	movs	r1, #1
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 f944 	bl	8005884 <USB_SetDevSpeed>
 80055fc:	e003      	b.n	8005606 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80055fe:	2103      	movs	r1, #3
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 f93f 	bl	8005884 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005606:	2110      	movs	r1, #16
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 f8f3 	bl	80057f4 <USB_FlushTxFifo>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d001      	beq.n	8005618 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 f911 	bl	8005840 <USB_FlushRxFifo>
 800561e:	4603      	mov	r3, r0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d001      	beq.n	8005628 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800562e:	461a      	mov	r2, r3
 8005630:	2300      	movs	r3, #0
 8005632:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800563a:	461a      	mov	r2, r3
 800563c:	2300      	movs	r3, #0
 800563e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005646:	461a      	mov	r2, r3
 8005648:	2300      	movs	r3, #0
 800564a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800564c:	2300      	movs	r3, #0
 800564e:	613b      	str	r3, [r7, #16]
 8005650:	e043      	b.n	80056da <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	015a      	lsls	r2, r3, #5
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	4413      	add	r3, r2
 800565a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005664:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005668:	d118      	bne.n	800569c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10a      	bne.n	8005686 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	015a      	lsls	r2, r3, #5
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	4413      	add	r3, r2
 8005678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800567c:	461a      	mov	r2, r3
 800567e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005682:	6013      	str	r3, [r2, #0]
 8005684:	e013      	b.n	80056ae <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	015a      	lsls	r2, r3, #5
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	4413      	add	r3, r2
 800568e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005692:	461a      	mov	r2, r3
 8005694:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005698:	6013      	str	r3, [r2, #0]
 800569a:	e008      	b.n	80056ae <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	015a      	lsls	r2, r3, #5
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	4413      	add	r3, r2
 80056a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a8:	461a      	mov	r2, r3
 80056aa:	2300      	movs	r3, #0
 80056ac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	015a      	lsls	r2, r3, #5
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	4413      	add	r3, r2
 80056b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ba:	461a      	mov	r2, r3
 80056bc:	2300      	movs	r3, #0
 80056be:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	015a      	lsls	r2, r3, #5
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	4413      	add	r3, r2
 80056c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056cc:	461a      	mov	r2, r3
 80056ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80056d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	3301      	adds	r3, #1
 80056d8:	613b      	str	r3, [r7, #16]
 80056da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056dc:	693a      	ldr	r2, [r7, #16]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d3b7      	bcc.n	8005652 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056e2:	2300      	movs	r3, #0
 80056e4:	613b      	str	r3, [r7, #16]
 80056e6:	e043      	b.n	8005770 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	015a      	lsls	r2, r3, #5
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056fe:	d118      	bne.n	8005732 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10a      	bne.n	800571c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	015a      	lsls	r2, r3, #5
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	4413      	add	r3, r2
 800570e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005712:	461a      	mov	r2, r3
 8005714:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005718:	6013      	str	r3, [r2, #0]
 800571a:	e013      	b.n	8005744 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	015a      	lsls	r2, r3, #5
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	4413      	add	r3, r2
 8005724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005728:	461a      	mov	r2, r3
 800572a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800572e:	6013      	str	r3, [r2, #0]
 8005730:	e008      	b.n	8005744 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	015a      	lsls	r2, r3, #5
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	4413      	add	r3, r2
 800573a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800573e:	461a      	mov	r2, r3
 8005740:	2300      	movs	r3, #0
 8005742:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	015a      	lsls	r2, r3, #5
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	4413      	add	r3, r2
 800574c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005750:	461a      	mov	r2, r3
 8005752:	2300      	movs	r3, #0
 8005754:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	015a      	lsls	r2, r3, #5
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	4413      	add	r3, r2
 800575e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005762:	461a      	mov	r2, r3
 8005764:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005768:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	3301      	adds	r3, #1
 800576e:	613b      	str	r3, [r7, #16]
 8005770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	429a      	cmp	r2, r3
 8005776:	d3b7      	bcc.n	80056e8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005786:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800578a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005798:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800579a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579c:	2b00      	cmp	r3, #0
 800579e:	d105      	bne.n	80057ac <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	699b      	ldr	r3, [r3, #24]
 80057a4:	f043 0210 	orr.w	r2, r3, #16
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	699a      	ldr	r2, [r3, #24]
 80057b0:	4b0f      	ldr	r3, [pc, #60]	; (80057f0 <USB_DevInit+0x2c4>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80057b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d005      	beq.n	80057ca <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	f043 0208 	orr.w	r2, r3, #8
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80057ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d107      	bne.n	80057e0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057d8:	f043 0304 	orr.w	r3, r3, #4
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80057e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3718      	adds	r7, #24
 80057e6:	46bd      	mov	sp, r7
 80057e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057ec:	b004      	add	sp, #16
 80057ee:	4770      	bx	lr
 80057f0:	803c3800 	.word	0x803c3800

080057f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80057fe:	2300      	movs	r3, #0
 8005800:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	019b      	lsls	r3, r3, #6
 8005806:	f043 0220 	orr.w	r2, r3, #32
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	3301      	adds	r3, #1
 8005812:	60fb      	str	r3, [r7, #12]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	4a09      	ldr	r2, [pc, #36]	; (800583c <USB_FlushTxFifo+0x48>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d901      	bls.n	8005820 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800581c:	2303      	movs	r3, #3
 800581e:	e006      	b.n	800582e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	f003 0320 	and.w	r3, r3, #32
 8005828:	2b20      	cmp	r3, #32
 800582a:	d0f0      	beq.n	800580e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	3714      	adds	r7, #20
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	00030d40 	.word	0x00030d40

08005840 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005848:	2300      	movs	r3, #0
 800584a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2210      	movs	r2, #16
 8005850:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	3301      	adds	r3, #1
 8005856:	60fb      	str	r3, [r7, #12]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	4a09      	ldr	r2, [pc, #36]	; (8005880 <USB_FlushRxFifo+0x40>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d901      	bls.n	8005864 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e006      	b.n	8005872 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	f003 0310 	and.w	r3, r3, #16
 800586c:	2b10      	cmp	r3, #16
 800586e:	d0f0      	beq.n	8005852 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3714      	adds	r7, #20
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	00030d40 	.word	0x00030d40

08005884 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	460b      	mov	r3, r1
 800588e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	78fb      	ldrb	r3, [r7, #3]
 800589e:	68f9      	ldr	r1, [r7, #12]
 80058a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058a4:	4313      	orrs	r3, r2
 80058a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3714      	adds	r7, #20
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80058b6:	b480      	push	{r7}
 80058b8:	b087      	sub	sp, #28
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f003 0306 	and.w	r3, r3, #6
 80058ce:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d102      	bne.n	80058dc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80058d6:	2300      	movs	r3, #0
 80058d8:	75fb      	strb	r3, [r7, #23]
 80058da:	e00a      	b.n	80058f2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d002      	beq.n	80058e8 <USB_GetDevSpeed+0x32>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2b06      	cmp	r3, #6
 80058e6:	d102      	bne.n	80058ee <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80058e8:	2302      	movs	r3, #2
 80058ea:	75fb      	strb	r3, [r7, #23]
 80058ec:	e001      	b.n	80058f2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80058ee:	230f      	movs	r3, #15
 80058f0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80058f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	371c      	adds	r7, #28
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	785b      	ldrb	r3, [r3, #1]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d13a      	bne.n	8005992 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005922:	69da      	ldr	r2, [r3, #28]
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	f003 030f 	and.w	r3, r3, #15
 800592c:	2101      	movs	r1, #1
 800592e:	fa01 f303 	lsl.w	r3, r1, r3
 8005932:	b29b      	uxth	r3, r3
 8005934:	68f9      	ldr	r1, [r7, #12]
 8005936:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800593a:	4313      	orrs	r3, r2
 800593c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	015a      	lsls	r2, r3, #5
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	4413      	add	r3, r2
 8005946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005950:	2b00      	cmp	r3, #0
 8005952:	d155      	bne.n	8005a00 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	015a      	lsls	r2, r3, #5
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	4413      	add	r3, r2
 800595c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	78db      	ldrb	r3, [r3, #3]
 800596e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005970:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	059b      	lsls	r3, r3, #22
 8005976:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005978:	4313      	orrs	r3, r2
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	0151      	lsls	r1, r2, #5
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	440a      	add	r2, r1
 8005982:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005986:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800598a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800598e:	6013      	str	r3, [r2, #0]
 8005990:	e036      	b.n	8005a00 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005998:	69da      	ldr	r2, [r3, #28]
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	f003 030f 	and.w	r3, r3, #15
 80059a2:	2101      	movs	r1, #1
 80059a4:	fa01 f303 	lsl.w	r3, r1, r3
 80059a8:	041b      	lsls	r3, r3, #16
 80059aa:	68f9      	ldr	r1, [r7, #12]
 80059ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059b0:	4313      	orrs	r3, r2
 80059b2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	015a      	lsls	r2, r3, #5
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	4413      	add	r3, r2
 80059bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d11a      	bne.n	8005a00 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	015a      	lsls	r2, r3, #5
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	4413      	add	r3, r2
 80059d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	78db      	ldrb	r3, [r3, #3]
 80059e4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80059e6:	430b      	orrs	r3, r1
 80059e8:	4313      	orrs	r3, r2
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	0151      	lsls	r1, r2, #5
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	440a      	add	r2, r1
 80059f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059fe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3714      	adds	r7, #20
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
	...

08005a10 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	785b      	ldrb	r3, [r3, #1]
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d161      	bne.n	8005af0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	015a      	lsls	r2, r3, #5
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	4413      	add	r3, r2
 8005a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a42:	d11f      	bne.n	8005a84 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	015a      	lsls	r2, r3, #5
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68ba      	ldr	r2, [r7, #8]
 8005a54:	0151      	lsls	r1, r2, #5
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	440a      	add	r2, r1
 8005a5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005a62:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	015a      	lsls	r2, r3, #5
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	0151      	lsls	r1, r2, #5
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	440a      	add	r2, r1
 8005a7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a82:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	f003 030f 	and.w	r3, r3, #15
 8005a94:	2101      	movs	r1, #1
 8005a96:	fa01 f303 	lsl.w	r3, r1, r3
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	43db      	mvns	r3, r3
 8005a9e:	68f9      	ldr	r1, [r7, #12]
 8005aa0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aae:	69da      	ldr	r2, [r3, #28]
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	f003 030f 	and.w	r3, r3, #15
 8005ab8:	2101      	movs	r1, #1
 8005aba:	fa01 f303 	lsl.w	r3, r1, r3
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	43db      	mvns	r3, r3
 8005ac2:	68f9      	ldr	r1, [r7, #12]
 8005ac4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ac8:	4013      	ands	r3, r2
 8005aca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	015a      	lsls	r2, r3, #5
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	0159      	lsls	r1, r3, #5
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	440b      	add	r3, r1
 8005ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	4b35      	ldr	r3, [pc, #212]	; (8005bc0 <USB_DeactivateEndpoint+0x1b0>)
 8005aea:	4013      	ands	r3, r2
 8005aec:	600b      	str	r3, [r1, #0]
 8005aee:	e060      	b.n	8005bb2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	015a      	lsls	r2, r3, #5
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	4413      	add	r3, r2
 8005af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b06:	d11f      	bne.n	8005b48 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	015a      	lsls	r2, r3, #5
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	4413      	add	r3, r2
 8005b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68ba      	ldr	r2, [r7, #8]
 8005b18:	0151      	lsls	r1, r2, #5
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	440a      	add	r2, r1
 8005b1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b22:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b26:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	015a      	lsls	r2, r3, #5
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68ba      	ldr	r2, [r7, #8]
 8005b38:	0151      	lsls	r1, r2, #5
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	440a      	add	r2, r1
 8005b3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b46:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	f003 030f 	and.w	r3, r3, #15
 8005b58:	2101      	movs	r1, #1
 8005b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b5e:	041b      	lsls	r3, r3, #16
 8005b60:	43db      	mvns	r3, r3
 8005b62:	68f9      	ldr	r1, [r7, #12]
 8005b64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b68:	4013      	ands	r3, r2
 8005b6a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b72:	69da      	ldr	r2, [r3, #28]
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	f003 030f 	and.w	r3, r3, #15
 8005b7c:	2101      	movs	r1, #1
 8005b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b82:	041b      	lsls	r3, r3, #16
 8005b84:	43db      	mvns	r3, r3
 8005b86:	68f9      	ldr	r1, [r7, #12]
 8005b88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	015a      	lsls	r2, r3, #5
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	4413      	add	r3, r2
 8005b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	0159      	lsls	r1, r3, #5
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	440b      	add	r3, r1
 8005ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005baa:	4619      	mov	r1, r3
 8005bac:	4b05      	ldr	r3, [pc, #20]	; (8005bc4 <USB_DeactivateEndpoint+0x1b4>)
 8005bae:	4013      	ands	r3, r2
 8005bb0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3714      	adds	r7, #20
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr
 8005bc0:	ec337800 	.word	0xec337800
 8005bc4:	eff37800 	.word	0xeff37800

08005bc8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b08a      	sub	sp, #40	; 0x28
 8005bcc:	af02      	add	r7, sp, #8
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	785b      	ldrb	r3, [r3, #1]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	f040 815c 	bne.w	8005ea2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	695b      	ldr	r3, [r3, #20]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d132      	bne.n	8005c58 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	015a      	lsls	r2, r3, #5
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	69ba      	ldr	r2, [r7, #24]
 8005c02:	0151      	lsls	r1, r2, #5
 8005c04:	69fa      	ldr	r2, [r7, #28]
 8005c06:	440a      	add	r2, r1
 8005c08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c0c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c10:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	015a      	lsls	r2, r3, #5
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	0151      	lsls	r1, r2, #5
 8005c28:	69fa      	ldr	r2, [r7, #28]
 8005c2a:	440a      	add	r2, r1
 8005c2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	015a      	lsls	r2, r3, #5
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	69ba      	ldr	r2, [r7, #24]
 8005c46:	0151      	lsls	r1, r2, #5
 8005c48:	69fa      	ldr	r2, [r7, #28]
 8005c4a:	440a      	add	r2, r1
 8005c4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c50:	0cdb      	lsrs	r3, r3, #19
 8005c52:	04db      	lsls	r3, r3, #19
 8005c54:	6113      	str	r3, [r2, #16]
 8005c56:	e074      	b.n	8005d42 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	015a      	lsls	r2, r3, #5
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	4413      	add	r3, r2
 8005c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	69ba      	ldr	r2, [r7, #24]
 8005c68:	0151      	lsls	r1, r2, #5
 8005c6a:	69fa      	ldr	r2, [r7, #28]
 8005c6c:	440a      	add	r2, r1
 8005c6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c72:	0cdb      	lsrs	r3, r3, #19
 8005c74:	04db      	lsls	r3, r3, #19
 8005c76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	015a      	lsls	r2, r3, #5
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	4413      	add	r3, r2
 8005c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	69ba      	ldr	r2, [r7, #24]
 8005c88:	0151      	lsls	r1, r2, #5
 8005c8a:	69fa      	ldr	r2, [r7, #28]
 8005c8c:	440a      	add	r2, r1
 8005c8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c92:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c96:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	015a      	lsls	r2, r3, #5
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca8:	691a      	ldr	r2, [r3, #16]
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	6959      	ldr	r1, [r3, #20]
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	440b      	add	r3, r1
 8005cb4:	1e59      	subs	r1, r3, #1
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	fbb1 f3f3 	udiv	r3, r1, r3
 8005cbe:	04d9      	lsls	r1, r3, #19
 8005cc0:	4b9d      	ldr	r3, [pc, #628]	; (8005f38 <USB_EPStartXfer+0x370>)
 8005cc2:	400b      	ands	r3, r1
 8005cc4:	69b9      	ldr	r1, [r7, #24]
 8005cc6:	0148      	lsls	r0, r1, #5
 8005cc8:	69f9      	ldr	r1, [r7, #28]
 8005cca:	4401      	add	r1, r0
 8005ccc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	015a      	lsls	r2, r3, #5
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	4413      	add	r3, r2
 8005cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce0:	691a      	ldr	r2, [r3, #16]
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	695b      	ldr	r3, [r3, #20]
 8005ce6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cea:	69b9      	ldr	r1, [r7, #24]
 8005cec:	0148      	lsls	r0, r1, #5
 8005cee:	69f9      	ldr	r1, [r7, #28]
 8005cf0:	4401      	add	r1, r0
 8005cf2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	78db      	ldrb	r3, [r3, #3]
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d11f      	bne.n	8005d42 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	015a      	lsls	r2, r3, #5
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	4413      	add	r3, r2
 8005d0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	69ba      	ldr	r2, [r7, #24]
 8005d12:	0151      	lsls	r1, r2, #5
 8005d14:	69fa      	ldr	r2, [r7, #28]
 8005d16:	440a      	add	r2, r1
 8005d18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d1c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005d20:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	015a      	lsls	r2, r3, #5
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	4413      	add	r3, r2
 8005d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	69ba      	ldr	r2, [r7, #24]
 8005d32:	0151      	lsls	r1, r2, #5
 8005d34:	69fa      	ldr	r2, [r7, #28]
 8005d36:	440a      	add	r2, r1
 8005d38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d40:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005d42:	79fb      	ldrb	r3, [r7, #7]
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d14b      	bne.n	8005de0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d009      	beq.n	8005d64 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	015a      	lsls	r2, r3, #5
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	4413      	add	r3, r2
 8005d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	78db      	ldrb	r3, [r3, #3]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d128      	bne.n	8005dbe <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d110      	bne.n	8005d9e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	015a      	lsls	r2, r3, #5
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	4413      	add	r3, r2
 8005d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	69ba      	ldr	r2, [r7, #24]
 8005d8c:	0151      	lsls	r1, r2, #5
 8005d8e:	69fa      	ldr	r2, [r7, #28]
 8005d90:	440a      	add	r2, r1
 8005d92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d9a:	6013      	str	r3, [r2, #0]
 8005d9c:	e00f      	b.n	8005dbe <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	015a      	lsls	r2, r3, #5
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	4413      	add	r3, r2
 8005da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	69ba      	ldr	r2, [r7, #24]
 8005dae:	0151      	lsls	r1, r2, #5
 8005db0:	69fa      	ldr	r2, [r7, #28]
 8005db2:	440a      	add	r2, r1
 8005db4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dbc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	015a      	lsls	r2, r3, #5
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	69ba      	ldr	r2, [r7, #24]
 8005dce:	0151      	lsls	r1, r2, #5
 8005dd0:	69fa      	ldr	r2, [r7, #28]
 8005dd2:	440a      	add	r2, r1
 8005dd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dd8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ddc:	6013      	str	r3, [r2, #0]
 8005dde:	e12f      	b.n	8006040 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	015a      	lsls	r2, r3, #5
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	4413      	add	r3, r2
 8005de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	69ba      	ldr	r2, [r7, #24]
 8005df0:	0151      	lsls	r1, r2, #5
 8005df2:	69fa      	ldr	r2, [r7, #28]
 8005df4:	440a      	add	r2, r1
 8005df6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dfa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005dfe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	78db      	ldrb	r3, [r3, #3]
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d015      	beq.n	8005e34 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	695b      	ldr	r3, [r3, #20]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	f000 8117 	beq.w	8006040 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	f003 030f 	and.w	r3, r3, #15
 8005e22:	2101      	movs	r1, #1
 8005e24:	fa01 f303 	lsl.w	r3, r1, r3
 8005e28:	69f9      	ldr	r1, [r7, #28]
 8005e2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	634b      	str	r3, [r1, #52]	; 0x34
 8005e32:	e105      	b.n	8006040 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d110      	bne.n	8005e66 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	015a      	lsls	r2, r3, #5
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	69ba      	ldr	r2, [r7, #24]
 8005e54:	0151      	lsls	r1, r2, #5
 8005e56:	69fa      	ldr	r2, [r7, #28]
 8005e58:	440a      	add	r2, r1
 8005e5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e62:	6013      	str	r3, [r2, #0]
 8005e64:	e00f      	b.n	8005e86 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	015a      	lsls	r2, r3, #5
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	69ba      	ldr	r2, [r7, #24]
 8005e76:	0151      	lsls	r1, r2, #5
 8005e78:	69fa      	ldr	r2, [r7, #28]
 8005e7a:	440a      	add	r2, r1
 8005e7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e84:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	68d9      	ldr	r1, [r3, #12]
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	781a      	ldrb	r2, [r3, #0]
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	695b      	ldr	r3, [r3, #20]
 8005e92:	b298      	uxth	r0, r3
 8005e94:	79fb      	ldrb	r3, [r7, #7]
 8005e96:	9300      	str	r3, [sp, #0]
 8005e98:	4603      	mov	r3, r0
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	f000 fa2b 	bl	80062f6 <USB_WritePacket>
 8005ea0:	e0ce      	b.n	8006040 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	015a      	lsls	r2, r3, #5
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	69ba      	ldr	r2, [r7, #24]
 8005eb2:	0151      	lsls	r1, r2, #5
 8005eb4:	69fa      	ldr	r2, [r7, #28]
 8005eb6:	440a      	add	r2, r1
 8005eb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ebc:	0cdb      	lsrs	r3, r3, #19
 8005ebe:	04db      	lsls	r3, r3, #19
 8005ec0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	015a      	lsls	r2, r3, #5
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	4413      	add	r3, r2
 8005eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	69ba      	ldr	r2, [r7, #24]
 8005ed2:	0151      	lsls	r1, r2, #5
 8005ed4:	69fa      	ldr	r2, [r7, #28]
 8005ed6:	440a      	add	r2, r1
 8005ed8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005edc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ee0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ee4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	695b      	ldr	r3, [r3, #20]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d126      	bne.n	8005f3c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	015a      	lsls	r2, r3, #5
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005efa:	691a      	ldr	r2, [r3, #16]
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f04:	69b9      	ldr	r1, [r7, #24]
 8005f06:	0148      	lsls	r0, r1, #5
 8005f08:	69f9      	ldr	r1, [r7, #28]
 8005f0a:	4401      	add	r1, r0
 8005f0c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f10:	4313      	orrs	r3, r2
 8005f12:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	015a      	lsls	r2, r3, #5
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	69ba      	ldr	r2, [r7, #24]
 8005f24:	0151      	lsls	r1, r2, #5
 8005f26:	69fa      	ldr	r2, [r7, #28]
 8005f28:	440a      	add	r2, r1
 8005f2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f32:	6113      	str	r3, [r2, #16]
 8005f34:	e036      	b.n	8005fa4 <USB_EPStartXfer+0x3dc>
 8005f36:	bf00      	nop
 8005f38:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	695a      	ldr	r2, [r3, #20]
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	4413      	add	r3, r2
 8005f46:	1e5a      	subs	r2, r3, #1
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f50:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	015a      	lsls	r2, r3, #5
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	4413      	add	r3, r2
 8005f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f5e:	691a      	ldr	r2, [r3, #16]
 8005f60:	8afb      	ldrh	r3, [r7, #22]
 8005f62:	04d9      	lsls	r1, r3, #19
 8005f64:	4b39      	ldr	r3, [pc, #228]	; (800604c <USB_EPStartXfer+0x484>)
 8005f66:	400b      	ands	r3, r1
 8005f68:	69b9      	ldr	r1, [r7, #24]
 8005f6a:	0148      	lsls	r0, r1, #5
 8005f6c:	69f9      	ldr	r1, [r7, #28]
 8005f6e:	4401      	add	r1, r0
 8005f70:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f74:	4313      	orrs	r3, r2
 8005f76:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	015a      	lsls	r2, r3, #5
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	4413      	add	r3, r2
 8005f80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f84:	691a      	ldr	r2, [r3, #16]
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	8af9      	ldrh	r1, [r7, #22]
 8005f8c:	fb01 f303 	mul.w	r3, r1, r3
 8005f90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f94:	69b9      	ldr	r1, [r7, #24]
 8005f96:	0148      	lsls	r0, r1, #5
 8005f98:	69f9      	ldr	r1, [r7, #28]
 8005f9a:	4401      	add	r1, r0
 8005f9c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005fa4:	79fb      	ldrb	r3, [r7, #7]
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d10d      	bne.n	8005fc6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d009      	beq.n	8005fc6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	68d9      	ldr	r1, [r3, #12]
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	015a      	lsls	r2, r3, #5
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc2:	460a      	mov	r2, r1
 8005fc4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	78db      	ldrb	r3, [r3, #3]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d128      	bne.n	8006020 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d110      	bne.n	8006000 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	015a      	lsls	r2, r3, #5
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	69ba      	ldr	r2, [r7, #24]
 8005fee:	0151      	lsls	r1, r2, #5
 8005ff0:	69fa      	ldr	r2, [r7, #28]
 8005ff2:	440a      	add	r2, r1
 8005ff4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ff8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ffc:	6013      	str	r3, [r2, #0]
 8005ffe:	e00f      	b.n	8006020 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	015a      	lsls	r2, r3, #5
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	4413      	add	r3, r2
 8006008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	69ba      	ldr	r2, [r7, #24]
 8006010:	0151      	lsls	r1, r2, #5
 8006012:	69fa      	ldr	r2, [r7, #28]
 8006014:	440a      	add	r2, r1
 8006016:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800601a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800601e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	015a      	lsls	r2, r3, #5
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	4413      	add	r3, r2
 8006028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	69ba      	ldr	r2, [r7, #24]
 8006030:	0151      	lsls	r1, r2, #5
 8006032:	69fa      	ldr	r2, [r7, #28]
 8006034:	440a      	add	r2, r1
 8006036:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800603a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800603e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006040:	2300      	movs	r3, #0
}
 8006042:	4618      	mov	r0, r3
 8006044:	3720      	adds	r7, #32
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	1ff80000 	.word	0x1ff80000

08006050 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006050:	b480      	push	{r7}
 8006052:	b087      	sub	sp, #28
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	4613      	mov	r3, r2
 800605c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	785b      	ldrb	r3, [r3, #1]
 800606c:	2b01      	cmp	r3, #1
 800606e:	f040 80cd 	bne.w	800620c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d132      	bne.n	80060e0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	015a      	lsls	r2, r3, #5
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	4413      	add	r3, r2
 8006082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	0151      	lsls	r1, r2, #5
 800608c:	697a      	ldr	r2, [r7, #20]
 800608e:	440a      	add	r2, r1
 8006090:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006094:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006098:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800609c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	015a      	lsls	r2, r3, #5
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	4413      	add	r3, r2
 80060a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	0151      	lsls	r1, r2, #5
 80060b0:	697a      	ldr	r2, [r7, #20]
 80060b2:	440a      	add	r2, r1
 80060b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	015a      	lsls	r2, r3, #5
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	4413      	add	r3, r2
 80060c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	693a      	ldr	r2, [r7, #16]
 80060ce:	0151      	lsls	r1, r2, #5
 80060d0:	697a      	ldr	r2, [r7, #20]
 80060d2:	440a      	add	r2, r1
 80060d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060d8:	0cdb      	lsrs	r3, r3, #19
 80060da:	04db      	lsls	r3, r3, #19
 80060dc:	6113      	str	r3, [r2, #16]
 80060de:	e04e      	b.n	800617e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	015a      	lsls	r2, r3, #5
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	4413      	add	r3, r2
 80060e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	0151      	lsls	r1, r2, #5
 80060f2:	697a      	ldr	r2, [r7, #20]
 80060f4:	440a      	add	r2, r1
 80060f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060fa:	0cdb      	lsrs	r3, r3, #19
 80060fc:	04db      	lsls	r3, r3, #19
 80060fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	015a      	lsls	r2, r3, #5
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	4413      	add	r3, r2
 8006108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	693a      	ldr	r2, [r7, #16]
 8006110:	0151      	lsls	r1, r2, #5
 8006112:	697a      	ldr	r2, [r7, #20]
 8006114:	440a      	add	r2, r1
 8006116:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800611a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800611e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006122:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	695a      	ldr	r2, [r3, #20]
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	429a      	cmp	r2, r3
 800612e:	d903      	bls.n	8006138 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	689a      	ldr	r2, [r3, #8]
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	015a      	lsls	r2, r3, #5
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	4413      	add	r3, r2
 8006140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	0151      	lsls	r1, r2, #5
 800614a:	697a      	ldr	r2, [r7, #20]
 800614c:	440a      	add	r2, r1
 800614e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006152:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006156:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	015a      	lsls	r2, r3, #5
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	4413      	add	r3, r2
 8006160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006164:	691a      	ldr	r2, [r3, #16]
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	695b      	ldr	r3, [r3, #20]
 800616a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800616e:	6939      	ldr	r1, [r7, #16]
 8006170:	0148      	lsls	r0, r1, #5
 8006172:	6979      	ldr	r1, [r7, #20]
 8006174:	4401      	add	r1, r0
 8006176:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800617a:	4313      	orrs	r3, r2
 800617c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800617e:	79fb      	ldrb	r3, [r7, #7]
 8006180:	2b01      	cmp	r3, #1
 8006182:	d11e      	bne.n	80061c2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	691b      	ldr	r3, [r3, #16]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d009      	beq.n	80061a0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	015a      	lsls	r2, r3, #5
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	4413      	add	r3, r2
 8006194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006198:	461a      	mov	r2, r3
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	015a      	lsls	r2, r3, #5
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	4413      	add	r3, r2
 80061a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	693a      	ldr	r2, [r7, #16]
 80061b0:	0151      	lsls	r1, r2, #5
 80061b2:	697a      	ldr	r2, [r7, #20]
 80061b4:	440a      	add	r2, r1
 80061b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80061be:	6013      	str	r3, [r2, #0]
 80061c0:	e092      	b.n	80062e8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	015a      	lsls	r2, r3, #5
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	4413      	add	r3, r2
 80061ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	0151      	lsls	r1, r2, #5
 80061d4:	697a      	ldr	r2, [r7, #20]
 80061d6:	440a      	add	r2, r1
 80061d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80061e0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	695b      	ldr	r3, [r3, #20]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d07e      	beq.n	80062e8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	f003 030f 	and.w	r3, r3, #15
 80061fa:	2101      	movs	r1, #1
 80061fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006200:	6979      	ldr	r1, [r7, #20]
 8006202:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006206:	4313      	orrs	r3, r2
 8006208:	634b      	str	r3, [r1, #52]	; 0x34
 800620a:	e06d      	b.n	80062e8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	015a      	lsls	r2, r3, #5
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	4413      	add	r3, r2
 8006214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	693a      	ldr	r2, [r7, #16]
 800621c:	0151      	lsls	r1, r2, #5
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	440a      	add	r2, r1
 8006222:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006226:	0cdb      	lsrs	r3, r3, #19
 8006228:	04db      	lsls	r3, r3, #19
 800622a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	015a      	lsls	r2, r3, #5
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	4413      	add	r3, r2
 8006234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	693a      	ldr	r2, [r7, #16]
 800623c:	0151      	lsls	r1, r2, #5
 800623e:	697a      	ldr	r2, [r7, #20]
 8006240:	440a      	add	r2, r1
 8006242:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006246:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800624a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800624e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	695b      	ldr	r3, [r3, #20]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d003      	beq.n	8006260 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	689a      	ldr	r2, [r3, #8]
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	015a      	lsls	r2, r3, #5
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	4413      	add	r3, r2
 8006268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	693a      	ldr	r2, [r7, #16]
 8006270:	0151      	lsls	r1, r2, #5
 8006272:	697a      	ldr	r2, [r7, #20]
 8006274:	440a      	add	r2, r1
 8006276:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800627a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800627e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	015a      	lsls	r2, r3, #5
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	4413      	add	r3, r2
 8006288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800628c:	691a      	ldr	r2, [r3, #16]
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006296:	6939      	ldr	r1, [r7, #16]
 8006298:	0148      	lsls	r0, r1, #5
 800629a:	6979      	ldr	r1, [r7, #20]
 800629c:	4401      	add	r1, r0
 800629e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80062a2:	4313      	orrs	r3, r2
 80062a4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80062a6:	79fb      	ldrb	r3, [r7, #7]
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d10d      	bne.n	80062c8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d009      	beq.n	80062c8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	68d9      	ldr	r1, [r3, #12]
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	015a      	lsls	r2, r3, #5
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	4413      	add	r3, r2
 80062c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c4:	460a      	mov	r2, r1
 80062c6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	015a      	lsls	r2, r3, #5
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	4413      	add	r3, r2
 80062d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	693a      	ldr	r2, [r7, #16]
 80062d8:	0151      	lsls	r1, r2, #5
 80062da:	697a      	ldr	r2, [r7, #20]
 80062dc:	440a      	add	r2, r1
 80062de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	371c      	adds	r7, #28
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr

080062f6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80062f6:	b480      	push	{r7}
 80062f8:	b089      	sub	sp, #36	; 0x24
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	60f8      	str	r0, [r7, #12]
 80062fe:	60b9      	str	r1, [r7, #8]
 8006300:	4611      	mov	r1, r2
 8006302:	461a      	mov	r2, r3
 8006304:	460b      	mov	r3, r1
 8006306:	71fb      	strb	r3, [r7, #7]
 8006308:	4613      	mov	r3, r2
 800630a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006314:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006318:	2b00      	cmp	r3, #0
 800631a:	d11a      	bne.n	8006352 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800631c:	88bb      	ldrh	r3, [r7, #4]
 800631e:	3303      	adds	r3, #3
 8006320:	089b      	lsrs	r3, r3, #2
 8006322:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006324:	2300      	movs	r3, #0
 8006326:	61bb      	str	r3, [r7, #24]
 8006328:	e00f      	b.n	800634a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800632a:	79fb      	ldrb	r3, [r7, #7]
 800632c:	031a      	lsls	r2, r3, #12
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	4413      	add	r3, r2
 8006332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006336:	461a      	mov	r2, r3
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	3304      	adds	r3, #4
 8006342:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	3301      	adds	r3, #1
 8006348:	61bb      	str	r3, [r7, #24]
 800634a:	69ba      	ldr	r2, [r7, #24]
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	429a      	cmp	r2, r3
 8006350:	d3eb      	bcc.n	800632a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3724      	adds	r7, #36	; 0x24
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006360:	b480      	push	{r7}
 8006362:	b089      	sub	sp, #36	; 0x24
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	4613      	mov	r3, r2
 800636c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006376:	88fb      	ldrh	r3, [r7, #6]
 8006378:	3303      	adds	r3, #3
 800637a:	089b      	lsrs	r3, r3, #2
 800637c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800637e:	2300      	movs	r3, #0
 8006380:	61bb      	str	r3, [r7, #24]
 8006382:	e00b      	b.n	800639c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	3304      	adds	r3, #4
 8006394:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	3301      	adds	r3, #1
 800639a:	61bb      	str	r3, [r7, #24]
 800639c:	69ba      	ldr	r2, [r7, #24]
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d3ef      	bcc.n	8006384 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80063a4:	69fb      	ldr	r3, [r7, #28]
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3724      	adds	r7, #36	; 0x24
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr

080063b2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80063b2:	b480      	push	{r7}
 80063b4:	b085      	sub	sp, #20
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
 80063ba:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	785b      	ldrb	r3, [r3, #1]
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d12c      	bne.n	8006428 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	015a      	lsls	r2, r3, #5
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	4413      	add	r3, r2
 80063d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	db12      	blt.n	8006406 <USB_EPSetStall+0x54>
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00f      	beq.n	8006406 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	015a      	lsls	r2, r3, #5
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	4413      	add	r3, r2
 80063ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68ba      	ldr	r2, [r7, #8]
 80063f6:	0151      	lsls	r1, r2, #5
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	440a      	add	r2, r1
 80063fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006400:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006404:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	015a      	lsls	r2, r3, #5
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	4413      	add	r3, r2
 800640e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68ba      	ldr	r2, [r7, #8]
 8006416:	0151      	lsls	r1, r2, #5
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	440a      	add	r2, r1
 800641c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006420:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006424:	6013      	str	r3, [r2, #0]
 8006426:	e02b      	b.n	8006480 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	015a      	lsls	r2, r3, #5
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	4413      	add	r3, r2
 8006430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2b00      	cmp	r3, #0
 8006438:	db12      	blt.n	8006460 <USB_EPSetStall+0xae>
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00f      	beq.n	8006460 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	015a      	lsls	r2, r3, #5
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	4413      	add	r3, r2
 8006448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	68ba      	ldr	r2, [r7, #8]
 8006450:	0151      	lsls	r1, r2, #5
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	440a      	add	r2, r1
 8006456:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800645a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800645e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	015a      	lsls	r2, r3, #5
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	4413      	add	r3, r2
 8006468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68ba      	ldr	r2, [r7, #8]
 8006470:	0151      	lsls	r1, r2, #5
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	440a      	add	r2, r1
 8006476:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800647a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800647e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	3714      	adds	r7, #20
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr

0800648e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800648e:	b480      	push	{r7}
 8006490:	b085      	sub	sp, #20
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
 8006496:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	785b      	ldrb	r3, [r3, #1]
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d128      	bne.n	80064fc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	015a      	lsls	r2, r3, #5
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	4413      	add	r3, r2
 80064b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68ba      	ldr	r2, [r7, #8]
 80064ba:	0151      	lsls	r1, r2, #5
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	440a      	add	r2, r1
 80064c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80064c8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	78db      	ldrb	r3, [r3, #3]
 80064ce:	2b03      	cmp	r3, #3
 80064d0:	d003      	beq.n	80064da <USB_EPClearStall+0x4c>
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	78db      	ldrb	r3, [r3, #3]
 80064d6:	2b02      	cmp	r3, #2
 80064d8:	d138      	bne.n	800654c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	015a      	lsls	r2, r3, #5
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	4413      	add	r3, r2
 80064e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68ba      	ldr	r2, [r7, #8]
 80064ea:	0151      	lsls	r1, r2, #5
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	440a      	add	r2, r1
 80064f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064f8:	6013      	str	r3, [r2, #0]
 80064fa:	e027      	b.n	800654c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	015a      	lsls	r2, r3, #5
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	4413      	add	r3, r2
 8006504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68ba      	ldr	r2, [r7, #8]
 800650c:	0151      	lsls	r1, r2, #5
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	440a      	add	r2, r1
 8006512:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006516:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800651a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	78db      	ldrb	r3, [r3, #3]
 8006520:	2b03      	cmp	r3, #3
 8006522:	d003      	beq.n	800652c <USB_EPClearStall+0x9e>
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	78db      	ldrb	r3, [r3, #3]
 8006528:	2b02      	cmp	r3, #2
 800652a:	d10f      	bne.n	800654c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	015a      	lsls	r2, r3, #5
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	4413      	add	r3, r2
 8006534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68ba      	ldr	r2, [r7, #8]
 800653c:	0151      	lsls	r1, r2, #5
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	440a      	add	r2, r1
 8006542:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800654a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	3714      	adds	r7, #20
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr

0800655a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800655a:	b480      	push	{r7}
 800655c:	b085      	sub	sp, #20
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
 8006562:	460b      	mov	r3, r1
 8006564:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006578:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800657c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	78fb      	ldrb	r3, [r7, #3]
 8006588:	011b      	lsls	r3, r3, #4
 800658a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800658e:	68f9      	ldr	r1, [r7, #12]
 8006590:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006594:	4313      	orrs	r3, r2
 8006596:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	3714      	adds	r7, #20
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr

080065a6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80065a6:	b480      	push	{r7}
 80065a8:	b085      	sub	sp, #20
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68fa      	ldr	r2, [r7, #12]
 80065bc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80065c0:	f023 0303 	bic.w	r3, r3, #3
 80065c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065d4:	f023 0302 	bic.w	r3, r3, #2
 80065d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3714      	adds	r7, #20
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr

080065e8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b085      	sub	sp, #20
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006602:	f023 0303 	bic.w	r3, r3, #3
 8006606:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006616:	f043 0302 	orr.w	r3, r3, #2
 800661a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3714      	adds	r7, #20
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr

0800662a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800662a:	b480      	push	{r7}
 800662c:	b085      	sub	sp, #20
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	695b      	ldr	r3, [r3, #20]
 8006636:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	699b      	ldr	r3, [r3, #24]
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	4013      	ands	r3, r2
 8006640:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006642:	68fb      	ldr	r3, [r7, #12]
}
 8006644:	4618      	mov	r0, r3
 8006646:	3714      	adds	r7, #20
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006650:	b480      	push	{r7}
 8006652:	b085      	sub	sp, #20
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006662:	699b      	ldr	r3, [r3, #24]
 8006664:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800666c:	69db      	ldr	r3, [r3, #28]
 800666e:	68ba      	ldr	r2, [r7, #8]
 8006670:	4013      	ands	r3, r2
 8006672:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	0c1b      	lsrs	r3, r3, #16
}
 8006678:	4618      	mov	r0, r3
 800667a:	3714      	adds	r7, #20
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006684:	b480      	push	{r7}
 8006686:	b085      	sub	sp, #20
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006696:	699b      	ldr	r3, [r3, #24]
 8006698:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066a0:	69db      	ldr	r3, [r3, #28]
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	4013      	ands	r3, r2
 80066a6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	b29b      	uxth	r3, r3
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3714      	adds	r7, #20
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b085      	sub	sp, #20
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	460b      	mov	r3, r1
 80066c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80066c8:	78fb      	ldrb	r3, [r7, #3]
 80066ca:	015a      	lsls	r2, r3, #5
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	4413      	add	r3, r2
 80066d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066de:	695b      	ldr	r3, [r3, #20]
 80066e0:	68ba      	ldr	r2, [r7, #8]
 80066e2:	4013      	ands	r3, r2
 80066e4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80066e6:	68bb      	ldr	r3, [r7, #8]
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3714      	adds	r7, #20
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b087      	sub	sp, #28
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	460b      	mov	r3, r1
 80066fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006716:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006718:	78fb      	ldrb	r3, [r7, #3]
 800671a:	f003 030f 	and.w	r3, r3, #15
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	fa22 f303 	lsr.w	r3, r2, r3
 8006724:	01db      	lsls	r3, r3, #7
 8006726:	b2db      	uxtb	r3, r3
 8006728:	693a      	ldr	r2, [r7, #16]
 800672a:	4313      	orrs	r3, r2
 800672c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800672e:	78fb      	ldrb	r3, [r7, #3]
 8006730:	015a      	lsls	r2, r3, #5
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	4413      	add	r3, r2
 8006736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	693a      	ldr	r2, [r7, #16]
 800673e:	4013      	ands	r3, r2
 8006740:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006742:	68bb      	ldr	r3, [r7, #8]
}
 8006744:	4618      	mov	r0, r3
 8006746:	371c      	adds	r7, #28
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	695b      	ldr	r3, [r3, #20]
 800675c:	f003 0301 	and.w	r3, r3, #1
}
 8006760:	4618      	mov	r0, r3
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006786:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800678a:	f023 0307 	bic.w	r3, r3, #7
 800678e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800679e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067a2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3714      	adds	r7, #20
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr
	...

080067b4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b087      	sub	sp, #28
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	460b      	mov	r3, r1
 80067be:	607a      	str	r2, [r7, #4]
 80067c0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	333c      	adds	r3, #60	; 0x3c
 80067ca:	3304      	adds	r3, #4
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	4a26      	ldr	r2, [pc, #152]	; (800686c <USB_EP0_OutStart+0xb8>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d90a      	bls.n	80067ee <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067e8:	d101      	bne.n	80067ee <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80067ea:	2300      	movs	r3, #0
 80067ec:	e037      	b.n	800685e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067f4:	461a      	mov	r2, r3
 80067f6:	2300      	movs	r3, #0
 80067f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	697a      	ldr	r2, [r7, #20]
 8006804:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006808:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800680c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	697a      	ldr	r2, [r7, #20]
 8006818:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800681c:	f043 0318 	orr.w	r3, r3, #24
 8006820:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006828:	691b      	ldr	r3, [r3, #16]
 800682a:	697a      	ldr	r2, [r7, #20]
 800682c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006830:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006834:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006836:	7afb      	ldrb	r3, [r7, #11]
 8006838:	2b01      	cmp	r3, #1
 800683a:	d10f      	bne.n	800685c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006842:	461a      	mov	r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	697a      	ldr	r2, [r7, #20]
 8006852:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006856:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800685a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	371c      	adds	r7, #28
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop
 800686c:	4f54300a 	.word	0x4f54300a

08006870 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006870:	b480      	push	{r7}
 8006872:	b085      	sub	sp, #20
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006878:	2300      	movs	r3, #0
 800687a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	3301      	adds	r3, #1
 8006880:	60fb      	str	r3, [r7, #12]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	4a13      	ldr	r2, [pc, #76]	; (80068d4 <USB_CoreReset+0x64>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d901      	bls.n	800688e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800688a:	2303      	movs	r3, #3
 800688c:	e01b      	b.n	80068c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	2b00      	cmp	r3, #0
 8006894:	daf2      	bge.n	800687c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006896:	2300      	movs	r3, #0
 8006898:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	f043 0201 	orr.w	r2, r3, #1
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	3301      	adds	r3, #1
 80068aa:	60fb      	str	r3, [r7, #12]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	4a09      	ldr	r2, [pc, #36]	; (80068d4 <USB_CoreReset+0x64>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d901      	bls.n	80068b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80068b4:	2303      	movs	r3, #3
 80068b6:	e006      	b.n	80068c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	f003 0301 	and.w	r3, r3, #1
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d0f0      	beq.n	80068a6 <USB_CoreReset+0x36>

  return HAL_OK;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3714      	adds	r7, #20
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	00030d40 	.word	0x00030d40

080068d8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	460b      	mov	r3, r1
 80068e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80068e4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80068e8:	f002 f9ae 	bl	8008c48 <malloc>
 80068ec:	4603      	mov	r3, r0
 80068ee:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d105      	bne.n	8006902 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80068fe:	2302      	movs	r3, #2
 8006900:	e066      	b.n	80069d0 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	68fa      	ldr	r2, [r7, #12]
 8006906:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	7c1b      	ldrb	r3, [r3, #16]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d119      	bne.n	8006946 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006912:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006916:	2202      	movs	r2, #2
 8006918:	2181      	movs	r1, #129	; 0x81
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f002 f81b 	bl	8008956 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006926:	f44f 7300 	mov.w	r3, #512	; 0x200
 800692a:	2202      	movs	r2, #2
 800692c:	2101      	movs	r1, #1
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f002 f811 	bl	8008956 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2210      	movs	r2, #16
 8006940:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006944:	e016      	b.n	8006974 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006946:	2340      	movs	r3, #64	; 0x40
 8006948:	2202      	movs	r2, #2
 800694a:	2181      	movs	r1, #129	; 0x81
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f002 f802 	bl	8008956 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2201      	movs	r2, #1
 8006956:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006958:	2340      	movs	r3, #64	; 0x40
 800695a:	2202      	movs	r2, #2
 800695c:	2101      	movs	r1, #1
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f001 fff9 	bl	8008956 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2210      	movs	r2, #16
 8006970:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006974:	2308      	movs	r3, #8
 8006976:	2203      	movs	r2, #3
 8006978:	2182      	movs	r1, #130	; 0x82
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f001 ffeb 	bl	8008956 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2200      	movs	r2, #0
 8006996:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2200      	movs	r2, #0
 800699e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	7c1b      	ldrb	r3, [r3, #16]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d109      	bne.n	80069be <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80069b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069b4:	2101      	movs	r1, #1
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f002 f8bc 	bl	8008b34 <USBD_LL_PrepareReceive>
 80069bc:	e007      	b.n	80069ce <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80069c4:	2340      	movs	r3, #64	; 0x40
 80069c6:	2101      	movs	r1, #1
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f002 f8b3 	bl	8008b34 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3710      	adds	r7, #16
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	460b      	mov	r3, r1
 80069e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 80069e4:	2300      	movs	r3, #0
 80069e6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80069e8:	2181      	movs	r1, #129	; 0x81
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f001 ffd9 	bl	80089a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80069f6:	2101      	movs	r1, #1
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f001 ffd2 	bl	80089a2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006a06:	2182      	movs	r1, #130	; 0x82
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f001 ffca 	bl	80089a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d00e      	beq.n	8006a46 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f002 f90d 	bl	8008c58 <free>
    pdev->pClassData = NULL;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8006a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3710      	adds	r7, #16
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b086      	sub	sp, #24
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a60:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006a62:	2300      	movs	r3, #0
 8006a64:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006a66:	2300      	movs	r3, #0
 8006a68:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d03a      	beq.n	8006af0 <USBD_CDC_Setup+0xa0>
 8006a7a:	2b20      	cmp	r3, #32
 8006a7c:	f040 8097 	bne.w	8006bae <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	88db      	ldrh	r3, [r3, #6]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d029      	beq.n	8006adc <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	b25b      	sxtb	r3, r3
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	da11      	bge.n	8006ab6 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	683a      	ldr	r2, [r7, #0]
 8006a9c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8006a9e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006aa0:	683a      	ldr	r2, [r7, #0]
 8006aa2:	88d2      	ldrh	r2, [r2, #6]
 8006aa4:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006aa6:	6939      	ldr	r1, [r7, #16]
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	88db      	ldrh	r3, [r3, #6]
 8006aac:	461a      	mov	r2, r3
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f001 fa9d 	bl	8007fee <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8006ab4:	e082      	b.n	8006bbc <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	785a      	ldrb	r2, [r3, #1]
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	88db      	ldrh	r3, [r3, #6]
 8006ac4:	b2da      	uxtb	r2, r3
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006acc:	6939      	ldr	r1, [r7, #16]
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	88db      	ldrh	r3, [r3, #6]
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f001 fab6 	bl	8008046 <USBD_CtlPrepareRx>
    break;
 8006ada:	e06f      	b.n	8006bbc <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	683a      	ldr	r2, [r7, #0]
 8006ae6:	7850      	ldrb	r0, [r2, #1]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	6839      	ldr	r1, [r7, #0]
 8006aec:	4798      	blx	r3
    break;
 8006aee:	e065      	b.n	8006bbc <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	785b      	ldrb	r3, [r3, #1]
 8006af4:	2b0b      	cmp	r3, #11
 8006af6:	d84f      	bhi.n	8006b98 <USBD_CDC_Setup+0x148>
 8006af8:	a201      	add	r2, pc, #4	; (adr r2, 8006b00 <USBD_CDC_Setup+0xb0>)
 8006afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006afe:	bf00      	nop
 8006b00:	08006b31 	.word	0x08006b31
 8006b04:	08006ba7 	.word	0x08006ba7
 8006b08:	08006b99 	.word	0x08006b99
 8006b0c:	08006b99 	.word	0x08006b99
 8006b10:	08006b99 	.word	0x08006b99
 8006b14:	08006b99 	.word	0x08006b99
 8006b18:	08006b99 	.word	0x08006b99
 8006b1c:	08006b99 	.word	0x08006b99
 8006b20:	08006b99 	.word	0x08006b99
 8006b24:	08006b99 	.word	0x08006b99
 8006b28:	08006b59 	.word	0x08006b59
 8006b2c:	08006b81 	.word	0x08006b81
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b36:	2b03      	cmp	r3, #3
 8006b38:	d107      	bne.n	8006b4a <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006b3a:	f107 030c 	add.w	r3, r7, #12
 8006b3e:	2202      	movs	r2, #2
 8006b40:	4619      	mov	r1, r3
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f001 fa53 	bl	8007fee <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006b48:	e030      	b.n	8006bac <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006b4a:	6839      	ldr	r1, [r7, #0]
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f001 f9dd 	bl	8007f0c <USBD_CtlError>
        ret = USBD_FAIL;
 8006b52:	2303      	movs	r3, #3
 8006b54:	75fb      	strb	r3, [r7, #23]
      break;
 8006b56:	e029      	b.n	8006bac <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b5e:	2b03      	cmp	r3, #3
 8006b60:	d107      	bne.n	8006b72 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006b62:	f107 030f 	add.w	r3, r7, #15
 8006b66:	2201      	movs	r2, #1
 8006b68:	4619      	mov	r1, r3
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f001 fa3f 	bl	8007fee <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006b70:	e01c      	b.n	8006bac <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006b72:	6839      	ldr	r1, [r7, #0]
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f001 f9c9 	bl	8007f0c <USBD_CtlError>
        ret = USBD_FAIL;
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	75fb      	strb	r3, [r7, #23]
      break;
 8006b7e:	e015      	b.n	8006bac <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b86:	2b03      	cmp	r3, #3
 8006b88:	d00f      	beq.n	8006baa <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8006b8a:	6839      	ldr	r1, [r7, #0]
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f001 f9bd 	bl	8007f0c <USBD_CtlError>
        ret = USBD_FAIL;
 8006b92:	2303      	movs	r3, #3
 8006b94:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006b96:	e008      	b.n	8006baa <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8006b98:	6839      	ldr	r1, [r7, #0]
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f001 f9b6 	bl	8007f0c <USBD_CtlError>
      ret = USBD_FAIL;
 8006ba0:	2303      	movs	r3, #3
 8006ba2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ba4:	e002      	b.n	8006bac <USBD_CDC_Setup+0x15c>
      break;
 8006ba6:	bf00      	nop
 8006ba8:	e008      	b.n	8006bbc <USBD_CDC_Setup+0x16c>
      break;
 8006baa:	bf00      	nop
    }
    break;
 8006bac:	e006      	b.n	8006bbc <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8006bae:	6839      	ldr	r1, [r7, #0]
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f001 f9ab 	bl	8007f0c <USBD_CtlError>
    ret = USBD_FAIL;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	75fb      	strb	r3, [r7, #23]
    break;
 8006bba:	bf00      	nop
  }

  return (uint8_t)ret;
 8006bbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3718      	adds	r7, #24
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop

08006bc8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006bda:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d101      	bne.n	8006bea <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006be6:	2303      	movs	r3, #3
 8006be8:	e049      	b.n	8006c7e <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bf0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006bf2:	78fa      	ldrb	r2, [r7, #3]
 8006bf4:	6879      	ldr	r1, [r7, #4]
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	4413      	add	r3, r2
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	440b      	add	r3, r1
 8006c00:	3318      	adds	r3, #24
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d029      	beq.n	8006c5c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006c08:	78fa      	ldrb	r2, [r7, #3]
 8006c0a:	6879      	ldr	r1, [r7, #4]
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	4413      	add	r3, r2
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	440b      	add	r3, r1
 8006c16:	3318      	adds	r3, #24
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	78f9      	ldrb	r1, [r7, #3]
 8006c1c:	68f8      	ldr	r0, [r7, #12]
 8006c1e:	460b      	mov	r3, r1
 8006c20:	00db      	lsls	r3, r3, #3
 8006c22:	1a5b      	subs	r3, r3, r1
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	4403      	add	r3, r0
 8006c28:	3344      	adds	r3, #68	; 0x44
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006c30:	fb03 f301 	mul.w	r3, r3, r1
 8006c34:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d110      	bne.n	8006c5c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006c3a:	78fa      	ldrb	r2, [r7, #3]
 8006c3c:	6879      	ldr	r1, [r7, #4]
 8006c3e:	4613      	mov	r3, r2
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	4413      	add	r3, r2
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	440b      	add	r3, r1
 8006c48:	3318      	adds	r3, #24
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006c4e:	78f9      	ldrb	r1, [r7, #3]
 8006c50:	2300      	movs	r3, #0
 8006c52:	2200      	movs	r2, #0
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f001 ff4c 	bl	8008af2 <USBD_LL_Transmit>
 8006c5a:	e00f      	b.n	8006c7c <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	68ba      	ldr	r2, [r7, #8]
 8006c6e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006c78:	78fa      	ldrb	r2, [r7, #3]
 8006c7a:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3710      	adds	r7, #16
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}

08006c86 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006c86:	b580      	push	{r7, lr}
 8006c88:	b084      	sub	sp, #16
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
 8006c8e:	460b      	mov	r3, r1
 8006c90:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c98:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d101      	bne.n	8006ca8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006ca4:	2303      	movs	r3, #3
 8006ca6:	e015      	b.n	8006cd4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006ca8:	78fb      	ldrb	r3, [r7, #3]
 8006caa:	4619      	mov	r1, r3
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f001 ff62 	bl	8008b76 <USBD_LL_GetRxDataSize>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	68fa      	ldr	r2, [r7, #12]
 8006cc4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006cce:	4611      	mov	r1, r2
 8006cd0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3710      	adds	r7, #16
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cea:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d015      	beq.n	8006d22 <USBD_CDC_EP0_RxReady+0x46>
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006cfc:	2bff      	cmp	r3, #255	; 0xff
 8006cfe:	d010      	beq.n	8006d22 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	68fa      	ldr	r2, [r7, #12]
 8006d0a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006d0e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006d16:	b292      	uxth	r2, r2
 8006d18:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	22ff      	movs	r2, #255	; 0xff
 8006d1e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8006d22:	2300      	movs	r3, #0
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3710      	adds	r7, #16
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2243      	movs	r2, #67	; 0x43
 8006d38:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006d3a:	4b03      	ldr	r3, [pc, #12]	; (8006d48 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr
 8006d48:	20000094 	.word	0x20000094

08006d4c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2243      	movs	r2, #67	; 0x43
 8006d58:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006d5a:	4b03      	ldr	r3, [pc, #12]	; (8006d68 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	370c      	adds	r7, #12
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr
 8006d68:	20000050 	.word	0x20000050

08006d6c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2243      	movs	r2, #67	; 0x43
 8006d78:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006d7a:	4b03      	ldr	r3, [pc, #12]	; (8006d88 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr
 8006d88:	200000d8 	.word	0x200000d8

08006d8c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	220a      	movs	r2, #10
 8006d98:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006d9a:	4b03      	ldr	r3, [pc, #12]	; (8006da8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr
 8006da8:	2000000c 	.word	0x2000000c

08006dac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d101      	bne.n	8006dc0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	e004      	b.n	8006dca <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	683a      	ldr	r2, [r7, #0]
 8006dc4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	370c      	adds	r7, #12
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr

08006dd6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006dd6:	b480      	push	{r7}
 8006dd8:	b087      	sub	sp, #28
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	60f8      	str	r0, [r7, #12]
 8006dde:	60b9      	str	r1, [r7, #8]
 8006de0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006de8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	68ba      	ldr	r2, [r7, #8]
 8006dee:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	371c      	adds	r7, #28
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e18:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	683a      	ldr	r2, [r7, #0]
 8006e1e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006e22:	2300      	movs	r3, #0
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3714      	adds	r7, #20
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e3e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006e40:	2301      	movs	r3, #1
 8006e42:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d101      	bne.n	8006e52 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006e4e:	2303      	movs	r3, #3
 8006e50:	e01a      	b.n	8006e88 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d114      	bne.n	8006e86 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006e7a:	2181      	movs	r1, #129	; 0x81
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f001 fe38 	bl	8008af2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006e82:	2300      	movs	r3, #0
 8006e84:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3710      	adds	r7, #16
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e9e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d101      	bne.n	8006eae <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e016      	b.n	8006edc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	7c1b      	ldrb	r3, [r3, #16]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d109      	bne.n	8006eca <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ebc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ec0:	2101      	movs	r1, #1
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f001 fe36 	bl	8008b34 <USBD_LL_PrepareReceive>
 8006ec8:	e007      	b.n	8006eda <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ed0:	2340      	movs	r3, #64	; 0x40
 8006ed2:	2101      	movs	r1, #1
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f001 fe2d 	bl	8008b34 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3710      	adds	r7, #16
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b086      	sub	sp, #24
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	4613      	mov	r3, r2
 8006ef0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d101      	bne.n	8006efc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e025      	b.n	8006f48 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d003      	beq.n	8006f0e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d003      	beq.n	8006f20 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d003      	beq.n	8006f2e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	68ba      	ldr	r2, [r7, #8]
 8006f2a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2201      	movs	r2, #1
 8006f32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	79fa      	ldrb	r2, [r7, #7]
 8006f3a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f001 fca3 	bl	8008888 <USBD_LL_Init>
 8006f42:	4603      	mov	r3, r0
 8006f44:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3718      	adds	r7, #24
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d101      	bne.n	8006f68 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006f64:	2303      	movs	r3, #3
 8006f66:	e010      	b.n	8006f8a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	683a      	ldr	r2, [r7, #0]
 8006f6c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f78:	f107 020e 	add.w	r2, r7, #14
 8006f7c:	4610      	mov	r0, r2
 8006f7e:	4798      	blx	r3
 8006f80:	4602      	mov	r2, r0
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8006f88:	2300      	movs	r3, #0
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3710      	adds	r7, #16
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}

08006f92 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006f92:	b580      	push	{r7, lr}
 8006f94:	b082      	sub	sp, #8
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f001 fcc0 	bl	8008920 <USBD_LL_Start>
 8006fa0:	4603      	mov	r3, r0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3708      	adds	r7, #8
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006faa:	b480      	push	{r7}
 8006fac:	b083      	sub	sp, #12
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	370c      	adds	r7, #12
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	460b      	mov	r3, r1
 8006fca:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006fcc:	2303      	movs	r3, #3
 8006fce:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d009      	beq.n	8006fee <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	78fa      	ldrb	r2, [r7, #3]
 8006fe4:	4611      	mov	r1, r2
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	4798      	blx	r3
 8006fea:	4603      	mov	r3, r0
 8006fec:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3710      	adds	r7, #16
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	460b      	mov	r3, r1
 8007002:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800700a:	2b00      	cmp	r3, #0
 800700c:	d007      	beq.n	800701e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	78fa      	ldrb	r2, [r7, #3]
 8007018:	4611      	mov	r1, r2
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	4798      	blx	r3
  }

  return USBD_OK;
 800701e:	2300      	movs	r3, #0
}
 8007020:	4618      	mov	r0, r3
 8007022:	3708      	adds	r7, #8
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007038:	6839      	ldr	r1, [r7, #0]
 800703a:	4618      	mov	r0, r3
 800703c:	f000 ff2c 	bl	8007e98 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800704e:	461a      	mov	r2, r3
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800705c:	f003 031f 	and.w	r3, r3, #31
 8007060:	2b01      	cmp	r3, #1
 8007062:	d00e      	beq.n	8007082 <USBD_LL_SetupStage+0x5a>
 8007064:	2b01      	cmp	r3, #1
 8007066:	d302      	bcc.n	800706e <USBD_LL_SetupStage+0x46>
 8007068:	2b02      	cmp	r3, #2
 800706a:	d014      	beq.n	8007096 <USBD_LL_SetupStage+0x6e>
 800706c:	e01d      	b.n	80070aa <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007074:	4619      	mov	r1, r3
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 fa18 	bl	80074ac <USBD_StdDevReq>
 800707c:	4603      	mov	r3, r0
 800707e:	73fb      	strb	r3, [r7, #15]
      break;
 8007080:	e020      	b.n	80070c4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007088:	4619      	mov	r1, r3
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 fa7c 	bl	8007588 <USBD_StdItfReq>
 8007090:	4603      	mov	r3, r0
 8007092:	73fb      	strb	r3, [r7, #15]
      break;
 8007094:	e016      	b.n	80070c4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800709c:	4619      	mov	r1, r3
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 fab8 	bl	8007614 <USBD_StdEPReq>
 80070a4:	4603      	mov	r3, r0
 80070a6:	73fb      	strb	r3, [r7, #15]
      break;
 80070a8:	e00c      	b.n	80070c4 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80070b0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	4619      	mov	r1, r3
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f001 fc91 	bl	80089e0 <USBD_LL_StallEP>
 80070be:	4603      	mov	r3, r0
 80070c0:	73fb      	strb	r3, [r7, #15]
      break;
 80070c2:	bf00      	nop
  }

  return ret;
 80070c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3710      	adds	r7, #16
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}

080070ce <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80070ce:	b580      	push	{r7, lr}
 80070d0:	b086      	sub	sp, #24
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	60f8      	str	r0, [r7, #12]
 80070d6:	460b      	mov	r3, r1
 80070d8:	607a      	str	r2, [r7, #4]
 80070da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80070dc:	7afb      	ldrb	r3, [r7, #11]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d137      	bne.n	8007152 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80070e8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80070f0:	2b03      	cmp	r3, #3
 80070f2:	d14a      	bne.n	800718a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	689a      	ldr	r2, [r3, #8]
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d913      	bls.n	8007128 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	689a      	ldr	r2, [r3, #8]
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	1ad2      	subs	r2, r2, r3
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	68da      	ldr	r2, [r3, #12]
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	4293      	cmp	r3, r2
 8007118:	bf28      	it	cs
 800711a:	4613      	movcs	r3, r2
 800711c:	461a      	mov	r2, r3
 800711e:	6879      	ldr	r1, [r7, #4]
 8007120:	68f8      	ldr	r0, [r7, #12]
 8007122:	f000 ffad 	bl	8008080 <USBD_CtlContinueRx>
 8007126:	e030      	b.n	800718a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d00a      	beq.n	800714a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800713a:	2b03      	cmp	r3, #3
 800713c:	d105      	bne.n	800714a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	68f8      	ldr	r0, [r7, #12]
 8007148:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800714a:	68f8      	ldr	r0, [r7, #12]
 800714c:	f000 ffa9 	bl	80080a2 <USBD_CtlSendStatus>
 8007150:	e01b      	b.n	800718a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007158:	699b      	ldr	r3, [r3, #24]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d013      	beq.n	8007186 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007164:	2b03      	cmp	r3, #3
 8007166:	d10e      	bne.n	8007186 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800716e:	699b      	ldr	r3, [r3, #24]
 8007170:	7afa      	ldrb	r2, [r7, #11]
 8007172:	4611      	mov	r1, r2
 8007174:	68f8      	ldr	r0, [r7, #12]
 8007176:	4798      	blx	r3
 8007178:	4603      	mov	r3, r0
 800717a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800717c:	7dfb      	ldrb	r3, [r7, #23]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d003      	beq.n	800718a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8007182:	7dfb      	ldrb	r3, [r7, #23]
 8007184:	e002      	b.n	800718c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007186:	2303      	movs	r3, #3
 8007188:	e000      	b.n	800718c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	3718      	adds	r7, #24
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b086      	sub	sp, #24
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	460b      	mov	r3, r1
 800719e:	607a      	str	r2, [r7, #4]
 80071a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80071a2:	7afb      	ldrb	r3, [r7, #11]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d16a      	bne.n	800727e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	3314      	adds	r3, #20
 80071ac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80071b4:	2b02      	cmp	r3, #2
 80071b6:	d155      	bne.n	8007264 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	689a      	ldr	r2, [r3, #8]
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d914      	bls.n	80071ee <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	689a      	ldr	r2, [r3, #8]
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	1ad2      	subs	r2, r2, r3
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	461a      	mov	r2, r3
 80071d8:	6879      	ldr	r1, [r7, #4]
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	f000 ff22 	bl	8008024 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80071e0:	2300      	movs	r3, #0
 80071e2:	2200      	movs	r2, #0
 80071e4:	2100      	movs	r1, #0
 80071e6:	68f8      	ldr	r0, [r7, #12]
 80071e8:	f001 fca4 	bl	8008b34 <USBD_LL_PrepareReceive>
 80071ec:	e03a      	b.n	8007264 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	68da      	ldr	r2, [r3, #12]
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d11c      	bne.n	8007234 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	685a      	ldr	r2, [r3, #4]
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007202:	429a      	cmp	r2, r3
 8007204:	d316      	bcc.n	8007234 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	685a      	ldr	r2, [r3, #4]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007210:	429a      	cmp	r2, r3
 8007212:	d20f      	bcs.n	8007234 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007214:	2200      	movs	r2, #0
 8007216:	2100      	movs	r1, #0
 8007218:	68f8      	ldr	r0, [r7, #12]
 800721a:	f000 ff03 	bl	8008024 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2200      	movs	r2, #0
 8007222:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007226:	2300      	movs	r3, #0
 8007228:	2200      	movs	r2, #0
 800722a:	2100      	movs	r1, #0
 800722c:	68f8      	ldr	r0, [r7, #12]
 800722e:	f001 fc81 	bl	8008b34 <USBD_LL_PrepareReceive>
 8007232:	e017      	b.n	8007264 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d00a      	beq.n	8007256 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007246:	2b03      	cmp	r3, #3
 8007248:	d105      	bne.n	8007256 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	68f8      	ldr	r0, [r7, #12]
 8007254:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007256:	2180      	movs	r1, #128	; 0x80
 8007258:	68f8      	ldr	r0, [r7, #12]
 800725a:	f001 fbc1 	bl	80089e0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800725e:	68f8      	ldr	r0, [r7, #12]
 8007260:	f000 ff32 	bl	80080c8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800726a:	2b01      	cmp	r3, #1
 800726c:	d123      	bne.n	80072b6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800726e:	68f8      	ldr	r0, [r7, #12]
 8007270:	f7ff fe9b 	bl	8006faa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2200      	movs	r2, #0
 8007278:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800727c:	e01b      	b.n	80072b6 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d013      	beq.n	80072b2 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007290:	2b03      	cmp	r3, #3
 8007292:	d10e      	bne.n	80072b2 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800729a:	695b      	ldr	r3, [r3, #20]
 800729c:	7afa      	ldrb	r2, [r7, #11]
 800729e:	4611      	mov	r1, r2
 80072a0:	68f8      	ldr	r0, [r7, #12]
 80072a2:	4798      	blx	r3
 80072a4:	4603      	mov	r3, r0
 80072a6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80072a8:	7dfb      	ldrb	r3, [r7, #23]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d003      	beq.n	80072b6 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80072ae:	7dfb      	ldrb	r3, [r7, #23]
 80072b0:	e002      	b.n	80072b8 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80072b2:	2303      	movs	r3, #3
 80072b4:	e000      	b.n	80072b8 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3718      	adds	r7, #24
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2200      	movs	r2, #0
 80072dc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d009      	beq.n	8007304 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	6852      	ldr	r2, [r2, #4]
 80072fc:	b2d2      	uxtb	r2, r2
 80072fe:	4611      	mov	r1, r2
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007304:	2340      	movs	r3, #64	; 0x40
 8007306:	2200      	movs	r2, #0
 8007308:	2100      	movs	r1, #0
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f001 fb23 	bl	8008956 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2240      	movs	r2, #64	; 0x40
 800731c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007320:	2340      	movs	r3, #64	; 0x40
 8007322:	2200      	movs	r2, #0
 8007324:	2180      	movs	r1, #128	; 0x80
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f001 fb15 	bl	8008956 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2240      	movs	r2, #64	; 0x40
 8007336:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	3708      	adds	r7, #8
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}

08007342 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007342:	b480      	push	{r7}
 8007344:	b083      	sub	sp, #12
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
 800734a:	460b      	mov	r3, r1
 800734c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	78fa      	ldrb	r2, [r7, #3]
 8007352:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	370c      	adds	r7, #12
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr

08007362 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007362:	b480      	push	{r7}
 8007364:	b083      	sub	sp, #12
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2204      	movs	r2, #4
 800737a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800737e:	2300      	movs	r3, #0
}
 8007380:	4618      	mov	r0, r3
 8007382:	370c      	adds	r7, #12
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800738c:	b480      	push	{r7}
 800738e:	b083      	sub	sp, #12
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800739a:	2b04      	cmp	r3, #4
 800739c:	d105      	bne.n	80073aa <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80073aa:	2300      	movs	r3, #0
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b082      	sub	sp, #8
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073c6:	2b03      	cmp	r3, #3
 80073c8:	d10b      	bne.n	80073e2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073d0:	69db      	ldr	r3, [r3, #28]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d005      	beq.n	80073e2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073dc:	69db      	ldr	r3, [r3, #28]
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80073e2:	2300      	movs	r3, #0
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3708      	adds	r7, #8
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	460b      	mov	r3, r1
 80073f6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	370c      	adds	r7, #12
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr

08007406 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007406:	b480      	push	{r7}
 8007408:	b083      	sub	sp, #12
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
 800740e:	460b      	mov	r3, r1
 8007410:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007412:	2300      	movs	r3, #0
}
 8007414:	4618      	mov	r0, r3
 8007416:	370c      	adds	r7, #12
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007428:	2300      	movs	r3, #0
}
 800742a:	4618      	mov	r0, r3
 800742c:	370c      	adds	r7, #12
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr

08007436 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007436:	b580      	push	{r7, lr}
 8007438:	b082      	sub	sp, #8
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2201      	movs	r2, #1
 8007442:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800744c:	2b00      	cmp	r3, #0
 800744e:	d009      	beq.n	8007464 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	6852      	ldr	r2, [r2, #4]
 800745c:	b2d2      	uxtb	r2, r2
 800745e:	4611      	mov	r1, r2
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	4798      	blx	r3
  }

  return USBD_OK;
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	3708      	adds	r7, #8
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800746e:	b480      	push	{r7}
 8007470:	b087      	sub	sp, #28
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	3301      	adds	r3, #1
 8007484:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800748c:	8a3b      	ldrh	r3, [r7, #16]
 800748e:	021b      	lsls	r3, r3, #8
 8007490:	b21a      	sxth	r2, r3
 8007492:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007496:	4313      	orrs	r3, r2
 8007498:	b21b      	sxth	r3, r3
 800749a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800749c:	89fb      	ldrh	r3, [r7, #14]
}
 800749e:	4618      	mov	r0, r3
 80074a0:	371c      	adds	r7, #28
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr
	...

080074ac <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80074b6:	2300      	movs	r3, #0
 80074b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074c2:	2b20      	cmp	r3, #32
 80074c4:	d004      	beq.n	80074d0 <USBD_StdDevReq+0x24>
 80074c6:	2b40      	cmp	r3, #64	; 0x40
 80074c8:	d002      	beq.n	80074d0 <USBD_StdDevReq+0x24>
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d00a      	beq.n	80074e4 <USBD_StdDevReq+0x38>
 80074ce:	e050      	b.n	8007572 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	6839      	ldr	r1, [r7, #0]
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	4798      	blx	r3
 80074de:	4603      	mov	r3, r0
 80074e0:	73fb      	strb	r3, [r7, #15]
    break;
 80074e2:	e04b      	b.n	800757c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	785b      	ldrb	r3, [r3, #1]
 80074e8:	2b09      	cmp	r3, #9
 80074ea:	d83c      	bhi.n	8007566 <USBD_StdDevReq+0xba>
 80074ec:	a201      	add	r2, pc, #4	; (adr r2, 80074f4 <USBD_StdDevReq+0x48>)
 80074ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f2:	bf00      	nop
 80074f4:	08007549 	.word	0x08007549
 80074f8:	0800755d 	.word	0x0800755d
 80074fc:	08007567 	.word	0x08007567
 8007500:	08007553 	.word	0x08007553
 8007504:	08007567 	.word	0x08007567
 8007508:	08007527 	.word	0x08007527
 800750c:	0800751d 	.word	0x0800751d
 8007510:	08007567 	.word	0x08007567
 8007514:	0800753f 	.word	0x0800753f
 8007518:	08007531 	.word	0x08007531
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800751c:	6839      	ldr	r1, [r7, #0]
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 f9ce 	bl	80078c0 <USBD_GetDescriptor>
      break;
 8007524:	e024      	b.n	8007570 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8007526:	6839      	ldr	r1, [r7, #0]
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 fb33 	bl	8007b94 <USBD_SetAddress>
      break;
 800752e:	e01f      	b.n	8007570 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8007530:	6839      	ldr	r1, [r7, #0]
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 fb70 	bl	8007c18 <USBD_SetConfig>
 8007538:	4603      	mov	r3, r0
 800753a:	73fb      	strb	r3, [r7, #15]
      break;
 800753c:	e018      	b.n	8007570 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800753e:	6839      	ldr	r1, [r7, #0]
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 fc0d 	bl	8007d60 <USBD_GetConfig>
      break;
 8007546:	e013      	b.n	8007570 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8007548:	6839      	ldr	r1, [r7, #0]
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 fc3c 	bl	8007dc8 <USBD_GetStatus>
      break;
 8007550:	e00e      	b.n	8007570 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8007552:	6839      	ldr	r1, [r7, #0]
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 fc6a 	bl	8007e2e <USBD_SetFeature>
      break;
 800755a:	e009      	b.n	8007570 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800755c:	6839      	ldr	r1, [r7, #0]
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 fc79 	bl	8007e56 <USBD_ClrFeature>
      break;
 8007564:	e004      	b.n	8007570 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8007566:	6839      	ldr	r1, [r7, #0]
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 fccf 	bl	8007f0c <USBD_CtlError>
      break;
 800756e:	bf00      	nop
    }
    break;
 8007570:	e004      	b.n	800757c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8007572:	6839      	ldr	r1, [r7, #0]
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 fcc9 	bl	8007f0c <USBD_CtlError>
    break;
 800757a:	bf00      	nop
  }

  return ret;
 800757c:	7bfb      	ldrb	r3, [r7, #15]
}
 800757e:	4618      	mov	r0, r3
 8007580:	3710      	adds	r7, #16
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop

08007588 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007592:	2300      	movs	r3, #0
 8007594:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800759e:	2b20      	cmp	r3, #32
 80075a0:	d003      	beq.n	80075aa <USBD_StdItfReq+0x22>
 80075a2:	2b40      	cmp	r3, #64	; 0x40
 80075a4:	d001      	beq.n	80075aa <USBD_StdItfReq+0x22>
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d12a      	bne.n	8007600 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075b0:	3b01      	subs	r3, #1
 80075b2:	2b02      	cmp	r3, #2
 80075b4:	d81d      	bhi.n	80075f2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	889b      	ldrh	r3, [r3, #4]
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d813      	bhi.n	80075e8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	6839      	ldr	r1, [r7, #0]
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	4798      	blx	r3
 80075ce:	4603      	mov	r3, r0
 80075d0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	88db      	ldrh	r3, [r3, #6]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d110      	bne.n	80075fc <USBD_StdItfReq+0x74>
 80075da:	7bfb      	ldrb	r3, [r7, #15]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d10d      	bne.n	80075fc <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 fd5e 	bl	80080a2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80075e6:	e009      	b.n	80075fc <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80075e8:	6839      	ldr	r1, [r7, #0]
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 fc8e 	bl	8007f0c <USBD_CtlError>
      break;
 80075f0:	e004      	b.n	80075fc <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80075f2:	6839      	ldr	r1, [r7, #0]
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 fc89 	bl	8007f0c <USBD_CtlError>
      break;
 80075fa:	e000      	b.n	80075fe <USBD_StdItfReq+0x76>
      break;
 80075fc:	bf00      	nop
    }
    break;
 80075fe:	e004      	b.n	800760a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8007600:	6839      	ldr	r1, [r7, #0]
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 fc82 	bl	8007f0c <USBD_CtlError>
    break;
 8007608:	bf00      	nop
  }

  return ret;
 800760a:	7bfb      	ldrb	r3, [r7, #15]
}
 800760c:	4618      	mov	r0, r3
 800760e:	3710      	adds	r7, #16
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800761e:	2300      	movs	r3, #0
 8007620:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	889b      	ldrh	r3, [r3, #4]
 8007626:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007630:	2b20      	cmp	r3, #32
 8007632:	d004      	beq.n	800763e <USBD_StdEPReq+0x2a>
 8007634:	2b40      	cmp	r3, #64	; 0x40
 8007636:	d002      	beq.n	800763e <USBD_StdEPReq+0x2a>
 8007638:	2b00      	cmp	r3, #0
 800763a:	d00a      	beq.n	8007652 <USBD_StdEPReq+0x3e>
 800763c:	e135      	b.n	80078aa <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	6839      	ldr	r1, [r7, #0]
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	4798      	blx	r3
 800764c:	4603      	mov	r3, r0
 800764e:	73fb      	strb	r3, [r7, #15]
    break;
 8007650:	e130      	b.n	80078b4 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	785b      	ldrb	r3, [r3, #1]
 8007656:	2b01      	cmp	r3, #1
 8007658:	d03e      	beq.n	80076d8 <USBD_StdEPReq+0xc4>
 800765a:	2b03      	cmp	r3, #3
 800765c:	d002      	beq.n	8007664 <USBD_StdEPReq+0x50>
 800765e:	2b00      	cmp	r3, #0
 8007660:	d077      	beq.n	8007752 <USBD_StdEPReq+0x13e>
 8007662:	e11c      	b.n	800789e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800766a:	2b02      	cmp	r3, #2
 800766c:	d002      	beq.n	8007674 <USBD_StdEPReq+0x60>
 800766e:	2b03      	cmp	r3, #3
 8007670:	d015      	beq.n	800769e <USBD_StdEPReq+0x8a>
 8007672:	e02b      	b.n	80076cc <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007674:	7bbb      	ldrb	r3, [r7, #14]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00c      	beq.n	8007694 <USBD_StdEPReq+0x80>
 800767a:	7bbb      	ldrb	r3, [r7, #14]
 800767c:	2b80      	cmp	r3, #128	; 0x80
 800767e:	d009      	beq.n	8007694 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007680:	7bbb      	ldrb	r3, [r7, #14]
 8007682:	4619      	mov	r1, r3
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f001 f9ab 	bl	80089e0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800768a:	2180      	movs	r1, #128	; 0x80
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f001 f9a7 	bl	80089e0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007692:	e020      	b.n	80076d6 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8007694:	6839      	ldr	r1, [r7, #0]
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 fc38 	bl	8007f0c <USBD_CtlError>
        break;
 800769c:	e01b      	b.n	80076d6 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	885b      	ldrh	r3, [r3, #2]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d10e      	bne.n	80076c4 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80076a6:	7bbb      	ldrb	r3, [r7, #14]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d00b      	beq.n	80076c4 <USBD_StdEPReq+0xb0>
 80076ac:	7bbb      	ldrb	r3, [r7, #14]
 80076ae:	2b80      	cmp	r3, #128	; 0x80
 80076b0:	d008      	beq.n	80076c4 <USBD_StdEPReq+0xb0>
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	88db      	ldrh	r3, [r3, #6]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d104      	bne.n	80076c4 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80076ba:	7bbb      	ldrb	r3, [r7, #14]
 80076bc:	4619      	mov	r1, r3
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f001 f98e 	bl	80089e0 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 fcec 	bl	80080a2 <USBD_CtlSendStatus>

        break;
 80076ca:	e004      	b.n	80076d6 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80076cc:	6839      	ldr	r1, [r7, #0]
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 fc1c 	bl	8007f0c <USBD_CtlError>
        break;
 80076d4:	bf00      	nop
      }
      break;
 80076d6:	e0e7      	b.n	80078a8 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076de:	2b02      	cmp	r3, #2
 80076e0:	d002      	beq.n	80076e8 <USBD_StdEPReq+0xd4>
 80076e2:	2b03      	cmp	r3, #3
 80076e4:	d015      	beq.n	8007712 <USBD_StdEPReq+0xfe>
 80076e6:	e02d      	b.n	8007744 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076e8:	7bbb      	ldrb	r3, [r7, #14]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00c      	beq.n	8007708 <USBD_StdEPReq+0xf4>
 80076ee:	7bbb      	ldrb	r3, [r7, #14]
 80076f0:	2b80      	cmp	r3, #128	; 0x80
 80076f2:	d009      	beq.n	8007708 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80076f4:	7bbb      	ldrb	r3, [r7, #14]
 80076f6:	4619      	mov	r1, r3
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f001 f971 	bl	80089e0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80076fe:	2180      	movs	r1, #128	; 0x80
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f001 f96d 	bl	80089e0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007706:	e023      	b.n	8007750 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8007708:	6839      	ldr	r1, [r7, #0]
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 fbfe 	bl	8007f0c <USBD_CtlError>
        break;
 8007710:	e01e      	b.n	8007750 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	885b      	ldrh	r3, [r3, #2]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d119      	bne.n	800774e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800771a:	7bbb      	ldrb	r3, [r7, #14]
 800771c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007720:	2b00      	cmp	r3, #0
 8007722:	d004      	beq.n	800772e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007724:	7bbb      	ldrb	r3, [r7, #14]
 8007726:	4619      	mov	r1, r3
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f001 f978 	bl	8008a1e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 fcb7 	bl	80080a2 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	6839      	ldr	r1, [r7, #0]
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	4798      	blx	r3
        }
        break;
 8007742:	e004      	b.n	800774e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8007744:	6839      	ldr	r1, [r7, #0]
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 fbe0 	bl	8007f0c <USBD_CtlError>
        break;
 800774c:	e000      	b.n	8007750 <USBD_StdEPReq+0x13c>
        break;
 800774e:	bf00      	nop
      }
      break;
 8007750:	e0aa      	b.n	80078a8 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007758:	2b02      	cmp	r3, #2
 800775a:	d002      	beq.n	8007762 <USBD_StdEPReq+0x14e>
 800775c:	2b03      	cmp	r3, #3
 800775e:	d032      	beq.n	80077c6 <USBD_StdEPReq+0x1b2>
 8007760:	e097      	b.n	8007892 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007762:	7bbb      	ldrb	r3, [r7, #14]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d007      	beq.n	8007778 <USBD_StdEPReq+0x164>
 8007768:	7bbb      	ldrb	r3, [r7, #14]
 800776a:	2b80      	cmp	r3, #128	; 0x80
 800776c:	d004      	beq.n	8007778 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800776e:	6839      	ldr	r1, [r7, #0]
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 fbcb 	bl	8007f0c <USBD_CtlError>
          break;
 8007776:	e091      	b.n	800789c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007778:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800777c:	2b00      	cmp	r3, #0
 800777e:	da0b      	bge.n	8007798 <USBD_StdEPReq+0x184>
 8007780:	7bbb      	ldrb	r3, [r7, #14]
 8007782:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007786:	4613      	mov	r3, r2
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	4413      	add	r3, r2
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	3310      	adds	r3, #16
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	4413      	add	r3, r2
 8007794:	3304      	adds	r3, #4
 8007796:	e00b      	b.n	80077b0 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007798:	7bbb      	ldrb	r3, [r7, #14]
 800779a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800779e:	4613      	mov	r3, r2
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	4413      	add	r3, r2
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	4413      	add	r3, r2
 80077ae:	3304      	adds	r3, #4
 80077b0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	2200      	movs	r2, #0
 80077b6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	2202      	movs	r2, #2
 80077bc:	4619      	mov	r1, r3
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 fc15 	bl	8007fee <USBD_CtlSendData>
        break;
 80077c4:	e06a      	b.n	800789c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80077c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	da11      	bge.n	80077f2 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80077ce:	7bbb      	ldrb	r3, [r7, #14]
 80077d0:	f003 020f 	and.w	r2, r3, #15
 80077d4:	6879      	ldr	r1, [r7, #4]
 80077d6:	4613      	mov	r3, r2
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	4413      	add	r3, r2
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	440b      	add	r3, r1
 80077e0:	3324      	adds	r3, #36	; 0x24
 80077e2:	881b      	ldrh	r3, [r3, #0]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d117      	bne.n	8007818 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80077e8:	6839      	ldr	r1, [r7, #0]
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 fb8e 	bl	8007f0c <USBD_CtlError>
            break;
 80077f0:	e054      	b.n	800789c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80077f2:	7bbb      	ldrb	r3, [r7, #14]
 80077f4:	f003 020f 	and.w	r2, r3, #15
 80077f8:	6879      	ldr	r1, [r7, #4]
 80077fa:	4613      	mov	r3, r2
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	4413      	add	r3, r2
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	440b      	add	r3, r1
 8007804:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007808:	881b      	ldrh	r3, [r3, #0]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d104      	bne.n	8007818 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800780e:	6839      	ldr	r1, [r7, #0]
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 fb7b 	bl	8007f0c <USBD_CtlError>
            break;
 8007816:	e041      	b.n	800789c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007818:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800781c:	2b00      	cmp	r3, #0
 800781e:	da0b      	bge.n	8007838 <USBD_StdEPReq+0x224>
 8007820:	7bbb      	ldrb	r3, [r7, #14]
 8007822:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007826:	4613      	mov	r3, r2
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	4413      	add	r3, r2
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	3310      	adds	r3, #16
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	4413      	add	r3, r2
 8007834:	3304      	adds	r3, #4
 8007836:	e00b      	b.n	8007850 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007838:	7bbb      	ldrb	r3, [r7, #14]
 800783a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800783e:	4613      	mov	r3, r2
 8007840:	009b      	lsls	r3, r3, #2
 8007842:	4413      	add	r3, r2
 8007844:	009b      	lsls	r3, r3, #2
 8007846:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	4413      	add	r3, r2
 800784e:	3304      	adds	r3, #4
 8007850:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007852:	7bbb      	ldrb	r3, [r7, #14]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d002      	beq.n	800785e <USBD_StdEPReq+0x24a>
 8007858:	7bbb      	ldrb	r3, [r7, #14]
 800785a:	2b80      	cmp	r3, #128	; 0x80
 800785c:	d103      	bne.n	8007866 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	2200      	movs	r2, #0
 8007862:	601a      	str	r2, [r3, #0]
 8007864:	e00e      	b.n	8007884 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007866:	7bbb      	ldrb	r3, [r7, #14]
 8007868:	4619      	mov	r1, r3
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f001 f8f6 	bl	8008a5c <USBD_LL_IsStallEP>
 8007870:	4603      	mov	r3, r0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d003      	beq.n	800787e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	2201      	movs	r2, #1
 800787a:	601a      	str	r2, [r3, #0]
 800787c:	e002      	b.n	8007884 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	2200      	movs	r2, #0
 8007882:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	2202      	movs	r2, #2
 8007888:	4619      	mov	r1, r3
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 fbaf 	bl	8007fee <USBD_CtlSendData>
          break;
 8007890:	e004      	b.n	800789c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8007892:	6839      	ldr	r1, [r7, #0]
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 fb39 	bl	8007f0c <USBD_CtlError>
        break;
 800789a:	bf00      	nop
      }
      break;
 800789c:	e004      	b.n	80078a8 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800789e:	6839      	ldr	r1, [r7, #0]
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 fb33 	bl	8007f0c <USBD_CtlError>
      break;
 80078a6:	bf00      	nop
    }
    break;
 80078a8:	e004      	b.n	80078b4 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 80078aa:	6839      	ldr	r1, [r7, #0]
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 fb2d 	bl	8007f0c <USBD_CtlError>
    break;
 80078b2:	bf00      	nop
  }

  return ret;
 80078b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3710      	adds	r7, #16
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
	...

080078c0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80078ca:	2300      	movs	r3, #0
 80078cc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80078ce:	2300      	movs	r3, #0
 80078d0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80078d2:	2300      	movs	r3, #0
 80078d4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	885b      	ldrh	r3, [r3, #2]
 80078da:	0a1b      	lsrs	r3, r3, #8
 80078dc:	b29b      	uxth	r3, r3
 80078de:	3b01      	subs	r3, #1
 80078e0:	2b06      	cmp	r3, #6
 80078e2:	f200 8128 	bhi.w	8007b36 <USBD_GetDescriptor+0x276>
 80078e6:	a201      	add	r2, pc, #4	; (adr r2, 80078ec <USBD_GetDescriptor+0x2c>)
 80078e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ec:	08007909 	.word	0x08007909
 80078f0:	08007921 	.word	0x08007921
 80078f4:	08007961 	.word	0x08007961
 80078f8:	08007b37 	.word	0x08007b37
 80078fc:	08007b37 	.word	0x08007b37
 8007900:	08007ad7 	.word	0x08007ad7
 8007904:	08007b03 	.word	0x08007b03
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	7c12      	ldrb	r2, [r2, #16]
 8007914:	f107 0108 	add.w	r1, r7, #8
 8007918:	4610      	mov	r0, r2
 800791a:	4798      	blx	r3
 800791c:	60f8      	str	r0, [r7, #12]
    break;
 800791e:	e112      	b.n	8007b46 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	7c1b      	ldrb	r3, [r3, #16]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d10d      	bne.n	8007944 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800792e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007930:	f107 0208 	add.w	r2, r7, #8
 8007934:	4610      	mov	r0, r2
 8007936:	4798      	blx	r3
 8007938:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	3301      	adds	r3, #1
 800793e:	2202      	movs	r2, #2
 8007940:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007942:	e100      	b.n	8007b46 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800794a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800794c:	f107 0208 	add.w	r2, r7, #8
 8007950:	4610      	mov	r0, r2
 8007952:	4798      	blx	r3
 8007954:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	3301      	adds	r3, #1
 800795a:	2202      	movs	r2, #2
 800795c:	701a      	strb	r2, [r3, #0]
    break;
 800795e:	e0f2      	b.n	8007b46 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	885b      	ldrh	r3, [r3, #2]
 8007964:	b2db      	uxtb	r3, r3
 8007966:	2b05      	cmp	r3, #5
 8007968:	f200 80ac 	bhi.w	8007ac4 <USBD_GetDescriptor+0x204>
 800796c:	a201      	add	r2, pc, #4	; (adr r2, 8007974 <USBD_GetDescriptor+0xb4>)
 800796e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007972:	bf00      	nop
 8007974:	0800798d 	.word	0x0800798d
 8007978:	080079c1 	.word	0x080079c1
 800797c:	080079f5 	.word	0x080079f5
 8007980:	08007a29 	.word	0x08007a29
 8007984:	08007a5d 	.word	0x08007a5d
 8007988:	08007a91 	.word	0x08007a91
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d00b      	beq.n	80079b0 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	7c12      	ldrb	r2, [r2, #16]
 80079a4:	f107 0108 	add.w	r1, r7, #8
 80079a8:	4610      	mov	r0, r2
 80079aa:	4798      	blx	r3
 80079ac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80079ae:	e091      	b.n	8007ad4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80079b0:	6839      	ldr	r1, [r7, #0]
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 faaa 	bl	8007f0c <USBD_CtlError>
        err++;
 80079b8:	7afb      	ldrb	r3, [r7, #11]
 80079ba:	3301      	adds	r3, #1
 80079bc:	72fb      	strb	r3, [r7, #11]
      break;
 80079be:	e089      	b.n	8007ad4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d00b      	beq.n	80079e4 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	7c12      	ldrb	r2, [r2, #16]
 80079d8:	f107 0108 	add.w	r1, r7, #8
 80079dc:	4610      	mov	r0, r2
 80079de:	4798      	blx	r3
 80079e0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80079e2:	e077      	b.n	8007ad4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80079e4:	6839      	ldr	r1, [r7, #0]
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 fa90 	bl	8007f0c <USBD_CtlError>
        err++;
 80079ec:	7afb      	ldrb	r3, [r7, #11]
 80079ee:	3301      	adds	r3, #1
 80079f0:	72fb      	strb	r3, [r7, #11]
      break;
 80079f2:	e06f      	b.n	8007ad4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d00b      	beq.n	8007a18 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	7c12      	ldrb	r2, [r2, #16]
 8007a0c:	f107 0108 	add.w	r1, r7, #8
 8007a10:	4610      	mov	r0, r2
 8007a12:	4798      	blx	r3
 8007a14:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a16:	e05d      	b.n	8007ad4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007a18:	6839      	ldr	r1, [r7, #0]
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 fa76 	bl	8007f0c <USBD_CtlError>
        err++;
 8007a20:	7afb      	ldrb	r3, [r7, #11]
 8007a22:	3301      	adds	r3, #1
 8007a24:	72fb      	strb	r3, [r7, #11]
      break;
 8007a26:	e055      	b.n	8007ad4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a2e:	691b      	ldr	r3, [r3, #16]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d00b      	beq.n	8007a4c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a3a:	691b      	ldr	r3, [r3, #16]
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	7c12      	ldrb	r2, [r2, #16]
 8007a40:	f107 0108 	add.w	r1, r7, #8
 8007a44:	4610      	mov	r0, r2
 8007a46:	4798      	blx	r3
 8007a48:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a4a:	e043      	b.n	8007ad4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007a4c:	6839      	ldr	r1, [r7, #0]
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 fa5c 	bl	8007f0c <USBD_CtlError>
        err++;
 8007a54:	7afb      	ldrb	r3, [r7, #11]
 8007a56:	3301      	adds	r3, #1
 8007a58:	72fb      	strb	r3, [r7, #11]
      break;
 8007a5a:	e03b      	b.n	8007ad4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a62:	695b      	ldr	r3, [r3, #20]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d00b      	beq.n	8007a80 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a6e:	695b      	ldr	r3, [r3, #20]
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	7c12      	ldrb	r2, [r2, #16]
 8007a74:	f107 0108 	add.w	r1, r7, #8
 8007a78:	4610      	mov	r0, r2
 8007a7a:	4798      	blx	r3
 8007a7c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a7e:	e029      	b.n	8007ad4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007a80:	6839      	ldr	r1, [r7, #0]
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 fa42 	bl	8007f0c <USBD_CtlError>
        err++;
 8007a88:	7afb      	ldrb	r3, [r7, #11]
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	72fb      	strb	r3, [r7, #11]
      break;
 8007a8e:	e021      	b.n	8007ad4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a96:	699b      	ldr	r3, [r3, #24]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d00b      	beq.n	8007ab4 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aa2:	699b      	ldr	r3, [r3, #24]
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	7c12      	ldrb	r2, [r2, #16]
 8007aa8:	f107 0108 	add.w	r1, r7, #8
 8007aac:	4610      	mov	r0, r2
 8007aae:	4798      	blx	r3
 8007ab0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ab2:	e00f      	b.n	8007ad4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007ab4:	6839      	ldr	r1, [r7, #0]
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 fa28 	bl	8007f0c <USBD_CtlError>
        err++;
 8007abc:	7afb      	ldrb	r3, [r7, #11]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	72fb      	strb	r3, [r7, #11]
      break;
 8007ac2:	e007      	b.n	8007ad4 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8007ac4:	6839      	ldr	r1, [r7, #0]
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 fa20 	bl	8007f0c <USBD_CtlError>
      err++;
 8007acc:	7afb      	ldrb	r3, [r7, #11]
 8007ace:	3301      	adds	r3, #1
 8007ad0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8007ad2:	bf00      	nop
    }
    break;
 8007ad4:	e037      	b.n	8007b46 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	7c1b      	ldrb	r3, [r3, #16]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d109      	bne.n	8007af2 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ae6:	f107 0208 	add.w	r2, r7, #8
 8007aea:	4610      	mov	r0, r2
 8007aec:	4798      	blx	r3
 8007aee:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007af0:	e029      	b.n	8007b46 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8007af2:	6839      	ldr	r1, [r7, #0]
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 fa09 	bl	8007f0c <USBD_CtlError>
      err++;
 8007afa:	7afb      	ldrb	r3, [r7, #11]
 8007afc:	3301      	adds	r3, #1
 8007afe:	72fb      	strb	r3, [r7, #11]
    break;
 8007b00:	e021      	b.n	8007b46 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	7c1b      	ldrb	r3, [r3, #16]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d10d      	bne.n	8007b26 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b12:	f107 0208 	add.w	r2, r7, #8
 8007b16:	4610      	mov	r0, r2
 8007b18:	4798      	blx	r3
 8007b1a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	3301      	adds	r3, #1
 8007b20:	2207      	movs	r2, #7
 8007b22:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007b24:	e00f      	b.n	8007b46 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8007b26:	6839      	ldr	r1, [r7, #0]
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 f9ef 	bl	8007f0c <USBD_CtlError>
      err++;
 8007b2e:	7afb      	ldrb	r3, [r7, #11]
 8007b30:	3301      	adds	r3, #1
 8007b32:	72fb      	strb	r3, [r7, #11]
    break;
 8007b34:	e007      	b.n	8007b46 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8007b36:	6839      	ldr	r1, [r7, #0]
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 f9e7 	bl	8007f0c <USBD_CtlError>
    err++;
 8007b3e:	7afb      	ldrb	r3, [r7, #11]
 8007b40:	3301      	adds	r3, #1
 8007b42:	72fb      	strb	r3, [r7, #11]
    break;
 8007b44:	bf00      	nop
  }

  if (err != 0U)
 8007b46:	7afb      	ldrb	r3, [r7, #11]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d11e      	bne.n	8007b8a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	88db      	ldrh	r3, [r3, #6]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d016      	beq.n	8007b82 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8007b54:	893b      	ldrh	r3, [r7, #8]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d00e      	beq.n	8007b78 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	88da      	ldrh	r2, [r3, #6]
 8007b5e:	893b      	ldrh	r3, [r7, #8]
 8007b60:	4293      	cmp	r3, r2
 8007b62:	bf28      	it	cs
 8007b64:	4613      	movcs	r3, r2
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007b6a:	893b      	ldrh	r3, [r7, #8]
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	68f9      	ldr	r1, [r7, #12]
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 fa3c 	bl	8007fee <USBD_CtlSendData>
 8007b76:	e009      	b.n	8007b8c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007b78:	6839      	ldr	r1, [r7, #0]
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 f9c6 	bl	8007f0c <USBD_CtlError>
 8007b80:	e004      	b.n	8007b8c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 fa8d 	bl	80080a2 <USBD_CtlSendStatus>
 8007b88:	e000      	b.n	8007b8c <USBD_GetDescriptor+0x2cc>
    return;
 8007b8a:	bf00      	nop
    }
  }
}
 8007b8c:	3710      	adds	r7, #16
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop

08007b94 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	889b      	ldrh	r3, [r3, #4]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d130      	bne.n	8007c08 <USBD_SetAddress+0x74>
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	88db      	ldrh	r3, [r3, #6]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d12c      	bne.n	8007c08 <USBD_SetAddress+0x74>
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	885b      	ldrh	r3, [r3, #2]
 8007bb2:	2b7f      	cmp	r3, #127	; 0x7f
 8007bb4:	d828      	bhi.n	8007c08 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	885b      	ldrh	r3, [r3, #2]
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bc0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bc8:	2b03      	cmp	r3, #3
 8007bca:	d104      	bne.n	8007bd6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007bcc:	6839      	ldr	r1, [r7, #0]
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 f99c 	bl	8007f0c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bd4:	e01c      	b.n	8007c10 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	7bfa      	ldrb	r2, [r7, #15]
 8007bda:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007bde:	7bfb      	ldrb	r3, [r7, #15]
 8007be0:	4619      	mov	r1, r3
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 ff66 	bl	8008ab4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 fa5a 	bl	80080a2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007bee:	7bfb      	ldrb	r3, [r7, #15]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d004      	beq.n	8007bfe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2202      	movs	r2, #2
 8007bf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bfc:	e008      	b.n	8007c10 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2201      	movs	r2, #1
 8007c02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c06:	e003      	b.n	8007c10 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007c08:	6839      	ldr	r1, [r7, #0]
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 f97e 	bl	8007f0c <USBD_CtlError>
  }
}
 8007c10:	bf00      	nop
 8007c12:	3710      	adds	r7, #16
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c22:	2300      	movs	r3, #0
 8007c24:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	885b      	ldrh	r3, [r3, #2]
 8007c2a:	b2da      	uxtb	r2, r3
 8007c2c:	4b4b      	ldr	r3, [pc, #300]	; (8007d5c <USBD_SetConfig+0x144>)
 8007c2e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007c30:	4b4a      	ldr	r3, [pc, #296]	; (8007d5c <USBD_SetConfig+0x144>)
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d905      	bls.n	8007c44 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007c38:	6839      	ldr	r1, [r7, #0]
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 f966 	bl	8007f0c <USBD_CtlError>
    return USBD_FAIL;
 8007c40:	2303      	movs	r3, #3
 8007c42:	e087      	b.n	8007d54 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c4a:	2b02      	cmp	r3, #2
 8007c4c:	d002      	beq.n	8007c54 <USBD_SetConfig+0x3c>
 8007c4e:	2b03      	cmp	r3, #3
 8007c50:	d025      	beq.n	8007c9e <USBD_SetConfig+0x86>
 8007c52:	e071      	b.n	8007d38 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8007c54:	4b41      	ldr	r3, [pc, #260]	; (8007d5c <USBD_SetConfig+0x144>)
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d01c      	beq.n	8007c96 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8007c5c:	4b3f      	ldr	r3, [pc, #252]	; (8007d5c <USBD_SetConfig+0x144>)
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	461a      	mov	r2, r3
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007c66:	4b3d      	ldr	r3, [pc, #244]	; (8007d5c <USBD_SetConfig+0x144>)
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f7ff f9a7 	bl	8006fc0 <USBD_SetClassConfig>
 8007c72:	4603      	mov	r3, r0
 8007c74:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8007c76:	7bfb      	ldrb	r3, [r7, #15]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d004      	beq.n	8007c86 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8007c7c:	6839      	ldr	r1, [r7, #0]
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 f944 	bl	8007f0c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007c84:	e065      	b.n	8007d52 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 fa0b 	bl	80080a2 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2203      	movs	r2, #3
 8007c90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007c94:	e05d      	b.n	8007d52 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 fa03 	bl	80080a2 <USBD_CtlSendStatus>
    break;
 8007c9c:	e059      	b.n	8007d52 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8007c9e:	4b2f      	ldr	r3, [pc, #188]	; (8007d5c <USBD_SetConfig+0x144>)
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d112      	bne.n	8007ccc <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2202      	movs	r2, #2
 8007caa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8007cae:	4b2b      	ldr	r3, [pc, #172]	; (8007d5c <USBD_SetConfig+0x144>)
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007cb8:	4b28      	ldr	r3, [pc, #160]	; (8007d5c <USBD_SetConfig+0x144>)
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f7ff f99a 	bl	8006ff8 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 f9ec 	bl	80080a2 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007cca:	e042      	b.n	8007d52 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8007ccc:	4b23      	ldr	r3, [pc, #140]	; (8007d5c <USBD_SetConfig+0x144>)
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d02a      	beq.n	8007d30 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f7ff f988 	bl	8006ff8 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8007ce8:	4b1c      	ldr	r3, [pc, #112]	; (8007d5c <USBD_SetConfig+0x144>)
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	461a      	mov	r2, r3
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007cf2:	4b1a      	ldr	r3, [pc, #104]	; (8007d5c <USBD_SetConfig+0x144>)
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f7ff f961 	bl	8006fc0 <USBD_SetClassConfig>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8007d02:	7bfb      	ldrb	r3, [r7, #15]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d00f      	beq.n	8007d28 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8007d08:	6839      	ldr	r1, [r7, #0]
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 f8fe 	bl	8007f0c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	4619      	mov	r1, r3
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f7ff f96d 	bl	8006ff8 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2202      	movs	r2, #2
 8007d22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007d26:	e014      	b.n	8007d52 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 f9ba 	bl	80080a2 <USBD_CtlSendStatus>
    break;
 8007d2e:	e010      	b.n	8007d52 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 f9b6 	bl	80080a2 <USBD_CtlSendStatus>
    break;
 8007d36:	e00c      	b.n	8007d52 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8007d38:	6839      	ldr	r1, [r7, #0]
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 f8e6 	bl	8007f0c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007d40:	4b06      	ldr	r3, [pc, #24]	; (8007d5c <USBD_SetConfig+0x144>)
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	4619      	mov	r1, r3
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f7ff f956 	bl	8006ff8 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8007d4c:	2303      	movs	r3, #3
 8007d4e:	73fb      	strb	r3, [r7, #15]
    break;
 8007d50:	bf00      	nop
  }

  return ret;
 8007d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3710      	adds	r7, #16
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	20000210 	.word	0x20000210

08007d60 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	88db      	ldrh	r3, [r3, #6]
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d004      	beq.n	8007d7c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007d72:	6839      	ldr	r1, [r7, #0]
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 f8c9 	bl	8007f0c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8007d7a:	e021      	b.n	8007dc0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	db17      	blt.n	8007db6 <USBD_GetConfig+0x56>
 8007d86:	2b02      	cmp	r3, #2
 8007d88:	dd02      	ble.n	8007d90 <USBD_GetConfig+0x30>
 8007d8a:	2b03      	cmp	r3, #3
 8007d8c:	d00b      	beq.n	8007da6 <USBD_GetConfig+0x46>
 8007d8e:	e012      	b.n	8007db6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2200      	movs	r2, #0
 8007d94:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	3308      	adds	r3, #8
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 f925 	bl	8007fee <USBD_CtlSendData>
      break;
 8007da4:	e00c      	b.n	8007dc0 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	3304      	adds	r3, #4
 8007daa:	2201      	movs	r2, #1
 8007dac:	4619      	mov	r1, r3
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 f91d 	bl	8007fee <USBD_CtlSendData>
      break;
 8007db4:	e004      	b.n	8007dc0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8007db6:	6839      	ldr	r1, [r7, #0]
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 f8a7 	bl	8007f0c <USBD_CtlError>
      break;
 8007dbe:	bf00      	nop
}
 8007dc0:	bf00      	nop
 8007dc2:	3708      	adds	r7, #8
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dd8:	3b01      	subs	r3, #1
 8007dda:	2b02      	cmp	r3, #2
 8007ddc:	d81e      	bhi.n	8007e1c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	88db      	ldrh	r3, [r3, #6]
 8007de2:	2b02      	cmp	r3, #2
 8007de4:	d004      	beq.n	8007df0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007de6:	6839      	ldr	r1, [r7, #0]
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 f88f 	bl	8007f0c <USBD_CtlError>
      break;
 8007dee:	e01a      	b.n	8007e26 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d005      	beq.n	8007e0c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	f043 0202 	orr.w	r2, r3, #2
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	330c      	adds	r3, #12
 8007e10:	2202      	movs	r2, #2
 8007e12:	4619      	mov	r1, r3
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 f8ea 	bl	8007fee <USBD_CtlSendData>
    break;
 8007e1a:	e004      	b.n	8007e26 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8007e1c:	6839      	ldr	r1, [r7, #0]
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 f874 	bl	8007f0c <USBD_CtlError>
    break;
 8007e24:	bf00      	nop
  }
}
 8007e26:	bf00      	nop
 8007e28:	3708      	adds	r7, #8
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}

08007e2e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	b082      	sub	sp, #8
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
 8007e36:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	885b      	ldrh	r3, [r3, #2]
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d106      	bne.n	8007e4e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2201      	movs	r2, #1
 8007e44:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 f92a 	bl	80080a2 <USBD_CtlSendStatus>
  }
}
 8007e4e:	bf00      	nop
 8007e50:	3708      	adds	r7, #8
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}

08007e56 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b082      	sub	sp, #8
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
 8007e5e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e66:	3b01      	subs	r3, #1
 8007e68:	2b02      	cmp	r3, #2
 8007e6a:	d80b      	bhi.n	8007e84 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	885b      	ldrh	r3, [r3, #2]
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d10c      	bne.n	8007e8e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 f910 	bl	80080a2 <USBD_CtlSendStatus>
      }
      break;
 8007e82:	e004      	b.n	8007e8e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007e84:	6839      	ldr	r1, [r7, #0]
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 f840 	bl	8007f0c <USBD_CtlError>
      break;
 8007e8c:	e000      	b.n	8007e90 <USBD_ClrFeature+0x3a>
      break;
 8007e8e:	bf00      	nop
  }
}
 8007e90:	bf00      	nop
 8007e92:	3708      	adds	r7, #8
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b084      	sub	sp, #16
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	781a      	ldrb	r2, [r3, #0]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	781a      	ldrb	r2, [r3, #0]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	3301      	adds	r3, #1
 8007ec0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007ec2:	68f8      	ldr	r0, [r7, #12]
 8007ec4:	f7ff fad3 	bl	800746e <SWAPBYTE>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	461a      	mov	r2, r3
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	3301      	adds	r3, #1
 8007eda:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007edc:	68f8      	ldr	r0, [r7, #12]
 8007ede:	f7ff fac6 	bl	800746e <SWAPBYTE>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	3301      	adds	r3, #1
 8007eee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007ef6:	68f8      	ldr	r0, [r7, #12]
 8007ef8:	f7ff fab9 	bl	800746e <SWAPBYTE>
 8007efc:	4603      	mov	r3, r0
 8007efe:	461a      	mov	r2, r3
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	80da      	strh	r2, [r3, #6]
}
 8007f04:	bf00      	nop
 8007f06:	3710      	adds	r7, #16
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b082      	sub	sp, #8
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f16:	2180      	movs	r1, #128	; 0x80
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 fd61 	bl	80089e0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007f1e:	2100      	movs	r1, #0
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 fd5d 	bl	80089e0 <USBD_LL_StallEP>
}
 8007f26:	bf00      	nop
 8007f28:	3708      	adds	r7, #8
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}

08007f2e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007f2e:	b580      	push	{r7, lr}
 8007f30:	b086      	sub	sp, #24
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	60f8      	str	r0, [r7, #12]
 8007f36:	60b9      	str	r1, [r7, #8]
 8007f38:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d036      	beq.n	8007fb2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007f48:	6938      	ldr	r0, [r7, #16]
 8007f4a:	f000 f836 	bl	8007fba <USBD_GetLen>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	3301      	adds	r3, #1
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	005b      	lsls	r3, r3, #1
 8007f56:	b29a      	uxth	r2, r3
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007f5c:	7dfb      	ldrb	r3, [r7, #23]
 8007f5e:	68ba      	ldr	r2, [r7, #8]
 8007f60:	4413      	add	r3, r2
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	7812      	ldrb	r2, [r2, #0]
 8007f66:	701a      	strb	r2, [r3, #0]
  idx++;
 8007f68:	7dfb      	ldrb	r3, [r7, #23]
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007f6e:	7dfb      	ldrb	r3, [r7, #23]
 8007f70:	68ba      	ldr	r2, [r7, #8]
 8007f72:	4413      	add	r3, r2
 8007f74:	2203      	movs	r2, #3
 8007f76:	701a      	strb	r2, [r3, #0]
  idx++;
 8007f78:	7dfb      	ldrb	r3, [r7, #23]
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007f7e:	e013      	b.n	8007fa8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007f80:	7dfb      	ldrb	r3, [r7, #23]
 8007f82:	68ba      	ldr	r2, [r7, #8]
 8007f84:	4413      	add	r3, r2
 8007f86:	693a      	ldr	r2, [r7, #16]
 8007f88:	7812      	ldrb	r2, [r2, #0]
 8007f8a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	3301      	adds	r3, #1
 8007f90:	613b      	str	r3, [r7, #16]
    idx++;
 8007f92:	7dfb      	ldrb	r3, [r7, #23]
 8007f94:	3301      	adds	r3, #1
 8007f96:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007f98:	7dfb      	ldrb	r3, [r7, #23]
 8007f9a:	68ba      	ldr	r2, [r7, #8]
 8007f9c:	4413      	add	r3, r2
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	701a      	strb	r2, [r3, #0]
    idx++;
 8007fa2:	7dfb      	ldrb	r3, [r7, #23]
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d1e7      	bne.n	8007f80 <USBD_GetString+0x52>
 8007fb0:	e000      	b.n	8007fb4 <USBD_GetString+0x86>
    return;
 8007fb2:	bf00      	nop
  }
}
 8007fb4:	3718      	adds	r7, #24
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007fba:	b480      	push	{r7}
 8007fbc:	b085      	sub	sp, #20
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007fca:	e005      	b.n	8007fd8 <USBD_GetLen+0x1e>
  {
    len++;
 8007fcc:	7bfb      	ldrb	r3, [r7, #15]
 8007fce:	3301      	adds	r3, #1
 8007fd0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	3301      	adds	r3, #1
 8007fd6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d1f5      	bne.n	8007fcc <USBD_GetLen+0x12>
  }

  return len;
 8007fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3714      	adds	r7, #20
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr

08007fee <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b084      	sub	sp, #16
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	60f8      	str	r0, [r7, #12]
 8007ff6:	60b9      	str	r1, [r7, #8]
 8007ff8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2202      	movs	r2, #2
 8007ffe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	68ba      	ldr	r2, [r7, #8]
 8008012:	2100      	movs	r1, #0
 8008014:	68f8      	ldr	r0, [r7, #12]
 8008016:	f000 fd6c 	bl	8008af2 <USBD_LL_Transmit>

  return USBD_OK;
 800801a:	2300      	movs	r3, #0
}
 800801c:	4618      	mov	r0, r3
 800801e:	3710      	adds	r7, #16
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	60b9      	str	r1, [r7, #8]
 800802e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	68ba      	ldr	r2, [r7, #8]
 8008034:	2100      	movs	r1, #0
 8008036:	68f8      	ldr	r0, [r7, #12]
 8008038:	f000 fd5b 	bl	8008af2 <USBD_LL_Transmit>

  return USBD_OK;
 800803c:	2300      	movs	r3, #0
}
 800803e:	4618      	mov	r0, r3
 8008040:	3710      	adds	r7, #16
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}

08008046 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008046:	b580      	push	{r7, lr}
 8008048:	b084      	sub	sp, #16
 800804a:	af00      	add	r7, sp, #0
 800804c:	60f8      	str	r0, [r7, #12]
 800804e:	60b9      	str	r1, [r7, #8]
 8008050:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2203      	movs	r2, #3
 8008056:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	68ba      	ldr	r2, [r7, #8]
 800806e:	2100      	movs	r1, #0
 8008070:	68f8      	ldr	r0, [r7, #12]
 8008072:	f000 fd5f 	bl	8008b34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008076:	2300      	movs	r3, #0
}
 8008078:	4618      	mov	r0, r3
 800807a:	3710      	adds	r7, #16
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b084      	sub	sp, #16
 8008084:	af00      	add	r7, sp, #0
 8008086:	60f8      	str	r0, [r7, #12]
 8008088:	60b9      	str	r1, [r7, #8]
 800808a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	68ba      	ldr	r2, [r7, #8]
 8008090:	2100      	movs	r1, #0
 8008092:	68f8      	ldr	r0, [r7, #12]
 8008094:	f000 fd4e 	bl	8008b34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008098:	2300      	movs	r3, #0
}
 800809a:	4618      	mov	r0, r3
 800809c:	3710      	adds	r7, #16
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}

080080a2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80080a2:	b580      	push	{r7, lr}
 80080a4:	b082      	sub	sp, #8
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2204      	movs	r2, #4
 80080ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80080b2:	2300      	movs	r3, #0
 80080b4:	2200      	movs	r2, #0
 80080b6:	2100      	movs	r1, #0
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 fd1a 	bl	8008af2 <USBD_LL_Transmit>

  return USBD_OK;
 80080be:	2300      	movs	r3, #0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3708      	adds	r7, #8
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2205      	movs	r2, #5
 80080d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80080d8:	2300      	movs	r3, #0
 80080da:	2200      	movs	r2, #0
 80080dc:	2100      	movs	r1, #0
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 fd28 	bl	8008b34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80080e4:	2300      	movs	r3, #0
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3708      	adds	r7, #8
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}
	...

080080f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80080f4:	2200      	movs	r2, #0
 80080f6:	4912      	ldr	r1, [pc, #72]	; (8008140 <MX_USB_DEVICE_Init+0x50>)
 80080f8:	4812      	ldr	r0, [pc, #72]	; (8008144 <MX_USB_DEVICE_Init+0x54>)
 80080fa:	f7fe fef3 	bl	8006ee4 <USBD_Init>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b00      	cmp	r3, #0
 8008102:	d001      	beq.n	8008108 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008104:	f7f8 fc88 	bl	8000a18 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008108:	490f      	ldr	r1, [pc, #60]	; (8008148 <MX_USB_DEVICE_Init+0x58>)
 800810a:	480e      	ldr	r0, [pc, #56]	; (8008144 <MX_USB_DEVICE_Init+0x54>)
 800810c:	f7fe ff20 	bl	8006f50 <USBD_RegisterClass>
 8008110:	4603      	mov	r3, r0
 8008112:	2b00      	cmp	r3, #0
 8008114:	d001      	beq.n	800811a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008116:	f7f8 fc7f 	bl	8000a18 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800811a:	490c      	ldr	r1, [pc, #48]	; (800814c <MX_USB_DEVICE_Init+0x5c>)
 800811c:	4809      	ldr	r0, [pc, #36]	; (8008144 <MX_USB_DEVICE_Init+0x54>)
 800811e:	f7fe fe45 	bl	8006dac <USBD_CDC_RegisterInterface>
 8008122:	4603      	mov	r3, r0
 8008124:	2b00      	cmp	r3, #0
 8008126:	d001      	beq.n	800812c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008128:	f7f8 fc76 	bl	8000a18 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800812c:	4805      	ldr	r0, [pc, #20]	; (8008144 <MX_USB_DEVICE_Init+0x54>)
 800812e:	f7fe ff30 	bl	8006f92 <USBD_Start>
 8008132:	4603      	mov	r3, r0
 8008134:	2b00      	cmp	r3, #0
 8008136:	d001      	beq.n	800813c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008138:	f7f8 fc6e 	bl	8000a18 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800813c:	bf00      	nop
 800813e:	bd80      	pop	{r7, pc}
 8008140:	20000138 	.word	0x20000138
 8008144:	2000071c 	.word	0x2000071c
 8008148:	20000018 	.word	0x20000018
 800814c:	20000124 	.word	0x20000124

08008150 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008154:	2200      	movs	r2, #0
 8008156:	4905      	ldr	r1, [pc, #20]	; (800816c <CDC_Init_FS+0x1c>)
 8008158:	4805      	ldr	r0, [pc, #20]	; (8008170 <CDC_Init_FS+0x20>)
 800815a:	f7fe fe3c 	bl	8006dd6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800815e:	4905      	ldr	r1, [pc, #20]	; (8008174 <CDC_Init_FS+0x24>)
 8008160:	4803      	ldr	r0, [pc, #12]	; (8008170 <CDC_Init_FS+0x20>)
 8008162:	f7fe fe51 	bl	8006e08 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008166:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008168:	4618      	mov	r0, r3
 800816a:	bd80      	pop	{r7, pc}
 800816c:	200011ec 	.word	0x200011ec
 8008170:	2000071c 	.word	0x2000071c
 8008174:	200009ec 	.word	0x200009ec

08008178 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008178:	b480      	push	{r7}
 800817a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800817c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800817e:	4618      	mov	r0, r3
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	4603      	mov	r3, r0
 8008190:	6039      	str	r1, [r7, #0]
 8008192:	71fb      	strb	r3, [r7, #7]
 8008194:	4613      	mov	r3, r2
 8008196:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008198:	79fb      	ldrb	r3, [r7, #7]
 800819a:	2b23      	cmp	r3, #35	; 0x23
 800819c:	f200 8098 	bhi.w	80082d0 <CDC_Control_FS+0x148>
 80081a0:	a201      	add	r2, pc, #4	; (adr r2, 80081a8 <CDC_Control_FS+0x20>)
 80081a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081a6:	bf00      	nop
 80081a8:	080082d1 	.word	0x080082d1
 80081ac:	080082d1 	.word	0x080082d1
 80081b0:	080082d1 	.word	0x080082d1
 80081b4:	080082d1 	.word	0x080082d1
 80081b8:	080082d1 	.word	0x080082d1
 80081bc:	080082d1 	.word	0x080082d1
 80081c0:	080082d1 	.word	0x080082d1
 80081c4:	080082d1 	.word	0x080082d1
 80081c8:	080082d1 	.word	0x080082d1
 80081cc:	080082d1 	.word	0x080082d1
 80081d0:	080082d1 	.word	0x080082d1
 80081d4:	080082d1 	.word	0x080082d1
 80081d8:	080082d1 	.word	0x080082d1
 80081dc:	080082d1 	.word	0x080082d1
 80081e0:	080082d1 	.word	0x080082d1
 80081e4:	080082d1 	.word	0x080082d1
 80081e8:	080082d1 	.word	0x080082d1
 80081ec:	080082d1 	.word	0x080082d1
 80081f0:	080082d1 	.word	0x080082d1
 80081f4:	080082d1 	.word	0x080082d1
 80081f8:	080082d1 	.word	0x080082d1
 80081fc:	080082d1 	.word	0x080082d1
 8008200:	080082d1 	.word	0x080082d1
 8008204:	080082d1 	.word	0x080082d1
 8008208:	080082d1 	.word	0x080082d1
 800820c:	080082d1 	.word	0x080082d1
 8008210:	080082d1 	.word	0x080082d1
 8008214:	080082d1 	.word	0x080082d1
 8008218:	080082d1 	.word	0x080082d1
 800821c:	080082d1 	.word	0x080082d1
 8008220:	080082d1 	.word	0x080082d1
 8008224:	080082d1 	.word	0x080082d1
 8008228:	08008239 	.word	0x08008239
 800822c:	0800827d 	.word	0x0800827d
 8008230:	080082d1 	.word	0x080082d1
 8008234:	080082d1 	.word	0x080082d1
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
       linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	461a      	mov	r2, r3
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	3301      	adds	r3, #1
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	021b      	lsls	r3, r3, #8
 8008246:	431a      	orrs	r2, r3
                               (pbuf[2] << 16) | (pbuf[3] << 24));
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	3302      	adds	r3, #2
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	041b      	lsls	r3, r3, #16
       linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8008250:	431a      	orrs	r2, r3
                               (pbuf[2] << 16) | (pbuf[3] << 24));
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	3303      	adds	r3, #3
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	061b      	lsls	r3, r3, #24
 800825a:	4313      	orrs	r3, r2
       linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 800825c:	461a      	mov	r2, r3
 800825e:	4b20      	ldr	r3, [pc, #128]	; (80082e0 <CDC_Control_FS+0x158>)
 8008260:	601a      	str	r2, [r3, #0]
       linecoding.format     = pbuf[4];
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	791a      	ldrb	r2, [r3, #4]
 8008266:	4b1e      	ldr	r3, [pc, #120]	; (80082e0 <CDC_Control_FS+0x158>)
 8008268:	711a      	strb	r2, [r3, #4]
       linecoding.paritytype = pbuf[5];
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	795a      	ldrb	r2, [r3, #5]
 800826e:	4b1c      	ldr	r3, [pc, #112]	; (80082e0 <CDC_Control_FS+0x158>)
 8008270:	715a      	strb	r2, [r3, #5]
       linecoding.datatype   = pbuf[6];
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	799a      	ldrb	r2, [r3, #6]
 8008276:	4b1a      	ldr	r3, [pc, #104]	; (80082e0 <CDC_Control_FS+0x158>)
 8008278:	719a      	strb	r2, [r3, #6]

       /* Add your code here */
       break;
 800827a:	e02a      	b.n	80082d2 <CDC_Control_FS+0x14a>

     case CDC_GET_LINE_CODING:
       pbuf[0] = (uint8_t)(linecoding.bitrate);
 800827c:	4b18      	ldr	r3, [pc, #96]	; (80082e0 <CDC_Control_FS+0x158>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	b2da      	uxtb	r2, r3
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	701a      	strb	r2, [r3, #0]
       pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 8008286:	4b16      	ldr	r3, [pc, #88]	; (80082e0 <CDC_Control_FS+0x158>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	0a1a      	lsrs	r2, r3, #8
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	3301      	adds	r3, #1
 8008290:	b2d2      	uxtb	r2, r2
 8008292:	701a      	strb	r2, [r3, #0]
       pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 8008294:	4b12      	ldr	r3, [pc, #72]	; (80082e0 <CDC_Control_FS+0x158>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	0c1a      	lsrs	r2, r3, #16
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	3302      	adds	r3, #2
 800829e:	b2d2      	uxtb	r2, r2
 80082a0:	701a      	strb	r2, [r3, #0]
       pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 80082a2:	4b0f      	ldr	r3, [pc, #60]	; (80082e0 <CDC_Control_FS+0x158>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	0e1a      	lsrs	r2, r3, #24
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	3303      	adds	r3, #3
 80082ac:	b2d2      	uxtb	r2, r2
 80082ae:	701a      	strb	r2, [r3, #0]
       pbuf[4] = linecoding.format;
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	3304      	adds	r3, #4
 80082b4:	4a0a      	ldr	r2, [pc, #40]	; (80082e0 <CDC_Control_FS+0x158>)
 80082b6:	7912      	ldrb	r2, [r2, #4]
 80082b8:	701a      	strb	r2, [r3, #0]
       pbuf[5] = linecoding.paritytype;
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	3305      	adds	r3, #5
 80082be:	4a08      	ldr	r2, [pc, #32]	; (80082e0 <CDC_Control_FS+0x158>)
 80082c0:	7952      	ldrb	r2, [r2, #5]
 80082c2:	701a      	strb	r2, [r3, #0]
       pbuf[6] = linecoding.datatype;
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	3306      	adds	r3, #6
 80082c8:	4a05      	ldr	r2, [pc, #20]	; (80082e0 <CDC_Control_FS+0x158>)
 80082ca:	7992      	ldrb	r2, [r2, #6]
 80082cc:	701a      	strb	r2, [r3, #0]

       /* Add your code here */
       break;
 80082ce:	e000      	b.n	80082d2 <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80082d0:	bf00      	nop
  }

  return (USBD_OK);
 80082d2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	370c      	adds	r7, #12
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr
 80082e0:	2000011c 	.word	0x2000011c

080082e4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b082      	sub	sp, #8
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80082ee:	6879      	ldr	r1, [r7, #4]
 80082f0:	4805      	ldr	r0, [pc, #20]	; (8008308 <CDC_Receive_FS+0x24>)
 80082f2:	f7fe fd89 	bl	8006e08 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80082f6:	4804      	ldr	r0, [pc, #16]	; (8008308 <CDC_Receive_FS+0x24>)
 80082f8:	f7fe fdca 	bl	8006e90 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80082fc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3708      	adds	r7, #8
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop
 8008308:	2000071c 	.word	0x2000071c

0800830c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	460b      	mov	r3, r1
 8008316:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008318:	2300      	movs	r3, #0
 800831a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800831c:	4b0d      	ldr	r3, [pc, #52]	; (8008354 <CDC_Transmit_FS+0x48>)
 800831e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008322:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800832a:	2b00      	cmp	r3, #0
 800832c:	d001      	beq.n	8008332 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800832e:	2301      	movs	r3, #1
 8008330:	e00b      	b.n	800834a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008332:	887b      	ldrh	r3, [r7, #2]
 8008334:	461a      	mov	r2, r3
 8008336:	6879      	ldr	r1, [r7, #4]
 8008338:	4806      	ldr	r0, [pc, #24]	; (8008354 <CDC_Transmit_FS+0x48>)
 800833a:	f7fe fd4c 	bl	8006dd6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800833e:	4805      	ldr	r0, [pc, #20]	; (8008354 <CDC_Transmit_FS+0x48>)
 8008340:	f7fe fd76 	bl	8006e30 <USBD_CDC_TransmitPacket>
 8008344:	4603      	mov	r3, r0
 8008346:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008348:	7bfb      	ldrb	r3, [r7, #15]
}
 800834a:	4618      	mov	r0, r3
 800834c:	3710      	adds	r7, #16
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	2000071c 	.word	0x2000071c

08008358 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008358:	b480      	push	{r7}
 800835a:	b087      	sub	sp, #28
 800835c:	af00      	add	r7, sp, #0
 800835e:	60f8      	str	r0, [r7, #12]
 8008360:	60b9      	str	r1, [r7, #8]
 8008362:	4613      	mov	r3, r2
 8008364:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008366:	2300      	movs	r3, #0
 8008368:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800836a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800836e:	4618      	mov	r0, r3
 8008370:	371c      	adds	r7, #28
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr
	...

0800837c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	4603      	mov	r3, r0
 8008384:	6039      	str	r1, [r7, #0]
 8008386:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	2212      	movs	r2, #18
 800838c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800838e:	4b03      	ldr	r3, [pc, #12]	; (800839c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008390:	4618      	mov	r0, r3
 8008392:	370c      	adds	r7, #12
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr
 800839c:	20000154 	.word	0x20000154

080083a0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b083      	sub	sp, #12
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	4603      	mov	r3, r0
 80083a8:	6039      	str	r1, [r7, #0]
 80083aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	2204      	movs	r2, #4
 80083b0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80083b2:	4b03      	ldr	r3, [pc, #12]	; (80083c0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	370c      	adds	r7, #12
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr
 80083c0:	20000168 	.word	0x20000168

080083c4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b082      	sub	sp, #8
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	4603      	mov	r3, r0
 80083cc:	6039      	str	r1, [r7, #0]
 80083ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80083d0:	79fb      	ldrb	r3, [r7, #7]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d105      	bne.n	80083e2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80083d6:	683a      	ldr	r2, [r7, #0]
 80083d8:	4907      	ldr	r1, [pc, #28]	; (80083f8 <USBD_FS_ProductStrDescriptor+0x34>)
 80083da:	4808      	ldr	r0, [pc, #32]	; (80083fc <USBD_FS_ProductStrDescriptor+0x38>)
 80083dc:	f7ff fda7 	bl	8007f2e <USBD_GetString>
 80083e0:	e004      	b.n	80083ec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80083e2:	683a      	ldr	r2, [r7, #0]
 80083e4:	4904      	ldr	r1, [pc, #16]	; (80083f8 <USBD_FS_ProductStrDescriptor+0x34>)
 80083e6:	4805      	ldr	r0, [pc, #20]	; (80083fc <USBD_FS_ProductStrDescriptor+0x38>)
 80083e8:	f7ff fda1 	bl	8007f2e <USBD_GetString>
  }
  return USBD_StrDesc;
 80083ec:	4b02      	ldr	r3, [pc, #8]	; (80083f8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3708      	adds	r7, #8
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	200019ec 	.word	0x200019ec
 80083fc:	08008e04 	.word	0x08008e04

08008400 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
 8008406:	4603      	mov	r3, r0
 8008408:	6039      	str	r1, [r7, #0]
 800840a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800840c:	683a      	ldr	r2, [r7, #0]
 800840e:	4904      	ldr	r1, [pc, #16]	; (8008420 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008410:	4804      	ldr	r0, [pc, #16]	; (8008424 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008412:	f7ff fd8c 	bl	8007f2e <USBD_GetString>
  return USBD_StrDesc;
 8008416:	4b02      	ldr	r3, [pc, #8]	; (8008420 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008418:	4618      	mov	r0, r3
 800841a:	3708      	adds	r7, #8
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}
 8008420:	200019ec 	.word	0x200019ec
 8008424:	08008e04 	.word	0x08008e04

08008428 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
 800842e:	4603      	mov	r3, r0
 8008430:	6039      	str	r1, [r7, #0]
 8008432:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	221a      	movs	r2, #26
 8008438:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800843a:	f000 f843 	bl	80084c4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800843e:	4b02      	ldr	r3, [pc, #8]	; (8008448 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008440:	4618      	mov	r0, r3
 8008442:	3708      	adds	r7, #8
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}
 8008448:	2000016c 	.word	0x2000016c

0800844c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	4603      	mov	r3, r0
 8008454:	6039      	str	r1, [r7, #0]
 8008456:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008458:	79fb      	ldrb	r3, [r7, #7]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d105      	bne.n	800846a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800845e:	683a      	ldr	r2, [r7, #0]
 8008460:	4907      	ldr	r1, [pc, #28]	; (8008480 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008462:	4808      	ldr	r0, [pc, #32]	; (8008484 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008464:	f7ff fd63 	bl	8007f2e <USBD_GetString>
 8008468:	e004      	b.n	8008474 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800846a:	683a      	ldr	r2, [r7, #0]
 800846c:	4904      	ldr	r1, [pc, #16]	; (8008480 <USBD_FS_ConfigStrDescriptor+0x34>)
 800846e:	4805      	ldr	r0, [pc, #20]	; (8008484 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008470:	f7ff fd5d 	bl	8007f2e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008474:	4b02      	ldr	r3, [pc, #8]	; (8008480 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008476:	4618      	mov	r0, r3
 8008478:	3708      	adds	r7, #8
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
 800847e:	bf00      	nop
 8008480:	200019ec 	.word	0x200019ec
 8008484:	08008e10 	.word	0x08008e10

08008488 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
 800848e:	4603      	mov	r3, r0
 8008490:	6039      	str	r1, [r7, #0]
 8008492:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008494:	79fb      	ldrb	r3, [r7, #7]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d105      	bne.n	80084a6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800849a:	683a      	ldr	r2, [r7, #0]
 800849c:	4907      	ldr	r1, [pc, #28]	; (80084bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800849e:	4808      	ldr	r0, [pc, #32]	; (80084c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80084a0:	f7ff fd45 	bl	8007f2e <USBD_GetString>
 80084a4:	e004      	b.n	80084b0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80084a6:	683a      	ldr	r2, [r7, #0]
 80084a8:	4904      	ldr	r1, [pc, #16]	; (80084bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80084aa:	4805      	ldr	r0, [pc, #20]	; (80084c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80084ac:	f7ff fd3f 	bl	8007f2e <USBD_GetString>
  }
  return USBD_StrDesc;
 80084b0:	4b02      	ldr	r3, [pc, #8]	; (80084bc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3708      	adds	r7, #8
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
 80084ba:	bf00      	nop
 80084bc:	200019ec 	.word	0x200019ec
 80084c0:	08008e1c 	.word	0x08008e1c

080084c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b084      	sub	sp, #16
 80084c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80084ca:	4b0f      	ldr	r3, [pc, #60]	; (8008508 <Get_SerialNum+0x44>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80084d0:	4b0e      	ldr	r3, [pc, #56]	; (800850c <Get_SerialNum+0x48>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80084d6:	4b0e      	ldr	r3, [pc, #56]	; (8008510 <Get_SerialNum+0x4c>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80084dc:	68fa      	ldr	r2, [r7, #12]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	4413      	add	r3, r2
 80084e2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d009      	beq.n	80084fe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80084ea:	2208      	movs	r2, #8
 80084ec:	4909      	ldr	r1, [pc, #36]	; (8008514 <Get_SerialNum+0x50>)
 80084ee:	68f8      	ldr	r0, [r7, #12]
 80084f0:	f000 f814 	bl	800851c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80084f4:	2204      	movs	r2, #4
 80084f6:	4908      	ldr	r1, [pc, #32]	; (8008518 <Get_SerialNum+0x54>)
 80084f8:	68b8      	ldr	r0, [r7, #8]
 80084fa:	f000 f80f 	bl	800851c <IntToUnicode>
  }
}
 80084fe:	bf00      	nop
 8008500:	3710      	adds	r7, #16
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	1fff7a10 	.word	0x1fff7a10
 800850c:	1fff7a14 	.word	0x1fff7a14
 8008510:	1fff7a18 	.word	0x1fff7a18
 8008514:	2000016e 	.word	0x2000016e
 8008518:	2000017e 	.word	0x2000017e

0800851c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800851c:	b480      	push	{r7}
 800851e:	b087      	sub	sp, #28
 8008520:	af00      	add	r7, sp, #0
 8008522:	60f8      	str	r0, [r7, #12]
 8008524:	60b9      	str	r1, [r7, #8]
 8008526:	4613      	mov	r3, r2
 8008528:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800852a:	2300      	movs	r3, #0
 800852c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800852e:	2300      	movs	r3, #0
 8008530:	75fb      	strb	r3, [r7, #23]
 8008532:	e027      	b.n	8008584 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	0f1b      	lsrs	r3, r3, #28
 8008538:	2b09      	cmp	r3, #9
 800853a:	d80b      	bhi.n	8008554 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	0f1b      	lsrs	r3, r3, #28
 8008540:	b2da      	uxtb	r2, r3
 8008542:	7dfb      	ldrb	r3, [r7, #23]
 8008544:	005b      	lsls	r3, r3, #1
 8008546:	4619      	mov	r1, r3
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	440b      	add	r3, r1
 800854c:	3230      	adds	r2, #48	; 0x30
 800854e:	b2d2      	uxtb	r2, r2
 8008550:	701a      	strb	r2, [r3, #0]
 8008552:	e00a      	b.n	800856a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	0f1b      	lsrs	r3, r3, #28
 8008558:	b2da      	uxtb	r2, r3
 800855a:	7dfb      	ldrb	r3, [r7, #23]
 800855c:	005b      	lsls	r3, r3, #1
 800855e:	4619      	mov	r1, r3
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	440b      	add	r3, r1
 8008564:	3237      	adds	r2, #55	; 0x37
 8008566:	b2d2      	uxtb	r2, r2
 8008568:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	011b      	lsls	r3, r3, #4
 800856e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008570:	7dfb      	ldrb	r3, [r7, #23]
 8008572:	005b      	lsls	r3, r3, #1
 8008574:	3301      	adds	r3, #1
 8008576:	68ba      	ldr	r2, [r7, #8]
 8008578:	4413      	add	r3, r2
 800857a:	2200      	movs	r2, #0
 800857c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800857e:	7dfb      	ldrb	r3, [r7, #23]
 8008580:	3301      	adds	r3, #1
 8008582:	75fb      	strb	r3, [r7, #23]
 8008584:	7dfa      	ldrb	r2, [r7, #23]
 8008586:	79fb      	ldrb	r3, [r7, #7]
 8008588:	429a      	cmp	r2, r3
 800858a:	d3d3      	bcc.n	8008534 <IntToUnicode+0x18>
  }
}
 800858c:	bf00      	nop
 800858e:	371c      	adds	r7, #28
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b08a      	sub	sp, #40	; 0x28
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085a0:	f107 0314 	add.w	r3, r7, #20
 80085a4:	2200      	movs	r2, #0
 80085a6:	601a      	str	r2, [r3, #0]
 80085a8:	605a      	str	r2, [r3, #4]
 80085aa:	609a      	str	r2, [r3, #8]
 80085ac:	60da      	str	r2, [r3, #12]
 80085ae:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085b8:	d169      	bne.n	800868e <HAL_PCD_MspInit+0xf6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80085ba:	2300      	movs	r3, #0
 80085bc:	613b      	str	r3, [r7, #16]
 80085be:	4b36      	ldr	r3, [pc, #216]	; (8008698 <HAL_PCD_MspInit+0x100>)
 80085c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085c2:	4a35      	ldr	r2, [pc, #212]	; (8008698 <HAL_PCD_MspInit+0x100>)
 80085c4:	f043 0301 	orr.w	r3, r3, #1
 80085c8:	6313      	str	r3, [r2, #48]	; 0x30
 80085ca:	4b33      	ldr	r3, [pc, #204]	; (8008698 <HAL_PCD_MspInit+0x100>)
 80085cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ce:	f003 0301 	and.w	r3, r3, #1
 80085d2:	613b      	str	r3, [r7, #16]
 80085d4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80085d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80085dc:	2300      	movs	r3, #0
 80085de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085e0:	2300      	movs	r3, #0
 80085e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085e4:	f107 0314 	add.w	r3, r7, #20
 80085e8:	4619      	mov	r1, r3
 80085ea:	482c      	ldr	r0, [pc, #176]	; (800869c <HAL_PCD_MspInit+0x104>)
 80085ec:	f7f9 fee2 	bl	80023b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80085f0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80085f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085f6:	2302      	movs	r3, #2
 80085f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085fa:	2300      	movs	r3, #0
 80085fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085fe:	2303      	movs	r3, #3
 8008600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008602:	230a      	movs	r3, #10
 8008604:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008606:	f107 0314 	add.w	r3, r7, #20
 800860a:	4619      	mov	r1, r3
 800860c:	4823      	ldr	r0, [pc, #140]	; (800869c <HAL_PCD_MspInit+0x104>)
 800860e:	f7f9 fed1 	bl	80023b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008612:	4b21      	ldr	r3, [pc, #132]	; (8008698 <HAL_PCD_MspInit+0x100>)
 8008614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008616:	4a20      	ldr	r2, [pc, #128]	; (8008698 <HAL_PCD_MspInit+0x100>)
 8008618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800861c:	6353      	str	r3, [r2, #52]	; 0x34
 800861e:	2300      	movs	r3, #0
 8008620:	60fb      	str	r3, [r7, #12]
 8008622:	4b1d      	ldr	r3, [pc, #116]	; (8008698 <HAL_PCD_MspInit+0x100>)
 8008624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008626:	4a1c      	ldr	r2, [pc, #112]	; (8008698 <HAL_PCD_MspInit+0x100>)
 8008628:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800862c:	6453      	str	r3, [r2, #68]	; 0x44
 800862e:	4b1a      	ldr	r3, [pc, #104]	; (8008698 <HAL_PCD_MspInit+0x100>)
 8008630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008636:	60fb      	str	r3, [r7, #12]
 8008638:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800863a:	2200      	movs	r2, #0
 800863c:	2100      	movs	r1, #0
 800863e:	2043      	movs	r0, #67	; 0x43
 8008640:	f7f9 f9ad 	bl	800199e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008644:	2043      	movs	r0, #67	; 0x43
 8008646:	f7f9 f9c6 	bl	80019d6 <HAL_NVIC_EnableIRQ>
    if(pcdHandle->Init.low_power_enable == 1)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6a1b      	ldr	r3, [r3, #32]
 800864e:	2b01      	cmp	r3, #1
 8008650:	d11d      	bne.n	800868e <HAL_PCD_MspInit+0xf6>
    {
      /* Enable EXTI Line 18 for USB wakeup */
      __HAL_USB_OTG_FS_WAKEUP_EXTI_CLEAR_FLAG();
 8008652:	4b13      	ldr	r3, [pc, #76]	; (80086a0 <HAL_PCD_MspInit+0x108>)
 8008654:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8008658:	615a      	str	r2, [r3, #20]
      __HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_RISING_EDGE();
 800865a:	4b11      	ldr	r3, [pc, #68]	; (80086a0 <HAL_PCD_MspInit+0x108>)
 800865c:	68db      	ldr	r3, [r3, #12]
 800865e:	4a10      	ldr	r2, [pc, #64]	; (80086a0 <HAL_PCD_MspInit+0x108>)
 8008660:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008664:	60d3      	str	r3, [r2, #12]
 8008666:	4b0e      	ldr	r3, [pc, #56]	; (80086a0 <HAL_PCD_MspInit+0x108>)
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	4a0d      	ldr	r2, [pc, #52]	; (80086a0 <HAL_PCD_MspInit+0x108>)
 800866c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008670:	6093      	str	r3, [r2, #8]
      __HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_IT();
 8008672:	4b0b      	ldr	r3, [pc, #44]	; (80086a0 <HAL_PCD_MspInit+0x108>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a0a      	ldr	r2, [pc, #40]	; (80086a0 <HAL_PCD_MspInit+0x108>)
 8008678:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800867c:	6013      	str	r3, [r2, #0]
      HAL_NVIC_SetPriority(OTG_FS_WKUP_IRQn, 0, 0);
 800867e:	2200      	movs	r2, #0
 8008680:	2100      	movs	r1, #0
 8008682:	202a      	movs	r0, #42	; 0x2a
 8008684:	f7f9 f98b 	bl	800199e <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(OTG_FS_WKUP_IRQn);
 8008688:	202a      	movs	r0, #42	; 0x2a
 800868a:	f7f9 f9a4 	bl	80019d6 <HAL_NVIC_EnableIRQ>
    }
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800868e:	bf00      	nop
 8008690:	3728      	adds	r7, #40	; 0x28
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	40023800 	.word	0x40023800
 800869c:	40020000 	.word	0x40020000
 80086a0:	40013c00 	.word	0x40013c00

080086a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b082      	sub	sp, #8
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80086b8:	4619      	mov	r1, r3
 80086ba:	4610      	mov	r0, r2
 80086bc:	f7fe fcb4 	bl	8007028 <USBD_LL_SetupStage>
}
 80086c0:	bf00      	nop
 80086c2:	3708      	adds	r7, #8
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	460b      	mov	r3, r1
 80086d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80086da:	78fa      	ldrb	r2, [r7, #3]
 80086dc:	6879      	ldr	r1, [r7, #4]
 80086de:	4613      	mov	r3, r2
 80086e0:	00db      	lsls	r3, r3, #3
 80086e2:	1a9b      	subs	r3, r3, r2
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	440b      	add	r3, r1
 80086e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80086ec:	681a      	ldr	r2, [r3, #0]
 80086ee:	78fb      	ldrb	r3, [r7, #3]
 80086f0:	4619      	mov	r1, r3
 80086f2:	f7fe fcec 	bl	80070ce <USBD_LL_DataOutStage>
}
 80086f6:	bf00      	nop
 80086f8:	3708      	adds	r7, #8
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}

080086fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086fe:	b580      	push	{r7, lr}
 8008700:	b082      	sub	sp, #8
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
 8008706:	460b      	mov	r3, r1
 8008708:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008710:	78fa      	ldrb	r2, [r7, #3]
 8008712:	6879      	ldr	r1, [r7, #4]
 8008714:	4613      	mov	r3, r2
 8008716:	00db      	lsls	r3, r3, #3
 8008718:	1a9b      	subs	r3, r3, r2
 800871a:	009b      	lsls	r3, r3, #2
 800871c:	440b      	add	r3, r1
 800871e:	3348      	adds	r3, #72	; 0x48
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	78fb      	ldrb	r3, [r7, #3]
 8008724:	4619      	mov	r1, r3
 8008726:	f7fe fd35 	bl	8007194 <USBD_LL_DataInStage>
}
 800872a:	bf00      	nop
 800872c:	3708      	adds	r7, #8
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}

08008732 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008732:	b580      	push	{r7, lr}
 8008734:	b082      	sub	sp, #8
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008740:	4618      	mov	r0, r3
 8008742:	f7fe fe39 	bl	80073b8 <USBD_LL_SOF>
}
 8008746:	bf00      	nop
 8008748:	3708      	adds	r7, #8
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}

0800874e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800874e:	b580      	push	{r7, lr}
 8008750:	b084      	sub	sp, #16
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008756:	2301      	movs	r3, #1
 8008758:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d102      	bne.n	8008768 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008762:	2300      	movs	r3, #0
 8008764:	73fb      	strb	r3, [r7, #15]
 8008766:	e008      	b.n	800877a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	2b02      	cmp	r3, #2
 800876e:	d102      	bne.n	8008776 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008770:	2301      	movs	r3, #1
 8008772:	73fb      	strb	r3, [r7, #15]
 8008774:	e001      	b.n	800877a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008776:	f7f8 f94f 	bl	8000a18 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008780:	7bfa      	ldrb	r2, [r7, #15]
 8008782:	4611      	mov	r1, r2
 8008784:	4618      	mov	r0, r3
 8008786:	f7fe fddc 	bl	8007342 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008790:	4618      	mov	r0, r3
 8008792:	f7fe fd95 	bl	80072c0 <USBD_LL_Reset>
}
 8008796:	bf00      	nop
 8008798:	3710      	adds	r7, #16
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
	...

080087a0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b082      	sub	sp, #8
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80087ae:	4618      	mov	r0, r3
 80087b0:	f7fe fdd7 	bl	8007362 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	6812      	ldr	r2, [r2, #0]
 80087c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80087c6:	f043 0301 	orr.w	r3, r3, #1
 80087ca:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6a1b      	ldr	r3, [r3, #32]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d005      	beq.n	80087e0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80087d4:	4b04      	ldr	r3, [pc, #16]	; (80087e8 <HAL_PCD_SuspendCallback+0x48>)
 80087d6:	691b      	ldr	r3, [r3, #16]
 80087d8:	4a03      	ldr	r2, [pc, #12]	; (80087e8 <HAL_PCD_SuspendCallback+0x48>)
 80087da:	f043 0306 	orr.w	r3, r3, #6
 80087de:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80087e0:	bf00      	nop
 80087e2:	3708      	adds	r7, #8
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}
 80087e8:	e000ed00 	.word	0xe000ed00

080087ec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b082      	sub	sp, #8
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7fe fdc6 	bl	800738c <USBD_LL_Resume>
}
 8008800:	bf00      	nop
 8008802:	3708      	adds	r7, #8
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	460b      	mov	r3, r1
 8008812:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800881a:	78fa      	ldrb	r2, [r7, #3]
 800881c:	4611      	mov	r1, r2
 800881e:	4618      	mov	r0, r3
 8008820:	f7fe fdf1 	bl	8007406 <USBD_LL_IsoOUTIncomplete>
}
 8008824:	bf00      	nop
 8008826:	3708      	adds	r7, #8
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	460b      	mov	r3, r1
 8008836:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800883e:	78fa      	ldrb	r2, [r7, #3]
 8008840:	4611      	mov	r1, r2
 8008842:	4618      	mov	r0, r3
 8008844:	f7fe fdd2 	bl	80073ec <USBD_LL_IsoINIncomplete>
}
 8008848:	bf00      	nop
 800884a:	3708      	adds	r7, #8
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800885e:	4618      	mov	r0, r3
 8008860:	f7fe fdde 	bl	8007420 <USBD_LL_DevConnected>
}
 8008864:	bf00      	nop
 8008866:	3708      	adds	r7, #8
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b082      	sub	sp, #8
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800887a:	4618      	mov	r0, r3
 800887c:	f7fe fddb 	bl	8007436 <USBD_LL_DevDisconnected>
}
 8008880:	bf00      	nop
 8008882:	3708      	adds	r7, #8
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b082      	sub	sp, #8
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	781b      	ldrb	r3, [r3, #0]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d13c      	bne.n	8008912 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008898:	4a20      	ldr	r2, [pc, #128]	; (800891c <USBD_LL_Init+0x94>)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	4a1e      	ldr	r2, [pc, #120]	; (800891c <USBD_LL_Init+0x94>)
 80088a4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80088a8:	4b1c      	ldr	r3, [pc, #112]	; (800891c <USBD_LL_Init+0x94>)
 80088aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80088ae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80088b0:	4b1a      	ldr	r3, [pc, #104]	; (800891c <USBD_LL_Init+0x94>)
 80088b2:	2204      	movs	r2, #4
 80088b4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80088b6:	4b19      	ldr	r3, [pc, #100]	; (800891c <USBD_LL_Init+0x94>)
 80088b8:	2202      	movs	r2, #2
 80088ba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80088bc:	4b17      	ldr	r3, [pc, #92]	; (800891c <USBD_LL_Init+0x94>)
 80088be:	2200      	movs	r2, #0
 80088c0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80088c2:	4b16      	ldr	r3, [pc, #88]	; (800891c <USBD_LL_Init+0x94>)
 80088c4:	2202      	movs	r2, #2
 80088c6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80088c8:	4b14      	ldr	r3, [pc, #80]	; (800891c <USBD_LL_Init+0x94>)
 80088ca:	2200      	movs	r2, #0
 80088cc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = ENABLE;
 80088ce:	4b13      	ldr	r3, [pc, #76]	; (800891c <USBD_LL_Init+0x94>)
 80088d0:	2201      	movs	r2, #1
 80088d2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = ENABLE;
 80088d4:	4b11      	ldr	r3, [pc, #68]	; (800891c <USBD_LL_Init+0x94>)
 80088d6:	2201      	movs	r2, #1
 80088d8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80088da:	4b10      	ldr	r3, [pc, #64]	; (800891c <USBD_LL_Init+0x94>)
 80088dc:	2201      	movs	r2, #1
 80088de:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80088e0:	4b0e      	ldr	r3, [pc, #56]	; (800891c <USBD_LL_Init+0x94>)
 80088e2:	2200      	movs	r2, #0
 80088e4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80088e6:	480d      	ldr	r0, [pc, #52]	; (800891c <USBD_LL_Init+0x94>)
 80088e8:	f7f9 ff17 	bl	800271a <HAL_PCD_Init>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d001      	beq.n	80088f6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80088f2:	f7f8 f891 	bl	8000a18 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80088f6:	2180      	movs	r1, #128	; 0x80
 80088f8:	4808      	ldr	r0, [pc, #32]	; (800891c <USBD_LL_Init+0x94>)
 80088fa:	f7fb f874 	bl	80039e6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80088fe:	2240      	movs	r2, #64	; 0x40
 8008900:	2100      	movs	r1, #0
 8008902:	4806      	ldr	r0, [pc, #24]	; (800891c <USBD_LL_Init+0x94>)
 8008904:	f7fb f828 	bl	8003958 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008908:	2280      	movs	r2, #128	; 0x80
 800890a:	2101      	movs	r1, #1
 800890c:	4803      	ldr	r0, [pc, #12]	; (800891c <USBD_LL_Init+0x94>)
 800890e:	f7fb f823 	bl	8003958 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008912:	2300      	movs	r3, #0
}
 8008914:	4618      	mov	r0, r3
 8008916:	3708      	adds	r7, #8
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}
 800891c:	20001bec 	.word	0x20001bec

08008920 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b084      	sub	sp, #16
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008928:	2300      	movs	r3, #0
 800892a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800892c:	2300      	movs	r3, #0
 800892e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008936:	4618      	mov	r0, r3
 8008938:	f7fa f80c 	bl	8002954 <HAL_PCD_Start>
 800893c:	4603      	mov	r3, r0
 800893e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008940:	7bfb      	ldrb	r3, [r7, #15]
 8008942:	4618      	mov	r0, r3
 8008944:	f000 f92a 	bl	8008b9c <USBD_Get_USB_Status>
 8008948:	4603      	mov	r3, r0
 800894a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800894c:	7bbb      	ldrb	r3, [r7, #14]
}
 800894e:	4618      	mov	r0, r3
 8008950:	3710      	adds	r7, #16
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}

08008956 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008956:	b580      	push	{r7, lr}
 8008958:	b084      	sub	sp, #16
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
 800895e:	4608      	mov	r0, r1
 8008960:	4611      	mov	r1, r2
 8008962:	461a      	mov	r2, r3
 8008964:	4603      	mov	r3, r0
 8008966:	70fb      	strb	r3, [r7, #3]
 8008968:	460b      	mov	r3, r1
 800896a:	70bb      	strb	r3, [r7, #2]
 800896c:	4613      	mov	r3, r2
 800896e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008970:	2300      	movs	r3, #0
 8008972:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008974:	2300      	movs	r3, #0
 8008976:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800897e:	78bb      	ldrb	r3, [r7, #2]
 8008980:	883a      	ldrh	r2, [r7, #0]
 8008982:	78f9      	ldrb	r1, [r7, #3]
 8008984:	f7fa fbf0 	bl	8003168 <HAL_PCD_EP_Open>
 8008988:	4603      	mov	r3, r0
 800898a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800898c:	7bfb      	ldrb	r3, [r7, #15]
 800898e:	4618      	mov	r0, r3
 8008990:	f000 f904 	bl	8008b9c <USBD_Get_USB_Status>
 8008994:	4603      	mov	r3, r0
 8008996:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008998:	7bbb      	ldrb	r3, [r7, #14]
}
 800899a:	4618      	mov	r0, r3
 800899c:	3710      	adds	r7, #16
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}

080089a2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089a2:	b580      	push	{r7, lr}
 80089a4:	b084      	sub	sp, #16
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
 80089aa:	460b      	mov	r3, r1
 80089ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089ae:	2300      	movs	r3, #0
 80089b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089b2:	2300      	movs	r3, #0
 80089b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80089bc:	78fa      	ldrb	r2, [r7, #3]
 80089be:	4611      	mov	r1, r2
 80089c0:	4618      	mov	r0, r3
 80089c2:	f7fa fc39 	bl	8003238 <HAL_PCD_EP_Close>
 80089c6:	4603      	mov	r3, r0
 80089c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089ca:	7bfb      	ldrb	r3, [r7, #15]
 80089cc:	4618      	mov	r0, r3
 80089ce:	f000 f8e5 	bl	8008b9c <USBD_Get_USB_Status>
 80089d2:	4603      	mov	r3, r0
 80089d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3710      	adds	r7, #16
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b084      	sub	sp, #16
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	460b      	mov	r3, r1
 80089ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089ec:	2300      	movs	r3, #0
 80089ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089f0:	2300      	movs	r3, #0
 80089f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80089fa:	78fa      	ldrb	r2, [r7, #3]
 80089fc:	4611      	mov	r1, r2
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7fa fd11 	bl	8003426 <HAL_PCD_EP_SetStall>
 8008a04:	4603      	mov	r3, r0
 8008a06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a08:	7bfb      	ldrb	r3, [r7, #15]
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f000 f8c6 	bl	8008b9c <USBD_Get_USB_Status>
 8008a10:	4603      	mov	r3, r0
 8008a12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a14:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3710      	adds	r7, #16
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}

08008a1e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b084      	sub	sp, #16
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
 8008a26:	460b      	mov	r3, r1
 8008a28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a38:	78fa      	ldrb	r2, [r7, #3]
 8008a3a:	4611      	mov	r1, r2
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f7fa fd56 	bl	80034ee <HAL_PCD_EP_ClrStall>
 8008a42:	4603      	mov	r3, r0
 8008a44:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a46:	7bfb      	ldrb	r3, [r7, #15]
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f000 f8a7 	bl	8008b9c <USBD_Get_USB_Status>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a52:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3710      	adds	r7, #16
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b085      	sub	sp, #20
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	460b      	mov	r3, r1
 8008a66:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a6e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008a70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	da0b      	bge.n	8008a90 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008a78:	78fb      	ldrb	r3, [r7, #3]
 8008a7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a7e:	68f9      	ldr	r1, [r7, #12]
 8008a80:	4613      	mov	r3, r2
 8008a82:	00db      	lsls	r3, r3, #3
 8008a84:	1a9b      	subs	r3, r3, r2
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	440b      	add	r3, r1
 8008a8a:	333e      	adds	r3, #62	; 0x3e
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	e00b      	b.n	8008aa8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008a90:	78fb      	ldrb	r3, [r7, #3]
 8008a92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a96:	68f9      	ldr	r1, [r7, #12]
 8008a98:	4613      	mov	r3, r2
 8008a9a:	00db      	lsls	r3, r3, #3
 8008a9c:	1a9b      	subs	r3, r3, r2
 8008a9e:	009b      	lsls	r3, r3, #2
 8008aa0:	440b      	add	r3, r1
 8008aa2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008aa6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3714      	adds	r7, #20
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr

08008ab4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b084      	sub	sp, #16
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	460b      	mov	r3, r1
 8008abe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008ace:	78fa      	ldrb	r2, [r7, #3]
 8008ad0:	4611      	mov	r1, r2
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7fa fb23 	bl	800311e <HAL_PCD_SetAddress>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008adc:	7bfb      	ldrb	r3, [r7, #15]
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f000 f85c 	bl	8008b9c <USBD_Get_USB_Status>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ae8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3710      	adds	r7, #16
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b086      	sub	sp, #24
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	60f8      	str	r0, [r7, #12]
 8008afa:	607a      	str	r2, [r7, #4]
 8008afc:	603b      	str	r3, [r7, #0]
 8008afe:	460b      	mov	r3, r1
 8008b00:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b02:	2300      	movs	r3, #0
 8008b04:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b06:	2300      	movs	r3, #0
 8008b08:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008b10:	7af9      	ldrb	r1, [r7, #11]
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	f7fa fc3c 	bl	8003392 <HAL_PCD_EP_Transmit>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b1e:	7dfb      	ldrb	r3, [r7, #23]
 8008b20:	4618      	mov	r0, r3
 8008b22:	f000 f83b 	bl	8008b9c <USBD_Get_USB_Status>
 8008b26:	4603      	mov	r3, r0
 8008b28:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008b2a:	7dbb      	ldrb	r3, [r7, #22]
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3718      	adds	r7, #24
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b086      	sub	sp, #24
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	60f8      	str	r0, [r7, #12]
 8008b3c:	607a      	str	r2, [r7, #4]
 8008b3e:	603b      	str	r3, [r7, #0]
 8008b40:	460b      	mov	r3, r1
 8008b42:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b44:	2300      	movs	r3, #0
 8008b46:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008b52:	7af9      	ldrb	r1, [r7, #11]
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	f7fa fbb8 	bl	80032cc <HAL_PCD_EP_Receive>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b60:	7dfb      	ldrb	r3, [r7, #23]
 8008b62:	4618      	mov	r0, r3
 8008b64:	f000 f81a 	bl	8008b9c <USBD_Get_USB_Status>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008b6c:	7dbb      	ldrb	r3, [r7, #22]
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3718      	adds	r7, #24
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}

08008b76 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b76:	b580      	push	{r7, lr}
 8008b78:	b082      	sub	sp, #8
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]
 8008b7e:	460b      	mov	r3, r1
 8008b80:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b88:	78fa      	ldrb	r2, [r7, #3]
 8008b8a:	4611      	mov	r1, r2
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f7fa fbe8 	bl	8003362 <HAL_PCD_EP_GetRxCount>
 8008b92:	4603      	mov	r3, r0
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3708      	adds	r7, #8
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b085      	sub	sp, #20
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008baa:	79fb      	ldrb	r3, [r7, #7]
 8008bac:	2b03      	cmp	r3, #3
 8008bae:	d817      	bhi.n	8008be0 <USBD_Get_USB_Status+0x44>
 8008bb0:	a201      	add	r2, pc, #4	; (adr r2, 8008bb8 <USBD_Get_USB_Status+0x1c>)
 8008bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bb6:	bf00      	nop
 8008bb8:	08008bc9 	.word	0x08008bc9
 8008bbc:	08008bcf 	.word	0x08008bcf
 8008bc0:	08008bd5 	.word	0x08008bd5
 8008bc4:	08008bdb 	.word	0x08008bdb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	73fb      	strb	r3, [r7, #15]
    break;
 8008bcc:	e00b      	b.n	8008be6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008bce:	2303      	movs	r3, #3
 8008bd0:	73fb      	strb	r3, [r7, #15]
    break;
 8008bd2:	e008      	b.n	8008be6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	73fb      	strb	r3, [r7, #15]
    break;
 8008bd8:	e005      	b.n	8008be6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008bda:	2303      	movs	r3, #3
 8008bdc:	73fb      	strb	r3, [r7, #15]
    break;
 8008bde:	e002      	b.n	8008be6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008be0:	2303      	movs	r3, #3
 8008be2:	73fb      	strb	r3, [r7, #15]
    break;
 8008be4:	bf00      	nop
  }
  return usb_status;
 8008be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3714      	adds	r7, #20
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr

08008bf4 <__errno>:
 8008bf4:	4b01      	ldr	r3, [pc, #4]	; (8008bfc <__errno+0x8>)
 8008bf6:	6818      	ldr	r0, [r3, #0]
 8008bf8:	4770      	bx	lr
 8008bfa:	bf00      	nop
 8008bfc:	20000188 	.word	0x20000188

08008c00 <__libc_init_array>:
 8008c00:	b570      	push	{r4, r5, r6, lr}
 8008c02:	4e0d      	ldr	r6, [pc, #52]	; (8008c38 <__libc_init_array+0x38>)
 8008c04:	4c0d      	ldr	r4, [pc, #52]	; (8008c3c <__libc_init_array+0x3c>)
 8008c06:	1ba4      	subs	r4, r4, r6
 8008c08:	10a4      	asrs	r4, r4, #2
 8008c0a:	2500      	movs	r5, #0
 8008c0c:	42a5      	cmp	r5, r4
 8008c0e:	d109      	bne.n	8008c24 <__libc_init_array+0x24>
 8008c10:	4e0b      	ldr	r6, [pc, #44]	; (8008c40 <__libc_init_array+0x40>)
 8008c12:	4c0c      	ldr	r4, [pc, #48]	; (8008c44 <__libc_init_array+0x44>)
 8008c14:	f000 f8ea 	bl	8008dec <_init>
 8008c18:	1ba4      	subs	r4, r4, r6
 8008c1a:	10a4      	asrs	r4, r4, #2
 8008c1c:	2500      	movs	r5, #0
 8008c1e:	42a5      	cmp	r5, r4
 8008c20:	d105      	bne.n	8008c2e <__libc_init_array+0x2e>
 8008c22:	bd70      	pop	{r4, r5, r6, pc}
 8008c24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008c28:	4798      	blx	r3
 8008c2a:	3501      	adds	r5, #1
 8008c2c:	e7ee      	b.n	8008c0c <__libc_init_array+0xc>
 8008c2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008c32:	4798      	blx	r3
 8008c34:	3501      	adds	r5, #1
 8008c36:	e7f2      	b.n	8008c1e <__libc_init_array+0x1e>
 8008c38:	08008e54 	.word	0x08008e54
 8008c3c:	08008e54 	.word	0x08008e54
 8008c40:	08008e54 	.word	0x08008e54
 8008c44:	08008e58 	.word	0x08008e58

08008c48 <malloc>:
 8008c48:	4b02      	ldr	r3, [pc, #8]	; (8008c54 <malloc+0xc>)
 8008c4a:	4601      	mov	r1, r0
 8008c4c:	6818      	ldr	r0, [r3, #0]
 8008c4e:	f000 b861 	b.w	8008d14 <_malloc_r>
 8008c52:	bf00      	nop
 8008c54:	20000188 	.word	0x20000188

08008c58 <free>:
 8008c58:	4b02      	ldr	r3, [pc, #8]	; (8008c64 <free+0xc>)
 8008c5a:	4601      	mov	r1, r0
 8008c5c:	6818      	ldr	r0, [r3, #0]
 8008c5e:	f000 b80b 	b.w	8008c78 <_free_r>
 8008c62:	bf00      	nop
 8008c64:	20000188 	.word	0x20000188

08008c68 <memset>:
 8008c68:	4402      	add	r2, r0
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d100      	bne.n	8008c72 <memset+0xa>
 8008c70:	4770      	bx	lr
 8008c72:	f803 1b01 	strb.w	r1, [r3], #1
 8008c76:	e7f9      	b.n	8008c6c <memset+0x4>

08008c78 <_free_r>:
 8008c78:	b538      	push	{r3, r4, r5, lr}
 8008c7a:	4605      	mov	r5, r0
 8008c7c:	2900      	cmp	r1, #0
 8008c7e:	d045      	beq.n	8008d0c <_free_r+0x94>
 8008c80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c84:	1f0c      	subs	r4, r1, #4
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	bfb8      	it	lt
 8008c8a:	18e4      	addlt	r4, r4, r3
 8008c8c:	f000 f8ac 	bl	8008de8 <__malloc_lock>
 8008c90:	4a1f      	ldr	r2, [pc, #124]	; (8008d10 <_free_r+0x98>)
 8008c92:	6813      	ldr	r3, [r2, #0]
 8008c94:	4610      	mov	r0, r2
 8008c96:	b933      	cbnz	r3, 8008ca6 <_free_r+0x2e>
 8008c98:	6063      	str	r3, [r4, #4]
 8008c9a:	6014      	str	r4, [r2, #0]
 8008c9c:	4628      	mov	r0, r5
 8008c9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ca2:	f000 b8a2 	b.w	8008dea <__malloc_unlock>
 8008ca6:	42a3      	cmp	r3, r4
 8008ca8:	d90c      	bls.n	8008cc4 <_free_r+0x4c>
 8008caa:	6821      	ldr	r1, [r4, #0]
 8008cac:	1862      	adds	r2, r4, r1
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	bf04      	itt	eq
 8008cb2:	681a      	ldreq	r2, [r3, #0]
 8008cb4:	685b      	ldreq	r3, [r3, #4]
 8008cb6:	6063      	str	r3, [r4, #4]
 8008cb8:	bf04      	itt	eq
 8008cba:	1852      	addeq	r2, r2, r1
 8008cbc:	6022      	streq	r2, [r4, #0]
 8008cbe:	6004      	str	r4, [r0, #0]
 8008cc0:	e7ec      	b.n	8008c9c <_free_r+0x24>
 8008cc2:	4613      	mov	r3, r2
 8008cc4:	685a      	ldr	r2, [r3, #4]
 8008cc6:	b10a      	cbz	r2, 8008ccc <_free_r+0x54>
 8008cc8:	42a2      	cmp	r2, r4
 8008cca:	d9fa      	bls.n	8008cc2 <_free_r+0x4a>
 8008ccc:	6819      	ldr	r1, [r3, #0]
 8008cce:	1858      	adds	r0, r3, r1
 8008cd0:	42a0      	cmp	r0, r4
 8008cd2:	d10b      	bne.n	8008cec <_free_r+0x74>
 8008cd4:	6820      	ldr	r0, [r4, #0]
 8008cd6:	4401      	add	r1, r0
 8008cd8:	1858      	adds	r0, r3, r1
 8008cda:	4282      	cmp	r2, r0
 8008cdc:	6019      	str	r1, [r3, #0]
 8008cde:	d1dd      	bne.n	8008c9c <_free_r+0x24>
 8008ce0:	6810      	ldr	r0, [r2, #0]
 8008ce2:	6852      	ldr	r2, [r2, #4]
 8008ce4:	605a      	str	r2, [r3, #4]
 8008ce6:	4401      	add	r1, r0
 8008ce8:	6019      	str	r1, [r3, #0]
 8008cea:	e7d7      	b.n	8008c9c <_free_r+0x24>
 8008cec:	d902      	bls.n	8008cf4 <_free_r+0x7c>
 8008cee:	230c      	movs	r3, #12
 8008cf0:	602b      	str	r3, [r5, #0]
 8008cf2:	e7d3      	b.n	8008c9c <_free_r+0x24>
 8008cf4:	6820      	ldr	r0, [r4, #0]
 8008cf6:	1821      	adds	r1, r4, r0
 8008cf8:	428a      	cmp	r2, r1
 8008cfa:	bf04      	itt	eq
 8008cfc:	6811      	ldreq	r1, [r2, #0]
 8008cfe:	6852      	ldreq	r2, [r2, #4]
 8008d00:	6062      	str	r2, [r4, #4]
 8008d02:	bf04      	itt	eq
 8008d04:	1809      	addeq	r1, r1, r0
 8008d06:	6021      	streq	r1, [r4, #0]
 8008d08:	605c      	str	r4, [r3, #4]
 8008d0a:	e7c7      	b.n	8008c9c <_free_r+0x24>
 8008d0c:	bd38      	pop	{r3, r4, r5, pc}
 8008d0e:	bf00      	nop
 8008d10:	20000214 	.word	0x20000214

08008d14 <_malloc_r>:
 8008d14:	b570      	push	{r4, r5, r6, lr}
 8008d16:	1ccd      	adds	r5, r1, #3
 8008d18:	f025 0503 	bic.w	r5, r5, #3
 8008d1c:	3508      	adds	r5, #8
 8008d1e:	2d0c      	cmp	r5, #12
 8008d20:	bf38      	it	cc
 8008d22:	250c      	movcc	r5, #12
 8008d24:	2d00      	cmp	r5, #0
 8008d26:	4606      	mov	r6, r0
 8008d28:	db01      	blt.n	8008d2e <_malloc_r+0x1a>
 8008d2a:	42a9      	cmp	r1, r5
 8008d2c:	d903      	bls.n	8008d36 <_malloc_r+0x22>
 8008d2e:	230c      	movs	r3, #12
 8008d30:	6033      	str	r3, [r6, #0]
 8008d32:	2000      	movs	r0, #0
 8008d34:	bd70      	pop	{r4, r5, r6, pc}
 8008d36:	f000 f857 	bl	8008de8 <__malloc_lock>
 8008d3a:	4a21      	ldr	r2, [pc, #132]	; (8008dc0 <_malloc_r+0xac>)
 8008d3c:	6814      	ldr	r4, [r2, #0]
 8008d3e:	4621      	mov	r1, r4
 8008d40:	b991      	cbnz	r1, 8008d68 <_malloc_r+0x54>
 8008d42:	4c20      	ldr	r4, [pc, #128]	; (8008dc4 <_malloc_r+0xb0>)
 8008d44:	6823      	ldr	r3, [r4, #0]
 8008d46:	b91b      	cbnz	r3, 8008d50 <_malloc_r+0x3c>
 8008d48:	4630      	mov	r0, r6
 8008d4a:	f000 f83d 	bl	8008dc8 <_sbrk_r>
 8008d4e:	6020      	str	r0, [r4, #0]
 8008d50:	4629      	mov	r1, r5
 8008d52:	4630      	mov	r0, r6
 8008d54:	f000 f838 	bl	8008dc8 <_sbrk_r>
 8008d58:	1c43      	adds	r3, r0, #1
 8008d5a:	d124      	bne.n	8008da6 <_malloc_r+0x92>
 8008d5c:	230c      	movs	r3, #12
 8008d5e:	6033      	str	r3, [r6, #0]
 8008d60:	4630      	mov	r0, r6
 8008d62:	f000 f842 	bl	8008dea <__malloc_unlock>
 8008d66:	e7e4      	b.n	8008d32 <_malloc_r+0x1e>
 8008d68:	680b      	ldr	r3, [r1, #0]
 8008d6a:	1b5b      	subs	r3, r3, r5
 8008d6c:	d418      	bmi.n	8008da0 <_malloc_r+0x8c>
 8008d6e:	2b0b      	cmp	r3, #11
 8008d70:	d90f      	bls.n	8008d92 <_malloc_r+0x7e>
 8008d72:	600b      	str	r3, [r1, #0]
 8008d74:	50cd      	str	r5, [r1, r3]
 8008d76:	18cc      	adds	r4, r1, r3
 8008d78:	4630      	mov	r0, r6
 8008d7a:	f000 f836 	bl	8008dea <__malloc_unlock>
 8008d7e:	f104 000b 	add.w	r0, r4, #11
 8008d82:	1d23      	adds	r3, r4, #4
 8008d84:	f020 0007 	bic.w	r0, r0, #7
 8008d88:	1ac3      	subs	r3, r0, r3
 8008d8a:	d0d3      	beq.n	8008d34 <_malloc_r+0x20>
 8008d8c:	425a      	negs	r2, r3
 8008d8e:	50e2      	str	r2, [r4, r3]
 8008d90:	e7d0      	b.n	8008d34 <_malloc_r+0x20>
 8008d92:	428c      	cmp	r4, r1
 8008d94:	684b      	ldr	r3, [r1, #4]
 8008d96:	bf16      	itet	ne
 8008d98:	6063      	strne	r3, [r4, #4]
 8008d9a:	6013      	streq	r3, [r2, #0]
 8008d9c:	460c      	movne	r4, r1
 8008d9e:	e7eb      	b.n	8008d78 <_malloc_r+0x64>
 8008da0:	460c      	mov	r4, r1
 8008da2:	6849      	ldr	r1, [r1, #4]
 8008da4:	e7cc      	b.n	8008d40 <_malloc_r+0x2c>
 8008da6:	1cc4      	adds	r4, r0, #3
 8008da8:	f024 0403 	bic.w	r4, r4, #3
 8008dac:	42a0      	cmp	r0, r4
 8008dae:	d005      	beq.n	8008dbc <_malloc_r+0xa8>
 8008db0:	1a21      	subs	r1, r4, r0
 8008db2:	4630      	mov	r0, r6
 8008db4:	f000 f808 	bl	8008dc8 <_sbrk_r>
 8008db8:	3001      	adds	r0, #1
 8008dba:	d0cf      	beq.n	8008d5c <_malloc_r+0x48>
 8008dbc:	6025      	str	r5, [r4, #0]
 8008dbe:	e7db      	b.n	8008d78 <_malloc_r+0x64>
 8008dc0:	20000214 	.word	0x20000214
 8008dc4:	20000218 	.word	0x20000218

08008dc8 <_sbrk_r>:
 8008dc8:	b538      	push	{r3, r4, r5, lr}
 8008dca:	4c06      	ldr	r4, [pc, #24]	; (8008de4 <_sbrk_r+0x1c>)
 8008dcc:	2300      	movs	r3, #0
 8008dce:	4605      	mov	r5, r0
 8008dd0:	4608      	mov	r0, r1
 8008dd2:	6023      	str	r3, [r4, #0]
 8008dd4:	f7f8 f81e 	bl	8000e14 <_sbrk>
 8008dd8:	1c43      	adds	r3, r0, #1
 8008dda:	d102      	bne.n	8008de2 <_sbrk_r+0x1a>
 8008ddc:	6823      	ldr	r3, [r4, #0]
 8008dde:	b103      	cbz	r3, 8008de2 <_sbrk_r+0x1a>
 8008de0:	602b      	str	r3, [r5, #0]
 8008de2:	bd38      	pop	{r3, r4, r5, pc}
 8008de4:	20001ff4 	.word	0x20001ff4

08008de8 <__malloc_lock>:
 8008de8:	4770      	bx	lr

08008dea <__malloc_unlock>:
 8008dea:	4770      	bx	lr

08008dec <_init>:
 8008dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dee:	bf00      	nop
 8008df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008df2:	bc08      	pop	{r3}
 8008df4:	469e      	mov	lr, r3
 8008df6:	4770      	bx	lr

08008df8 <_fini>:
 8008df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dfa:	bf00      	nop
 8008dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dfe:	bc08      	pop	{r3}
 8008e00:	469e      	mov	lr, r3
 8008e02:	4770      	bx	lr
