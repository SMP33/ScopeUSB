
ScopeUSB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cdc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08008e64  08008e64  00018e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008eac  08008eac  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  08008eac  08008eac  00018eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008eb4  08008eb4  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008eb4  08008eb4  00018eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008eb8  08008eb8  00018eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08008ebc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ff0  200001ec  080090a8  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00001504  200021dc  080090a8  000221dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b4fb  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b23  00000000  00000000  0003b717  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001520  00000000  00000000  0003f240  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001368  00000000  00000000  00040760  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025606  00000000  00000000  00041ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013155  00000000  00000000  000670ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d430f  00000000  00000000  0007a223  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014e532  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059a4  00000000  00000000  0014e5b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001ec 	.word	0x200001ec
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008e4c 	.word	0x08008e4c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001f0 	.word	0x200001f0
 80001c4:	08008e4c 	.word	0x08008e4c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_ADC_ConvHalfCpltCallback>:
volatile uint16_t buffer[PKG_SIZE * 2];
volatile uint16_t out[PKG_SIZE];
uint8_t timeToSendData = 0;
uint16_t *dataPtr;

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	timeToSendData = 1;
 80004d0:	4b04      	ldr	r3, [pc, #16]	; (80004e4 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 80004d2:	2201      	movs	r2, #1
 80004d4:	701a      	strb	r2, [r3, #0]
}
 80004d6:	bf00      	nop
 80004d8:	370c      	adds	r7, #12
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	20000208 	.word	0x20000208

080004e8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
	timeToSendData = 2;
 80004f0:	4b04      	ldr	r3, [pc, #16]	; (8000504 <HAL_ADC_ConvCpltCallback+0x1c>)
 80004f2:	2202      	movs	r2, #2
 80004f4:	701a      	strb	r2, [r3, #0]
}
 80004f6:	bf00      	nop
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	20000208 	.word	0x20000208

08000508 <processData>:

void processData() {
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0

	//Выбираем текущий буфер, если выставлен флаг, если флаг не выставлен - return
	switch (timeToSendData) {
 800050e:	4b1f      	ldr	r3, [pc, #124]	; (800058c <processData+0x84>)
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	2b01      	cmp	r3, #1
 8000514:	d002      	beq.n	800051c <processData+0x14>
 8000516:	2b02      	cmp	r3, #2
 8000518:	d004      	beq.n	8000524 <processData+0x1c>
		break;
	case SECOND_BUF_HALF:
		dataPtr = ((uint16_t*) buffer) + PKG_SIZE;
		break;
	default:
		return;
 800051a:	e033      	b.n	8000584 <processData+0x7c>
		dataPtr = ((uint16_t*) buffer);
 800051c:	4b1c      	ldr	r3, [pc, #112]	; (8000590 <processData+0x88>)
 800051e:	4a1d      	ldr	r2, [pc, #116]	; (8000594 <processData+0x8c>)
 8000520:	601a      	str	r2, [r3, #0]
		break;
 8000522:	e003      	b.n	800052c <processData+0x24>
		dataPtr = ((uint16_t*) buffer) + PKG_SIZE;
 8000524:	4a1c      	ldr	r2, [pc, #112]	; (8000598 <processData+0x90>)
 8000526:	4b1a      	ldr	r3, [pc, #104]	; (8000590 <processData+0x88>)
 8000528:	601a      	str	r2, [r3, #0]
		break;
 800052a:	bf00      	nop
		break;
	}

	timeToSendData = 0;
 800052c:	4b17      	ldr	r3, [pc, #92]	; (800058c <processData+0x84>)
 800052e:	2200      	movs	r2, #0
 8000530:	701a      	strb	r2, [r3, #0]

	for (int i = 0; i < PKG_SIZE; i++) {
 8000532:	2300      	movs	r3, #0
 8000534:	607b      	str	r3, [r7, #4]
 8000536:	e00c      	b.n	8000552 <processData+0x4a>

		out[i] = dataPtr[i];
 8000538:	4b15      	ldr	r3, [pc, #84]	; (8000590 <processData+0x88>)
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	005b      	lsls	r3, r3, #1
 8000540:	4413      	add	r3, r2
 8000542:	8819      	ldrh	r1, [r3, #0]
 8000544:	4a15      	ldr	r2, [pc, #84]	; (800059c <processData+0x94>)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < PKG_SIZE; i++) {
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	3301      	adds	r3, #1
 8000550:	607b      	str	r3, [r7, #4]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2bef      	cmp	r3, #239	; 0xef
 8000556:	ddef      	ble.n	8000538 <processData+0x30>
	}

	for (int i = 0; i < 2; i++) {
 8000558:	2300      	movs	r3, #0
 800055a:	603b      	str	r3, [r7, #0]
 800055c:	e00f      	b.n	800057e <processData+0x76>

		CDC_Transmit_FS((uint16_t*) out + i * PKG_SIZE,
 800055e:	683a      	ldr	r2, [r7, #0]
 8000560:	4613      	mov	r3, r2
 8000562:	011b      	lsls	r3, r3, #4
 8000564:	1a9b      	subs	r3, r3, r2
 8000566:	015b      	lsls	r3, r3, #5
 8000568:	461a      	mov	r2, r3
 800056a:	4b0c      	ldr	r3, [pc, #48]	; (800059c <processData+0x94>)
 800056c:	4413      	add	r3, r2
 800056e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8000572:	4618      	mov	r0, r3
 8000574:	f007 fefa 	bl	800836c <CDC_Transmit_FS>
	for (int i = 0; i < 2; i++) {
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	3301      	adds	r3, #1
 800057c:	603b      	str	r3, [r7, #0]
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	2b01      	cmp	r3, #1
 8000582:	ddec      	ble.n	800055e <processData+0x56>
				PKG_SIZE * sizeof(uint16_t));

	}
	//CDC_Transmit_FS(dataPtr, PKG_SIZE*sizeof(uint16_t));
}
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	20000208 	.word	0x20000208
 8000590:	200008f8 	.word	0x200008f8
 8000594:	20000458 	.word	0x20000458
 8000598:	20000638 	.word	0x20000638
 800059c:	2000021c 	.word	0x2000021c

080005a0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005a4:	f000 fcdc 	bl	8000f60 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005a8:	f000 f826 	bl	80005f8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005ac:	f000 f9aa 	bl	8000904 <MX_GPIO_Init>
	MX_DMA_Init();
 80005b0:	f000 f988 	bl	80008c4 <MX_DMA_Init>
	MX_USB_DEVICE_Init();
 80005b4:	f007 fdcc 	bl	8008150 <MX_USB_DEVICE_Init>
	MX_ADC1_Init();
 80005b8:	f000 f888 	bl	80006cc <MX_ADC1_Init>
	MX_USART2_UART_Init();
 80005bc:	f000 f958 	bl	8000870 <MX_USART2_UART_Init>
	MX_DAC_Init();
 80005c0:	f000 f8d6 	bl	8000770 <MX_DAC_Init>
	MX_TIM2_Init();
 80005c4:	f000 f908 	bl	80007d8 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim2);
 80005c8:	4807      	ldr	r0, [pc, #28]	; (80005e8 <main+0x48>)
 80005ca:	f003 fee6 	bl	800439a <HAL_TIM_Base_Start>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80005ce:	2100      	movs	r1, #0
 80005d0:	4806      	ldr	r0, [pc, #24]	; (80005ec <main+0x4c>)
 80005d2:	f001 fa6c 	bl	8001aae <HAL_DAC_Start>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	HAL_ADC_Start_DMA(&hadc1, (uint16_t*) &buffer, PKG_SIZE * 2);
 80005d6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80005da:	4905      	ldr	r1, [pc, #20]	; (80005f0 <main+0x50>)
 80005dc:	4805      	ldr	r0, [pc, #20]	; (80005f4 <main+0x54>)
 80005de:	f000 fd97 	bl	8001110 <HAL_ADC_Start_DMA>

	while (1) {
		processData();
 80005e2:	f7ff ff91 	bl	8000508 <processData>
 80005e6:	e7fc      	b.n	80005e2 <main+0x42>
 80005e8:	20000878 	.word	0x20000878
 80005ec:	20000444 	.word	0x20000444
 80005f0:	20000458 	.word	0x20000458
 80005f4:	200003fc 	.word	0x200003fc

080005f8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b094      	sub	sp, #80	; 0x50
 80005fc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005fe:	f107 0320 	add.w	r3, r7, #32
 8000602:	2230      	movs	r2, #48	; 0x30
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f008 fb5e 	bl	8008cc8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800061c:	2300      	movs	r3, #0
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	4b28      	ldr	r3, [pc, #160]	; (80006c4 <SystemClock_Config+0xcc>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	4a27      	ldr	r2, [pc, #156]	; (80006c4 <SystemClock_Config+0xcc>)
 8000626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062a:	6413      	str	r3, [r2, #64]	; 0x40
 800062c:	4b25      	ldr	r3, [pc, #148]	; (80006c4 <SystemClock_Config+0xcc>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000638:	2300      	movs	r3, #0
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	4b22      	ldr	r3, [pc, #136]	; (80006c8 <SystemClock_Config+0xd0>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a21      	ldr	r2, [pc, #132]	; (80006c8 <SystemClock_Config+0xd0>)
 8000642:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <SystemClock_Config+0xd0>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000654:	2301      	movs	r3, #1
 8000656:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000658:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800065c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065e:	2302      	movs	r3, #2
 8000660:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000662:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000666:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000668:	2304      	movs	r3, #4
 800066a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 144;
 800066c:	2390      	movs	r3, #144	; 0x90
 800066e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000670:	2302      	movs	r3, #2
 8000672:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 6;
 8000674:	2306      	movs	r3, #6
 8000676:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000678:	f107 0320 	add.w	r3, r7, #32
 800067c:	4618      	mov	r0, r3
 800067e:	f003 f9ff 	bl	8003a80 <HAL_RCC_OscConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x94>
		Error_Handler();
 8000688:	f000 f9f6 	bl	8000a78 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800068c:	230f      	movs	r3, #15
 800068e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000690:	2302      	movs	r3, #2
 8000692:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000698:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800069c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800069e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	2104      	movs	r1, #4
 80006aa:	4618      	mov	r0, r3
 80006ac:	f003 fc58 	bl	8003f60 <HAL_RCC_ClockConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0xc2>
		Error_Handler();
 80006b6:	f000 f9df 	bl	8000a78 <Error_Handler>
	}
}
 80006ba:	bf00      	nop
 80006bc:	3750      	adds	r7, #80	; 0x50
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40007000 	.word	0x40007000

080006cc <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80006d2:	463b      	mov	r3, r7
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80006de:	4b21      	ldr	r3, [pc, #132]	; (8000764 <MX_ADC1_Init+0x98>)
 80006e0:	4a21      	ldr	r2, [pc, #132]	; (8000768 <MX_ADC1_Init+0x9c>)
 80006e2:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006e4:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <MX_ADC1_Init+0x98>)
 80006e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006ea:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006ec:	4b1d      	ldr	r3, [pc, #116]	; (8000764 <MX_ADC1_Init+0x98>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 80006f2:	4b1c      	ldr	r3, [pc, #112]	; (8000764 <MX_ADC1_Init+0x98>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80006f8:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <MX_ADC1_Init+0x98>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006fe:	4b19      	ldr	r3, [pc, #100]	; (8000764 <MX_ADC1_Init+0x98>)
 8000700:	2200      	movs	r2, #0
 8000702:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000706:	4b17      	ldr	r3, [pc, #92]	; (8000764 <MX_ADC1_Init+0x98>)
 8000708:	2200      	movs	r2, #0
 800070a:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800070c:	4b15      	ldr	r3, [pc, #84]	; (8000764 <MX_ADC1_Init+0x98>)
 800070e:	4a17      	ldr	r2, [pc, #92]	; (800076c <MX_ADC1_Init+0xa0>)
 8000710:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000712:	4b14      	ldr	r3, [pc, #80]	; (8000764 <MX_ADC1_Init+0x98>)
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <MX_ADC1_Init+0x98>)
 800071a:	2201      	movs	r2, #1
 800071c:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_ADC1_Init+0x98>)
 8000720:	2201      	movs	r2, #1
 8000722:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000726:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <MX_ADC1_Init+0x98>)
 8000728:	2200      	movs	r2, #0
 800072a:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800072c:	480d      	ldr	r0, [pc, #52]	; (8000764 <MX_ADC1_Init+0x98>)
 800072e:	f000 fcab 	bl	8001088 <HAL_ADC_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_ADC1_Init+0x70>
		Error_Handler();
 8000738:	f000 f99e 	bl	8000a78 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 800073c:	2305      	movs	r3, #5
 800073e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000740:	2301      	movs	r3, #1
 8000742:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000744:	2306      	movs	r3, #6
 8000746:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000748:	463b      	mov	r3, r7
 800074a:	4619      	mov	r1, r3
 800074c:	4805      	ldr	r0, [pc, #20]	; (8000764 <MX_ADC1_Init+0x98>)
 800074e:	f000 fddb 	bl	8001308 <HAL_ADC_ConfigChannel>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_ADC1_Init+0x90>
		Error_Handler();
 8000758:	f000 f98e 	bl	8000a78 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800075c:	bf00      	nop
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	200003fc 	.word	0x200003fc
 8000768:	40012000 	.word	0x40012000
 800076c:	0f000001 	.word	0x0f000001

08000770 <MX_DAC_Init>:
/**
 * @brief DAC Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC_Init(void) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC_Init 0 */

	/* USER CODE END DAC_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 8000776:	463b      	mov	r3, r7
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
	/* USER CODE BEGIN DAC_Init 1 */

	/* USER CODE END DAC_Init 1 */
	/** DAC Initialization
	 */
	hdac.Instance = DAC;
 800077e:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <MX_DAC_Init+0x60>)
 8000780:	4a14      	ldr	r2, [pc, #80]	; (80007d4 <MX_DAC_Init+0x64>)
 8000782:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac) != HAL_OK) {
 8000784:	4812      	ldr	r0, [pc, #72]	; (80007d0 <MX_DAC_Init+0x60>)
 8000786:	f001 f970 	bl	8001a6a <HAL_DAC_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_DAC_Init+0x24>
		Error_Handler();
 8000790:	f000 f972 	bl	8000a78 <Error_Handler>
	}
	/** DAC channel OUT1 config
	 */
	sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000794:	2324      	movs	r3, #36	; 0x24
 8000796:	603b      	str	r3, [r7, #0]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000798:	2300      	movs	r3, #0
 800079a:	607b      	str	r3, [r7, #4]
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 800079c:	463b      	mov	r3, r7
 800079e:	2200      	movs	r2, #0
 80007a0:	4619      	mov	r1, r3
 80007a2:	480b      	ldr	r0, [pc, #44]	; (80007d0 <MX_DAC_Init+0x60>)
 80007a4:	f001 fa3d 	bl	8001c22 <HAL_DAC_ConfigChannel>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_DAC_Init+0x42>
		Error_Handler();
 80007ae:	f000 f963 	bl	8000a78 <Error_Handler>
	}
	/** Configure Triangle wave generation on DAC OUT1
	 */
	if (HAL_DACEx_TriangleWaveGenerate(&hdac, DAC_CHANNEL_1,
 80007b2:	f44f 6230 	mov.w	r2, #2816	; 0xb00
 80007b6:	2100      	movs	r1, #0
 80007b8:	4805      	ldr	r0, [pc, #20]	; (80007d0 <MX_DAC_Init+0x60>)
 80007ba:	f001 fa7f 	bl	8001cbc <HAL_DACEx_TriangleWaveGenerate>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_DAC_Init+0x58>
	DAC_TRIANGLEAMPLITUDE_4095) != HAL_OK) {
		Error_Handler();
 80007c4:	f000 f958 	bl	8000a78 <Error_Handler>
	}
	/* USER CODE BEGIN DAC_Init 2 */

	/* USER CODE END DAC_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20000444 	.word	0x20000444
 80007d4:	40007400 	.word	0x40007400

080007d8 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80007de:	f107 0308 	add.w	r3, r7, #8
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80007ec:	463b      	mov	r3, r7
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80007f4:	4b1d      	ldr	r3, [pc, #116]	; (800086c <MX_TIM2_Init+0x94>)
 80007f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007fa:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80007fc:	4b1b      	ldr	r3, [pc, #108]	; (800086c <MX_TIM2_Init+0x94>)
 80007fe:	2200      	movs	r2, #0
 8000800:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000802:	4b1a      	ldr	r3, [pc, #104]	; (800086c <MX_TIM2_Init+0x94>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 170;
 8000808:	4b18      	ldr	r3, [pc, #96]	; (800086c <MX_TIM2_Init+0x94>)
 800080a:	22aa      	movs	r2, #170	; 0xaa
 800080c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800080e:	4b17      	ldr	r3, [pc, #92]	; (800086c <MX_TIM2_Init+0x94>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000814:	4b15      	ldr	r3, [pc, #84]	; (800086c <MX_TIM2_Init+0x94>)
 8000816:	2280      	movs	r2, #128	; 0x80
 8000818:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800081a:	4814      	ldr	r0, [pc, #80]	; (800086c <MX_TIM2_Init+0x94>)
 800081c:	f003 fd92 	bl	8004344 <HAL_TIM_Base_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_TIM2_Init+0x52>
		Error_Handler();
 8000826:	f000 f927 	bl	8000a78 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800082a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082e:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000830:	f107 0308 	add.w	r3, r7, #8
 8000834:	4619      	mov	r1, r3
 8000836:	480d      	ldr	r0, [pc, #52]	; (800086c <MX_TIM2_Init+0x94>)
 8000838:	f003 fedb 	bl	80045f2 <HAL_TIM_ConfigClockSource>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM2_Init+0x6e>
		Error_Handler();
 8000842:	f000 f919 	bl	8000a78 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000846:	2320      	movs	r3, #32
 8000848:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800084e:	463b      	mov	r3, r7
 8000850:	4619      	mov	r1, r3
 8000852:	4806      	ldr	r0, [pc, #24]	; (800086c <MX_TIM2_Init+0x94>)
 8000854:	f004 f8f0 	bl	8004a38 <HAL_TIMEx_MasterConfigSynchronization>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM2_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 800085e:	f000 f90b 	bl	8000a78 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	3718      	adds	r7, #24
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000878 	.word	0x20000878

08000870 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000874:	4b11      	ldr	r3, [pc, #68]	; (80008bc <MX_USART2_UART_Init+0x4c>)
 8000876:	4a12      	ldr	r2, [pc, #72]	; (80008c0 <MX_USART2_UART_Init+0x50>)
 8000878:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800087a:	4b10      	ldr	r3, [pc, #64]	; (80008bc <MX_USART2_UART_Init+0x4c>)
 800087c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000880:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000882:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <MX_USART2_UART_Init+0x4c>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000888:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <MX_USART2_UART_Init+0x4c>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800088e:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <MX_USART2_UART_Init+0x4c>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000894:	4b09      	ldr	r3, [pc, #36]	; (80008bc <MX_USART2_UART_Init+0x4c>)
 8000896:	220c      	movs	r2, #12
 8000898:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089a:	4b08      	ldr	r3, [pc, #32]	; (80008bc <MX_USART2_UART_Init+0x4c>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <MX_USART2_UART_Init+0x4c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80008a6:	4805      	ldr	r0, [pc, #20]	; (80008bc <MX_USART2_UART_Init+0x4c>)
 80008a8:	f004 f956 	bl	8004b58 <HAL_UART_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80008b2:	f000 f8e1 	bl	8000a78 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	200008b8 	.word	0x200008b8
 80008c0:	40004400 	.word	0x40004400

080008c4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MX_DMA_Init+0x3c>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a0b      	ldr	r2, [pc, #44]	; (8000900 <MX_DMA_Init+0x3c>)
 80008d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_DMA_Init+0x3c>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2100      	movs	r1, #0
 80008ea:	2038      	movs	r0, #56	; 0x38
 80008ec:	f001 f887 	bl	80019fe <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008f0:	2038      	movs	r0, #56	; 0x38
 80008f2:	f001 f8a0 	bl	8001a36 <HAL_NVIC_EnableIRQ>

}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40023800 	.word	0x40023800

08000904 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000904:	b580      	push	{r7, lr}
 8000906:	b08c      	sub	sp, #48	; 0x30
 8000908:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	61bb      	str	r3, [r7, #24]
 800091e:	4b51      	ldr	r3, [pc, #324]	; (8000a64 <MX_GPIO_Init+0x160>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a50      	ldr	r2, [pc, #320]	; (8000a64 <MX_GPIO_Init+0x160>)
 8000924:	f043 0310 	orr.w	r3, r3, #16
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b4e      	ldr	r3, [pc, #312]	; (8000a64 <MX_GPIO_Init+0x160>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0310 	and.w	r3, r3, #16
 8000932:	61bb      	str	r3, [r7, #24]
 8000934:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	617b      	str	r3, [r7, #20]
 800093a:	4b4a      	ldr	r3, [pc, #296]	; (8000a64 <MX_GPIO_Init+0x160>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a49      	ldr	r2, [pc, #292]	; (8000a64 <MX_GPIO_Init+0x160>)
 8000940:	f043 0304 	orr.w	r3, r3, #4
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b47      	ldr	r3, [pc, #284]	; (8000a64 <MX_GPIO_Init+0x160>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0304 	and.w	r3, r3, #4
 800094e:	617b      	str	r3, [r7, #20]
 8000950:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	613b      	str	r3, [r7, #16]
 8000956:	4b43      	ldr	r3, [pc, #268]	; (8000a64 <MX_GPIO_Init+0x160>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a42      	ldr	r2, [pc, #264]	; (8000a64 <MX_GPIO_Init+0x160>)
 800095c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b40      	ldr	r3, [pc, #256]	; (8000a64 <MX_GPIO_Init+0x160>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800096a:	613b      	str	r3, [r7, #16]
 800096c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	4b3c      	ldr	r3, [pc, #240]	; (8000a64 <MX_GPIO_Init+0x160>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a3b      	ldr	r2, [pc, #236]	; (8000a64 <MX_GPIO_Init+0x160>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b39      	ldr	r3, [pc, #228]	; (8000a64 <MX_GPIO_Init+0x160>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	4b35      	ldr	r3, [pc, #212]	; (8000a64 <MX_GPIO_Init+0x160>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a34      	ldr	r2, [pc, #208]	; (8000a64 <MX_GPIO_Init+0x160>)
 8000994:	f043 0302 	orr.w	r3, r3, #2
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b32      	ldr	r3, [pc, #200]	; (8000a64 <MX_GPIO_Init+0x160>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0302 	and.w	r3, r3, #2
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	4b2e      	ldr	r3, [pc, #184]	; (8000a64 <MX_GPIO_Init+0x160>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a2d      	ldr	r2, [pc, #180]	; (8000a64 <MX_GPIO_Init+0x160>)
 80009b0:	f043 0308 	orr.w	r3, r3, #8
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b2b      	ldr	r3, [pc, #172]	; (8000a64 <MX_GPIO_Init+0x160>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0308 	and.w	r3, r3, #8
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2108      	movs	r1, #8
 80009c6:	4828      	ldr	r0, [pc, #160]	; (8000a68 <MX_GPIO_Init+0x164>)
 80009c8:	f001 febe 	bl	8002748 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 80009cc:	2200      	movs	r2, #0
 80009ce:	f24f 0110 	movw	r1, #61456	; 0xf010
 80009d2:	4826      	ldr	r0, [pc, #152]	; (8000a6c <MX_GPIO_Init+0x168>)
 80009d4:	f001 feb8 	bl	8002748 <HAL_GPIO_WritePin>
	LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : PE3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009d8:	2308      	movs	r3, #8
 80009da:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009dc:	2301      	movs	r3, #1
 80009de:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009e8:	f107 031c 	add.w	r3, r7, #28
 80009ec:	4619      	mov	r1, r3
 80009ee:	481e      	ldr	r0, [pc, #120]	; (8000a68 <MX_GPIO_Init+0x164>)
 80009f0:	f001 fd10 	bl	8002414 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009f4:	2304      	movs	r3, #4
 80009f6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f8:	2300      	movs	r3, #0
 80009fa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a00:	f107 031c 	add.w	r3, r7, #28
 8000a04:	4619      	mov	r1, r3
 8000a06:	481a      	ldr	r0, [pc, #104]	; (8000a70 <MX_GPIO_Init+0x16c>)
 8000a08:	f001 fd04 	bl	8002414 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
	 Audio_RST_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 8000a0c:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a10:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	4619      	mov	r1, r3
 8000a24:	4811      	ldr	r0, [pc, #68]	; (8000a6c <MX_GPIO_Init+0x168>)
 8000a26:	f001 fcf5 	bl	8002414 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a2a:	2320      	movs	r3, #32
 8000a2c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a36:	f107 031c 	add.w	r3, r7, #28
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	480b      	ldr	r0, [pc, #44]	; (8000a6c <MX_GPIO_Init+0x168>)
 8000a3e:	f001 fce9 	bl	8002414 <HAL_GPIO_Init>

	/*Configure GPIO pin : MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a42:	2302      	movs	r3, #2
 8000a44:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a46:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <MX_GPIO_Init+0x170>)
 8000a48:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	4619      	mov	r1, r3
 8000a54:	4804      	ldr	r0, [pc, #16]	; (8000a68 <MX_GPIO_Init+0x164>)
 8000a56:	f001 fcdd 	bl	8002414 <HAL_GPIO_Init>

}
 8000a5a:	bf00      	nop
 8000a5c:	3730      	adds	r7, #48	; 0x30
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40023800 	.word	0x40023800
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	40020c00 	.word	0x40020c00
 8000a70:	40020400 	.word	0x40020400
 8000a74:	10120000 	.word	0x10120000

08000a78 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
	...

08000a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a96:	4a0f      	ldr	r2, [pc, #60]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000a98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	603b      	str	r3, [r7, #0]
 8000aae:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab2:	4a08      	ldr	r2, [pc, #32]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ac6:	2007      	movs	r0, #7
 8000ac8:	f000 ff8e 	bl	80019e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000acc:	bf00      	nop
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40023800 	.word	0x40023800

08000ad8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	; 0x28
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a2f      	ldr	r2, [pc, #188]	; (8000bb4 <HAL_ADC_MspInit+0xdc>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d158      	bne.n	8000bac <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	4b2e      	ldr	r3, [pc, #184]	; (8000bb8 <HAL_ADC_MspInit+0xe0>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b02:	4a2d      	ldr	r2, [pc, #180]	; (8000bb8 <HAL_ADC_MspInit+0xe0>)
 8000b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b08:	6453      	str	r3, [r2, #68]	; 0x44
 8000b0a:	4b2b      	ldr	r3, [pc, #172]	; (8000bb8 <HAL_ADC_MspInit+0xe0>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	4b27      	ldr	r3, [pc, #156]	; (8000bb8 <HAL_ADC_MspInit+0xe0>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a26      	ldr	r2, [pc, #152]	; (8000bb8 <HAL_ADC_MspInit+0xe0>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b24      	ldr	r3, [pc, #144]	; (8000bb8 <HAL_ADC_MspInit+0xe0>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b32:	2320      	movs	r3, #32
 8000b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b36:	2303      	movs	r3, #3
 8000b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	481d      	ldr	r0, [pc, #116]	; (8000bbc <HAL_ADC_MspInit+0xe4>)
 8000b46:	f001 fc65 	bl	8002414 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000b4a:	4b1d      	ldr	r3, [pc, #116]	; (8000bc0 <HAL_ADC_MspInit+0xe8>)
 8000b4c:	4a1d      	ldr	r2, [pc, #116]	; (8000bc4 <HAL_ADC_MspInit+0xec>)
 8000b4e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000b50:	4b1b      	ldr	r3, [pc, #108]	; (8000bc0 <HAL_ADC_MspInit+0xe8>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b56:	4b1a      	ldr	r3, [pc, #104]	; (8000bc0 <HAL_ADC_MspInit+0xe8>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b5c:	4b18      	ldr	r3, [pc, #96]	; (8000bc0 <HAL_ADC_MspInit+0xe8>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b62:	4b17      	ldr	r3, [pc, #92]	; (8000bc0 <HAL_ADC_MspInit+0xe8>)
 8000b64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b68:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b6a:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <HAL_ADC_MspInit+0xe8>)
 8000b6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b70:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b72:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <HAL_ADC_MspInit+0xe8>)
 8000b74:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b78:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b7a:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <HAL_ADC_MspInit+0xe8>)
 8000b7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b80:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000b82:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <HAL_ADC_MspInit+0xe8>)
 8000b84:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b88:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <HAL_ADC_MspInit+0xe8>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b90:	480b      	ldr	r0, [pc, #44]	; (8000bc0 <HAL_ADC_MspInit+0xe8>)
 8000b92:	f001 f8d1 	bl	8001d38 <HAL_DMA_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8000b9c:	f7ff ff6c 	bl	8000a78 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a07      	ldr	r2, [pc, #28]	; (8000bc0 <HAL_ADC_MspInit+0xe8>)
 8000ba4:	639a      	str	r2, [r3, #56]	; 0x38
 8000ba6:	4a06      	ldr	r2, [pc, #24]	; (8000bc0 <HAL_ADC_MspInit+0xe8>)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bac:	bf00      	nop
 8000bae:	3728      	adds	r7, #40	; 0x28
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40012000 	.word	0x40012000
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40020000 	.word	0x40020000
 8000bc0:	20000818 	.word	0x20000818
 8000bc4:	40026410 	.word	0x40026410

08000bc8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	; 0x28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a1b      	ldr	r2, [pc, #108]	; (8000c54 <HAL_DAC_MspInit+0x8c>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d12f      	bne.n	8000c4a <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	4b1a      	ldr	r3, [pc, #104]	; (8000c58 <HAL_DAC_MspInit+0x90>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	4a19      	ldr	r2, [pc, #100]	; (8000c58 <HAL_DAC_MspInit+0x90>)
 8000bf4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bfa:	4b17      	ldr	r3, [pc, #92]	; (8000c58 <HAL_DAC_MspInit+0x90>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <HAL_DAC_MspInit+0x90>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a12      	ldr	r2, [pc, #72]	; (8000c58 <HAL_DAC_MspInit+0x90>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <HAL_DAC_MspInit+0x90>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c22:	2310      	movs	r3, #16
 8000c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c26:	2303      	movs	r3, #3
 8000c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4619      	mov	r1, r3
 8000c34:	4809      	ldr	r0, [pc, #36]	; (8000c5c <HAL_DAC_MspInit+0x94>)
 8000c36:	f001 fbed 	bl	8002414 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	2036      	movs	r0, #54	; 0x36
 8000c40:	f000 fedd 	bl	80019fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c44:	2036      	movs	r0, #54	; 0x36
 8000c46:	f000 fef6 	bl	8001a36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000c4a:	bf00      	nop
 8000c4c:	3728      	adds	r7, #40	; 0x28
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40007400 	.word	0x40007400
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40020000 	.word	0x40020000

08000c60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c70:	d115      	bne.n	8000c9e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <HAL_TIM_Base_MspInit+0x48>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ca8 <HAL_TIM_Base_MspInit+0x48>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	6413      	str	r3, [r2, #64]	; 0x40
 8000c82:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <HAL_TIM_Base_MspInit+0x48>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2100      	movs	r1, #0
 8000c92:	201c      	movs	r0, #28
 8000c94:	f000 feb3 	bl	80019fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c98:	201c      	movs	r0, #28
 8000c9a:	f000 fecc 	bl	8001a36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c9e:	bf00      	nop
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40023800 	.word	0x40023800

08000cac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08a      	sub	sp, #40	; 0x28
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a28      	ldr	r2, [pc, #160]	; (8000d6c <HAL_UART_MspInit+0xc0>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d149      	bne.n	8000d62 <HAL_UART_MspInit+0xb6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
 8000cd2:	4b27      	ldr	r3, [pc, #156]	; (8000d70 <HAL_UART_MspInit+0xc4>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd6:	4a26      	ldr	r2, [pc, #152]	; (8000d70 <HAL_UART_MspInit+0xc4>)
 8000cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cde:	4b24      	ldr	r3, [pc, #144]	; (8000d70 <HAL_UART_MspInit+0xc4>)
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	4b20      	ldr	r3, [pc, #128]	; (8000d70 <HAL_UART_MspInit+0xc4>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a1f      	ldr	r2, [pc, #124]	; (8000d70 <HAL_UART_MspInit+0xc4>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b1d      	ldr	r3, [pc, #116]	; (8000d70 <HAL_UART_MspInit+0xc4>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <HAL_UART_MspInit+0xc4>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a18      	ldr	r2, [pc, #96]	; (8000d70 <HAL_UART_MspInit+0xc4>)
 8000d10:	f043 0308 	orr.w	r3, r3, #8
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <HAL_UART_MspInit+0xc4>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0308 	and.w	r3, r3, #8
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d22:	2304      	movs	r3, #4
 8000d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d26:	2302      	movs	r3, #2
 8000d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d32:	2307      	movs	r3, #7
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d36:	f107 0314 	add.w	r3, r7, #20
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	480d      	ldr	r0, [pc, #52]	; (8000d74 <HAL_UART_MspInit+0xc8>)
 8000d3e:	f001 fb69 	bl	8002414 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d42:	2340      	movs	r3, #64	; 0x40
 8000d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d46:	2302      	movs	r3, #2
 8000d48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d52:	2307      	movs	r3, #7
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d56:	f107 0314 	add.w	r3, r7, #20
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4806      	ldr	r0, [pc, #24]	; (8000d78 <HAL_UART_MspInit+0xcc>)
 8000d5e:	f001 fb59 	bl	8002414 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d62:	bf00      	nop
 8000d64:	3728      	adds	r7, #40	; 0x28
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40004400 	.word	0x40004400
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40020000 	.word	0x40020000
 8000d78:	40020c00 	.word	0x40020c00

08000d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <HardFault_Handler+0x4>

08000d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <MemManage_Handler+0x4>

08000d96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <BusFault_Handler+0x4>

08000d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <UsageFault_Handler+0x4>

08000da2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd0:	f000 f918 	bl	8001004 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ddc:	4802      	ldr	r0, [pc, #8]	; (8000de8 <TIM2_IRQHandler+0x10>)
 8000dde:	f003 fb00 	bl	80043e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000878 	.word	0x20000878

08000dec <OTG_FS_WKUP_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS wake-up interrupt through EXTI line 18.
  */
void OTG_FS_WKUP_IRQHandler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_WKUP_IRQn 0 */

  /* USER CODE END OTG_FS_WKUP_IRQn 0 */
  if ((&hpcd_USB_OTG_FS)->Init.low_power_enable) {
 8000df0:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <OTG_FS_WKUP_IRQHandler+0x40>)
 8000df2:	6a1b      	ldr	r3, [r3, #32]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d007      	beq.n	8000e08 <OTG_FS_WKUP_IRQHandler+0x1c>
    /* Reset SLEEPDEEP bit of Cortex System Control Register */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8000df8:	4b0d      	ldr	r3, [pc, #52]	; (8000e30 <OTG_FS_WKUP_IRQHandler+0x44>)
 8000dfa:	691b      	ldr	r3, [r3, #16]
 8000dfc:	4a0c      	ldr	r2, [pc, #48]	; (8000e30 <OTG_FS_WKUP_IRQHandler+0x44>)
 8000dfe:	f023 0306 	bic.w	r3, r3, #6
 8000e02:	6113      	str	r3, [r2, #16]
    SystemClock_Config();
 8000e04:	f7ff fbf8 	bl	80005f8 <SystemClock_Config>
  }
  __HAL_PCD_UNGATE_PHYCLOCK(&hpcd_USB_OTG_FS);
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <OTG_FS_WKUP_IRQHandler+0x40>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a06      	ldr	r2, [pc, #24]	; (8000e2c <OTG_FS_WKUP_IRQHandler+0x40>)
 8000e14:	6812      	ldr	r2, [r2, #0]
 8000e16:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8000e1a:	f023 0301 	bic.w	r3, r3, #1
 8000e1e:	6013      	str	r3, [r2, #0]
  /* Clear EXTI pending bit */
  __HAL_USB_OTG_FS_WAKEUP_EXTI_CLEAR_FLAG();
 8000e20:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <OTG_FS_WKUP_IRQHandler+0x48>)
 8000e22:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000e26:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN OTG_FS_WKUP_IRQn 1 */

  /* USER CODE END OTG_FS_WKUP_IRQn 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20001dd0 	.word	0x20001dd0
 8000e30:	e000ed00 	.word	0xe000ed00
 8000e34:	40013c00 	.word	0x40013c00

08000e38 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8000e3c:	4802      	ldr	r0, [pc, #8]	; (8000e48 <TIM6_DAC_IRQHandler+0x10>)
 8000e3e:	f000 fe9c 	bl	8001b7a <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000444 	.word	0x20000444

08000e4c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e50:	4802      	ldr	r0, [pc, #8]	; (8000e5c <DMA2_Stream0_IRQHandler+0x10>)
 8000e52:	f001 f877 	bl	8001f44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000818 	.word	0x20000818

08000e60 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e64:	4802      	ldr	r0, [pc, #8]	; (8000e70 <OTG_FS_IRQHandler+0x10>)
 8000e66:	f001 fdd8 	bl	8002a1a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20001dd0 	.word	0x20001dd0

08000e74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e7c:	4a14      	ldr	r2, [pc, #80]	; (8000ed0 <_sbrk+0x5c>)
 8000e7e:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <_sbrk+0x60>)
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e88:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <_sbrk+0x64>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d102      	bne.n	8000e96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e90:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <_sbrk+0x64>)
 8000e92:	4a12      	ldr	r2, [pc, #72]	; (8000edc <_sbrk+0x68>)
 8000e94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e96:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <_sbrk+0x64>)
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d207      	bcs.n	8000eb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ea4:	f007 fed6 	bl	8008c54 <__errno>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	230c      	movs	r3, #12
 8000eac:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000eae:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb2:	e009      	b.n	8000ec8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eb4:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <_sbrk+0x64>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eba:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <_sbrk+0x64>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	4a05      	ldr	r2, [pc, #20]	; (8000ed8 <_sbrk+0x64>)
 8000ec4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3718      	adds	r7, #24
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20020000 	.word	0x20020000
 8000ed4:	00000500 	.word	0x00000500
 8000ed8:	2000020c 	.word	0x2000020c
 8000edc:	200021e0 	.word	0x200021e0

08000ee0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <SystemInit+0x28>)
 8000ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eea:	4a07      	ldr	r2, [pc, #28]	; (8000f08 <SystemInit+0x28>)
 8000eec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ef0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ef4:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <SystemInit+0x28>)
 8000ef6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000efa:	609a      	str	r2, [r3, #8]
#endif
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f44 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f10:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f12:	e003      	b.n	8000f1c <LoopCopyDataInit>

08000f14 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f14:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f16:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f18:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f1a:	3104      	adds	r1, #4

08000f1c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f1c:	480b      	ldr	r0, [pc, #44]	; (8000f4c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f1e:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f20:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f22:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f24:	d3f6      	bcc.n	8000f14 <CopyDataInit>
  ldr  r2, =_sbss
 8000f26:	4a0b      	ldr	r2, [pc, #44]	; (8000f54 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f28:	e002      	b.n	8000f30 <LoopFillZerobss>

08000f2a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f2a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f2c:	f842 3b04 	str.w	r3, [r2], #4

08000f30 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f30:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f32:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f34:	d3f9      	bcc.n	8000f2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f36:	f7ff ffd3 	bl	8000ee0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f3a:	f007 fe91 	bl	8008c60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f3e:	f7ff fb2f 	bl	80005a0 <main>
  bx  lr    
 8000f42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f44:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000f48:	08008ebc 	.word	0x08008ebc
  ldr  r0, =_sdata
 8000f4c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f50:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 8000f54:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 8000f58:	200021dc 	.word	0x200021dc

08000f5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f5c:	e7fe      	b.n	8000f5c <ADC_IRQHandler>
	...

08000f60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f64:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <HAL_Init+0x40>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a0d      	ldr	r2, [pc, #52]	; (8000fa0 <HAL_Init+0x40>)
 8000f6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f70:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <HAL_Init+0x40>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a0a      	ldr	r2, [pc, #40]	; (8000fa0 <HAL_Init+0x40>)
 8000f76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f7c:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <HAL_Init+0x40>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a07      	ldr	r2, [pc, #28]	; (8000fa0 <HAL_Init+0x40>)
 8000f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f88:	2003      	movs	r0, #3
 8000f8a:	f000 fd2d 	bl	80019e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f8e:	2000      	movs	r0, #0
 8000f90:	f000 f808 	bl	8000fa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f94:	f7ff fd78 	bl	8000a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40023c00 	.word	0x40023c00

08000fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fac:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <HAL_InitTick+0x54>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <HAL_InitTick+0x58>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 fd45 	bl	8001a52 <HAL_SYSTICK_Config>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e00e      	b.n	8000ff0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2b0f      	cmp	r3, #15
 8000fd6:	d80a      	bhi.n	8000fee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	6879      	ldr	r1, [r7, #4]
 8000fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe0:	f000 fd0d 	bl	80019fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fe4:	4a06      	ldr	r2, [pc, #24]	; (8001000 <HAL_InitTick+0x5c>)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fea:	2300      	movs	r3, #0
 8000fec:	e000      	b.n	8000ff0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000000 	.word	0x20000000
 8000ffc:	20000008 	.word	0x20000008
 8001000:	20000004 	.word	0x20000004

08001004 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001008:	4b06      	ldr	r3, [pc, #24]	; (8001024 <HAL_IncTick+0x20>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	461a      	mov	r2, r3
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <HAL_IncTick+0x24>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4413      	add	r3, r2
 8001014:	4a04      	ldr	r2, [pc, #16]	; (8001028 <HAL_IncTick+0x24>)
 8001016:	6013      	str	r3, [r2, #0]
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	20000008 	.word	0x20000008
 8001028:	200008fc 	.word	0x200008fc

0800102c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  return uwTick;
 8001030:	4b03      	ldr	r3, [pc, #12]	; (8001040 <HAL_GetTick+0x14>)
 8001032:	681b      	ldr	r3, [r3, #0]
}
 8001034:	4618      	mov	r0, r3
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	200008fc 	.word	0x200008fc

08001044 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800104c:	f7ff ffee 	bl	800102c <HAL_GetTick>
 8001050:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800105c:	d005      	beq.n	800106a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800105e:	4b09      	ldr	r3, [pc, #36]	; (8001084 <HAL_Delay+0x40>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	461a      	mov	r2, r3
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	4413      	add	r3, r2
 8001068:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800106a:	bf00      	nop
 800106c:	f7ff ffde 	bl	800102c <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	429a      	cmp	r2, r3
 800107a:	d8f7      	bhi.n	800106c <HAL_Delay+0x28>
  {
  }
}
 800107c:	bf00      	nop
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000008 	.word	0x20000008

08001088 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001090:	2300      	movs	r3, #0
 8001092:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d101      	bne.n	800109e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e033      	b.n	8001106 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d109      	bne.n	80010ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff fd16 	bl	8000ad8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2200      	movs	r2, #0
 80010b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010be:	f003 0310 	and.w	r3, r3, #16
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d118      	bne.n	80010f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010ce:	f023 0302 	bic.w	r3, r3, #2
 80010d2:	f043 0202 	orr.w	r2, r3, #2
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f000 fa36 	bl	800154c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ea:	f023 0303 	bic.w	r3, r3, #3
 80010ee:	f043 0201 	orr.w	r2, r3, #1
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	641a      	str	r2, [r3, #64]	; 0x40
 80010f6:	e001      	b.n	80010fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001104:	7bfb      	ldrb	r3, [r7, #15]
}
 8001106:	4618      	mov	r0, r3
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800111c:	2300      	movs	r3, #0
 800111e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001126:	2b01      	cmp	r3, #1
 8001128:	d101      	bne.n	800112e <HAL_ADC_Start_DMA+0x1e>
 800112a:	2302      	movs	r3, #2
 800112c:	e0cc      	b.n	80012c8 <HAL_ADC_Start_DMA+0x1b8>
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2201      	movs	r2, #1
 8001132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	2b01      	cmp	r3, #1
 8001142:	d018      	beq.n	8001176 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	689a      	ldr	r2, [r3, #8]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f042 0201 	orr.w	r2, r2, #1
 8001152:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001154:	4b5e      	ldr	r3, [pc, #376]	; (80012d0 <HAL_ADC_Start_DMA+0x1c0>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a5e      	ldr	r2, [pc, #376]	; (80012d4 <HAL_ADC_Start_DMA+0x1c4>)
 800115a:	fba2 2303 	umull	r2, r3, r2, r3
 800115e:	0c9a      	lsrs	r2, r3, #18
 8001160:	4613      	mov	r3, r2
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	4413      	add	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001168:	e002      	b.n	8001170 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	3b01      	subs	r3, #1
 800116e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f9      	bne.n	800116a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	f003 0301 	and.w	r3, r3, #1
 8001180:	2b01      	cmp	r3, #1
 8001182:	f040 80a0 	bne.w	80012c6 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800118e:	f023 0301 	bic.w	r3, r3, #1
 8001192:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d007      	beq.n	80011b8 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011b0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011c4:	d106      	bne.n	80011d4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	f023 0206 	bic.w	r2, r3, #6
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	645a      	str	r2, [r3, #68]	; 0x44
 80011d2:	e002      	b.n	80011da <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	2200      	movs	r2, #0
 80011d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011e2:	4b3d      	ldr	r3, [pc, #244]	; (80012d8 <HAL_ADC_Start_DMA+0x1c8>)
 80011e4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011ea:	4a3c      	ldr	r2, [pc, #240]	; (80012dc <HAL_ADC_Start_DMA+0x1cc>)
 80011ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011f2:	4a3b      	ldr	r2, [pc, #236]	; (80012e0 <HAL_ADC_Start_DMA+0x1d0>)
 80011f4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011fa:	4a3a      	ldr	r2, [pc, #232]	; (80012e4 <HAL_ADC_Start_DMA+0x1d4>)
 80011fc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001206:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	685a      	ldr	r2, [r3, #4]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001216:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	689a      	ldr	r2, [r3, #8]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001226:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	334c      	adds	r3, #76	; 0x4c
 8001232:	4619      	mov	r1, r3
 8001234:	68ba      	ldr	r2, [r7, #8]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f000 fe2c 	bl	8001e94 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f003 031f 	and.w	r3, r3, #31
 8001244:	2b00      	cmp	r3, #0
 8001246:	d12a      	bne.n	800129e <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a26      	ldr	r2, [pc, #152]	; (80012e8 <HAL_ADC_Start_DMA+0x1d8>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d015      	beq.n	800127e <HAL_ADC_Start_DMA+0x16e>
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a25      	ldr	r2, [pc, #148]	; (80012ec <HAL_ADC_Start_DMA+0x1dc>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d105      	bne.n	8001268 <HAL_ADC_Start_DMA+0x158>
 800125c:	4b1e      	ldr	r3, [pc, #120]	; (80012d8 <HAL_ADC_Start_DMA+0x1c8>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 031f 	and.w	r3, r3, #31
 8001264:	2b00      	cmp	r3, #0
 8001266:	d00a      	beq.n	800127e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a20      	ldr	r2, [pc, #128]	; (80012f0 <HAL_ADC_Start_DMA+0x1e0>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d129      	bne.n	80012c6 <HAL_ADC_Start_DMA+0x1b6>
 8001272:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <HAL_ADC_Start_DMA+0x1c8>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f003 031f 	and.w	r3, r3, #31
 800127a:	2b0f      	cmp	r3, #15
 800127c:	d823      	bhi.n	80012c6 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d11c      	bne.n	80012c6 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	689a      	ldr	r2, [r3, #8]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	e013      	b.n	80012c6 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a11      	ldr	r2, [pc, #68]	; (80012e8 <HAL_ADC_Start_DMA+0x1d8>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d10e      	bne.n	80012c6 <HAL_ADC_Start_DMA+0x1b6>
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d107      	bne.n	80012c6 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	689a      	ldr	r2, [r3, #8]
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012c4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80012c6:	2300      	movs	r3, #0
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3718      	adds	r7, #24
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000000 	.word	0x20000000
 80012d4:	431bde83 	.word	0x431bde83
 80012d8:	40012300 	.word	0x40012300
 80012dc:	08001745 	.word	0x08001745
 80012e0:	080017ff 	.word	0x080017ff
 80012e4:	0800181b 	.word	0x0800181b
 80012e8:	40012000 	.word	0x40012000
 80012ec:	40012100 	.word	0x40012100
 80012f0:	40012200 	.word	0x40012200

080012f4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800131c:	2b01      	cmp	r3, #1
 800131e:	d101      	bne.n	8001324 <HAL_ADC_ConfigChannel+0x1c>
 8001320:	2302      	movs	r3, #2
 8001322:	e105      	b.n	8001530 <HAL_ADC_ConfigChannel+0x228>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2201      	movs	r2, #1
 8001328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b09      	cmp	r3, #9
 8001332:	d925      	bls.n	8001380 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	68d9      	ldr	r1, [r3, #12]
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	b29b      	uxth	r3, r3
 8001340:	461a      	mov	r2, r3
 8001342:	4613      	mov	r3, r2
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	4413      	add	r3, r2
 8001348:	3b1e      	subs	r3, #30
 800134a:	2207      	movs	r2, #7
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43da      	mvns	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	400a      	ands	r2, r1
 8001358:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	68d9      	ldr	r1, [r3, #12]
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	689a      	ldr	r2, [r3, #8]
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	b29b      	uxth	r3, r3
 800136a:	4618      	mov	r0, r3
 800136c:	4603      	mov	r3, r0
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	4403      	add	r3, r0
 8001372:	3b1e      	subs	r3, #30
 8001374:	409a      	lsls	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	430a      	orrs	r2, r1
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	e022      	b.n	80013c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6919      	ldr	r1, [r3, #16]
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	b29b      	uxth	r3, r3
 800138c:	461a      	mov	r2, r3
 800138e:	4613      	mov	r3, r2
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	4413      	add	r3, r2
 8001394:	2207      	movs	r2, #7
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43da      	mvns	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	400a      	ands	r2, r1
 80013a2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6919      	ldr	r1, [r3, #16]
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	689a      	ldr	r2, [r3, #8]
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	4618      	mov	r0, r3
 80013b6:	4603      	mov	r3, r0
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	4403      	add	r3, r0
 80013bc:	409a      	lsls	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	430a      	orrs	r2, r1
 80013c4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2b06      	cmp	r3, #6
 80013cc:	d824      	bhi.n	8001418 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	4613      	mov	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	3b05      	subs	r3, #5
 80013e0:	221f      	movs	r2, #31
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43da      	mvns	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	400a      	ands	r2, r1
 80013ee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	4618      	mov	r0, r3
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685a      	ldr	r2, [r3, #4]
 8001402:	4613      	mov	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4413      	add	r3, r2
 8001408:	3b05      	subs	r3, #5
 800140a:	fa00 f203 	lsl.w	r2, r0, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	430a      	orrs	r2, r1
 8001414:	635a      	str	r2, [r3, #52]	; 0x34
 8001416:	e04c      	b.n	80014b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2b0c      	cmp	r3, #12
 800141e:	d824      	bhi.n	800146a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	4613      	mov	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	4413      	add	r3, r2
 8001430:	3b23      	subs	r3, #35	; 0x23
 8001432:	221f      	movs	r2, #31
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43da      	mvns	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	400a      	ands	r2, r1
 8001440:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	b29b      	uxth	r3, r3
 800144e:	4618      	mov	r0, r3
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685a      	ldr	r2, [r3, #4]
 8001454:	4613      	mov	r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4413      	add	r3, r2
 800145a:	3b23      	subs	r3, #35	; 0x23
 800145c:	fa00 f203 	lsl.w	r2, r0, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	430a      	orrs	r2, r1
 8001466:	631a      	str	r2, [r3, #48]	; 0x30
 8001468:	e023      	b.n	80014b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	4613      	mov	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	4413      	add	r3, r2
 800147a:	3b41      	subs	r3, #65	; 0x41
 800147c:	221f      	movs	r2, #31
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43da      	mvns	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	400a      	ands	r2, r1
 800148a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	b29b      	uxth	r3, r3
 8001498:	4618      	mov	r0, r3
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	4613      	mov	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	3b41      	subs	r3, #65	; 0x41
 80014a6:	fa00 f203 	lsl.w	r2, r0, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	430a      	orrs	r2, r1
 80014b0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014b2:	4b22      	ldr	r3, [pc, #136]	; (800153c <HAL_ADC_ConfigChannel+0x234>)
 80014b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a21      	ldr	r2, [pc, #132]	; (8001540 <HAL_ADC_ConfigChannel+0x238>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d109      	bne.n	80014d4 <HAL_ADC_ConfigChannel+0x1cc>
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b12      	cmp	r3, #18
 80014c6:	d105      	bne.n	80014d4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a19      	ldr	r2, [pc, #100]	; (8001540 <HAL_ADC_ConfigChannel+0x238>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d123      	bne.n	8001526 <HAL_ADC_ConfigChannel+0x21e>
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2b10      	cmp	r3, #16
 80014e4:	d003      	beq.n	80014ee <HAL_ADC_ConfigChannel+0x1e6>
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2b11      	cmp	r3, #17
 80014ec:	d11b      	bne.n	8001526 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2b10      	cmp	r3, #16
 8001500:	d111      	bne.n	8001526 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001502:	4b10      	ldr	r3, [pc, #64]	; (8001544 <HAL_ADC_ConfigChannel+0x23c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a10      	ldr	r2, [pc, #64]	; (8001548 <HAL_ADC_ConfigChannel+0x240>)
 8001508:	fba2 2303 	umull	r2, r3, r2, r3
 800150c:	0c9a      	lsrs	r2, r3, #18
 800150e:	4613      	mov	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001518:	e002      	b.n	8001520 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	3b01      	subs	r3, #1
 800151e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f9      	bne.n	800151a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800152e:	2300      	movs	r3, #0
}
 8001530:	4618      	mov	r0, r3
 8001532:	3714      	adds	r7, #20
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	40012300 	.word	0x40012300
 8001540:	40012000 	.word	0x40012000
 8001544:	20000000 	.word	0x20000000
 8001548:	431bde83 	.word	0x431bde83

0800154c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001554:	4b79      	ldr	r3, [pc, #484]	; (800173c <ADC_Init+0x1f0>)
 8001556:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	685a      	ldr	r2, [r3, #4]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	431a      	orrs	r2, r3
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001580:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6859      	ldr	r1, [r3, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	021a      	lsls	r2, r3, #8
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	430a      	orrs	r2, r1
 8001594:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	685a      	ldr	r2, [r3, #4]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80015a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	6859      	ldr	r1, [r3, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	430a      	orrs	r2, r1
 80015b6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	689a      	ldr	r2, [r3, #8]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6899      	ldr	r1, [r3, #8]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	68da      	ldr	r2, [r3, #12]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	430a      	orrs	r2, r1
 80015d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015de:	4a58      	ldr	r2, [pc, #352]	; (8001740 <ADC_Init+0x1f4>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d022      	beq.n	800162a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	689a      	ldr	r2, [r3, #8]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	6899      	ldr	r1, [r3, #8]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	430a      	orrs	r2, r1
 8001604:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	689a      	ldr	r2, [r3, #8]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001614:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	6899      	ldr	r1, [r3, #8]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	430a      	orrs	r2, r1
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	e00f      	b.n	800164a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	689a      	ldr	r2, [r3, #8]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001638:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001648:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 0202 	bic.w	r2, r2, #2
 8001658:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	6899      	ldr	r1, [r3, #8]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	7e1b      	ldrb	r3, [r3, #24]
 8001664:	005a      	lsls	r2, r3, #1
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	430a      	orrs	r2, r1
 800166c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d01b      	beq.n	80016b0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001686:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	685a      	ldr	r2, [r3, #4]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001696:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6859      	ldr	r1, [r3, #4]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a2:	3b01      	subs	r3, #1
 80016a4:	035a      	lsls	r2, r3, #13
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	430a      	orrs	r2, r1
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	e007      	b.n	80016c0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	685a      	ldr	r2, [r3, #4]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80016ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	3b01      	subs	r3, #1
 80016dc:	051a      	lsls	r2, r3, #20
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	430a      	orrs	r2, r1
 80016e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80016f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	6899      	ldr	r1, [r3, #8]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001702:	025a      	lsls	r2, r3, #9
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	430a      	orrs	r2, r1
 800170a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	689a      	ldr	r2, [r3, #8]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800171a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6899      	ldr	r1, [r3, #8]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	029a      	lsls	r2, r3, #10
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	430a      	orrs	r2, r1
 800172e:	609a      	str	r2, [r3, #8]
}
 8001730:	bf00      	nop
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	40012300 	.word	0x40012300
 8001740:	0f000001 	.word	0x0f000001

08001744 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001750:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800175a:	2b00      	cmp	r3, #0
 800175c:	d13c      	bne.n	80017d8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d12b      	bne.n	80017d0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800177c:	2b00      	cmp	r3, #0
 800177e:	d127      	bne.n	80017d0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001786:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800178a:	2b00      	cmp	r3, #0
 800178c:	d006      	beq.n	800179c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001798:	2b00      	cmp	r3, #0
 800179a:	d119      	bne.n	80017d0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	685a      	ldr	r2, [r3, #4]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f022 0220 	bic.w	r2, r2, #32
 80017aa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d105      	bne.n	80017d0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c8:	f043 0201 	orr.w	r2, r3, #1
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80017d0:	68f8      	ldr	r0, [r7, #12]
 80017d2:	f7fe fe89 	bl	80004e8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80017d6:	e00e      	b.n	80017f6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	f003 0310 	and.w	r3, r3, #16
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d003      	beq.n	80017ec <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80017e4:	68f8      	ldr	r0, [r7, #12]
 80017e6:	f7ff fd85 	bl	80012f4 <HAL_ADC_ErrorCallback>
}
 80017ea:	e004      	b.n	80017f6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	4798      	blx	r3
}
 80017f6:	bf00      	nop
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b084      	sub	sp, #16
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800180a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800180c:	68f8      	ldr	r0, [r7, #12]
 800180e:	f7fe fe5b 	bl	80004c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001812:	bf00      	nop
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b084      	sub	sp, #16
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001826:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2240      	movs	r2, #64	; 0x40
 800182c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001832:	f043 0204 	orr.w	r2, r3, #4
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800183a:	68f8      	ldr	r0, [r7, #12]
 800183c:	f7ff fd5a 	bl	80012f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001840:	bf00      	nop
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001858:	4b0c      	ldr	r3, [pc, #48]	; (800188c <__NVIC_SetPriorityGrouping+0x44>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800185e:	68ba      	ldr	r2, [r7, #8]
 8001860:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001864:	4013      	ands	r3, r2
 8001866:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001870:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001878:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800187a:	4a04      	ldr	r2, [pc, #16]	; (800188c <__NVIC_SetPriorityGrouping+0x44>)
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	60d3      	str	r3, [r2, #12]
}
 8001880:	bf00      	nop
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001894:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	0a1b      	lsrs	r3, r3, #8
 800189a:	f003 0307 	and.w	r3, r3, #7
}
 800189e:	4618      	mov	r0, r3
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	db0b      	blt.n	80018d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	f003 021f 	and.w	r2, r3, #31
 80018c4:	4907      	ldr	r1, [pc, #28]	; (80018e4 <__NVIC_EnableIRQ+0x38>)
 80018c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ca:	095b      	lsrs	r3, r3, #5
 80018cc:	2001      	movs	r0, #1
 80018ce:	fa00 f202 	lsl.w	r2, r0, r2
 80018d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	e000e100 	.word	0xe000e100

080018e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	6039      	str	r1, [r7, #0]
 80018f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	db0a      	blt.n	8001912 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	490c      	ldr	r1, [pc, #48]	; (8001934 <__NVIC_SetPriority+0x4c>)
 8001902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001906:	0112      	lsls	r2, r2, #4
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	440b      	add	r3, r1
 800190c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001910:	e00a      	b.n	8001928 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	b2da      	uxtb	r2, r3
 8001916:	4908      	ldr	r1, [pc, #32]	; (8001938 <__NVIC_SetPriority+0x50>)
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	3b04      	subs	r3, #4
 8001920:	0112      	lsls	r2, r2, #4
 8001922:	b2d2      	uxtb	r2, r2
 8001924:	440b      	add	r3, r1
 8001926:	761a      	strb	r2, [r3, #24]
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	e000e100 	.word	0xe000e100
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800193c:	b480      	push	{r7}
 800193e:	b089      	sub	sp, #36	; 0x24
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	f1c3 0307 	rsb	r3, r3, #7
 8001956:	2b04      	cmp	r3, #4
 8001958:	bf28      	it	cs
 800195a:	2304      	movcs	r3, #4
 800195c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	3304      	adds	r3, #4
 8001962:	2b06      	cmp	r3, #6
 8001964:	d902      	bls.n	800196c <NVIC_EncodePriority+0x30>
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3b03      	subs	r3, #3
 800196a:	e000      	b.n	800196e <NVIC_EncodePriority+0x32>
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001970:	f04f 32ff 	mov.w	r2, #4294967295
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43da      	mvns	r2, r3
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	401a      	ands	r2, r3
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001984:	f04f 31ff 	mov.w	r1, #4294967295
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	fa01 f303 	lsl.w	r3, r1, r3
 800198e:	43d9      	mvns	r1, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001994:	4313      	orrs	r3, r2
         );
}
 8001996:	4618      	mov	r0, r3
 8001998:	3724      	adds	r7, #36	; 0x24
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
	...

080019a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019b4:	d301      	bcc.n	80019ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019b6:	2301      	movs	r3, #1
 80019b8:	e00f      	b.n	80019da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ba:	4a0a      	ldr	r2, [pc, #40]	; (80019e4 <SysTick_Config+0x40>)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3b01      	subs	r3, #1
 80019c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019c2:	210f      	movs	r1, #15
 80019c4:	f04f 30ff 	mov.w	r0, #4294967295
 80019c8:	f7ff ff8e 	bl	80018e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <SysTick_Config+0x40>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019d2:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <SysTick_Config+0x40>)
 80019d4:	2207      	movs	r2, #7
 80019d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	e000e010 	.word	0xe000e010

080019e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f7ff ff29 	bl	8001848 <__NVIC_SetPriorityGrouping>
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b086      	sub	sp, #24
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	4603      	mov	r3, r0
 8001a06:	60b9      	str	r1, [r7, #8]
 8001a08:	607a      	str	r2, [r7, #4]
 8001a0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a10:	f7ff ff3e 	bl	8001890 <__NVIC_GetPriorityGrouping>
 8001a14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	68b9      	ldr	r1, [r7, #8]
 8001a1a:	6978      	ldr	r0, [r7, #20]
 8001a1c:	f7ff ff8e 	bl	800193c <NVIC_EncodePriority>
 8001a20:	4602      	mov	r2, r0
 8001a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a26:	4611      	mov	r1, r2
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff ff5d 	bl	80018e8 <__NVIC_SetPriority>
}
 8001a2e:	bf00      	nop
 8001a30:	3718      	adds	r7, #24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b082      	sub	sp, #8
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff ff31 	bl	80018ac <__NVIC_EnableIRQ>
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff ffa2 	bl	80019a4 <SysTick_Config>
 8001a60:	4603      	mov	r3, r0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b082      	sub	sp, #8
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d101      	bne.n	8001a7c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e014      	b.n	8001aa6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	791b      	ldrb	r3, [r3, #4]
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d105      	bne.n	8001a92 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7ff f89b 	bl	8000bc8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2202      	movs	r2, #2
 8001a96:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b085      	sub	sp, #20
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
 8001ab6:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	2300      	movs	r3, #0
 8001abe:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	795b      	ldrb	r3, [r3, #5]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d101      	bne.n	8001acc <HAL_DAC_Start+0x1e>
 8001ac8:	2302      	movs	r3, #2
 8001aca:	e050      	b.n	8001b6e <HAL_DAC_Start+0xc0>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2202      	movs	r2, #2
 8001ad6:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6819      	ldr	r1, [r3, #0]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	409a      	lsls	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d11a      	bne.n	8001b28 <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b08:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2b04      	cmp	r3, #4
 8001b0e:	d127      	bne.n	8001b60 <HAL_DAC_Start+0xb2>
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	2b38      	cmp	r3, #56	; 0x38
 8001b14:	d124      	bne.n	8001b60 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	685a      	ldr	r2, [r3, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f042 0201 	orr.w	r2, r2, #1
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	e01b      	b.n	8001b60 <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b32:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8001b3e:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001b46:	d10b      	bne.n	8001b60 <HAL_DAC_Start+0xb2>
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8001b4e:	d107      	bne.n	8001b60 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	685a      	ldr	r2, [r3, #4]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f042 0202 	orr.w	r2, r2, #2
 8001b5e:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b082      	sub	sp, #8
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b90:	d118      	bne.n	8001bc4 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2204      	movs	r2, #4
 8001b96:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	f043 0201 	orr.w	r2, r3, #1
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bac:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001bbc:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 f825 	bl	8001c0e <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bd2:	d118      	bne.n	8001c06 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2204      	movs	r2, #4
 8001bd8:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	f043 0202 	orr.w	r2, r3, #2
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001bee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001bfe:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f000 f88e 	bl	8001d22 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b087      	sub	sp, #28
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	60f8      	str	r0, [r7, #12]
 8001c2a:	60b9      	str	r1, [r7, #8]
 8001c2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]
 8001c32:	2300      	movs	r3, #0
 8001c34:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	795b      	ldrb	r3, [r3, #5]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d101      	bne.n	8001c42 <HAL_DAC_ConfigChannel+0x20>
 8001c3e:	2302      	movs	r3, #2
 8001c40:	e036      	b.n	8001cb0 <HAL_DAC_ConfigChannel+0x8e>
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2201      	movs	r2, #1
 8001c46:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001c56:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	43db      	mvns	r3, r3
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	4013      	ands	r3, r2
 8001c66:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	697a      	ldr	r2, [r7, #20]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6819      	ldr	r1, [r3, #0]
 8001c90:	22c0      	movs	r2, #192	; 0xc0
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43da      	mvns	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	400a      	ands	r2, r1
 8001ca0:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2200      	movs	r2, #0
 8001cac:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	371c      	adds	r7, #28
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <HAL_DACEx_TriangleWaveGenerate>:
  *            @arg DAC_TRIANGLEAMPLITUDE_2047: Select max triangle amplitude of 2047
  *            @arg DAC_TRIANGLEAMPLITUDE_4095: Select max triangle amplitude of 4095                               
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_TriangleWaveGenerate(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Amplitude)
{  
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	795b      	ldrb	r3, [r3, #5]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d101      	bne.n	8001cd4 <HAL_DACEx_TriangleWaveGenerate+0x18>
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	e020      	b.n	8001d16 <HAL_DACEx_TriangleWaveGenerate+0x5a>
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2202      	movs	r2, #2
 8001cde:	711a      	strb	r2, [r3, #4]
  
  /* Enable the selected wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, (DAC_CR_WAVE1 | DAC_CR_MAMP1) << Channel, (DAC_CR_WAVE1_1 | Amplitude) << Channel);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	ea02 0103 	and.w	r1, r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	409a      	lsls	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	430a      	orrs	r2, r1
 8001d06:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2200      	movs	r2, #0
 8001d12:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
	...

08001d38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d44:	f7ff f972 	bl	800102c <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e099      	b.n	8001e88 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2202      	movs	r2, #2
 8001d60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f022 0201 	bic.w	r2, r2, #1
 8001d72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d74:	e00f      	b.n	8001d96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d76:	f7ff f959 	bl	800102c <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b05      	cmp	r3, #5
 8001d82:	d908      	bls.n	8001d96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2220      	movs	r2, #32
 8001d88:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2203      	movs	r2, #3
 8001d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e078      	b.n	8001e88 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1e8      	bne.n	8001d76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	4b38      	ldr	r3, [pc, #224]	; (8001e90 <HAL_DMA_Init+0x158>)
 8001db0:	4013      	ands	r3, r2
 8001db2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001de2:	697a      	ldr	r2, [r7, #20]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dec:	2b04      	cmp	r3, #4
 8001dee:	d107      	bne.n	8001e00 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	697a      	ldr	r2, [r7, #20]
 8001e06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	f023 0307 	bic.w	r3, r3, #7
 8001e16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e26:	2b04      	cmp	r3, #4
 8001e28:	d117      	bne.n	8001e5a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d00e      	beq.n	8001e5a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 fa6f 	bl	8002320 <DMA_CheckFifoParam>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d008      	beq.n	8001e5a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2240      	movs	r2, #64	; 0x40
 8001e4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e56:	2301      	movs	r3, #1
 8001e58:	e016      	b.n	8001e88 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 fa26 	bl	80022b4 <DMA_CalcBaseAndBitshift>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e70:	223f      	movs	r2, #63	; 0x3f
 8001e72:	409a      	lsls	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2201      	movs	r2, #1
 8001e82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3718      	adds	r7, #24
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	f010803f 	.word	0xf010803f

08001e94 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
 8001ea0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eaa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d101      	bne.n	8001eba <HAL_DMA_Start_IT+0x26>
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	e040      	b.n	8001f3c <HAL_DMA_Start_IT+0xa8>
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d12f      	bne.n	8001f2e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	68b9      	ldr	r1, [r7, #8]
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f000 f9b8 	bl	8002258 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eec:	223f      	movs	r2, #63	; 0x3f
 8001eee:	409a      	lsls	r2, r3
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f042 0216 	orr.w	r2, r2, #22
 8001f02:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d007      	beq.n	8001f1c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 0208 	orr.w	r2, r2, #8
 8001f1a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f042 0201 	orr.w	r2, r2, #1
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	e005      	b.n	8001f3a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f36:	2302      	movs	r3, #2
 8001f38:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f50:	4b92      	ldr	r3, [pc, #584]	; (800219c <HAL_DMA_IRQHandler+0x258>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a92      	ldr	r2, [pc, #584]	; (80021a0 <HAL_DMA_IRQHandler+0x25c>)
 8001f56:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5a:	0a9b      	lsrs	r3, r3, #10
 8001f5c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f62:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f6e:	2208      	movs	r2, #8
 8001f70:	409a      	lsls	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	4013      	ands	r3, r2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d01a      	beq.n	8001fb0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0304 	and.w	r3, r3, #4
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d013      	beq.n	8001fb0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 0204 	bic.w	r2, r2, #4
 8001f96:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9c:	2208      	movs	r2, #8
 8001f9e:	409a      	lsls	r2, r3
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa8:	f043 0201 	orr.w	r2, r3, #1
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	409a      	lsls	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d012      	beq.n	8001fe6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00b      	beq.n	8001fe6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	409a      	lsls	r2, r3
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fde:	f043 0202 	orr.w	r2, r3, #2
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fea:	2204      	movs	r2, #4
 8001fec:	409a      	lsls	r2, r3
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d012      	beq.n	800201c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00b      	beq.n	800201c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002008:	2204      	movs	r2, #4
 800200a:	409a      	lsls	r2, r3
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002014:	f043 0204 	orr.w	r2, r3, #4
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002020:	2210      	movs	r2, #16
 8002022:	409a      	lsls	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	4013      	ands	r3, r2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d043      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	2b00      	cmp	r3, #0
 8002038:	d03c      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203e:	2210      	movs	r2, #16
 8002040:	409a      	lsls	r2, r3
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d018      	beq.n	8002086 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d108      	bne.n	8002074 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	2b00      	cmp	r3, #0
 8002068:	d024      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	4798      	blx	r3
 8002072:	e01f      	b.n	80020b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002078:	2b00      	cmp	r3, #0
 800207a:	d01b      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	4798      	blx	r3
 8002084:	e016      	b.n	80020b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002090:	2b00      	cmp	r3, #0
 8002092:	d107      	bne.n	80020a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f022 0208 	bic.w	r2, r2, #8
 80020a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d003      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b8:	2220      	movs	r2, #32
 80020ba:	409a      	lsls	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4013      	ands	r3, r2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f000 808e 	beq.w	80021e2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0310 	and.w	r3, r3, #16
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f000 8086 	beq.w	80021e2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020da:	2220      	movs	r2, #32
 80020dc:	409a      	lsls	r2, r3
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b05      	cmp	r3, #5
 80020ec:	d136      	bne.n	800215c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 0216 	bic.w	r2, r2, #22
 80020fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	695a      	ldr	r2, [r3, #20]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800210c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	2b00      	cmp	r3, #0
 8002114:	d103      	bne.n	800211e <HAL_DMA_IRQHandler+0x1da>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800211a:	2b00      	cmp	r3, #0
 800211c:	d007      	beq.n	800212e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 0208 	bic.w	r2, r2, #8
 800212c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002132:	223f      	movs	r2, #63	; 0x3f
 8002134:	409a      	lsls	r2, r3
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800214e:	2b00      	cmp	r3, #0
 8002150:	d07d      	beq.n	800224e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	4798      	blx	r3
        }
        return;
 800215a:	e078      	b.n	800224e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d01c      	beq.n	80021a4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d108      	bne.n	800218a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217c:	2b00      	cmp	r3, #0
 800217e:	d030      	beq.n	80021e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	4798      	blx	r3
 8002188:	e02b      	b.n	80021e2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800218e:	2b00      	cmp	r3, #0
 8002190:	d027      	beq.n	80021e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	4798      	blx	r3
 800219a:	e022      	b.n	80021e2 <HAL_DMA_IRQHandler+0x29e>
 800219c:	20000000 	.word	0x20000000
 80021a0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10f      	bne.n	80021d2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 0210 	bic.w	r2, r2, #16
 80021c0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d032      	beq.n	8002250 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d022      	beq.n	800223c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2205      	movs	r2, #5
 80021fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 0201 	bic.w	r2, r2, #1
 800220c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	3301      	adds	r3, #1
 8002212:	60bb      	str	r3, [r7, #8]
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	429a      	cmp	r2, r3
 8002218:	d307      	bcc.n	800222a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1f2      	bne.n	800220e <HAL_DMA_IRQHandler+0x2ca>
 8002228:	e000      	b.n	800222c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800222a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002240:	2b00      	cmp	r3, #0
 8002242:	d005      	beq.n	8002250 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	4798      	blx	r3
 800224c:	e000      	b.n	8002250 <HAL_DMA_IRQHandler+0x30c>
        return;
 800224e:	bf00      	nop
    }
  }
}
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop

08002258 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
 8002264:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002274:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	2b40      	cmp	r3, #64	; 0x40
 8002284:	d108      	bne.n	8002298 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002296:	e007      	b.n	80022a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68ba      	ldr	r2, [r7, #8]
 800229e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	60da      	str	r2, [r3, #12]
}
 80022a8:	bf00      	nop
 80022aa:	3714      	adds	r7, #20
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	3b10      	subs	r3, #16
 80022c4:	4a14      	ldr	r2, [pc, #80]	; (8002318 <DMA_CalcBaseAndBitshift+0x64>)
 80022c6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ca:	091b      	lsrs	r3, r3, #4
 80022cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022ce:	4a13      	ldr	r2, [pc, #76]	; (800231c <DMA_CalcBaseAndBitshift+0x68>)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	4413      	add	r3, r2
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	461a      	mov	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2b03      	cmp	r3, #3
 80022e0:	d909      	bls.n	80022f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022ea:	f023 0303 	bic.w	r3, r3, #3
 80022ee:	1d1a      	adds	r2, r3, #4
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	659a      	str	r2, [r3, #88]	; 0x58
 80022f4:	e007      	b.n	8002306 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022fe:	f023 0303 	bic.w	r3, r3, #3
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800230a:	4618      	mov	r0, r3
 800230c:	3714      	adds	r7, #20
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	aaaaaaab 	.word	0xaaaaaaab
 800231c:	08008ea4 	.word	0x08008ea4

08002320 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002328:	2300      	movs	r3, #0
 800232a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002330:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d11f      	bne.n	800237a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	2b03      	cmp	r3, #3
 800233e:	d855      	bhi.n	80023ec <DMA_CheckFifoParam+0xcc>
 8002340:	a201      	add	r2, pc, #4	; (adr r2, 8002348 <DMA_CheckFifoParam+0x28>)
 8002342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002346:	bf00      	nop
 8002348:	08002359 	.word	0x08002359
 800234c:	0800236b 	.word	0x0800236b
 8002350:	08002359 	.word	0x08002359
 8002354:	080023ed 	.word	0x080023ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d045      	beq.n	80023f0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002368:	e042      	b.n	80023f0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002372:	d13f      	bne.n	80023f4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002378:	e03c      	b.n	80023f4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002382:	d121      	bne.n	80023c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	2b03      	cmp	r3, #3
 8002388:	d836      	bhi.n	80023f8 <DMA_CheckFifoParam+0xd8>
 800238a:	a201      	add	r2, pc, #4	; (adr r2, 8002390 <DMA_CheckFifoParam+0x70>)
 800238c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002390:	080023a1 	.word	0x080023a1
 8002394:	080023a7 	.word	0x080023a7
 8002398:	080023a1 	.word	0x080023a1
 800239c:	080023b9 	.word	0x080023b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	73fb      	strb	r3, [r7, #15]
      break;
 80023a4:	e02f      	b.n	8002406 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d024      	beq.n	80023fc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023b6:	e021      	b.n	80023fc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023c0:	d11e      	bne.n	8002400 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023c6:	e01b      	b.n	8002400 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d902      	bls.n	80023d4 <DMA_CheckFifoParam+0xb4>
 80023ce:	2b03      	cmp	r3, #3
 80023d0:	d003      	beq.n	80023da <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023d2:	e018      	b.n	8002406 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	73fb      	strb	r3, [r7, #15]
      break;
 80023d8:	e015      	b.n	8002406 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00e      	beq.n	8002404 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	73fb      	strb	r3, [r7, #15]
      break;
 80023ea:	e00b      	b.n	8002404 <DMA_CheckFifoParam+0xe4>
      break;
 80023ec:	bf00      	nop
 80023ee:	e00a      	b.n	8002406 <DMA_CheckFifoParam+0xe6>
      break;
 80023f0:	bf00      	nop
 80023f2:	e008      	b.n	8002406 <DMA_CheckFifoParam+0xe6>
      break;
 80023f4:	bf00      	nop
 80023f6:	e006      	b.n	8002406 <DMA_CheckFifoParam+0xe6>
      break;
 80023f8:	bf00      	nop
 80023fa:	e004      	b.n	8002406 <DMA_CheckFifoParam+0xe6>
      break;
 80023fc:	bf00      	nop
 80023fe:	e002      	b.n	8002406 <DMA_CheckFifoParam+0xe6>
      break;   
 8002400:	bf00      	nop
 8002402:	e000      	b.n	8002406 <DMA_CheckFifoParam+0xe6>
      break;
 8002404:	bf00      	nop
    }
  } 
  
  return status; 
 8002406:	7bfb      	ldrb	r3, [r7, #15]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3714      	adds	r7, #20
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002414:	b480      	push	{r7}
 8002416:	b089      	sub	sp, #36	; 0x24
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002422:	2300      	movs	r3, #0
 8002424:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002426:	2300      	movs	r3, #0
 8002428:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800242a:	2300      	movs	r3, #0
 800242c:	61fb      	str	r3, [r7, #28]
 800242e:	e16b      	b.n	8002708 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002430:	2201      	movs	r2, #1
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	4013      	ands	r3, r2
 8002442:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	429a      	cmp	r2, r3
 800244a:	f040 815a 	bne.w	8002702 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d00b      	beq.n	800246e <HAL_GPIO_Init+0x5a>
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b02      	cmp	r3, #2
 800245c:	d007      	beq.n	800246e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002462:	2b11      	cmp	r3, #17
 8002464:	d003      	beq.n	800246e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b12      	cmp	r3, #18
 800246c:	d130      	bne.n	80024d0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	2203      	movs	r2, #3
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43db      	mvns	r3, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4013      	ands	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	68da      	ldr	r2, [r3, #12]
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4313      	orrs	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024a4:	2201      	movs	r2, #1
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	091b      	lsrs	r3, r3, #4
 80024ba:	f003 0201 	and.w	r2, r3, #1
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	2203      	movs	r2, #3
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	43db      	mvns	r3, r3
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	4013      	ands	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	2b02      	cmp	r3, #2
 8002506:	d003      	beq.n	8002510 <HAL_GPIO_Init+0xfc>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	2b12      	cmp	r3, #18
 800250e:	d123      	bne.n	8002558 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	08da      	lsrs	r2, r3, #3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3208      	adds	r2, #8
 8002518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800251c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	f003 0307 	and.w	r3, r3, #7
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	220f      	movs	r2, #15
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	43db      	mvns	r3, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4013      	ands	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	691a      	ldr	r2, [r3, #16]
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	08da      	lsrs	r2, r3, #3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	3208      	adds	r2, #8
 8002552:	69b9      	ldr	r1, [r7, #24]
 8002554:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	2203      	movs	r2, #3
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	43db      	mvns	r3, r3
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4013      	ands	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f003 0203 	and.w	r2, r3, #3
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4313      	orrs	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002594:	2b00      	cmp	r3, #0
 8002596:	f000 80b4 	beq.w	8002702 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	4b5f      	ldr	r3, [pc, #380]	; (800271c <HAL_GPIO_Init+0x308>)
 80025a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a2:	4a5e      	ldr	r2, [pc, #376]	; (800271c <HAL_GPIO_Init+0x308>)
 80025a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025a8:	6453      	str	r3, [r2, #68]	; 0x44
 80025aa:	4b5c      	ldr	r3, [pc, #368]	; (800271c <HAL_GPIO_Init+0x308>)
 80025ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025b6:	4a5a      	ldr	r2, [pc, #360]	; (8002720 <HAL_GPIO_Init+0x30c>)
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	089b      	lsrs	r3, r3, #2
 80025bc:	3302      	adds	r3, #2
 80025be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	220f      	movs	r2, #15
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	43db      	mvns	r3, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4013      	ands	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a51      	ldr	r2, [pc, #324]	; (8002724 <HAL_GPIO_Init+0x310>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d02b      	beq.n	800263a <HAL_GPIO_Init+0x226>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a50      	ldr	r2, [pc, #320]	; (8002728 <HAL_GPIO_Init+0x314>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d025      	beq.n	8002636 <HAL_GPIO_Init+0x222>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a4f      	ldr	r2, [pc, #316]	; (800272c <HAL_GPIO_Init+0x318>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d01f      	beq.n	8002632 <HAL_GPIO_Init+0x21e>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a4e      	ldr	r2, [pc, #312]	; (8002730 <HAL_GPIO_Init+0x31c>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d019      	beq.n	800262e <HAL_GPIO_Init+0x21a>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a4d      	ldr	r2, [pc, #308]	; (8002734 <HAL_GPIO_Init+0x320>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d013      	beq.n	800262a <HAL_GPIO_Init+0x216>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a4c      	ldr	r2, [pc, #304]	; (8002738 <HAL_GPIO_Init+0x324>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d00d      	beq.n	8002626 <HAL_GPIO_Init+0x212>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a4b      	ldr	r2, [pc, #300]	; (800273c <HAL_GPIO_Init+0x328>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d007      	beq.n	8002622 <HAL_GPIO_Init+0x20e>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a4a      	ldr	r2, [pc, #296]	; (8002740 <HAL_GPIO_Init+0x32c>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d101      	bne.n	800261e <HAL_GPIO_Init+0x20a>
 800261a:	2307      	movs	r3, #7
 800261c:	e00e      	b.n	800263c <HAL_GPIO_Init+0x228>
 800261e:	2308      	movs	r3, #8
 8002620:	e00c      	b.n	800263c <HAL_GPIO_Init+0x228>
 8002622:	2306      	movs	r3, #6
 8002624:	e00a      	b.n	800263c <HAL_GPIO_Init+0x228>
 8002626:	2305      	movs	r3, #5
 8002628:	e008      	b.n	800263c <HAL_GPIO_Init+0x228>
 800262a:	2304      	movs	r3, #4
 800262c:	e006      	b.n	800263c <HAL_GPIO_Init+0x228>
 800262e:	2303      	movs	r3, #3
 8002630:	e004      	b.n	800263c <HAL_GPIO_Init+0x228>
 8002632:	2302      	movs	r3, #2
 8002634:	e002      	b.n	800263c <HAL_GPIO_Init+0x228>
 8002636:	2301      	movs	r3, #1
 8002638:	e000      	b.n	800263c <HAL_GPIO_Init+0x228>
 800263a:	2300      	movs	r3, #0
 800263c:	69fa      	ldr	r2, [r7, #28]
 800263e:	f002 0203 	and.w	r2, r2, #3
 8002642:	0092      	lsls	r2, r2, #2
 8002644:	4093      	lsls	r3, r2
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4313      	orrs	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800264c:	4934      	ldr	r1, [pc, #208]	; (8002720 <HAL_GPIO_Init+0x30c>)
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	089b      	lsrs	r3, r3, #2
 8002652:	3302      	adds	r3, #2
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800265a:	4b3a      	ldr	r3, [pc, #232]	; (8002744 <HAL_GPIO_Init+0x330>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	43db      	mvns	r3, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4013      	ands	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	4313      	orrs	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800267e:	4a31      	ldr	r2, [pc, #196]	; (8002744 <HAL_GPIO_Init+0x330>)
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002684:	4b2f      	ldr	r3, [pc, #188]	; (8002744 <HAL_GPIO_Init+0x330>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	43db      	mvns	r3, r3
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4013      	ands	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d003      	beq.n	80026a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026a8:	4a26      	ldr	r2, [pc, #152]	; (8002744 <HAL_GPIO_Init+0x330>)
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026ae:	4b25      	ldr	r3, [pc, #148]	; (8002744 <HAL_GPIO_Init+0x330>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	43db      	mvns	r3, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4013      	ands	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026d2:	4a1c      	ldr	r2, [pc, #112]	; (8002744 <HAL_GPIO_Init+0x330>)
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026d8:	4b1a      	ldr	r3, [pc, #104]	; (8002744 <HAL_GPIO_Init+0x330>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	43db      	mvns	r3, r3
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4013      	ands	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d003      	beq.n	80026fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026fc:	4a11      	ldr	r2, [pc, #68]	; (8002744 <HAL_GPIO_Init+0x330>)
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	3301      	adds	r3, #1
 8002706:	61fb      	str	r3, [r7, #28]
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	2b0f      	cmp	r3, #15
 800270c:	f67f ae90 	bls.w	8002430 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002710:	bf00      	nop
 8002712:	3724      	adds	r7, #36	; 0x24
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	40023800 	.word	0x40023800
 8002720:	40013800 	.word	0x40013800
 8002724:	40020000 	.word	0x40020000
 8002728:	40020400 	.word	0x40020400
 800272c:	40020800 	.word	0x40020800
 8002730:	40020c00 	.word	0x40020c00
 8002734:	40021000 	.word	0x40021000
 8002738:	40021400 	.word	0x40021400
 800273c:	40021800 	.word	0x40021800
 8002740:	40021c00 	.word	0x40021c00
 8002744:	40013c00 	.word	0x40013c00

08002748 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	460b      	mov	r3, r1
 8002752:	807b      	strh	r3, [r7, #2]
 8002754:	4613      	mov	r3, r2
 8002756:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002758:	787b      	ldrb	r3, [r7, #1]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800275e:	887a      	ldrh	r2, [r7, #2]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002764:	e003      	b.n	800276e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002766:	887b      	ldrh	r3, [r7, #2]
 8002768:	041a      	lsls	r2, r3, #16
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	619a      	str	r2, [r3, #24]
}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr

0800277a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800277a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800277c:	b08f      	sub	sp, #60	; 0x3c
 800277e:	af0a      	add	r7, sp, #40	; 0x28
 8002780:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e10f      	b.n	80029ac <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d106      	bne.n	80027ac <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f005 ff26 	bl	80085f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2203      	movs	r2, #3
 80027b0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d102      	bne.n	80027c6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f002 fea3 	bl	8005516 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	603b      	str	r3, [r7, #0]
 80027d6:	687e      	ldr	r6, [r7, #4]
 80027d8:	466d      	mov	r5, sp
 80027da:	f106 0410 	add.w	r4, r6, #16
 80027de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80027ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80027ee:	1d33      	adds	r3, r6, #4
 80027f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027f2:	6838      	ldr	r0, [r7, #0]
 80027f4:	f002 fd7a 	bl	80052ec <USB_CoreInit>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d005      	beq.n	800280a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2202      	movs	r2, #2
 8002802:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e0d0      	b.n	80029ac <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2100      	movs	r1, #0
 8002810:	4618      	mov	r0, r3
 8002812:	f002 fe91 	bl	8005538 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002816:	2300      	movs	r3, #0
 8002818:	73fb      	strb	r3, [r7, #15]
 800281a:	e04a      	b.n	80028b2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800281c:	7bfa      	ldrb	r2, [r7, #15]
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	4613      	mov	r3, r2
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	1a9b      	subs	r3, r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	440b      	add	r3, r1
 800282a:	333d      	adds	r3, #61	; 0x3d
 800282c:	2201      	movs	r2, #1
 800282e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002830:	7bfa      	ldrb	r2, [r7, #15]
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	4613      	mov	r3, r2
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	1a9b      	subs	r3, r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	440b      	add	r3, r1
 800283e:	333c      	adds	r3, #60	; 0x3c
 8002840:	7bfa      	ldrb	r2, [r7, #15]
 8002842:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002844:	7bfa      	ldrb	r2, [r7, #15]
 8002846:	7bfb      	ldrb	r3, [r7, #15]
 8002848:	b298      	uxth	r0, r3
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	4613      	mov	r3, r2
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	1a9b      	subs	r3, r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	440b      	add	r3, r1
 8002856:	3342      	adds	r3, #66	; 0x42
 8002858:	4602      	mov	r2, r0
 800285a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800285c:	7bfa      	ldrb	r2, [r7, #15]
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	4613      	mov	r3, r2
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	1a9b      	subs	r3, r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	440b      	add	r3, r1
 800286a:	333f      	adds	r3, #63	; 0x3f
 800286c:	2200      	movs	r2, #0
 800286e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002870:	7bfa      	ldrb	r2, [r7, #15]
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	4613      	mov	r3, r2
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	1a9b      	subs	r3, r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	440b      	add	r3, r1
 800287e:	3344      	adds	r3, #68	; 0x44
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002884:	7bfa      	ldrb	r2, [r7, #15]
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	4613      	mov	r3, r2
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	1a9b      	subs	r3, r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	440b      	add	r3, r1
 8002892:	3348      	adds	r3, #72	; 0x48
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002898:	7bfa      	ldrb	r2, [r7, #15]
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	4613      	mov	r3, r2
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	1a9b      	subs	r3, r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	440b      	add	r3, r1
 80028a6:	3350      	adds	r3, #80	; 0x50
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028ac:	7bfb      	ldrb	r3, [r7, #15]
 80028ae:	3301      	adds	r3, #1
 80028b0:	73fb      	strb	r3, [r7, #15]
 80028b2:	7bfa      	ldrb	r2, [r7, #15]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d3af      	bcc.n	800281c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028bc:	2300      	movs	r3, #0
 80028be:	73fb      	strb	r3, [r7, #15]
 80028c0:	e044      	b.n	800294c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80028c2:	7bfa      	ldrb	r2, [r7, #15]
 80028c4:	6879      	ldr	r1, [r7, #4]
 80028c6:	4613      	mov	r3, r2
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	1a9b      	subs	r3, r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	440b      	add	r3, r1
 80028d0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80028d4:	2200      	movs	r2, #0
 80028d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80028d8:	7bfa      	ldrb	r2, [r7, #15]
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	4613      	mov	r3, r2
 80028de:	00db      	lsls	r3, r3, #3
 80028e0:	1a9b      	subs	r3, r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80028ea:	7bfa      	ldrb	r2, [r7, #15]
 80028ec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80028ee:	7bfa      	ldrb	r2, [r7, #15]
 80028f0:	6879      	ldr	r1, [r7, #4]
 80028f2:	4613      	mov	r3, r2
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	1a9b      	subs	r3, r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	440b      	add	r3, r1
 80028fc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002900:	2200      	movs	r2, #0
 8002902:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002904:	7bfa      	ldrb	r2, [r7, #15]
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	4613      	mov	r3, r2
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	1a9b      	subs	r3, r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002916:	2200      	movs	r2, #0
 8002918:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800291a:	7bfa      	ldrb	r2, [r7, #15]
 800291c:	6879      	ldr	r1, [r7, #4]
 800291e:	4613      	mov	r3, r2
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	1a9b      	subs	r3, r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	440b      	add	r3, r1
 8002928:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002930:	7bfa      	ldrb	r2, [r7, #15]
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	4613      	mov	r3, r2
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	1a9b      	subs	r3, r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002942:	2200      	movs	r2, #0
 8002944:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002946:	7bfb      	ldrb	r3, [r7, #15]
 8002948:	3301      	adds	r3, #1
 800294a:	73fb      	strb	r3, [r7, #15]
 800294c:	7bfa      	ldrb	r2, [r7, #15]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	429a      	cmp	r2, r3
 8002954:	d3b5      	bcc.n	80028c2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	603b      	str	r3, [r7, #0]
 800295c:	687e      	ldr	r6, [r7, #4]
 800295e:	466d      	mov	r5, sp
 8002960:	f106 0410 	add.w	r4, r6, #16
 8002964:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002966:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002968:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800296a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800296c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002970:	e885 0003 	stmia.w	r5, {r0, r1}
 8002974:	1d33      	adds	r3, r6, #4
 8002976:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002978:	6838      	ldr	r0, [r7, #0]
 800297a:	f002 fe07 	bl	800558c <USB_DevInit>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d005      	beq.n	8002990 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2202      	movs	r2, #2
 8002988:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e00d      	b.n	80029ac <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f003 fe4f 	bl	8006648 <USB_DevDisconnect>

  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3714      	adds	r7, #20
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029b4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d101      	bne.n	80029d0 <HAL_PCD_Start+0x1c>
 80029cc:	2302      	movs	r3, #2
 80029ce:	e020      	b.n	8002a12 <HAL_PCD_Start+0x5e>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d109      	bne.n	80029f4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d005      	beq.n	80029f4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f002 fd7b 	bl	80054f4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f003 fdff 	bl	8006606 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002a1a:	b590      	push	{r4, r7, lr}
 8002a1c:	b08d      	sub	sp, #52	; 0x34
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a28:	6a3b      	ldr	r3, [r7, #32]
 8002a2a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f003 febd 	bl	80067b0 <USB_GetMode>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f040 839d 	bne.w	8003178 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f003 fe21 	bl	800668a <USB_ReadInterrupts>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f000 8393 	beq.w	8003176 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f003 fe18 	bl	800668a <USB_ReadInterrupts>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d107      	bne.n	8002a74 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	695a      	ldr	r2, [r3, #20]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f002 0202 	and.w	r2, r2, #2
 8002a72:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f003 fe06 	bl	800668a <USB_ReadInterrupts>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	f003 0310 	and.w	r3, r3, #16
 8002a84:	2b10      	cmp	r3, #16
 8002a86:	d161      	bne.n	8002b4c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	699a      	ldr	r2, [r3, #24]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f022 0210 	bic.w	r2, r2, #16
 8002a96:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002a98:	6a3b      	ldr	r3, [r7, #32]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	f003 020f 	and.w	r2, r3, #15
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	1a9b      	subs	r3, r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	0c5b      	lsrs	r3, r3, #17
 8002abc:	f003 030f 	and.w	r3, r3, #15
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d124      	bne.n	8002b0e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002aca:	4013      	ands	r3, r2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d035      	beq.n	8002b3c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	091b      	lsrs	r3, r3, #4
 8002ad8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ada:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	6a38      	ldr	r0, [r7, #32]
 8002ae4:	f003 fc6c 	bl	80063c0 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	68da      	ldr	r2, [r3, #12]
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	091b      	lsrs	r3, r3, #4
 8002af0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002af4:	441a      	add	r2, r3
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	699a      	ldr	r2, [r3, #24]
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	091b      	lsrs	r3, r3, #4
 8002b02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b06:	441a      	add	r2, r3
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	619a      	str	r2, [r3, #24]
 8002b0c:	e016      	b.n	8002b3c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	0c5b      	lsrs	r3, r3, #17
 8002b12:	f003 030f 	and.w	r3, r3, #15
 8002b16:	2b06      	cmp	r3, #6
 8002b18:	d110      	bne.n	8002b3c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002b20:	2208      	movs	r2, #8
 8002b22:	4619      	mov	r1, r3
 8002b24:	6a38      	ldr	r0, [r7, #32]
 8002b26:	f003 fc4b 	bl	80063c0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	699a      	ldr	r2, [r3, #24]
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	091b      	lsrs	r3, r3, #4
 8002b32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b36:	441a      	add	r2, r3
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	699a      	ldr	r2, [r3, #24]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f042 0210 	orr.w	r2, r2, #16
 8002b4a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f003 fd9a 	bl	800668a <USB_ReadInterrupts>
 8002b56:	4603      	mov	r3, r0
 8002b58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b5c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002b60:	d16e      	bne.n	8002c40 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002b62:	2300      	movs	r3, #0
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f003 fda0 	bl	80066b0 <USB_ReadDevAllOutEpInterrupt>
 8002b70:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002b72:	e062      	b.n	8002c3a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d057      	beq.n	8002c2e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b84:	b2d2      	uxtb	r2, r2
 8002b86:	4611      	mov	r1, r2
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f003 fdc5 	bl	8006718 <USB_ReadDevOutEPInterrupt>
 8002b8e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00c      	beq.n	8002bb4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9c:	015a      	lsls	r2, r3, #5
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	2301      	movs	r3, #1
 8002baa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002bac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 fdb0 	bl	8003714 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	f003 0308 	and.w	r3, r3, #8
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00c      	beq.n	8002bd8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	015a      	lsls	r2, r3, #5
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bca:	461a      	mov	r2, r3
 8002bcc:	2308      	movs	r3, #8
 8002bce:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002bd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 feaa 	bl	800392c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	f003 0310 	and.w	r3, r3, #16
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d008      	beq.n	8002bf4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	015a      	lsls	r2, r3, #5
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	4413      	add	r3, r2
 8002bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bee:	461a      	mov	r2, r3
 8002bf0:	2310      	movs	r3, #16
 8002bf2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	f003 0320 	and.w	r3, r3, #32
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d008      	beq.n	8002c10 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c00:	015a      	lsls	r2, r3, #5
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	4413      	add	r3, r2
 8002c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	2320      	movs	r3, #32
 8002c0e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d009      	beq.n	8002c2e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1c:	015a      	lsls	r2, r3, #5
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	4413      	add	r3, r2
 8002c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c26:	461a      	mov	r2, r3
 8002c28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c2c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c30:	3301      	adds	r3, #1
 8002c32:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c36:	085b      	lsrs	r3, r3, #1
 8002c38:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d199      	bne.n	8002b74 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f003 fd20 	bl	800668a <USB_ReadInterrupts>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c50:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c54:	f040 80c0 	bne.w	8002dd8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f003 fd41 	bl	80066e4 <USB_ReadDevAllInEpInterrupt>
 8002c62:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002c64:	2300      	movs	r3, #0
 8002c66:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002c68:	e0b2      	b.n	8002dd0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f000 80a7 	beq.w	8002dc4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c7c:	b2d2      	uxtb	r2, r2
 8002c7e:	4611      	mov	r1, r2
 8002c80:	4618      	mov	r0, r3
 8002c82:	f003 fd67 	bl	8006754 <USB_ReadDevInEPInterrupt>
 8002c86:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d057      	beq.n	8002d42 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c94:	f003 030f 	and.w	r3, r3, #15
 8002c98:	2201      	movs	r2, #1
 8002c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ca6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	43db      	mvns	r3, r3
 8002cac:	69f9      	ldr	r1, [r7, #28]
 8002cae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb8:	015a      	lsls	r2, r3, #5
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d132      	bne.n	8002d36 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	1a9b      	subs	r3, r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	440b      	add	r3, r1
 8002cde:	3348      	adds	r3, #72	; 0x48
 8002ce0:	6819      	ldr	r1, [r3, #0]
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	1a9b      	subs	r3, r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4403      	add	r3, r0
 8002cf0:	3344      	adds	r3, #68	; 0x44
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4419      	add	r1, r3
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	1a9b      	subs	r3, r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4403      	add	r3, r0
 8002d04:	3348      	adds	r3, #72	; 0x48
 8002d06:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d113      	bne.n	8002d36 <HAL_PCD_IRQHandler+0x31c>
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d12:	4613      	mov	r3, r2
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	1a9b      	subs	r3, r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	440b      	add	r3, r1
 8002d1c:	3350      	adds	r3, #80	; 0x50
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d108      	bne.n	8002d36 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6818      	ldr	r0, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002d2e:	461a      	mov	r2, r3
 8002d30:	2101      	movs	r1, #1
 8002d32:	f003 fd6f 	bl	8006814 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f005 fd0e 	bl	800875e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	f003 0308 	and.w	r3, r3, #8
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d008      	beq.n	8002d5e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4e:	015a      	lsls	r2, r3, #5
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	4413      	add	r3, r2
 8002d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d58:	461a      	mov	r2, r3
 8002d5a:	2308      	movs	r3, #8
 8002d5c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	f003 0310 	and.w	r3, r3, #16
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d008      	beq.n	8002d7a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6a:	015a      	lsls	r2, r3, #5
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	4413      	add	r3, r2
 8002d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d74:	461a      	mov	r2, r3
 8002d76:	2310      	movs	r3, #16
 8002d78:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d008      	beq.n	8002d96 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d86:	015a      	lsls	r2, r3, #5
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d90:	461a      	mov	r2, r3
 8002d92:	2340      	movs	r3, #64	; 0x40
 8002d94:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d008      	beq.n	8002db2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da2:	015a      	lsls	r2, r3, #5
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	4413      	add	r3, r2
 8002da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dac:	461a      	mov	r2, r3
 8002dae:	2302      	movs	r3, #2
 8002db0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d003      	beq.n	8002dc4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002dbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 fc1b 	bl	80035fa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dcc:	085b      	lsrs	r3, r3, #1
 8002dce:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f47f af49 	bne.w	8002c6a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f003 fc54 	bl	800668a <USB_ReadInterrupts>
 8002de2:	4603      	mov	r3, r0
 8002de4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002de8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002dec:	d122      	bne.n	8002e34 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	69fa      	ldr	r2, [r7, #28]
 8002df8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dfc:	f023 0301 	bic.w	r3, r3, #1
 8002e00:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d108      	bne.n	8002e1e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002e14:	2100      	movs	r1, #0
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 fe26 	bl	8003a68 <HAL_PCDEx_LPM_Callback>
 8002e1c:	e002      	b.n	8002e24 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f005 fd14 	bl	800884c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	695a      	ldr	r2, [r3, #20]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002e32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f003 fc26 	bl	800668a <USB_ReadInterrupts>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e48:	d112      	bne.n	8002e70 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d102      	bne.n	8002e60 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f005 fcd0 	bl	8008800 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	695a      	ldr	r2, [r3, #20]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002e6e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f003 fc08 	bl	800668a <USB_ReadInterrupts>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e84:	f040 80c7 	bne.w	8003016 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	69fa      	ldr	r2, [r7, #28]
 8002e92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e96:	f023 0301 	bic.w	r3, r3, #1
 8002e9a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2110      	movs	r1, #16
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f002 fcd6 	bl	8005854 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eac:	e056      	b.n	8002f5c <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb0:	015a      	lsls	r2, r3, #5
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002eba:	461a      	mov	r2, r3
 8002ebc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002ec0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec4:	015a      	lsls	r2, r3, #5
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	4413      	add	r3, r2
 8002eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ed2:	0151      	lsls	r1, r2, #5
 8002ed4:	69fa      	ldr	r2, [r7, #28]
 8002ed6:	440a      	add	r2, r1
 8002ed8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002edc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ee0:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee4:	015a      	lsls	r2, r3, #5
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	4413      	add	r3, r2
 8002eea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ef2:	0151      	lsls	r1, r2, #5
 8002ef4:	69fa      	ldr	r2, [r7, #28]
 8002ef6:	440a      	add	r2, r1
 8002ef8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002efc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002f00:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f04:	015a      	lsls	r2, r3, #5
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	4413      	add	r3, r2
 8002f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f0e:	461a      	mov	r2, r3
 8002f10:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f14:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f18:	015a      	lsls	r2, r3, #5
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f26:	0151      	lsls	r1, r2, #5
 8002f28:	69fa      	ldr	r2, [r7, #28]
 8002f2a:	440a      	add	r2, r1
 8002f2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002f30:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002f34:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f38:	015a      	lsls	r2, r3, #5
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f46:	0151      	lsls	r1, r2, #5
 8002f48:	69fa      	ldr	r2, [r7, #28]
 8002f4a:	440a      	add	r2, r1
 8002f4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002f50:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002f54:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f58:	3301      	adds	r3, #1
 8002f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d3a3      	bcc.n	8002eae <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	69fa      	ldr	r2, [r7, #28]
 8002f70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f74:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002f78:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d016      	beq.n	8002fb0 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f8c:	69fa      	ldr	r2, [r7, #28]
 8002f8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f92:	f043 030b 	orr.w	r3, r3, #11
 8002f96:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa2:	69fa      	ldr	r2, [r7, #28]
 8002fa4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fa8:	f043 030b 	orr.w	r3, r3, #11
 8002fac:	6453      	str	r3, [r2, #68]	; 0x44
 8002fae:	e015      	b.n	8002fdc <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	69fa      	ldr	r2, [r7, #28]
 8002fba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fbe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002fc2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002fc6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	69fa      	ldr	r2, [r7, #28]
 8002fd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fd6:	f043 030b 	orr.w	r3, r3, #11
 8002fda:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	69fa      	ldr	r2, [r7, #28]
 8002fe6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fea:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002fee:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6818      	ldr	r0, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003000:	461a      	mov	r2, r3
 8003002:	f003 fc07 	bl	8006814 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	695a      	ldr	r2, [r3, #20]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003014:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4618      	mov	r0, r3
 800301c:	f003 fb35 	bl	800668a <USB_ReadInterrupts>
 8003020:	4603      	mov	r3, r0
 8003022:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003026:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800302a:	d124      	bne.n	8003076 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4618      	mov	r0, r3
 8003032:	f003 fbcb 	bl	80067cc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f002 fc6b 	bl	8005916 <USB_GetDevSpeed>
 8003040:	4603      	mov	r3, r0
 8003042:	461a      	mov	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681c      	ldr	r4, [r3, #0]
 800304c:	f001 f946 	bl	80042dc <HAL_RCC_GetHCLKFreq>
 8003050:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003056:	b2db      	uxtb	r3, r3
 8003058:	461a      	mov	r2, r3
 800305a:	4620      	mov	r0, r4
 800305c:	f002 f9a8 	bl	80053b0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f005 fba4 	bl	80087ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	695a      	ldr	r2, [r3, #20]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003074:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f003 fb05 	bl	800668a <USB_ReadInterrupts>
 8003080:	4603      	mov	r3, r0
 8003082:	f003 0308 	and.w	r3, r3, #8
 8003086:	2b08      	cmp	r3, #8
 8003088:	d10a      	bne.n	80030a0 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f005 fb81 	bl	8008792 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	695a      	ldr	r2, [r3, #20]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f002 0208 	and.w	r2, r2, #8
 800309e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f003 faf0 	bl	800668a <USB_ReadInterrupts>
 80030aa:	4603      	mov	r3, r0
 80030ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030b4:	d10f      	bne.n	80030d6 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80030b6:	2300      	movs	r3, #0
 80030b8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	4619      	mov	r1, r3
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f005 fbe3 	bl	800888c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	695a      	ldr	r2, [r3, #20]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80030d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f003 fad5 	bl	800668a <USB_ReadInterrupts>
 80030e0:	4603      	mov	r3, r0
 80030e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030ea:	d10f      	bne.n	800310c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80030f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	4619      	mov	r1, r3
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f005 fbb6 	bl	8008868 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	695a      	ldr	r2, [r3, #20]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800310a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4618      	mov	r0, r3
 8003112:	f003 faba 	bl	800668a <USB_ReadInterrupts>
 8003116:	4603      	mov	r3, r0
 8003118:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800311c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003120:	d10a      	bne.n	8003138 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f005 fbc4 	bl	80088b0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	695a      	ldr	r2, [r3, #20]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003136:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4618      	mov	r0, r3
 800313e:	f003 faa4 	bl	800668a <USB_ReadInterrupts>
 8003142:	4603      	mov	r3, r0
 8003144:	f003 0304 	and.w	r3, r3, #4
 8003148:	2b04      	cmp	r3, #4
 800314a:	d115      	bne.n	8003178 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	f003 0304 	and.w	r3, r3, #4
 800315a:	2b00      	cmp	r3, #0
 800315c:	d002      	beq.n	8003164 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f005 fbb4 	bl	80088cc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6859      	ldr	r1, [r3, #4]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	430a      	orrs	r2, r1
 8003172:	605a      	str	r2, [r3, #4]
 8003174:	e000      	b.n	8003178 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003176:	bf00      	nop
    }
  }
}
 8003178:	3734      	adds	r7, #52	; 0x34
 800317a:	46bd      	mov	sp, r7
 800317c:	bd90      	pop	{r4, r7, pc}

0800317e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b082      	sub	sp, #8
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
 8003186:	460b      	mov	r3, r1
 8003188:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003190:	2b01      	cmp	r3, #1
 8003192:	d101      	bne.n	8003198 <HAL_PCD_SetAddress+0x1a>
 8003194:	2302      	movs	r3, #2
 8003196:	e013      	b.n	80031c0 <HAL_PCD_SetAddress+0x42>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	78fa      	ldrb	r2, [r7, #3]
 80031a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	78fa      	ldrb	r2, [r7, #3]
 80031ae:	4611      	mov	r1, r2
 80031b0:	4618      	mov	r0, r3
 80031b2:	f003 fa02 	bl	80065ba <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3708      	adds	r7, #8
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	4608      	mov	r0, r1
 80031d2:	4611      	mov	r1, r2
 80031d4:	461a      	mov	r2, r3
 80031d6:	4603      	mov	r3, r0
 80031d8:	70fb      	strb	r3, [r7, #3]
 80031da:	460b      	mov	r3, r1
 80031dc:	803b      	strh	r3, [r7, #0]
 80031de:	4613      	mov	r3, r2
 80031e0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80031e2:	2300      	movs	r3, #0
 80031e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	da0f      	bge.n	800320e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031ee:	78fb      	ldrb	r3, [r7, #3]
 80031f0:	f003 020f 	and.w	r2, r3, #15
 80031f4:	4613      	mov	r3, r2
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	1a9b      	subs	r3, r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	3338      	adds	r3, #56	; 0x38
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	4413      	add	r3, r2
 8003202:	3304      	adds	r3, #4
 8003204:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2201      	movs	r2, #1
 800320a:	705a      	strb	r2, [r3, #1]
 800320c:	e00f      	b.n	800322e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800320e:	78fb      	ldrb	r3, [r7, #3]
 8003210:	f003 020f 	and.w	r2, r3, #15
 8003214:	4613      	mov	r3, r2
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	1a9b      	subs	r3, r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	4413      	add	r3, r2
 8003224:	3304      	adds	r3, #4
 8003226:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800322e:	78fb      	ldrb	r3, [r7, #3]
 8003230:	f003 030f 	and.w	r3, r3, #15
 8003234:	b2da      	uxtb	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800323a:	883a      	ldrh	r2, [r7, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	78ba      	ldrb	r2, [r7, #2]
 8003244:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	785b      	ldrb	r3, [r3, #1]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d004      	beq.n	8003258 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	b29a      	uxth	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003258:	78bb      	ldrb	r3, [r7, #2]
 800325a:	2b02      	cmp	r3, #2
 800325c:	d102      	bne.n	8003264 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800326a:	2b01      	cmp	r3, #1
 800326c:	d101      	bne.n	8003272 <HAL_PCD_EP_Open+0xaa>
 800326e:	2302      	movs	r3, #2
 8003270:	e00e      	b.n	8003290 <HAL_PCD_EP_Open+0xc8>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68f9      	ldr	r1, [r7, #12]
 8003280:	4618      	mov	r0, r3
 8003282:	f002 fb6d 	bl	8005960 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800328e:	7afb      	ldrb	r3, [r7, #11]
}
 8003290:	4618      	mov	r0, r3
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	460b      	mov	r3, r1
 80032a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	da0f      	bge.n	80032cc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032ac:	78fb      	ldrb	r3, [r7, #3]
 80032ae:	f003 020f 	and.w	r2, r3, #15
 80032b2:	4613      	mov	r3, r2
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	1a9b      	subs	r3, r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	3338      	adds	r3, #56	; 0x38
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	4413      	add	r3, r2
 80032c0:	3304      	adds	r3, #4
 80032c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2201      	movs	r2, #1
 80032c8:	705a      	strb	r2, [r3, #1]
 80032ca:	e00f      	b.n	80032ec <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032cc:	78fb      	ldrb	r3, [r7, #3]
 80032ce:	f003 020f 	and.w	r2, r3, #15
 80032d2:	4613      	mov	r3, r2
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	1a9b      	subs	r3, r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	4413      	add	r3, r2
 80032e2:	3304      	adds	r3, #4
 80032e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80032ec:	78fb      	ldrb	r3, [r7, #3]
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	b2da      	uxtb	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d101      	bne.n	8003306 <HAL_PCD_EP_Close+0x6e>
 8003302:	2302      	movs	r3, #2
 8003304:	e00e      	b.n	8003324 <HAL_PCD_EP_Close+0x8c>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68f9      	ldr	r1, [r7, #12]
 8003314:	4618      	mov	r0, r3
 8003316:	f002 fbab 	bl	8005a70 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	607a      	str	r2, [r7, #4]
 8003336:	603b      	str	r3, [r7, #0]
 8003338:	460b      	mov	r3, r1
 800333a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800333c:	7afb      	ldrb	r3, [r7, #11]
 800333e:	f003 020f 	and.w	r2, r3, #15
 8003342:	4613      	mov	r3, r2
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	1a9b      	subs	r3, r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	4413      	add	r3, r2
 8003352:	3304      	adds	r3, #4
 8003354:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	2200      	movs	r2, #0
 8003366:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	2200      	movs	r2, #0
 800336c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800336e:	7afb      	ldrb	r3, [r7, #11]
 8003370:	f003 030f 	and.w	r3, r3, #15
 8003374:	b2da      	uxtb	r2, r3
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d102      	bne.n	8003388 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003388:	7afb      	ldrb	r3, [r7, #11]
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	2b00      	cmp	r3, #0
 8003390:	d109      	bne.n	80033a6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6818      	ldr	r0, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	b2db      	uxtb	r3, r3
 800339c:	461a      	mov	r2, r3
 800339e:	6979      	ldr	r1, [r7, #20]
 80033a0:	f002 fe86 	bl	80060b0 <USB_EP0StartXfer>
 80033a4:	e008      	b.n	80033b8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6818      	ldr	r0, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	461a      	mov	r2, r3
 80033b2:	6979      	ldr	r1, [r7, #20]
 80033b4:	f002 fc38 	bl	8005c28 <USB_EPStartXfer>
  }

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3718      	adds	r7, #24
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033c2:	b480      	push	{r7}
 80033c4:	b083      	sub	sp, #12
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
 80033ca:	460b      	mov	r3, r1
 80033cc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80033ce:	78fb      	ldrb	r3, [r7, #3]
 80033d0:	f003 020f 	and.w	r2, r3, #15
 80033d4:	6879      	ldr	r1, [r7, #4]
 80033d6:	4613      	mov	r3, r2
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	1a9b      	subs	r3, r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	440b      	add	r3, r1
 80033e0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80033e4:	681b      	ldr	r3, [r3, #0]
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b086      	sub	sp, #24
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	60f8      	str	r0, [r7, #12]
 80033fa:	607a      	str	r2, [r7, #4]
 80033fc:	603b      	str	r3, [r7, #0]
 80033fe:	460b      	mov	r3, r1
 8003400:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003402:	7afb      	ldrb	r3, [r7, #11]
 8003404:	f003 020f 	and.w	r2, r3, #15
 8003408:	4613      	mov	r3, r2
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	1a9b      	subs	r3, r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	3338      	adds	r3, #56	; 0x38
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	4413      	add	r3, r2
 8003416:	3304      	adds	r3, #4
 8003418:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	2200      	movs	r2, #0
 800342a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	2201      	movs	r2, #1
 8003430:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003432:	7afb      	ldrb	r3, [r7, #11]
 8003434:	f003 030f 	and.w	r3, r3, #15
 8003438:	b2da      	uxtb	r2, r3
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d102      	bne.n	800344c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800344c:	7afb      	ldrb	r3, [r7, #11]
 800344e:	f003 030f 	and.w	r3, r3, #15
 8003452:	2b00      	cmp	r3, #0
 8003454:	d109      	bne.n	800346a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6818      	ldr	r0, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	b2db      	uxtb	r3, r3
 8003460:	461a      	mov	r2, r3
 8003462:	6979      	ldr	r1, [r7, #20]
 8003464:	f002 fe24 	bl	80060b0 <USB_EP0StartXfer>
 8003468:	e008      	b.n	800347c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6818      	ldr	r0, [r3, #0]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	b2db      	uxtb	r3, r3
 8003474:	461a      	mov	r2, r3
 8003476:	6979      	ldr	r1, [r7, #20]
 8003478:	f002 fbd6 	bl	8005c28 <USB_EPStartXfer>
  }

  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3718      	adds	r7, #24
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003486:	b580      	push	{r7, lr}
 8003488:	b084      	sub	sp, #16
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
 800348e:	460b      	mov	r3, r1
 8003490:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003492:	78fb      	ldrb	r3, [r7, #3]
 8003494:	f003 020f 	and.w	r2, r3, #15
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	429a      	cmp	r2, r3
 800349e:	d901      	bls.n	80034a4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e050      	b.n	8003546 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80034a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	da0f      	bge.n	80034cc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034ac:	78fb      	ldrb	r3, [r7, #3]
 80034ae:	f003 020f 	and.w	r2, r3, #15
 80034b2:	4613      	mov	r3, r2
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	1a9b      	subs	r3, r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	3338      	adds	r3, #56	; 0x38
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	4413      	add	r3, r2
 80034c0:	3304      	adds	r3, #4
 80034c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2201      	movs	r2, #1
 80034c8:	705a      	strb	r2, [r3, #1]
 80034ca:	e00d      	b.n	80034e8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80034cc:	78fa      	ldrb	r2, [r7, #3]
 80034ce:	4613      	mov	r3, r2
 80034d0:	00db      	lsls	r3, r3, #3
 80034d2:	1a9b      	subs	r3, r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	4413      	add	r3, r2
 80034de:	3304      	adds	r3, #4
 80034e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2201      	movs	r2, #1
 80034ec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034ee:	78fb      	ldrb	r3, [r7, #3]
 80034f0:	f003 030f 	and.w	r3, r3, #15
 80034f4:	b2da      	uxtb	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003500:	2b01      	cmp	r3, #1
 8003502:	d101      	bne.n	8003508 <HAL_PCD_EP_SetStall+0x82>
 8003504:	2302      	movs	r3, #2
 8003506:	e01e      	b.n	8003546 <HAL_PCD_EP_SetStall+0xc0>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68f9      	ldr	r1, [r7, #12]
 8003516:	4618      	mov	r0, r3
 8003518:	f002 ff7b 	bl	8006412 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800351c:	78fb      	ldrb	r3, [r7, #3]
 800351e:	f003 030f 	and.w	r3, r3, #15
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10a      	bne.n	800353c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6818      	ldr	r0, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	b2d9      	uxtb	r1, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003536:	461a      	mov	r2, r3
 8003538:	f003 f96c 	bl	8006814 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b084      	sub	sp, #16
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
 8003556:	460b      	mov	r3, r1
 8003558:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800355a:	78fb      	ldrb	r3, [r7, #3]
 800355c:	f003 020f 	and.w	r2, r3, #15
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	429a      	cmp	r2, r3
 8003566:	d901      	bls.n	800356c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e042      	b.n	80035f2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800356c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003570:	2b00      	cmp	r3, #0
 8003572:	da0f      	bge.n	8003594 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003574:	78fb      	ldrb	r3, [r7, #3]
 8003576:	f003 020f 	and.w	r2, r3, #15
 800357a:	4613      	mov	r3, r2
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	1a9b      	subs	r3, r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	3338      	adds	r3, #56	; 0x38
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	4413      	add	r3, r2
 8003588:	3304      	adds	r3, #4
 800358a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2201      	movs	r2, #1
 8003590:	705a      	strb	r2, [r3, #1]
 8003592:	e00f      	b.n	80035b4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003594:	78fb      	ldrb	r3, [r7, #3]
 8003596:	f003 020f 	and.w	r2, r3, #15
 800359a:	4613      	mov	r3, r2
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	1a9b      	subs	r3, r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	4413      	add	r3, r2
 80035aa:	3304      	adds	r3, #4
 80035ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035ba:	78fb      	ldrb	r3, [r7, #3]
 80035bc:	f003 030f 	and.w	r3, r3, #15
 80035c0:	b2da      	uxtb	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d101      	bne.n	80035d4 <HAL_PCD_EP_ClrStall+0x86>
 80035d0:	2302      	movs	r3, #2
 80035d2:	e00e      	b.n	80035f2 <HAL_PCD_EP_ClrStall+0xa4>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68f9      	ldr	r1, [r7, #12]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f002 ff83 	bl	80064ee <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b08a      	sub	sp, #40	; 0x28
 80035fe:	af02      	add	r7, sp, #8
 8003600:	6078      	str	r0, [r7, #4]
 8003602:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	4613      	mov	r3, r2
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	1a9b      	subs	r3, r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	3338      	adds	r3, #56	; 0x38
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	4413      	add	r3, r2
 800361e:	3304      	adds	r3, #4
 8003620:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	699a      	ldr	r2, [r3, #24]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	429a      	cmp	r2, r3
 800362c:	d901      	bls.n	8003632 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e06c      	b.n	800370c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	695a      	ldr	r2, [r3, #20]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	69fa      	ldr	r2, [r7, #28]
 8003644:	429a      	cmp	r2, r3
 8003646:	d902      	bls.n	800364e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	3303      	adds	r3, #3
 8003652:	089b      	lsrs	r3, r3, #2
 8003654:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003656:	e02b      	b.n	80036b0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	695a      	ldr	r2, [r3, #20]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	69fa      	ldr	r2, [r7, #28]
 800366a:	429a      	cmp	r2, r3
 800366c:	d902      	bls.n	8003674 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	3303      	adds	r3, #3
 8003678:	089b      	lsrs	r3, r3, #2
 800367a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	68d9      	ldr	r1, [r3, #12]
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	b2da      	uxtb	r2, r3
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800368c:	b2db      	uxtb	r3, r3
 800368e:	9300      	str	r3, [sp, #0]
 8003690:	4603      	mov	r3, r0
 8003692:	6978      	ldr	r0, [r7, #20]
 8003694:	f002 fe5f 	bl	8006356 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	68da      	ldr	r2, [r3, #12]
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	441a      	add	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	699a      	ldr	r2, [r3, #24]
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	441a      	add	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	015a      	lsls	r2, r3, #5
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	4413      	add	r3, r2
 80036b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	b29b      	uxth	r3, r3
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d809      	bhi.n	80036da <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	699a      	ldr	r2, [r3, #24]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d203      	bcs.n	80036da <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1be      	bne.n	8003658 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	695a      	ldr	r2, [r3, #20]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d811      	bhi.n	800370a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	f003 030f 	and.w	r3, r3, #15
 80036ec:	2201      	movs	r2, #1
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
 80036f2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	43db      	mvns	r3, r3
 8003700:	6939      	ldr	r1, [r7, #16]
 8003702:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003706:	4013      	ands	r3, r2
 8003708:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3720      	adds	r7, #32
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	333c      	adds	r3, #60	; 0x3c
 800372c:	3304      	adds	r3, #4
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	015a      	lsls	r2, r3, #5
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	4413      	add	r3, r2
 800373a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	2b01      	cmp	r3, #1
 8003748:	f040 80a0 	bne.w	800388c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	f003 0308 	and.w	r3, r3, #8
 8003752:	2b00      	cmp	r3, #0
 8003754:	d015      	beq.n	8003782 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	4a72      	ldr	r2, [pc, #456]	; (8003924 <PCD_EP_OutXfrComplete_int+0x210>)
 800375a:	4293      	cmp	r3, r2
 800375c:	f240 80dd 	bls.w	800391a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003766:	2b00      	cmp	r3, #0
 8003768:	f000 80d7 	beq.w	800391a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	015a      	lsls	r2, r3, #5
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	4413      	add	r3, r2
 8003774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003778:	461a      	mov	r2, r3
 800377a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800377e:	6093      	str	r3, [r2, #8]
 8003780:	e0cb      	b.n	800391a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	f003 0320 	and.w	r3, r3, #32
 8003788:	2b00      	cmp	r3, #0
 800378a:	d009      	beq.n	80037a0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	015a      	lsls	r2, r3, #5
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	4413      	add	r3, r2
 8003794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003798:	461a      	mov	r2, r3
 800379a:	2320      	movs	r3, #32
 800379c:	6093      	str	r3, [r2, #8]
 800379e:	e0bc      	b.n	800391a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f040 80b7 	bne.w	800391a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	4a5d      	ldr	r2, [pc, #372]	; (8003924 <PCD_EP_OutXfrComplete_int+0x210>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d90f      	bls.n	80037d4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00a      	beq.n	80037d4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	015a      	lsls	r2, r3, #5
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	4413      	add	r3, r2
 80037c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ca:	461a      	mov	r2, r3
 80037cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037d0:	6093      	str	r3, [r2, #8]
 80037d2:	e0a2      	b.n	800391a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80037d4:	6879      	ldr	r1, [r7, #4]
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	4613      	mov	r3, r2
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	1a9b      	subs	r3, r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	440b      	add	r3, r1
 80037e2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80037e6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	0159      	lsls	r1, r3, #5
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	440b      	add	r3, r1
 80037f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80037fa:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	4613      	mov	r3, r2
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	1a9b      	subs	r3, r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	4403      	add	r3, r0
 800380a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800380e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003810:	6879      	ldr	r1, [r7, #4]
 8003812:	683a      	ldr	r2, [r7, #0]
 8003814:	4613      	mov	r3, r2
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	1a9b      	subs	r3, r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	440b      	add	r3, r1
 800381e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003822:	6819      	ldr	r1, [r3, #0]
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	4613      	mov	r3, r2
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	1a9b      	subs	r3, r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	4403      	add	r3, r0
 8003832:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4419      	add	r1, r3
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	4613      	mov	r3, r2
 8003840:	00db      	lsls	r3, r3, #3
 8003842:	1a9b      	subs	r3, r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4403      	add	r3, r0
 8003848:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800384c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d114      	bne.n	800387e <PCD_EP_OutXfrComplete_int+0x16a>
 8003854:	6879      	ldr	r1, [r7, #4]
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	4613      	mov	r3, r2
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	1a9b      	subs	r3, r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	440b      	add	r3, r1
 8003862:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d108      	bne.n	800387e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6818      	ldr	r0, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003876:	461a      	mov	r2, r3
 8003878:	2101      	movs	r1, #1
 800387a:	f002 ffcb 	bl	8006814 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	b2db      	uxtb	r3, r3
 8003882:	4619      	mov	r1, r3
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f004 ff4f 	bl	8008728 <HAL_PCD_DataOutStageCallback>
 800388a:	e046      	b.n	800391a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	4a26      	ldr	r2, [pc, #152]	; (8003928 <PCD_EP_OutXfrComplete_int+0x214>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d124      	bne.n	80038de <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00a      	beq.n	80038b4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	015a      	lsls	r2, r3, #5
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	4413      	add	r3, r2
 80038a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038aa:	461a      	mov	r2, r3
 80038ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038b0:	6093      	str	r3, [r2, #8]
 80038b2:	e032      	b.n	800391a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	f003 0320 	and.w	r3, r3, #32
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d008      	beq.n	80038d0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	015a      	lsls	r2, r3, #5
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	4413      	add	r3, r2
 80038c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ca:	461a      	mov	r2, r3
 80038cc:	2320      	movs	r3, #32
 80038ce:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	4619      	mov	r1, r3
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f004 ff26 	bl	8008728 <HAL_PCD_DataOutStageCallback>
 80038dc:	e01d      	b.n	800391a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d114      	bne.n	800390e <PCD_EP_OutXfrComplete_int+0x1fa>
 80038e4:	6879      	ldr	r1, [r7, #4]
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	4613      	mov	r3, r2
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	1a9b      	subs	r3, r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	440b      	add	r3, r1
 80038f2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d108      	bne.n	800390e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6818      	ldr	r0, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003906:	461a      	mov	r2, r3
 8003908:	2100      	movs	r1, #0
 800390a:	f002 ff83 	bl	8006814 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	b2db      	uxtb	r3, r3
 8003912:	4619      	mov	r1, r3
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f004 ff07 	bl	8008728 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3718      	adds	r7, #24
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	4f54300a 	.word	0x4f54300a
 8003928:	4f54310a 	.word	0x4f54310a

0800392c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	333c      	adds	r3, #60	; 0x3c
 8003944:	3304      	adds	r3, #4
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	015a      	lsls	r2, r3, #5
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	4413      	add	r3, r2
 8003952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	4a15      	ldr	r2, [pc, #84]	; (80039b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d90e      	bls.n	8003980 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003968:	2b00      	cmp	r3, #0
 800396a:	d009      	beq.n	8003980 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	015a      	lsls	r2, r3, #5
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	4413      	add	r3, r2
 8003974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003978:	461a      	mov	r2, r3
 800397a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800397e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f004 febf 	bl	8008704 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	4a0a      	ldr	r2, [pc, #40]	; (80039b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d90c      	bls.n	80039a8 <PCD_EP_OutSetupPacket_int+0x7c>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d108      	bne.n	80039a8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6818      	ldr	r0, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80039a0:	461a      	mov	r2, r3
 80039a2:	2101      	movs	r1, #1
 80039a4:	f002 ff36 	bl	8006814 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3718      	adds	r7, #24
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	4f54300a 	.word	0x4f54300a

080039b8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	460b      	mov	r3, r1
 80039c2:	70fb      	strb	r3, [r7, #3]
 80039c4:	4613      	mov	r3, r2
 80039c6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80039d0:	78fb      	ldrb	r3, [r7, #3]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d107      	bne.n	80039e6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80039d6:	883b      	ldrh	r3, [r7, #0]
 80039d8:	0419      	lsls	r1, r3, #16
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68ba      	ldr	r2, [r7, #8]
 80039e0:	430a      	orrs	r2, r1
 80039e2:	629a      	str	r2, [r3, #40]	; 0x28
 80039e4:	e028      	b.n	8003a38 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ec:	0c1b      	lsrs	r3, r3, #16
 80039ee:	68ba      	ldr	r2, [r7, #8]
 80039f0:	4413      	add	r3, r2
 80039f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80039f4:	2300      	movs	r3, #0
 80039f6:	73fb      	strb	r3, [r7, #15]
 80039f8:	e00d      	b.n	8003a16 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	7bfb      	ldrb	r3, [r7, #15]
 8003a00:	3340      	adds	r3, #64	; 0x40
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4413      	add	r3, r2
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	0c1b      	lsrs	r3, r3, #16
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a10:	7bfb      	ldrb	r3, [r7, #15]
 8003a12:	3301      	adds	r3, #1
 8003a14:	73fb      	strb	r3, [r7, #15]
 8003a16:	7bfa      	ldrb	r2, [r7, #15]
 8003a18:	78fb      	ldrb	r3, [r7, #3]
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d3ec      	bcc.n	80039fa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003a20:	883b      	ldrh	r3, [r7, #0]
 8003a22:	0418      	lsls	r0, r3, #16
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6819      	ldr	r1, [r3, #0]
 8003a28:	78fb      	ldrb	r3, [r7, #3]
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	68ba      	ldr	r2, [r7, #8]
 8003a2e:	4302      	orrs	r2, r0
 8003a30:	3340      	adds	r3, #64	; 0x40
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	440b      	add	r3, r1
 8003a36:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
 8003a4e:	460b      	mov	r3, r1
 8003a50:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	887a      	ldrh	r2, [r7, #2]
 8003a58:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	460b      	mov	r3, r1
 8003a72:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e25b      	b.n	8003f4a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d075      	beq.n	8003b8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a9e:	4ba3      	ldr	r3, [pc, #652]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 030c 	and.w	r3, r3, #12
 8003aa6:	2b04      	cmp	r3, #4
 8003aa8:	d00c      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003aaa:	4ba0      	ldr	r3, [pc, #640]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ab2:	2b08      	cmp	r3, #8
 8003ab4:	d112      	bne.n	8003adc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ab6:	4b9d      	ldr	r3, [pc, #628]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003abe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ac2:	d10b      	bne.n	8003adc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac4:	4b99      	ldr	r3, [pc, #612]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d05b      	beq.n	8003b88 <HAL_RCC_OscConfig+0x108>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d157      	bne.n	8003b88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e236      	b.n	8003f4a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ae4:	d106      	bne.n	8003af4 <HAL_RCC_OscConfig+0x74>
 8003ae6:	4b91      	ldr	r3, [pc, #580]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a90      	ldr	r2, [pc, #576]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af0:	6013      	str	r3, [r2, #0]
 8003af2:	e01d      	b.n	8003b30 <HAL_RCC_OscConfig+0xb0>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003afc:	d10c      	bne.n	8003b18 <HAL_RCC_OscConfig+0x98>
 8003afe:	4b8b      	ldr	r3, [pc, #556]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a8a      	ldr	r2, [pc, #552]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003b04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b08:	6013      	str	r3, [r2, #0]
 8003b0a:	4b88      	ldr	r3, [pc, #544]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a87      	ldr	r2, [pc, #540]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	e00b      	b.n	8003b30 <HAL_RCC_OscConfig+0xb0>
 8003b18:	4b84      	ldr	r3, [pc, #528]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a83      	ldr	r2, [pc, #524]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003b1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b22:	6013      	str	r3, [r2, #0]
 8003b24:	4b81      	ldr	r3, [pc, #516]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a80      	ldr	r2, [pc, #512]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d013      	beq.n	8003b60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b38:	f7fd fa78 	bl	800102c <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b3e:	e008      	b.n	8003b52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b40:	f7fd fa74 	bl	800102c <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b64      	cmp	r3, #100	; 0x64
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e1fb      	b.n	8003f4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b52:	4b76      	ldr	r3, [pc, #472]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d0f0      	beq.n	8003b40 <HAL_RCC_OscConfig+0xc0>
 8003b5e:	e014      	b.n	8003b8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b60:	f7fd fa64 	bl	800102c <HAL_GetTick>
 8003b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b66:	e008      	b.n	8003b7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b68:	f7fd fa60 	bl	800102c <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b64      	cmp	r3, #100	; 0x64
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e1e7      	b.n	8003f4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b7a:	4b6c      	ldr	r3, [pc, #432]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1f0      	bne.n	8003b68 <HAL_RCC_OscConfig+0xe8>
 8003b86:	e000      	b.n	8003b8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d063      	beq.n	8003c5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b96:	4b65      	ldr	r3, [pc, #404]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f003 030c 	and.w	r3, r3, #12
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00b      	beq.n	8003bba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ba2:	4b62      	ldr	r3, [pc, #392]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003baa:	2b08      	cmp	r3, #8
 8003bac:	d11c      	bne.n	8003be8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bae:	4b5f      	ldr	r3, [pc, #380]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d116      	bne.n	8003be8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bba:	4b5c      	ldr	r3, [pc, #368]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d005      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x152>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d001      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e1bb      	b.n	8003f4a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bd2:	4b56      	ldr	r3, [pc, #344]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	4952      	ldr	r1, [pc, #328]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003be6:	e03a      	b.n	8003c5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d020      	beq.n	8003c32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bf0:	4b4f      	ldr	r3, [pc, #316]	; (8003d30 <HAL_RCC_OscConfig+0x2b0>)
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf6:	f7fd fa19 	bl	800102c <HAL_GetTick>
 8003bfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bfc:	e008      	b.n	8003c10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bfe:	f7fd fa15 	bl	800102c <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d901      	bls.n	8003c10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e19c      	b.n	8003f4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c10:	4b46      	ldr	r3, [pc, #280]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d0f0      	beq.n	8003bfe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c1c:	4b43      	ldr	r3, [pc, #268]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	00db      	lsls	r3, r3, #3
 8003c2a:	4940      	ldr	r1, [pc, #256]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	600b      	str	r3, [r1, #0]
 8003c30:	e015      	b.n	8003c5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c32:	4b3f      	ldr	r3, [pc, #252]	; (8003d30 <HAL_RCC_OscConfig+0x2b0>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c38:	f7fd f9f8 	bl	800102c <HAL_GetTick>
 8003c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c3e:	e008      	b.n	8003c52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c40:	f7fd f9f4 	bl	800102c <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e17b      	b.n	8003f4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c52:	4b36      	ldr	r3, [pc, #216]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1f0      	bne.n	8003c40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0308 	and.w	r3, r3, #8
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d030      	beq.n	8003ccc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d016      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c72:	4b30      	ldr	r3, [pc, #192]	; (8003d34 <HAL_RCC_OscConfig+0x2b4>)
 8003c74:	2201      	movs	r2, #1
 8003c76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c78:	f7fd f9d8 	bl	800102c <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c80:	f7fd f9d4 	bl	800102c <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e15b      	b.n	8003f4a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c92:	4b26      	ldr	r3, [pc, #152]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003c94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d0f0      	beq.n	8003c80 <HAL_RCC_OscConfig+0x200>
 8003c9e:	e015      	b.n	8003ccc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ca0:	4b24      	ldr	r3, [pc, #144]	; (8003d34 <HAL_RCC_OscConfig+0x2b4>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ca6:	f7fd f9c1 	bl	800102c <HAL_GetTick>
 8003caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cac:	e008      	b.n	8003cc0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cae:	f7fd f9bd 	bl	800102c <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d901      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e144      	b.n	8003f4a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cc0:	4b1a      	ldr	r3, [pc, #104]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003cc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1f0      	bne.n	8003cae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0304 	and.w	r3, r3, #4
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 80a0 	beq.w	8003e1a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cde:	4b13      	ldr	r3, [pc, #76]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10f      	bne.n	8003d0a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cea:	2300      	movs	r3, #0
 8003cec:	60bb      	str	r3, [r7, #8]
 8003cee:	4b0f      	ldr	r3, [pc, #60]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	4a0e      	ldr	r2, [pc, #56]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8003cfa:	4b0c      	ldr	r3, [pc, #48]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d02:	60bb      	str	r3, [r7, #8]
 8003d04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d06:	2301      	movs	r3, #1
 8003d08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d0a:	4b0b      	ldr	r3, [pc, #44]	; (8003d38 <HAL_RCC_OscConfig+0x2b8>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d121      	bne.n	8003d5a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d16:	4b08      	ldr	r3, [pc, #32]	; (8003d38 <HAL_RCC_OscConfig+0x2b8>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a07      	ldr	r2, [pc, #28]	; (8003d38 <HAL_RCC_OscConfig+0x2b8>)
 8003d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d22:	f7fd f983 	bl	800102c <HAL_GetTick>
 8003d26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d28:	e011      	b.n	8003d4e <HAL_RCC_OscConfig+0x2ce>
 8003d2a:	bf00      	nop
 8003d2c:	40023800 	.word	0x40023800
 8003d30:	42470000 	.word	0x42470000
 8003d34:	42470e80 	.word	0x42470e80
 8003d38:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d3c:	f7fd f976 	bl	800102c <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e0fd      	b.n	8003f4a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d4e:	4b81      	ldr	r3, [pc, #516]	; (8003f54 <HAL_RCC_OscConfig+0x4d4>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d0f0      	beq.n	8003d3c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d106      	bne.n	8003d70 <HAL_RCC_OscConfig+0x2f0>
 8003d62:	4b7d      	ldr	r3, [pc, #500]	; (8003f58 <HAL_RCC_OscConfig+0x4d8>)
 8003d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d66:	4a7c      	ldr	r2, [pc, #496]	; (8003f58 <HAL_RCC_OscConfig+0x4d8>)
 8003d68:	f043 0301 	orr.w	r3, r3, #1
 8003d6c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d6e:	e01c      	b.n	8003daa <HAL_RCC_OscConfig+0x32a>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	2b05      	cmp	r3, #5
 8003d76:	d10c      	bne.n	8003d92 <HAL_RCC_OscConfig+0x312>
 8003d78:	4b77      	ldr	r3, [pc, #476]	; (8003f58 <HAL_RCC_OscConfig+0x4d8>)
 8003d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7c:	4a76      	ldr	r2, [pc, #472]	; (8003f58 <HAL_RCC_OscConfig+0x4d8>)
 8003d7e:	f043 0304 	orr.w	r3, r3, #4
 8003d82:	6713      	str	r3, [r2, #112]	; 0x70
 8003d84:	4b74      	ldr	r3, [pc, #464]	; (8003f58 <HAL_RCC_OscConfig+0x4d8>)
 8003d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d88:	4a73      	ldr	r2, [pc, #460]	; (8003f58 <HAL_RCC_OscConfig+0x4d8>)
 8003d8a:	f043 0301 	orr.w	r3, r3, #1
 8003d8e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d90:	e00b      	b.n	8003daa <HAL_RCC_OscConfig+0x32a>
 8003d92:	4b71      	ldr	r3, [pc, #452]	; (8003f58 <HAL_RCC_OscConfig+0x4d8>)
 8003d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d96:	4a70      	ldr	r2, [pc, #448]	; (8003f58 <HAL_RCC_OscConfig+0x4d8>)
 8003d98:	f023 0301 	bic.w	r3, r3, #1
 8003d9c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d9e:	4b6e      	ldr	r3, [pc, #440]	; (8003f58 <HAL_RCC_OscConfig+0x4d8>)
 8003da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da2:	4a6d      	ldr	r2, [pc, #436]	; (8003f58 <HAL_RCC_OscConfig+0x4d8>)
 8003da4:	f023 0304 	bic.w	r3, r3, #4
 8003da8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d015      	beq.n	8003dde <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db2:	f7fd f93b 	bl	800102c <HAL_GetTick>
 8003db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003db8:	e00a      	b.n	8003dd0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dba:	f7fd f937 	bl	800102c <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d901      	bls.n	8003dd0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e0bc      	b.n	8003f4a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dd0:	4b61      	ldr	r3, [pc, #388]	; (8003f58 <HAL_RCC_OscConfig+0x4d8>)
 8003dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d0ee      	beq.n	8003dba <HAL_RCC_OscConfig+0x33a>
 8003ddc:	e014      	b.n	8003e08 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dde:	f7fd f925 	bl	800102c <HAL_GetTick>
 8003de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003de4:	e00a      	b.n	8003dfc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003de6:	f7fd f921 	bl	800102c <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d901      	bls.n	8003dfc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e0a6      	b.n	8003f4a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dfc:	4b56      	ldr	r3, [pc, #344]	; (8003f58 <HAL_RCC_OscConfig+0x4d8>)
 8003dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1ee      	bne.n	8003de6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e08:	7dfb      	ldrb	r3, [r7, #23]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d105      	bne.n	8003e1a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e0e:	4b52      	ldr	r3, [pc, #328]	; (8003f58 <HAL_RCC_OscConfig+0x4d8>)
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	4a51      	ldr	r2, [pc, #324]	; (8003f58 <HAL_RCC_OscConfig+0x4d8>)
 8003e14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e18:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	f000 8092 	beq.w	8003f48 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e24:	4b4c      	ldr	r3, [pc, #304]	; (8003f58 <HAL_RCC_OscConfig+0x4d8>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f003 030c 	and.w	r3, r3, #12
 8003e2c:	2b08      	cmp	r3, #8
 8003e2e:	d05c      	beq.n	8003eea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d141      	bne.n	8003ebc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e38:	4b48      	ldr	r3, [pc, #288]	; (8003f5c <HAL_RCC_OscConfig+0x4dc>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e3e:	f7fd f8f5 	bl	800102c <HAL_GetTick>
 8003e42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e44:	e008      	b.n	8003e58 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e46:	f7fd f8f1 	bl	800102c <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d901      	bls.n	8003e58 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e078      	b.n	8003f4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e58:	4b3f      	ldr	r3, [pc, #252]	; (8003f58 <HAL_RCC_OscConfig+0x4d8>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1f0      	bne.n	8003e46 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	69da      	ldr	r2, [r3, #28]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	431a      	orrs	r2, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e72:	019b      	lsls	r3, r3, #6
 8003e74:	431a      	orrs	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7a:	085b      	lsrs	r3, r3, #1
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	041b      	lsls	r3, r3, #16
 8003e80:	431a      	orrs	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e86:	061b      	lsls	r3, r3, #24
 8003e88:	4933      	ldr	r1, [pc, #204]	; (8003f58 <HAL_RCC_OscConfig+0x4d8>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e8e:	4b33      	ldr	r3, [pc, #204]	; (8003f5c <HAL_RCC_OscConfig+0x4dc>)
 8003e90:	2201      	movs	r2, #1
 8003e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e94:	f7fd f8ca 	bl	800102c <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e9a:	e008      	b.n	8003eae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e9c:	f7fd f8c6 	bl	800102c <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e04d      	b.n	8003f4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eae:	4b2a      	ldr	r3, [pc, #168]	; (8003f58 <HAL_RCC_OscConfig+0x4d8>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0f0      	beq.n	8003e9c <HAL_RCC_OscConfig+0x41c>
 8003eba:	e045      	b.n	8003f48 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ebc:	4b27      	ldr	r3, [pc, #156]	; (8003f5c <HAL_RCC_OscConfig+0x4dc>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec2:	f7fd f8b3 	bl	800102c <HAL_GetTick>
 8003ec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ec8:	e008      	b.n	8003edc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eca:	f7fd f8af 	bl	800102c <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d901      	bls.n	8003edc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e036      	b.n	8003f4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003edc:	4b1e      	ldr	r3, [pc, #120]	; (8003f58 <HAL_RCC_OscConfig+0x4d8>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1f0      	bne.n	8003eca <HAL_RCC_OscConfig+0x44a>
 8003ee8:	e02e      	b.n	8003f48 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d101      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e029      	b.n	8003f4a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ef6:	4b18      	ldr	r3, [pc, #96]	; (8003f58 <HAL_RCC_OscConfig+0x4d8>)
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d11c      	bne.n	8003f44 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d115      	bne.n	8003f44 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f1e:	4013      	ands	r3, r2
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d10d      	bne.n	8003f44 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d106      	bne.n	8003f44 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d001      	beq.n	8003f48 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e000      	b.n	8003f4a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3718      	adds	r7, #24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	40007000 	.word	0x40007000
 8003f58:	40023800 	.word	0x40023800
 8003f5c:	42470060 	.word	0x42470060

08003f60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d101      	bne.n	8003f74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e0cc      	b.n	800410e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f74:	4b68      	ldr	r3, [pc, #416]	; (8004118 <HAL_RCC_ClockConfig+0x1b8>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 030f 	and.w	r3, r3, #15
 8003f7c:	683a      	ldr	r2, [r7, #0]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d90c      	bls.n	8003f9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f82:	4b65      	ldr	r3, [pc, #404]	; (8004118 <HAL_RCC_ClockConfig+0x1b8>)
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	b2d2      	uxtb	r2, r2
 8003f88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f8a:	4b63      	ldr	r3, [pc, #396]	; (8004118 <HAL_RCC_ClockConfig+0x1b8>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 030f 	and.w	r3, r3, #15
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d001      	beq.n	8003f9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e0b8      	b.n	800410e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0302 	and.w	r3, r3, #2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d020      	beq.n	8003fea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0304 	and.w	r3, r3, #4
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d005      	beq.n	8003fc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fb4:	4b59      	ldr	r3, [pc, #356]	; (800411c <HAL_RCC_ClockConfig+0x1bc>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	4a58      	ldr	r2, [pc, #352]	; (800411c <HAL_RCC_ClockConfig+0x1bc>)
 8003fba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0308 	and.w	r3, r3, #8
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d005      	beq.n	8003fd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fcc:	4b53      	ldr	r3, [pc, #332]	; (800411c <HAL_RCC_ClockConfig+0x1bc>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	4a52      	ldr	r2, [pc, #328]	; (800411c <HAL_RCC_ClockConfig+0x1bc>)
 8003fd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fd8:	4b50      	ldr	r3, [pc, #320]	; (800411c <HAL_RCC_ClockConfig+0x1bc>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	494d      	ldr	r1, [pc, #308]	; (800411c <HAL_RCC_ClockConfig+0x1bc>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d044      	beq.n	8004080 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d107      	bne.n	800400e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ffe:	4b47      	ldr	r3, [pc, #284]	; (800411c <HAL_RCC_ClockConfig+0x1bc>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d119      	bne.n	800403e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e07f      	b.n	800410e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	2b02      	cmp	r3, #2
 8004014:	d003      	beq.n	800401e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800401a:	2b03      	cmp	r3, #3
 800401c:	d107      	bne.n	800402e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800401e:	4b3f      	ldr	r3, [pc, #252]	; (800411c <HAL_RCC_ClockConfig+0x1bc>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d109      	bne.n	800403e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e06f      	b.n	800410e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800402e:	4b3b      	ldr	r3, [pc, #236]	; (800411c <HAL_RCC_ClockConfig+0x1bc>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e067      	b.n	800410e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800403e:	4b37      	ldr	r3, [pc, #220]	; (800411c <HAL_RCC_ClockConfig+0x1bc>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f023 0203 	bic.w	r2, r3, #3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	4934      	ldr	r1, [pc, #208]	; (800411c <HAL_RCC_ClockConfig+0x1bc>)
 800404c:	4313      	orrs	r3, r2
 800404e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004050:	f7fc ffec 	bl	800102c <HAL_GetTick>
 8004054:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004056:	e00a      	b.n	800406e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004058:	f7fc ffe8 	bl	800102c <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	f241 3288 	movw	r2, #5000	; 0x1388
 8004066:	4293      	cmp	r3, r2
 8004068:	d901      	bls.n	800406e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e04f      	b.n	800410e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800406e:	4b2b      	ldr	r3, [pc, #172]	; (800411c <HAL_RCC_ClockConfig+0x1bc>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f003 020c 	and.w	r2, r3, #12
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	429a      	cmp	r2, r3
 800407e:	d1eb      	bne.n	8004058 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004080:	4b25      	ldr	r3, [pc, #148]	; (8004118 <HAL_RCC_ClockConfig+0x1b8>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 030f 	and.w	r3, r3, #15
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	429a      	cmp	r2, r3
 800408c:	d20c      	bcs.n	80040a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800408e:	4b22      	ldr	r3, [pc, #136]	; (8004118 <HAL_RCC_ClockConfig+0x1b8>)
 8004090:	683a      	ldr	r2, [r7, #0]
 8004092:	b2d2      	uxtb	r2, r2
 8004094:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004096:	4b20      	ldr	r3, [pc, #128]	; (8004118 <HAL_RCC_ClockConfig+0x1b8>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 030f 	and.w	r3, r3, #15
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d001      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e032      	b.n	800410e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0304 	and.w	r3, r3, #4
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d008      	beq.n	80040c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040b4:	4b19      	ldr	r3, [pc, #100]	; (800411c <HAL_RCC_ClockConfig+0x1bc>)
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	4916      	ldr	r1, [pc, #88]	; (800411c <HAL_RCC_ClockConfig+0x1bc>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0308 	and.w	r3, r3, #8
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d009      	beq.n	80040e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040d2:	4b12      	ldr	r3, [pc, #72]	; (800411c <HAL_RCC_ClockConfig+0x1bc>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	490e      	ldr	r1, [pc, #56]	; (800411c <HAL_RCC_ClockConfig+0x1bc>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040e6:	f000 f821 	bl	800412c <HAL_RCC_GetSysClockFreq>
 80040ea:	4601      	mov	r1, r0
 80040ec:	4b0b      	ldr	r3, [pc, #44]	; (800411c <HAL_RCC_ClockConfig+0x1bc>)
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	091b      	lsrs	r3, r3, #4
 80040f2:	f003 030f 	and.w	r3, r3, #15
 80040f6:	4a0a      	ldr	r2, [pc, #40]	; (8004120 <HAL_RCC_ClockConfig+0x1c0>)
 80040f8:	5cd3      	ldrb	r3, [r2, r3]
 80040fa:	fa21 f303 	lsr.w	r3, r1, r3
 80040fe:	4a09      	ldr	r2, [pc, #36]	; (8004124 <HAL_RCC_ClockConfig+0x1c4>)
 8004100:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004102:	4b09      	ldr	r3, [pc, #36]	; (8004128 <HAL_RCC_ClockConfig+0x1c8>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4618      	mov	r0, r3
 8004108:	f7fc ff4c 	bl	8000fa4 <HAL_InitTick>

  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	40023c00 	.word	0x40023c00
 800411c:	40023800 	.word	0x40023800
 8004120:	08008e8c 	.word	0x08008e8c
 8004124:	20000000 	.word	0x20000000
 8004128:	20000004 	.word	0x20000004

0800412c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800412c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004132:	2300      	movs	r3, #0
 8004134:	607b      	str	r3, [r7, #4]
 8004136:	2300      	movs	r3, #0
 8004138:	60fb      	str	r3, [r7, #12]
 800413a:	2300      	movs	r3, #0
 800413c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800413e:	2300      	movs	r3, #0
 8004140:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004142:	4b63      	ldr	r3, [pc, #396]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 030c 	and.w	r3, r3, #12
 800414a:	2b04      	cmp	r3, #4
 800414c:	d007      	beq.n	800415e <HAL_RCC_GetSysClockFreq+0x32>
 800414e:	2b08      	cmp	r3, #8
 8004150:	d008      	beq.n	8004164 <HAL_RCC_GetSysClockFreq+0x38>
 8004152:	2b00      	cmp	r3, #0
 8004154:	f040 80b4 	bne.w	80042c0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004158:	4b5e      	ldr	r3, [pc, #376]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800415a:	60bb      	str	r3, [r7, #8]
       break;
 800415c:	e0b3      	b.n	80042c6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800415e:	4b5e      	ldr	r3, [pc, #376]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004160:	60bb      	str	r3, [r7, #8]
      break;
 8004162:	e0b0      	b.n	80042c6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004164:	4b5a      	ldr	r3, [pc, #360]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800416c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800416e:	4b58      	ldr	r3, [pc, #352]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d04a      	beq.n	8004210 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800417a:	4b55      	ldr	r3, [pc, #340]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	099b      	lsrs	r3, r3, #6
 8004180:	f04f 0400 	mov.w	r4, #0
 8004184:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004188:	f04f 0200 	mov.w	r2, #0
 800418c:	ea03 0501 	and.w	r5, r3, r1
 8004190:	ea04 0602 	and.w	r6, r4, r2
 8004194:	4629      	mov	r1, r5
 8004196:	4632      	mov	r2, r6
 8004198:	f04f 0300 	mov.w	r3, #0
 800419c:	f04f 0400 	mov.w	r4, #0
 80041a0:	0154      	lsls	r4, r2, #5
 80041a2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80041a6:	014b      	lsls	r3, r1, #5
 80041a8:	4619      	mov	r1, r3
 80041aa:	4622      	mov	r2, r4
 80041ac:	1b49      	subs	r1, r1, r5
 80041ae:	eb62 0206 	sbc.w	r2, r2, r6
 80041b2:	f04f 0300 	mov.w	r3, #0
 80041b6:	f04f 0400 	mov.w	r4, #0
 80041ba:	0194      	lsls	r4, r2, #6
 80041bc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80041c0:	018b      	lsls	r3, r1, #6
 80041c2:	1a5b      	subs	r3, r3, r1
 80041c4:	eb64 0402 	sbc.w	r4, r4, r2
 80041c8:	f04f 0100 	mov.w	r1, #0
 80041cc:	f04f 0200 	mov.w	r2, #0
 80041d0:	00e2      	lsls	r2, r4, #3
 80041d2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80041d6:	00d9      	lsls	r1, r3, #3
 80041d8:	460b      	mov	r3, r1
 80041da:	4614      	mov	r4, r2
 80041dc:	195b      	adds	r3, r3, r5
 80041de:	eb44 0406 	adc.w	r4, r4, r6
 80041e2:	f04f 0100 	mov.w	r1, #0
 80041e6:	f04f 0200 	mov.w	r2, #0
 80041ea:	0262      	lsls	r2, r4, #9
 80041ec:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80041f0:	0259      	lsls	r1, r3, #9
 80041f2:	460b      	mov	r3, r1
 80041f4:	4614      	mov	r4, r2
 80041f6:	4618      	mov	r0, r3
 80041f8:	4621      	mov	r1, r4
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f04f 0400 	mov.w	r4, #0
 8004200:	461a      	mov	r2, r3
 8004202:	4623      	mov	r3, r4
 8004204:	f7fb ffe0 	bl	80001c8 <__aeabi_uldivmod>
 8004208:	4603      	mov	r3, r0
 800420a:	460c      	mov	r4, r1
 800420c:	60fb      	str	r3, [r7, #12]
 800420e:	e049      	b.n	80042a4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004210:	4b2f      	ldr	r3, [pc, #188]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	099b      	lsrs	r3, r3, #6
 8004216:	f04f 0400 	mov.w	r4, #0
 800421a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800421e:	f04f 0200 	mov.w	r2, #0
 8004222:	ea03 0501 	and.w	r5, r3, r1
 8004226:	ea04 0602 	and.w	r6, r4, r2
 800422a:	4629      	mov	r1, r5
 800422c:	4632      	mov	r2, r6
 800422e:	f04f 0300 	mov.w	r3, #0
 8004232:	f04f 0400 	mov.w	r4, #0
 8004236:	0154      	lsls	r4, r2, #5
 8004238:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800423c:	014b      	lsls	r3, r1, #5
 800423e:	4619      	mov	r1, r3
 8004240:	4622      	mov	r2, r4
 8004242:	1b49      	subs	r1, r1, r5
 8004244:	eb62 0206 	sbc.w	r2, r2, r6
 8004248:	f04f 0300 	mov.w	r3, #0
 800424c:	f04f 0400 	mov.w	r4, #0
 8004250:	0194      	lsls	r4, r2, #6
 8004252:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004256:	018b      	lsls	r3, r1, #6
 8004258:	1a5b      	subs	r3, r3, r1
 800425a:	eb64 0402 	sbc.w	r4, r4, r2
 800425e:	f04f 0100 	mov.w	r1, #0
 8004262:	f04f 0200 	mov.w	r2, #0
 8004266:	00e2      	lsls	r2, r4, #3
 8004268:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800426c:	00d9      	lsls	r1, r3, #3
 800426e:	460b      	mov	r3, r1
 8004270:	4614      	mov	r4, r2
 8004272:	195b      	adds	r3, r3, r5
 8004274:	eb44 0406 	adc.w	r4, r4, r6
 8004278:	f04f 0100 	mov.w	r1, #0
 800427c:	f04f 0200 	mov.w	r2, #0
 8004280:	02a2      	lsls	r2, r4, #10
 8004282:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004286:	0299      	lsls	r1, r3, #10
 8004288:	460b      	mov	r3, r1
 800428a:	4614      	mov	r4, r2
 800428c:	4618      	mov	r0, r3
 800428e:	4621      	mov	r1, r4
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f04f 0400 	mov.w	r4, #0
 8004296:	461a      	mov	r2, r3
 8004298:	4623      	mov	r3, r4
 800429a:	f7fb ff95 	bl	80001c8 <__aeabi_uldivmod>
 800429e:	4603      	mov	r3, r0
 80042a0:	460c      	mov	r4, r1
 80042a2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042a4:	4b0a      	ldr	r3, [pc, #40]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	0c1b      	lsrs	r3, r3, #16
 80042aa:	f003 0303 	and.w	r3, r3, #3
 80042ae:	3301      	adds	r3, #1
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042bc:	60bb      	str	r3, [r7, #8]
      break;
 80042be:	e002      	b.n	80042c6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042c0:	4b04      	ldr	r3, [pc, #16]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80042c2:	60bb      	str	r3, [r7, #8]
      break;
 80042c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042c6:	68bb      	ldr	r3, [r7, #8]
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3714      	adds	r7, #20
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042d0:	40023800 	.word	0x40023800
 80042d4:	00f42400 	.word	0x00f42400
 80042d8:	007a1200 	.word	0x007a1200

080042dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042dc:	b480      	push	{r7}
 80042de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042e0:	4b03      	ldr	r3, [pc, #12]	; (80042f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80042e2:	681b      	ldr	r3, [r3, #0]
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	20000000 	.word	0x20000000

080042f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042f8:	f7ff fff0 	bl	80042dc <HAL_RCC_GetHCLKFreq>
 80042fc:	4601      	mov	r1, r0
 80042fe:	4b05      	ldr	r3, [pc, #20]	; (8004314 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	0a9b      	lsrs	r3, r3, #10
 8004304:	f003 0307 	and.w	r3, r3, #7
 8004308:	4a03      	ldr	r2, [pc, #12]	; (8004318 <HAL_RCC_GetPCLK1Freq+0x24>)
 800430a:	5cd3      	ldrb	r3, [r2, r3]
 800430c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004310:	4618      	mov	r0, r3
 8004312:	bd80      	pop	{r7, pc}
 8004314:	40023800 	.word	0x40023800
 8004318:	08008e9c 	.word	0x08008e9c

0800431c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004320:	f7ff ffdc 	bl	80042dc <HAL_RCC_GetHCLKFreq>
 8004324:	4601      	mov	r1, r0
 8004326:	4b05      	ldr	r3, [pc, #20]	; (800433c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	0b5b      	lsrs	r3, r3, #13
 800432c:	f003 0307 	and.w	r3, r3, #7
 8004330:	4a03      	ldr	r2, [pc, #12]	; (8004340 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004332:	5cd3      	ldrb	r3, [r2, r3]
 8004334:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004338:	4618      	mov	r0, r3
 800433a:	bd80      	pop	{r7, pc}
 800433c:	40023800 	.word	0x40023800
 8004340:	08008e9c 	.word	0x08008e9c

08004344 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e01d      	b.n	8004392 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d106      	bne.n	8004370 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7fc fc78 	bl	8000c60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2202      	movs	r2, #2
 8004374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	3304      	adds	r3, #4
 8004380:	4619      	mov	r1, r3
 8004382:	4610      	mov	r0, r2
 8004384:	f000 fa1e 	bl	80047c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3708      	adds	r7, #8
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800439a:	b480      	push	{r7}
 800439c:	b085      	sub	sp, #20
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2202      	movs	r2, #2
 80043a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f003 0307 	and.w	r3, r3, #7
 80043b4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2b06      	cmp	r3, #6
 80043ba:	d007      	beq.n	80043cc <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f042 0201 	orr.w	r2, r2, #1
 80043ca:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3714      	adds	r7, #20
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b082      	sub	sp, #8
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d122      	bne.n	800443e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b02      	cmp	r3, #2
 8004404:	d11b      	bne.n	800443e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f06f 0202 	mvn.w	r2, #2
 800440e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	f003 0303 	and.w	r3, r3, #3
 8004420:	2b00      	cmp	r3, #0
 8004422:	d003      	beq.n	800442c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 f9af 	bl	8004788 <HAL_TIM_IC_CaptureCallback>
 800442a:	e005      	b.n	8004438 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 f9a1 	bl	8004774 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 f9b2 	bl	800479c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	2b04      	cmp	r3, #4
 800444a:	d122      	bne.n	8004492 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	f003 0304 	and.w	r3, r3, #4
 8004456:	2b04      	cmp	r3, #4
 8004458:	d11b      	bne.n	8004492 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f06f 0204 	mvn.w	r2, #4
 8004462:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2202      	movs	r2, #2
 8004468:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004474:	2b00      	cmp	r3, #0
 8004476:	d003      	beq.n	8004480 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 f985 	bl	8004788 <HAL_TIM_IC_CaptureCallback>
 800447e:	e005      	b.n	800448c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 f977 	bl	8004774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f988 	bl	800479c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	f003 0308 	and.w	r3, r3, #8
 800449c:	2b08      	cmp	r3, #8
 800449e:	d122      	bne.n	80044e6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	f003 0308 	and.w	r3, r3, #8
 80044aa:	2b08      	cmp	r3, #8
 80044ac:	d11b      	bne.n	80044e6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f06f 0208 	mvn.w	r2, #8
 80044b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2204      	movs	r2, #4
 80044bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	69db      	ldr	r3, [r3, #28]
 80044c4:	f003 0303 	and.w	r3, r3, #3
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d003      	beq.n	80044d4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 f95b 	bl	8004788 <HAL_TIM_IC_CaptureCallback>
 80044d2:	e005      	b.n	80044e0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 f94d 	bl	8004774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f95e 	bl	800479c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	f003 0310 	and.w	r3, r3, #16
 80044f0:	2b10      	cmp	r3, #16
 80044f2:	d122      	bne.n	800453a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	f003 0310 	and.w	r3, r3, #16
 80044fe:	2b10      	cmp	r3, #16
 8004500:	d11b      	bne.n	800453a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f06f 0210 	mvn.w	r2, #16
 800450a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2208      	movs	r2, #8
 8004510:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	69db      	ldr	r3, [r3, #28]
 8004518:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800451c:	2b00      	cmp	r3, #0
 800451e:	d003      	beq.n	8004528 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 f931 	bl	8004788 <HAL_TIM_IC_CaptureCallback>
 8004526:	e005      	b.n	8004534 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 f923 	bl	8004774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f934 	bl	800479c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	f003 0301 	and.w	r3, r3, #1
 8004544:	2b01      	cmp	r3, #1
 8004546:	d10e      	bne.n	8004566 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b01      	cmp	r3, #1
 8004554:	d107      	bne.n	8004566 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f06f 0201 	mvn.w	r2, #1
 800455e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 f8fd 	bl	8004760 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004570:	2b80      	cmp	r3, #128	; 0x80
 8004572:	d10e      	bne.n	8004592 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800457e:	2b80      	cmp	r3, #128	; 0x80
 8004580:	d107      	bne.n	8004592 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800458a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 fad9 	bl	8004b44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800459c:	2b40      	cmp	r3, #64	; 0x40
 800459e:	d10e      	bne.n	80045be <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045aa:	2b40      	cmp	r3, #64	; 0x40
 80045ac:	d107      	bne.n	80045be <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 f8f9 	bl	80047b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	f003 0320 	and.w	r3, r3, #32
 80045c8:	2b20      	cmp	r3, #32
 80045ca:	d10e      	bne.n	80045ea <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f003 0320 	and.w	r3, r3, #32
 80045d6:	2b20      	cmp	r3, #32
 80045d8:	d107      	bne.n	80045ea <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f06f 0220 	mvn.w	r2, #32
 80045e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 faa3 	bl	8004b30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045ea:	bf00      	nop
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b084      	sub	sp, #16
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
 80045fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004602:	2b01      	cmp	r3, #1
 8004604:	d101      	bne.n	800460a <HAL_TIM_ConfigClockSource+0x18>
 8004606:	2302      	movs	r3, #2
 8004608:	e0a6      	b.n	8004758 <HAL_TIM_ConfigClockSource+0x166>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2202      	movs	r2, #2
 8004616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004628:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004630:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2b40      	cmp	r3, #64	; 0x40
 8004640:	d067      	beq.n	8004712 <HAL_TIM_ConfigClockSource+0x120>
 8004642:	2b40      	cmp	r3, #64	; 0x40
 8004644:	d80b      	bhi.n	800465e <HAL_TIM_ConfigClockSource+0x6c>
 8004646:	2b10      	cmp	r3, #16
 8004648:	d073      	beq.n	8004732 <HAL_TIM_ConfigClockSource+0x140>
 800464a:	2b10      	cmp	r3, #16
 800464c:	d802      	bhi.n	8004654 <HAL_TIM_ConfigClockSource+0x62>
 800464e:	2b00      	cmp	r3, #0
 8004650:	d06f      	beq.n	8004732 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004652:	e078      	b.n	8004746 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004654:	2b20      	cmp	r3, #32
 8004656:	d06c      	beq.n	8004732 <HAL_TIM_ConfigClockSource+0x140>
 8004658:	2b30      	cmp	r3, #48	; 0x30
 800465a:	d06a      	beq.n	8004732 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800465c:	e073      	b.n	8004746 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800465e:	2b70      	cmp	r3, #112	; 0x70
 8004660:	d00d      	beq.n	800467e <HAL_TIM_ConfigClockSource+0x8c>
 8004662:	2b70      	cmp	r3, #112	; 0x70
 8004664:	d804      	bhi.n	8004670 <HAL_TIM_ConfigClockSource+0x7e>
 8004666:	2b50      	cmp	r3, #80	; 0x50
 8004668:	d033      	beq.n	80046d2 <HAL_TIM_ConfigClockSource+0xe0>
 800466a:	2b60      	cmp	r3, #96	; 0x60
 800466c:	d041      	beq.n	80046f2 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800466e:	e06a      	b.n	8004746 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004670:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004674:	d066      	beq.n	8004744 <HAL_TIM_ConfigClockSource+0x152>
 8004676:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800467a:	d017      	beq.n	80046ac <HAL_TIM_ConfigClockSource+0xba>
      break;
 800467c:	e063      	b.n	8004746 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6818      	ldr	r0, [r3, #0]
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	6899      	ldr	r1, [r3, #8]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	685a      	ldr	r2, [r3, #4]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	f000 f9b3 	bl	80049f8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046a0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	609a      	str	r2, [r3, #8]
      break;
 80046aa:	e04c      	b.n	8004746 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6818      	ldr	r0, [r3, #0]
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	6899      	ldr	r1, [r3, #8]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	685a      	ldr	r2, [r3, #4]
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	f000 f99c 	bl	80049f8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	689a      	ldr	r2, [r3, #8]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046ce:	609a      	str	r2, [r3, #8]
      break;
 80046d0:	e039      	b.n	8004746 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6818      	ldr	r0, [r3, #0]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	6859      	ldr	r1, [r3, #4]
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	461a      	mov	r2, r3
 80046e0:	f000 f910 	bl	8004904 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2150      	movs	r1, #80	; 0x50
 80046ea:	4618      	mov	r0, r3
 80046ec:	f000 f969 	bl	80049c2 <TIM_ITRx_SetConfig>
      break;
 80046f0:	e029      	b.n	8004746 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6818      	ldr	r0, [r3, #0]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	6859      	ldr	r1, [r3, #4]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	461a      	mov	r2, r3
 8004700:	f000 f92f 	bl	8004962 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2160      	movs	r1, #96	; 0x60
 800470a:	4618      	mov	r0, r3
 800470c:	f000 f959 	bl	80049c2 <TIM_ITRx_SetConfig>
      break;
 8004710:	e019      	b.n	8004746 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6818      	ldr	r0, [r3, #0]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	6859      	ldr	r1, [r3, #4]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	461a      	mov	r2, r3
 8004720:	f000 f8f0 	bl	8004904 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2140      	movs	r1, #64	; 0x40
 800472a:	4618      	mov	r0, r3
 800472c:	f000 f949 	bl	80049c2 <TIM_ITRx_SetConfig>
      break;
 8004730:	e009      	b.n	8004746 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4619      	mov	r1, r3
 800473c:	4610      	mov	r0, r2
 800473e:	f000 f940 	bl	80049c2 <TIM_ITRx_SetConfig>
      break;
 8004742:	e000      	b.n	8004746 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004744:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2201      	movs	r2, #1
 800474a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3710      	adds	r7, #16
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a40      	ldr	r2, [pc, #256]	; (80048d8 <TIM_Base_SetConfig+0x114>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d013      	beq.n	8004804 <TIM_Base_SetConfig+0x40>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047e2:	d00f      	beq.n	8004804 <TIM_Base_SetConfig+0x40>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a3d      	ldr	r2, [pc, #244]	; (80048dc <TIM_Base_SetConfig+0x118>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d00b      	beq.n	8004804 <TIM_Base_SetConfig+0x40>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a3c      	ldr	r2, [pc, #240]	; (80048e0 <TIM_Base_SetConfig+0x11c>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d007      	beq.n	8004804 <TIM_Base_SetConfig+0x40>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a3b      	ldr	r2, [pc, #236]	; (80048e4 <TIM_Base_SetConfig+0x120>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d003      	beq.n	8004804 <TIM_Base_SetConfig+0x40>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a3a      	ldr	r2, [pc, #232]	; (80048e8 <TIM_Base_SetConfig+0x124>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d108      	bne.n	8004816 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800480a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	4313      	orrs	r3, r2
 8004814:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a2f      	ldr	r2, [pc, #188]	; (80048d8 <TIM_Base_SetConfig+0x114>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d02b      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004824:	d027      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a2c      	ldr	r2, [pc, #176]	; (80048dc <TIM_Base_SetConfig+0x118>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d023      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a2b      	ldr	r2, [pc, #172]	; (80048e0 <TIM_Base_SetConfig+0x11c>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d01f      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a2a      	ldr	r2, [pc, #168]	; (80048e4 <TIM_Base_SetConfig+0x120>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d01b      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a29      	ldr	r2, [pc, #164]	; (80048e8 <TIM_Base_SetConfig+0x124>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d017      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a28      	ldr	r2, [pc, #160]	; (80048ec <TIM_Base_SetConfig+0x128>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d013      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a27      	ldr	r2, [pc, #156]	; (80048f0 <TIM_Base_SetConfig+0x12c>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d00f      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a26      	ldr	r2, [pc, #152]	; (80048f4 <TIM_Base_SetConfig+0x130>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d00b      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a25      	ldr	r2, [pc, #148]	; (80048f8 <TIM_Base_SetConfig+0x134>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d007      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a24      	ldr	r2, [pc, #144]	; (80048fc <TIM_Base_SetConfig+0x138>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d003      	beq.n	8004876 <TIM_Base_SetConfig+0xb2>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a23      	ldr	r2, [pc, #140]	; (8004900 <TIM_Base_SetConfig+0x13c>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d108      	bne.n	8004888 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800487c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	4313      	orrs	r3, r2
 8004886:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	4313      	orrs	r3, r2
 8004894:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	689a      	ldr	r2, [r3, #8]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a0a      	ldr	r2, [pc, #40]	; (80048d8 <TIM_Base_SetConfig+0x114>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d003      	beq.n	80048bc <TIM_Base_SetConfig+0xf8>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a0c      	ldr	r2, [pc, #48]	; (80048e8 <TIM_Base_SetConfig+0x124>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d103      	bne.n	80048c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	691a      	ldr	r2, [r3, #16]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	615a      	str	r2, [r3, #20]
}
 80048ca:	bf00      	nop
 80048cc:	3714      	adds	r7, #20
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	40010000 	.word	0x40010000
 80048dc:	40000400 	.word	0x40000400
 80048e0:	40000800 	.word	0x40000800
 80048e4:	40000c00 	.word	0x40000c00
 80048e8:	40010400 	.word	0x40010400
 80048ec:	40014000 	.word	0x40014000
 80048f0:	40014400 	.word	0x40014400
 80048f4:	40014800 	.word	0x40014800
 80048f8:	40001800 	.word	0x40001800
 80048fc:	40001c00 	.word	0x40001c00
 8004900:	40002000 	.word	0x40002000

08004904 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004904:	b480      	push	{r7}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6a1b      	ldr	r3, [r3, #32]
 8004914:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	f023 0201 	bic.w	r2, r3, #1
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800492e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	011b      	lsls	r3, r3, #4
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	4313      	orrs	r3, r2
 8004938:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f023 030a 	bic.w	r3, r3, #10
 8004940:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004942:	697a      	ldr	r2, [r7, #20]
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	4313      	orrs	r3, r2
 8004948:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	621a      	str	r2, [r3, #32]
}
 8004956:	bf00      	nop
 8004958:	371c      	adds	r7, #28
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004962:	b480      	push	{r7}
 8004964:	b087      	sub	sp, #28
 8004966:	af00      	add	r7, sp, #0
 8004968:	60f8      	str	r0, [r7, #12]
 800496a:	60b9      	str	r1, [r7, #8]
 800496c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	f023 0210 	bic.w	r2, r3, #16
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6a1b      	ldr	r3, [r3, #32]
 8004984:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800498c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	031b      	lsls	r3, r3, #12
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	4313      	orrs	r3, r2
 8004996:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800499e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	011b      	lsls	r3, r3, #4
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	693a      	ldr	r2, [r7, #16]
 80049b4:	621a      	str	r2, [r3, #32]
}
 80049b6:	bf00      	nop
 80049b8:	371c      	adds	r7, #28
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr

080049c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049c2:	b480      	push	{r7}
 80049c4:	b085      	sub	sp, #20
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
 80049ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049da:	683a      	ldr	r2, [r7, #0]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	4313      	orrs	r3, r2
 80049e0:	f043 0307 	orr.w	r3, r3, #7
 80049e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	609a      	str	r2, [r3, #8]
}
 80049ec:	bf00      	nop
 80049ee:	3714      	adds	r7, #20
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b087      	sub	sp, #28
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
 8004a04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	021a      	lsls	r2, r3, #8
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	431a      	orrs	r2, r3
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	697a      	ldr	r2, [r7, #20]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	609a      	str	r2, [r3, #8]
}
 8004a2c:	bf00      	nop
 8004a2e:	371c      	adds	r7, #28
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d101      	bne.n	8004a50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	e05a      	b.n	8004b06 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a21      	ldr	r2, [pc, #132]	; (8004b14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d022      	beq.n	8004ada <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a9c:	d01d      	beq.n	8004ada <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a1d      	ldr	r2, [pc, #116]	; (8004b18 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d018      	beq.n	8004ada <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a1b      	ldr	r2, [pc, #108]	; (8004b1c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d013      	beq.n	8004ada <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a1a      	ldr	r2, [pc, #104]	; (8004b20 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d00e      	beq.n	8004ada <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a18      	ldr	r2, [pc, #96]	; (8004b24 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d009      	beq.n	8004ada <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a17      	ldr	r2, [pc, #92]	; (8004b28 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d004      	beq.n	8004ada <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a15      	ldr	r2, [pc, #84]	; (8004b2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d10c      	bne.n	8004af4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ae0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	68ba      	ldr	r2, [r7, #8]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68ba      	ldr	r2, [r7, #8]
 8004af2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	40010000 	.word	0x40010000
 8004b18:	40000400 	.word	0x40000400
 8004b1c:	40000800 	.word	0x40000800
 8004b20:	40000c00 	.word	0x40000c00
 8004b24:	40010400 	.word	0x40010400
 8004b28:	40014000 	.word	0x40014000
 8004b2c:	40001800 	.word	0x40001800

08004b30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b38:	bf00      	nop
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e03f      	b.n	8004bea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d106      	bne.n	8004b84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7fc f894 	bl	8000cac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2224      	movs	r2, #36	; 0x24
 8004b88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68da      	ldr	r2, [r3, #12]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 f829 	bl	8004bf4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	691a      	ldr	r2, [r3, #16]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	695a      	ldr	r2, [r3, #20]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68da      	ldr	r2, [r3, #12]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2220      	movs	r2, #32
 8004bdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2220      	movs	r2, #32
 8004be4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3708      	adds	r7, #8
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
	...

08004bf4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bf8:	b085      	sub	sp, #20
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	68da      	ldr	r2, [r3, #12]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	430a      	orrs	r2, r1
 8004c12:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689a      	ldr	r2, [r3, #8]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	431a      	orrs	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	69db      	ldr	r3, [r3, #28]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004c36:	f023 030c 	bic.w	r3, r3, #12
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	6812      	ldr	r2, [r2, #0]
 8004c3e:	68f9      	ldr	r1, [r7, #12]
 8004c40:	430b      	orrs	r3, r1
 8004c42:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	699a      	ldr	r2, [r3, #24]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	430a      	orrs	r2, r1
 8004c58:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	69db      	ldr	r3, [r3, #28]
 8004c5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c62:	f040 818b 	bne.w	8004f7c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4ac1      	ldr	r2, [pc, #772]	; (8004f70 <UART_SetConfig+0x37c>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d005      	beq.n	8004c7c <UART_SetConfig+0x88>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4abf      	ldr	r2, [pc, #764]	; (8004f74 <UART_SetConfig+0x380>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	f040 80bd 	bne.w	8004df6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c7c:	f7ff fb4e 	bl	800431c <HAL_RCC_GetPCLK2Freq>
 8004c80:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	461d      	mov	r5, r3
 8004c86:	f04f 0600 	mov.w	r6, #0
 8004c8a:	46a8      	mov	r8, r5
 8004c8c:	46b1      	mov	r9, r6
 8004c8e:	eb18 0308 	adds.w	r3, r8, r8
 8004c92:	eb49 0409 	adc.w	r4, r9, r9
 8004c96:	4698      	mov	r8, r3
 8004c98:	46a1      	mov	r9, r4
 8004c9a:	eb18 0805 	adds.w	r8, r8, r5
 8004c9e:	eb49 0906 	adc.w	r9, r9, r6
 8004ca2:	f04f 0100 	mov.w	r1, #0
 8004ca6:	f04f 0200 	mov.w	r2, #0
 8004caa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004cae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004cb2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004cb6:	4688      	mov	r8, r1
 8004cb8:	4691      	mov	r9, r2
 8004cba:	eb18 0005 	adds.w	r0, r8, r5
 8004cbe:	eb49 0106 	adc.w	r1, r9, r6
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	461d      	mov	r5, r3
 8004cc8:	f04f 0600 	mov.w	r6, #0
 8004ccc:	196b      	adds	r3, r5, r5
 8004cce:	eb46 0406 	adc.w	r4, r6, r6
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	4623      	mov	r3, r4
 8004cd6:	f7fb fa77 	bl	80001c8 <__aeabi_uldivmod>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	460c      	mov	r4, r1
 8004cde:	461a      	mov	r2, r3
 8004ce0:	4ba5      	ldr	r3, [pc, #660]	; (8004f78 <UART_SetConfig+0x384>)
 8004ce2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ce6:	095b      	lsrs	r3, r3, #5
 8004ce8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	461d      	mov	r5, r3
 8004cf0:	f04f 0600 	mov.w	r6, #0
 8004cf4:	46a9      	mov	r9, r5
 8004cf6:	46b2      	mov	sl, r6
 8004cf8:	eb19 0309 	adds.w	r3, r9, r9
 8004cfc:	eb4a 040a 	adc.w	r4, sl, sl
 8004d00:	4699      	mov	r9, r3
 8004d02:	46a2      	mov	sl, r4
 8004d04:	eb19 0905 	adds.w	r9, r9, r5
 8004d08:	eb4a 0a06 	adc.w	sl, sl, r6
 8004d0c:	f04f 0100 	mov.w	r1, #0
 8004d10:	f04f 0200 	mov.w	r2, #0
 8004d14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d18:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004d1c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d20:	4689      	mov	r9, r1
 8004d22:	4692      	mov	sl, r2
 8004d24:	eb19 0005 	adds.w	r0, r9, r5
 8004d28:	eb4a 0106 	adc.w	r1, sl, r6
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	461d      	mov	r5, r3
 8004d32:	f04f 0600 	mov.w	r6, #0
 8004d36:	196b      	adds	r3, r5, r5
 8004d38:	eb46 0406 	adc.w	r4, r6, r6
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	4623      	mov	r3, r4
 8004d40:	f7fb fa42 	bl	80001c8 <__aeabi_uldivmod>
 8004d44:	4603      	mov	r3, r0
 8004d46:	460c      	mov	r4, r1
 8004d48:	461a      	mov	r2, r3
 8004d4a:	4b8b      	ldr	r3, [pc, #556]	; (8004f78 <UART_SetConfig+0x384>)
 8004d4c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d50:	095b      	lsrs	r3, r3, #5
 8004d52:	2164      	movs	r1, #100	; 0x64
 8004d54:	fb01 f303 	mul.w	r3, r1, r3
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	00db      	lsls	r3, r3, #3
 8004d5c:	3332      	adds	r3, #50	; 0x32
 8004d5e:	4a86      	ldr	r2, [pc, #536]	; (8004f78 <UART_SetConfig+0x384>)
 8004d60:	fba2 2303 	umull	r2, r3, r2, r3
 8004d64:	095b      	lsrs	r3, r3, #5
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d6c:	4498      	add	r8, r3
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	461d      	mov	r5, r3
 8004d72:	f04f 0600 	mov.w	r6, #0
 8004d76:	46a9      	mov	r9, r5
 8004d78:	46b2      	mov	sl, r6
 8004d7a:	eb19 0309 	adds.w	r3, r9, r9
 8004d7e:	eb4a 040a 	adc.w	r4, sl, sl
 8004d82:	4699      	mov	r9, r3
 8004d84:	46a2      	mov	sl, r4
 8004d86:	eb19 0905 	adds.w	r9, r9, r5
 8004d8a:	eb4a 0a06 	adc.w	sl, sl, r6
 8004d8e:	f04f 0100 	mov.w	r1, #0
 8004d92:	f04f 0200 	mov.w	r2, #0
 8004d96:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d9a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004d9e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004da2:	4689      	mov	r9, r1
 8004da4:	4692      	mov	sl, r2
 8004da6:	eb19 0005 	adds.w	r0, r9, r5
 8004daa:	eb4a 0106 	adc.w	r1, sl, r6
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	461d      	mov	r5, r3
 8004db4:	f04f 0600 	mov.w	r6, #0
 8004db8:	196b      	adds	r3, r5, r5
 8004dba:	eb46 0406 	adc.w	r4, r6, r6
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	4623      	mov	r3, r4
 8004dc2:	f7fb fa01 	bl	80001c8 <__aeabi_uldivmod>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	460c      	mov	r4, r1
 8004dca:	461a      	mov	r2, r3
 8004dcc:	4b6a      	ldr	r3, [pc, #424]	; (8004f78 <UART_SetConfig+0x384>)
 8004dce:	fba3 1302 	umull	r1, r3, r3, r2
 8004dd2:	095b      	lsrs	r3, r3, #5
 8004dd4:	2164      	movs	r1, #100	; 0x64
 8004dd6:	fb01 f303 	mul.w	r3, r1, r3
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	00db      	lsls	r3, r3, #3
 8004dde:	3332      	adds	r3, #50	; 0x32
 8004de0:	4a65      	ldr	r2, [pc, #404]	; (8004f78 <UART_SetConfig+0x384>)
 8004de2:	fba2 2303 	umull	r2, r3, r2, r3
 8004de6:	095b      	lsrs	r3, r3, #5
 8004de8:	f003 0207 	and.w	r2, r3, #7
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4442      	add	r2, r8
 8004df2:	609a      	str	r2, [r3, #8]
 8004df4:	e26f      	b.n	80052d6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004df6:	f7ff fa7d 	bl	80042f4 <HAL_RCC_GetPCLK1Freq>
 8004dfa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	461d      	mov	r5, r3
 8004e00:	f04f 0600 	mov.w	r6, #0
 8004e04:	46a8      	mov	r8, r5
 8004e06:	46b1      	mov	r9, r6
 8004e08:	eb18 0308 	adds.w	r3, r8, r8
 8004e0c:	eb49 0409 	adc.w	r4, r9, r9
 8004e10:	4698      	mov	r8, r3
 8004e12:	46a1      	mov	r9, r4
 8004e14:	eb18 0805 	adds.w	r8, r8, r5
 8004e18:	eb49 0906 	adc.w	r9, r9, r6
 8004e1c:	f04f 0100 	mov.w	r1, #0
 8004e20:	f04f 0200 	mov.w	r2, #0
 8004e24:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004e28:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004e2c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004e30:	4688      	mov	r8, r1
 8004e32:	4691      	mov	r9, r2
 8004e34:	eb18 0005 	adds.w	r0, r8, r5
 8004e38:	eb49 0106 	adc.w	r1, r9, r6
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	461d      	mov	r5, r3
 8004e42:	f04f 0600 	mov.w	r6, #0
 8004e46:	196b      	adds	r3, r5, r5
 8004e48:	eb46 0406 	adc.w	r4, r6, r6
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	4623      	mov	r3, r4
 8004e50:	f7fb f9ba 	bl	80001c8 <__aeabi_uldivmod>
 8004e54:	4603      	mov	r3, r0
 8004e56:	460c      	mov	r4, r1
 8004e58:	461a      	mov	r2, r3
 8004e5a:	4b47      	ldr	r3, [pc, #284]	; (8004f78 <UART_SetConfig+0x384>)
 8004e5c:	fba3 2302 	umull	r2, r3, r3, r2
 8004e60:	095b      	lsrs	r3, r3, #5
 8004e62:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	461d      	mov	r5, r3
 8004e6a:	f04f 0600 	mov.w	r6, #0
 8004e6e:	46a9      	mov	r9, r5
 8004e70:	46b2      	mov	sl, r6
 8004e72:	eb19 0309 	adds.w	r3, r9, r9
 8004e76:	eb4a 040a 	adc.w	r4, sl, sl
 8004e7a:	4699      	mov	r9, r3
 8004e7c:	46a2      	mov	sl, r4
 8004e7e:	eb19 0905 	adds.w	r9, r9, r5
 8004e82:	eb4a 0a06 	adc.w	sl, sl, r6
 8004e86:	f04f 0100 	mov.w	r1, #0
 8004e8a:	f04f 0200 	mov.w	r2, #0
 8004e8e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e92:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e96:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e9a:	4689      	mov	r9, r1
 8004e9c:	4692      	mov	sl, r2
 8004e9e:	eb19 0005 	adds.w	r0, r9, r5
 8004ea2:	eb4a 0106 	adc.w	r1, sl, r6
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	461d      	mov	r5, r3
 8004eac:	f04f 0600 	mov.w	r6, #0
 8004eb0:	196b      	adds	r3, r5, r5
 8004eb2:	eb46 0406 	adc.w	r4, r6, r6
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	4623      	mov	r3, r4
 8004eba:	f7fb f985 	bl	80001c8 <__aeabi_uldivmod>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	460c      	mov	r4, r1
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	4b2c      	ldr	r3, [pc, #176]	; (8004f78 <UART_SetConfig+0x384>)
 8004ec6:	fba3 1302 	umull	r1, r3, r3, r2
 8004eca:	095b      	lsrs	r3, r3, #5
 8004ecc:	2164      	movs	r1, #100	; 0x64
 8004ece:	fb01 f303 	mul.w	r3, r1, r3
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	00db      	lsls	r3, r3, #3
 8004ed6:	3332      	adds	r3, #50	; 0x32
 8004ed8:	4a27      	ldr	r2, [pc, #156]	; (8004f78 <UART_SetConfig+0x384>)
 8004eda:	fba2 2303 	umull	r2, r3, r2, r3
 8004ede:	095b      	lsrs	r3, r3, #5
 8004ee0:	005b      	lsls	r3, r3, #1
 8004ee2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ee6:	4498      	add	r8, r3
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	461d      	mov	r5, r3
 8004eec:	f04f 0600 	mov.w	r6, #0
 8004ef0:	46a9      	mov	r9, r5
 8004ef2:	46b2      	mov	sl, r6
 8004ef4:	eb19 0309 	adds.w	r3, r9, r9
 8004ef8:	eb4a 040a 	adc.w	r4, sl, sl
 8004efc:	4699      	mov	r9, r3
 8004efe:	46a2      	mov	sl, r4
 8004f00:	eb19 0905 	adds.w	r9, r9, r5
 8004f04:	eb4a 0a06 	adc.w	sl, sl, r6
 8004f08:	f04f 0100 	mov.w	r1, #0
 8004f0c:	f04f 0200 	mov.w	r2, #0
 8004f10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f14:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f18:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f1c:	4689      	mov	r9, r1
 8004f1e:	4692      	mov	sl, r2
 8004f20:	eb19 0005 	adds.w	r0, r9, r5
 8004f24:	eb4a 0106 	adc.w	r1, sl, r6
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	461d      	mov	r5, r3
 8004f2e:	f04f 0600 	mov.w	r6, #0
 8004f32:	196b      	adds	r3, r5, r5
 8004f34:	eb46 0406 	adc.w	r4, r6, r6
 8004f38:	461a      	mov	r2, r3
 8004f3a:	4623      	mov	r3, r4
 8004f3c:	f7fb f944 	bl	80001c8 <__aeabi_uldivmod>
 8004f40:	4603      	mov	r3, r0
 8004f42:	460c      	mov	r4, r1
 8004f44:	461a      	mov	r2, r3
 8004f46:	4b0c      	ldr	r3, [pc, #48]	; (8004f78 <UART_SetConfig+0x384>)
 8004f48:	fba3 1302 	umull	r1, r3, r3, r2
 8004f4c:	095b      	lsrs	r3, r3, #5
 8004f4e:	2164      	movs	r1, #100	; 0x64
 8004f50:	fb01 f303 	mul.w	r3, r1, r3
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	00db      	lsls	r3, r3, #3
 8004f58:	3332      	adds	r3, #50	; 0x32
 8004f5a:	4a07      	ldr	r2, [pc, #28]	; (8004f78 <UART_SetConfig+0x384>)
 8004f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f60:	095b      	lsrs	r3, r3, #5
 8004f62:	f003 0207 	and.w	r2, r3, #7
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4442      	add	r2, r8
 8004f6c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004f6e:	e1b2      	b.n	80052d6 <UART_SetConfig+0x6e2>
 8004f70:	40011000 	.word	0x40011000
 8004f74:	40011400 	.word	0x40011400
 8004f78:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4ad7      	ldr	r2, [pc, #860]	; (80052e0 <UART_SetConfig+0x6ec>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d005      	beq.n	8004f92 <UART_SetConfig+0x39e>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4ad6      	ldr	r2, [pc, #856]	; (80052e4 <UART_SetConfig+0x6f0>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	f040 80d1 	bne.w	8005134 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f92:	f7ff f9c3 	bl	800431c <HAL_RCC_GetPCLK2Freq>
 8004f96:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	469a      	mov	sl, r3
 8004f9c:	f04f 0b00 	mov.w	fp, #0
 8004fa0:	46d0      	mov	r8, sl
 8004fa2:	46d9      	mov	r9, fp
 8004fa4:	eb18 0308 	adds.w	r3, r8, r8
 8004fa8:	eb49 0409 	adc.w	r4, r9, r9
 8004fac:	4698      	mov	r8, r3
 8004fae:	46a1      	mov	r9, r4
 8004fb0:	eb18 080a 	adds.w	r8, r8, sl
 8004fb4:	eb49 090b 	adc.w	r9, r9, fp
 8004fb8:	f04f 0100 	mov.w	r1, #0
 8004fbc:	f04f 0200 	mov.w	r2, #0
 8004fc0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004fc4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004fc8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004fcc:	4688      	mov	r8, r1
 8004fce:	4691      	mov	r9, r2
 8004fd0:	eb1a 0508 	adds.w	r5, sl, r8
 8004fd4:	eb4b 0609 	adc.w	r6, fp, r9
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	4619      	mov	r1, r3
 8004fde:	f04f 0200 	mov.w	r2, #0
 8004fe2:	f04f 0300 	mov.w	r3, #0
 8004fe6:	f04f 0400 	mov.w	r4, #0
 8004fea:	0094      	lsls	r4, r2, #2
 8004fec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004ff0:	008b      	lsls	r3, r1, #2
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	4623      	mov	r3, r4
 8004ff6:	4628      	mov	r0, r5
 8004ff8:	4631      	mov	r1, r6
 8004ffa:	f7fb f8e5 	bl	80001c8 <__aeabi_uldivmod>
 8004ffe:	4603      	mov	r3, r0
 8005000:	460c      	mov	r4, r1
 8005002:	461a      	mov	r2, r3
 8005004:	4bb8      	ldr	r3, [pc, #736]	; (80052e8 <UART_SetConfig+0x6f4>)
 8005006:	fba3 2302 	umull	r2, r3, r3, r2
 800500a:	095b      	lsrs	r3, r3, #5
 800500c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	469b      	mov	fp, r3
 8005014:	f04f 0c00 	mov.w	ip, #0
 8005018:	46d9      	mov	r9, fp
 800501a:	46e2      	mov	sl, ip
 800501c:	eb19 0309 	adds.w	r3, r9, r9
 8005020:	eb4a 040a 	adc.w	r4, sl, sl
 8005024:	4699      	mov	r9, r3
 8005026:	46a2      	mov	sl, r4
 8005028:	eb19 090b 	adds.w	r9, r9, fp
 800502c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005030:	f04f 0100 	mov.w	r1, #0
 8005034:	f04f 0200 	mov.w	r2, #0
 8005038:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800503c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005040:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005044:	4689      	mov	r9, r1
 8005046:	4692      	mov	sl, r2
 8005048:	eb1b 0509 	adds.w	r5, fp, r9
 800504c:	eb4c 060a 	adc.w	r6, ip, sl
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	4619      	mov	r1, r3
 8005056:	f04f 0200 	mov.w	r2, #0
 800505a:	f04f 0300 	mov.w	r3, #0
 800505e:	f04f 0400 	mov.w	r4, #0
 8005062:	0094      	lsls	r4, r2, #2
 8005064:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005068:	008b      	lsls	r3, r1, #2
 800506a:	461a      	mov	r2, r3
 800506c:	4623      	mov	r3, r4
 800506e:	4628      	mov	r0, r5
 8005070:	4631      	mov	r1, r6
 8005072:	f7fb f8a9 	bl	80001c8 <__aeabi_uldivmod>
 8005076:	4603      	mov	r3, r0
 8005078:	460c      	mov	r4, r1
 800507a:	461a      	mov	r2, r3
 800507c:	4b9a      	ldr	r3, [pc, #616]	; (80052e8 <UART_SetConfig+0x6f4>)
 800507e:	fba3 1302 	umull	r1, r3, r3, r2
 8005082:	095b      	lsrs	r3, r3, #5
 8005084:	2164      	movs	r1, #100	; 0x64
 8005086:	fb01 f303 	mul.w	r3, r1, r3
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	011b      	lsls	r3, r3, #4
 800508e:	3332      	adds	r3, #50	; 0x32
 8005090:	4a95      	ldr	r2, [pc, #596]	; (80052e8 <UART_SetConfig+0x6f4>)
 8005092:	fba2 2303 	umull	r2, r3, r2, r3
 8005096:	095b      	lsrs	r3, r3, #5
 8005098:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800509c:	4498      	add	r8, r3
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	469b      	mov	fp, r3
 80050a2:	f04f 0c00 	mov.w	ip, #0
 80050a6:	46d9      	mov	r9, fp
 80050a8:	46e2      	mov	sl, ip
 80050aa:	eb19 0309 	adds.w	r3, r9, r9
 80050ae:	eb4a 040a 	adc.w	r4, sl, sl
 80050b2:	4699      	mov	r9, r3
 80050b4:	46a2      	mov	sl, r4
 80050b6:	eb19 090b 	adds.w	r9, r9, fp
 80050ba:	eb4a 0a0c 	adc.w	sl, sl, ip
 80050be:	f04f 0100 	mov.w	r1, #0
 80050c2:	f04f 0200 	mov.w	r2, #0
 80050c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80050ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80050d2:	4689      	mov	r9, r1
 80050d4:	4692      	mov	sl, r2
 80050d6:	eb1b 0509 	adds.w	r5, fp, r9
 80050da:	eb4c 060a 	adc.w	r6, ip, sl
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	4619      	mov	r1, r3
 80050e4:	f04f 0200 	mov.w	r2, #0
 80050e8:	f04f 0300 	mov.w	r3, #0
 80050ec:	f04f 0400 	mov.w	r4, #0
 80050f0:	0094      	lsls	r4, r2, #2
 80050f2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80050f6:	008b      	lsls	r3, r1, #2
 80050f8:	461a      	mov	r2, r3
 80050fa:	4623      	mov	r3, r4
 80050fc:	4628      	mov	r0, r5
 80050fe:	4631      	mov	r1, r6
 8005100:	f7fb f862 	bl	80001c8 <__aeabi_uldivmod>
 8005104:	4603      	mov	r3, r0
 8005106:	460c      	mov	r4, r1
 8005108:	461a      	mov	r2, r3
 800510a:	4b77      	ldr	r3, [pc, #476]	; (80052e8 <UART_SetConfig+0x6f4>)
 800510c:	fba3 1302 	umull	r1, r3, r3, r2
 8005110:	095b      	lsrs	r3, r3, #5
 8005112:	2164      	movs	r1, #100	; 0x64
 8005114:	fb01 f303 	mul.w	r3, r1, r3
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	011b      	lsls	r3, r3, #4
 800511c:	3332      	adds	r3, #50	; 0x32
 800511e:	4a72      	ldr	r2, [pc, #456]	; (80052e8 <UART_SetConfig+0x6f4>)
 8005120:	fba2 2303 	umull	r2, r3, r2, r3
 8005124:	095b      	lsrs	r3, r3, #5
 8005126:	f003 020f 	and.w	r2, r3, #15
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4442      	add	r2, r8
 8005130:	609a      	str	r2, [r3, #8]
 8005132:	e0d0      	b.n	80052d6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005134:	f7ff f8de 	bl	80042f4 <HAL_RCC_GetPCLK1Freq>
 8005138:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	469a      	mov	sl, r3
 800513e:	f04f 0b00 	mov.w	fp, #0
 8005142:	46d0      	mov	r8, sl
 8005144:	46d9      	mov	r9, fp
 8005146:	eb18 0308 	adds.w	r3, r8, r8
 800514a:	eb49 0409 	adc.w	r4, r9, r9
 800514e:	4698      	mov	r8, r3
 8005150:	46a1      	mov	r9, r4
 8005152:	eb18 080a 	adds.w	r8, r8, sl
 8005156:	eb49 090b 	adc.w	r9, r9, fp
 800515a:	f04f 0100 	mov.w	r1, #0
 800515e:	f04f 0200 	mov.w	r2, #0
 8005162:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005166:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800516a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800516e:	4688      	mov	r8, r1
 8005170:	4691      	mov	r9, r2
 8005172:	eb1a 0508 	adds.w	r5, sl, r8
 8005176:	eb4b 0609 	adc.w	r6, fp, r9
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	4619      	mov	r1, r3
 8005180:	f04f 0200 	mov.w	r2, #0
 8005184:	f04f 0300 	mov.w	r3, #0
 8005188:	f04f 0400 	mov.w	r4, #0
 800518c:	0094      	lsls	r4, r2, #2
 800518e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005192:	008b      	lsls	r3, r1, #2
 8005194:	461a      	mov	r2, r3
 8005196:	4623      	mov	r3, r4
 8005198:	4628      	mov	r0, r5
 800519a:	4631      	mov	r1, r6
 800519c:	f7fb f814 	bl	80001c8 <__aeabi_uldivmod>
 80051a0:	4603      	mov	r3, r0
 80051a2:	460c      	mov	r4, r1
 80051a4:	461a      	mov	r2, r3
 80051a6:	4b50      	ldr	r3, [pc, #320]	; (80052e8 <UART_SetConfig+0x6f4>)
 80051a8:	fba3 2302 	umull	r2, r3, r3, r2
 80051ac:	095b      	lsrs	r3, r3, #5
 80051ae:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	469b      	mov	fp, r3
 80051b6:	f04f 0c00 	mov.w	ip, #0
 80051ba:	46d9      	mov	r9, fp
 80051bc:	46e2      	mov	sl, ip
 80051be:	eb19 0309 	adds.w	r3, r9, r9
 80051c2:	eb4a 040a 	adc.w	r4, sl, sl
 80051c6:	4699      	mov	r9, r3
 80051c8:	46a2      	mov	sl, r4
 80051ca:	eb19 090b 	adds.w	r9, r9, fp
 80051ce:	eb4a 0a0c 	adc.w	sl, sl, ip
 80051d2:	f04f 0100 	mov.w	r1, #0
 80051d6:	f04f 0200 	mov.w	r2, #0
 80051da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80051e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80051e6:	4689      	mov	r9, r1
 80051e8:	4692      	mov	sl, r2
 80051ea:	eb1b 0509 	adds.w	r5, fp, r9
 80051ee:	eb4c 060a 	adc.w	r6, ip, sl
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	4619      	mov	r1, r3
 80051f8:	f04f 0200 	mov.w	r2, #0
 80051fc:	f04f 0300 	mov.w	r3, #0
 8005200:	f04f 0400 	mov.w	r4, #0
 8005204:	0094      	lsls	r4, r2, #2
 8005206:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800520a:	008b      	lsls	r3, r1, #2
 800520c:	461a      	mov	r2, r3
 800520e:	4623      	mov	r3, r4
 8005210:	4628      	mov	r0, r5
 8005212:	4631      	mov	r1, r6
 8005214:	f7fa ffd8 	bl	80001c8 <__aeabi_uldivmod>
 8005218:	4603      	mov	r3, r0
 800521a:	460c      	mov	r4, r1
 800521c:	461a      	mov	r2, r3
 800521e:	4b32      	ldr	r3, [pc, #200]	; (80052e8 <UART_SetConfig+0x6f4>)
 8005220:	fba3 1302 	umull	r1, r3, r3, r2
 8005224:	095b      	lsrs	r3, r3, #5
 8005226:	2164      	movs	r1, #100	; 0x64
 8005228:	fb01 f303 	mul.w	r3, r1, r3
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	011b      	lsls	r3, r3, #4
 8005230:	3332      	adds	r3, #50	; 0x32
 8005232:	4a2d      	ldr	r2, [pc, #180]	; (80052e8 <UART_SetConfig+0x6f4>)
 8005234:	fba2 2303 	umull	r2, r3, r2, r3
 8005238:	095b      	lsrs	r3, r3, #5
 800523a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800523e:	4498      	add	r8, r3
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	469b      	mov	fp, r3
 8005244:	f04f 0c00 	mov.w	ip, #0
 8005248:	46d9      	mov	r9, fp
 800524a:	46e2      	mov	sl, ip
 800524c:	eb19 0309 	adds.w	r3, r9, r9
 8005250:	eb4a 040a 	adc.w	r4, sl, sl
 8005254:	4699      	mov	r9, r3
 8005256:	46a2      	mov	sl, r4
 8005258:	eb19 090b 	adds.w	r9, r9, fp
 800525c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005260:	f04f 0100 	mov.w	r1, #0
 8005264:	f04f 0200 	mov.w	r2, #0
 8005268:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800526c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005270:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005274:	4689      	mov	r9, r1
 8005276:	4692      	mov	sl, r2
 8005278:	eb1b 0509 	adds.w	r5, fp, r9
 800527c:	eb4c 060a 	adc.w	r6, ip, sl
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	4619      	mov	r1, r3
 8005286:	f04f 0200 	mov.w	r2, #0
 800528a:	f04f 0300 	mov.w	r3, #0
 800528e:	f04f 0400 	mov.w	r4, #0
 8005292:	0094      	lsls	r4, r2, #2
 8005294:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005298:	008b      	lsls	r3, r1, #2
 800529a:	461a      	mov	r2, r3
 800529c:	4623      	mov	r3, r4
 800529e:	4628      	mov	r0, r5
 80052a0:	4631      	mov	r1, r6
 80052a2:	f7fa ff91 	bl	80001c8 <__aeabi_uldivmod>
 80052a6:	4603      	mov	r3, r0
 80052a8:	460c      	mov	r4, r1
 80052aa:	461a      	mov	r2, r3
 80052ac:	4b0e      	ldr	r3, [pc, #56]	; (80052e8 <UART_SetConfig+0x6f4>)
 80052ae:	fba3 1302 	umull	r1, r3, r3, r2
 80052b2:	095b      	lsrs	r3, r3, #5
 80052b4:	2164      	movs	r1, #100	; 0x64
 80052b6:	fb01 f303 	mul.w	r3, r1, r3
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	011b      	lsls	r3, r3, #4
 80052be:	3332      	adds	r3, #50	; 0x32
 80052c0:	4a09      	ldr	r2, [pc, #36]	; (80052e8 <UART_SetConfig+0x6f4>)
 80052c2:	fba2 2303 	umull	r2, r3, r2, r3
 80052c6:	095b      	lsrs	r3, r3, #5
 80052c8:	f003 020f 	and.w	r2, r3, #15
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4442      	add	r2, r8
 80052d2:	609a      	str	r2, [r3, #8]
}
 80052d4:	e7ff      	b.n	80052d6 <UART_SetConfig+0x6e2>
 80052d6:	bf00      	nop
 80052d8:	3714      	adds	r7, #20
 80052da:	46bd      	mov	sp, r7
 80052dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052e0:	40011000 	.word	0x40011000
 80052e4:	40011400 	.word	0x40011400
 80052e8:	51eb851f 	.word	0x51eb851f

080052ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052ec:	b084      	sub	sp, #16
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b084      	sub	sp, #16
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
 80052f6:	f107 001c 	add.w	r0, r7, #28
 80052fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80052fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005300:	2b01      	cmp	r3, #1
 8005302:	d122      	bne.n	800534a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005308:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005318:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800532c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800532e:	2b01      	cmp	r3, #1
 8005330:	d105      	bne.n	800533e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f001 fac6 	bl	80068d0 <USB_CoreReset>
 8005344:	4603      	mov	r3, r0
 8005346:	73fb      	strb	r3, [r7, #15]
 8005348:	e01a      	b.n	8005380 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f001 faba 	bl	80068d0 <USB_CoreReset>
 800535c:	4603      	mov	r3, r0
 800535e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005360:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005362:	2b00      	cmp	r3, #0
 8005364:	d106      	bne.n	8005374 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	639a      	str	r2, [r3, #56]	; 0x38
 8005372:	e005      	b.n	8005380 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005378:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005382:	2b01      	cmp	r3, #1
 8005384:	d10b      	bne.n	800539e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f043 0206 	orr.w	r2, r3, #6
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f043 0220 	orr.w	r2, r3, #32
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800539e:	7bfb      	ldrb	r3, [r7, #15]
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3710      	adds	r7, #16
 80053a4:	46bd      	mov	sp, r7
 80053a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053aa:	b004      	add	sp, #16
 80053ac:	4770      	bx	lr
	...

080053b0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b087      	sub	sp, #28
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	4613      	mov	r3, r2
 80053bc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80053be:	79fb      	ldrb	r3, [r7, #7]
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d165      	bne.n	8005490 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	4a41      	ldr	r2, [pc, #260]	; (80054cc <USB_SetTurnaroundTime+0x11c>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d906      	bls.n	80053da <USB_SetTurnaroundTime+0x2a>
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	4a40      	ldr	r2, [pc, #256]	; (80054d0 <USB_SetTurnaroundTime+0x120>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d802      	bhi.n	80053da <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80053d4:	230f      	movs	r3, #15
 80053d6:	617b      	str	r3, [r7, #20]
 80053d8:	e062      	b.n	80054a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	4a3c      	ldr	r2, [pc, #240]	; (80054d0 <USB_SetTurnaroundTime+0x120>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d906      	bls.n	80053f0 <USB_SetTurnaroundTime+0x40>
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	4a3b      	ldr	r2, [pc, #236]	; (80054d4 <USB_SetTurnaroundTime+0x124>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d802      	bhi.n	80053f0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80053ea:	230e      	movs	r3, #14
 80053ec:	617b      	str	r3, [r7, #20]
 80053ee:	e057      	b.n	80054a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	4a38      	ldr	r2, [pc, #224]	; (80054d4 <USB_SetTurnaroundTime+0x124>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d906      	bls.n	8005406 <USB_SetTurnaroundTime+0x56>
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	4a37      	ldr	r2, [pc, #220]	; (80054d8 <USB_SetTurnaroundTime+0x128>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d802      	bhi.n	8005406 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005400:	230d      	movs	r3, #13
 8005402:	617b      	str	r3, [r7, #20]
 8005404:	e04c      	b.n	80054a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	4a33      	ldr	r2, [pc, #204]	; (80054d8 <USB_SetTurnaroundTime+0x128>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d906      	bls.n	800541c <USB_SetTurnaroundTime+0x6c>
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	4a32      	ldr	r2, [pc, #200]	; (80054dc <USB_SetTurnaroundTime+0x12c>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d802      	bhi.n	800541c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005416:	230c      	movs	r3, #12
 8005418:	617b      	str	r3, [r7, #20]
 800541a:	e041      	b.n	80054a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	4a2f      	ldr	r2, [pc, #188]	; (80054dc <USB_SetTurnaroundTime+0x12c>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d906      	bls.n	8005432 <USB_SetTurnaroundTime+0x82>
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	4a2e      	ldr	r2, [pc, #184]	; (80054e0 <USB_SetTurnaroundTime+0x130>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d802      	bhi.n	8005432 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800542c:	230b      	movs	r3, #11
 800542e:	617b      	str	r3, [r7, #20]
 8005430:	e036      	b.n	80054a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	4a2a      	ldr	r2, [pc, #168]	; (80054e0 <USB_SetTurnaroundTime+0x130>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d906      	bls.n	8005448 <USB_SetTurnaroundTime+0x98>
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	4a29      	ldr	r2, [pc, #164]	; (80054e4 <USB_SetTurnaroundTime+0x134>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d802      	bhi.n	8005448 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005442:	230a      	movs	r3, #10
 8005444:	617b      	str	r3, [r7, #20]
 8005446:	e02b      	b.n	80054a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	4a26      	ldr	r2, [pc, #152]	; (80054e4 <USB_SetTurnaroundTime+0x134>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d906      	bls.n	800545e <USB_SetTurnaroundTime+0xae>
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	4a25      	ldr	r2, [pc, #148]	; (80054e8 <USB_SetTurnaroundTime+0x138>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d802      	bhi.n	800545e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005458:	2309      	movs	r3, #9
 800545a:	617b      	str	r3, [r7, #20]
 800545c:	e020      	b.n	80054a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	4a21      	ldr	r2, [pc, #132]	; (80054e8 <USB_SetTurnaroundTime+0x138>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d906      	bls.n	8005474 <USB_SetTurnaroundTime+0xc4>
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	4a20      	ldr	r2, [pc, #128]	; (80054ec <USB_SetTurnaroundTime+0x13c>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d802      	bhi.n	8005474 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800546e:	2308      	movs	r3, #8
 8005470:	617b      	str	r3, [r7, #20]
 8005472:	e015      	b.n	80054a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	4a1d      	ldr	r2, [pc, #116]	; (80054ec <USB_SetTurnaroundTime+0x13c>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d906      	bls.n	800548a <USB_SetTurnaroundTime+0xda>
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	4a1c      	ldr	r2, [pc, #112]	; (80054f0 <USB_SetTurnaroundTime+0x140>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d802      	bhi.n	800548a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005484:	2307      	movs	r3, #7
 8005486:	617b      	str	r3, [r7, #20]
 8005488:	e00a      	b.n	80054a0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800548a:	2306      	movs	r3, #6
 800548c:	617b      	str	r3, [r7, #20]
 800548e:	e007      	b.n	80054a0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005490:	79fb      	ldrb	r3, [r7, #7]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d102      	bne.n	800549c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005496:	2309      	movs	r3, #9
 8005498:	617b      	str	r3, [r7, #20]
 800549a:	e001      	b.n	80054a0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800549c:	2309      	movs	r3, #9
 800549e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	68da      	ldr	r2, [r3, #12]
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	029b      	lsls	r3, r3, #10
 80054b4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80054b8:	431a      	orrs	r2, r3
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	371c      	adds	r7, #28
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr
 80054cc:	00d8acbf 	.word	0x00d8acbf
 80054d0:	00e4e1bf 	.word	0x00e4e1bf
 80054d4:	00f423ff 	.word	0x00f423ff
 80054d8:	0106737f 	.word	0x0106737f
 80054dc:	011a499f 	.word	0x011a499f
 80054e0:	01312cff 	.word	0x01312cff
 80054e4:	014ca43f 	.word	0x014ca43f
 80054e8:	016e35ff 	.word	0x016e35ff
 80054ec:	01a6ab1f 	.word	0x01a6ab1f
 80054f0:	01e847ff 	.word	0x01e847ff

080054f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f043 0201 	orr.w	r2, r3, #1
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005516:	b480      	push	{r7}
 8005518:	b083      	sub	sp, #12
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	f023 0201 	bic.w	r2, r3, #1
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	460b      	mov	r3, r1
 8005542:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005550:	78fb      	ldrb	r3, [r7, #3]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d106      	bne.n	8005564 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	60da      	str	r2, [r3, #12]
 8005562:	e00b      	b.n	800557c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005564:	78fb      	ldrb	r3, [r7, #3]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d106      	bne.n	8005578 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	60da      	str	r2, [r3, #12]
 8005576:	e001      	b.n	800557c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e003      	b.n	8005584 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800557c:	2032      	movs	r0, #50	; 0x32
 800557e:	f7fb fd61 	bl	8001044 <HAL_Delay>

  return HAL_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	3708      	adds	r7, #8
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800558c:	b084      	sub	sp, #16
 800558e:	b580      	push	{r7, lr}
 8005590:	b086      	sub	sp, #24
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
 8005596:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800559a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800559e:	2300      	movs	r3, #0
 80055a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80055a6:	2300      	movs	r3, #0
 80055a8:	613b      	str	r3, [r7, #16]
 80055aa:	e009      	b.n	80055c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	3340      	adds	r3, #64	; 0x40
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	4413      	add	r3, r2
 80055b6:	2200      	movs	r2, #0
 80055b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	3301      	adds	r3, #1
 80055be:	613b      	str	r3, [r7, #16]
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	2b0e      	cmp	r3, #14
 80055c4:	d9f2      	bls.n	80055ac <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80055c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d11c      	bne.n	8005606 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055da:	f043 0302 	orr.w	r3, r3, #2
 80055de:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	639a      	str	r2, [r3, #56]	; 0x38
 8005604:	e00b      	b.n	800561e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005616:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005624:	461a      	mov	r2, r3
 8005626:	2300      	movs	r3, #0
 8005628:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005630:	4619      	mov	r1, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005638:	461a      	mov	r2, r3
 800563a:	680b      	ldr	r3, [r1, #0]
 800563c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800563e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005640:	2b01      	cmp	r3, #1
 8005642:	d10c      	bne.n	800565e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005646:	2b00      	cmp	r3, #0
 8005648:	d104      	bne.n	8005654 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800564a:	2100      	movs	r1, #0
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 f949 	bl	80058e4 <USB_SetDevSpeed>
 8005652:	e008      	b.n	8005666 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005654:	2101      	movs	r1, #1
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 f944 	bl	80058e4 <USB_SetDevSpeed>
 800565c:	e003      	b.n	8005666 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800565e:	2103      	movs	r1, #3
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 f93f 	bl	80058e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005666:	2110      	movs	r1, #16
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 f8f3 	bl	8005854 <USB_FlushTxFifo>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d001      	beq.n	8005678 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 f911 	bl	80058a0 <USB_FlushRxFifo>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d001      	beq.n	8005688 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800568e:	461a      	mov	r2, r3
 8005690:	2300      	movs	r3, #0
 8005692:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800569a:	461a      	mov	r2, r3
 800569c:	2300      	movs	r3, #0
 800569e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056a6:	461a      	mov	r2, r3
 80056a8:	2300      	movs	r3, #0
 80056aa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056ac:	2300      	movs	r3, #0
 80056ae:	613b      	str	r3, [r7, #16]
 80056b0:	e043      	b.n	800573a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	015a      	lsls	r2, r3, #5
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	4413      	add	r3, r2
 80056ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056c8:	d118      	bne.n	80056fc <USB_DevInit+0x170>
    {
      if (i == 0U)
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d10a      	bne.n	80056e6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	015a      	lsls	r2, r3, #5
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	4413      	add	r3, r2
 80056d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056dc:	461a      	mov	r2, r3
 80056de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80056e2:	6013      	str	r3, [r2, #0]
 80056e4:	e013      	b.n	800570e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	015a      	lsls	r2, r3, #5
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	4413      	add	r3, r2
 80056ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f2:	461a      	mov	r2, r3
 80056f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80056f8:	6013      	str	r3, [r2, #0]
 80056fa:	e008      	b.n	800570e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	015a      	lsls	r2, r3, #5
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	4413      	add	r3, r2
 8005704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005708:	461a      	mov	r2, r3
 800570a:	2300      	movs	r3, #0
 800570c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	015a      	lsls	r2, r3, #5
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	4413      	add	r3, r2
 8005716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800571a:	461a      	mov	r2, r3
 800571c:	2300      	movs	r3, #0
 800571e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	015a      	lsls	r2, r3, #5
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	4413      	add	r3, r2
 8005728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800572c:	461a      	mov	r2, r3
 800572e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005732:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	3301      	adds	r3, #1
 8005738:	613b      	str	r3, [r7, #16]
 800573a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573c:	693a      	ldr	r2, [r7, #16]
 800573e:	429a      	cmp	r2, r3
 8005740:	d3b7      	bcc.n	80056b2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005742:	2300      	movs	r3, #0
 8005744:	613b      	str	r3, [r7, #16]
 8005746:	e043      	b.n	80057d0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	015a      	lsls	r2, r3, #5
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	4413      	add	r3, r2
 8005750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800575a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800575e:	d118      	bne.n	8005792 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d10a      	bne.n	800577c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	015a      	lsls	r2, r3, #5
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	4413      	add	r3, r2
 800576e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005772:	461a      	mov	r2, r3
 8005774:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005778:	6013      	str	r3, [r2, #0]
 800577a:	e013      	b.n	80057a4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	015a      	lsls	r2, r3, #5
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	4413      	add	r3, r2
 8005784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005788:	461a      	mov	r2, r3
 800578a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800578e:	6013      	str	r3, [r2, #0]
 8005790:	e008      	b.n	80057a4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	015a      	lsls	r2, r3, #5
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	4413      	add	r3, r2
 800579a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800579e:	461a      	mov	r2, r3
 80057a0:	2300      	movs	r3, #0
 80057a2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	015a      	lsls	r2, r3, #5
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	4413      	add	r3, r2
 80057ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b0:	461a      	mov	r2, r3
 80057b2:	2300      	movs	r3, #0
 80057b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	015a      	lsls	r2, r3, #5
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	4413      	add	r3, r2
 80057be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c2:	461a      	mov	r2, r3
 80057c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80057c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	3301      	adds	r3, #1
 80057ce:	613b      	str	r3, [r7, #16]
 80057d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d3b7      	bcc.n	8005748 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057ea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80057f8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80057fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d105      	bne.n	800580c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	699b      	ldr	r3, [r3, #24]
 8005804:	f043 0210 	orr.w	r2, r3, #16
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	699a      	ldr	r2, [r3, #24]
 8005810:	4b0f      	ldr	r3, [pc, #60]	; (8005850 <USB_DevInit+0x2c4>)
 8005812:	4313      	orrs	r3, r2
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800581a:	2b00      	cmp	r3, #0
 800581c:	d005      	beq.n	800582a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	f043 0208 	orr.w	r2, r3, #8
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800582a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800582c:	2b01      	cmp	r3, #1
 800582e:	d107      	bne.n	8005840 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	699b      	ldr	r3, [r3, #24]
 8005834:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005838:	f043 0304 	orr.w	r3, r3, #4
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005840:	7dfb      	ldrb	r3, [r7, #23]
}
 8005842:	4618      	mov	r0, r3
 8005844:	3718      	adds	r7, #24
 8005846:	46bd      	mov	sp, r7
 8005848:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800584c:	b004      	add	sp, #16
 800584e:	4770      	bx	lr
 8005850:	803c3800 	.word	0x803c3800

08005854 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005854:	b480      	push	{r7}
 8005856:	b085      	sub	sp, #20
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800585e:	2300      	movs	r3, #0
 8005860:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	019b      	lsls	r3, r3, #6
 8005866:	f043 0220 	orr.w	r2, r3, #32
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	3301      	adds	r3, #1
 8005872:	60fb      	str	r3, [r7, #12]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	4a09      	ldr	r2, [pc, #36]	; (800589c <USB_FlushTxFifo+0x48>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d901      	bls.n	8005880 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e006      	b.n	800588e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	f003 0320 	and.w	r3, r3, #32
 8005888:	2b20      	cmp	r3, #32
 800588a:	d0f0      	beq.n	800586e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800588c:	2300      	movs	r3, #0
}
 800588e:	4618      	mov	r0, r3
 8005890:	3714      	adds	r7, #20
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	00030d40 	.word	0x00030d40

080058a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80058a8:	2300      	movs	r3, #0
 80058aa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2210      	movs	r2, #16
 80058b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	3301      	adds	r3, #1
 80058b6:	60fb      	str	r3, [r7, #12]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	4a09      	ldr	r2, [pc, #36]	; (80058e0 <USB_FlushRxFifo+0x40>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d901      	bls.n	80058c4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e006      	b.n	80058d2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	f003 0310 	and.w	r3, r3, #16
 80058cc:	2b10      	cmp	r3, #16
 80058ce:	d0f0      	beq.n	80058b2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3714      	adds	r7, #20
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	00030d40 	.word	0x00030d40

080058e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	460b      	mov	r3, r1
 80058ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	78fb      	ldrb	r3, [r7, #3]
 80058fe:	68f9      	ldr	r1, [r7, #12]
 8005900:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005904:	4313      	orrs	r3, r2
 8005906:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3714      	adds	r7, #20
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr

08005916 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005916:	b480      	push	{r7}
 8005918:	b087      	sub	sp, #28
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f003 0306 	and.w	r3, r3, #6
 800592e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d102      	bne.n	800593c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005936:	2300      	movs	r3, #0
 8005938:	75fb      	strb	r3, [r7, #23]
 800593a:	e00a      	b.n	8005952 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2b02      	cmp	r3, #2
 8005940:	d002      	beq.n	8005948 <USB_GetDevSpeed+0x32>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2b06      	cmp	r3, #6
 8005946:	d102      	bne.n	800594e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005948:	2302      	movs	r3, #2
 800594a:	75fb      	strb	r3, [r7, #23]
 800594c:	e001      	b.n	8005952 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800594e:	230f      	movs	r3, #15
 8005950:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005952:	7dfb      	ldrb	r3, [r7, #23]
}
 8005954:	4618      	mov	r0, r3
 8005956:	371c      	adds	r7, #28
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	785b      	ldrb	r3, [r3, #1]
 8005978:	2b01      	cmp	r3, #1
 800597a:	d13a      	bne.n	80059f2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005982:	69da      	ldr	r2, [r3, #28]
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	f003 030f 	and.w	r3, r3, #15
 800598c:	2101      	movs	r1, #1
 800598e:	fa01 f303 	lsl.w	r3, r1, r3
 8005992:	b29b      	uxth	r3, r3
 8005994:	68f9      	ldr	r1, [r7, #12]
 8005996:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800599a:	4313      	orrs	r3, r2
 800599c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	015a      	lsls	r2, r3, #5
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	4413      	add	r3, r2
 80059a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d155      	bne.n	8005a60 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	015a      	lsls	r2, r3, #5
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	4413      	add	r3, r2
 80059bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	78db      	ldrb	r3, [r3, #3]
 80059ce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80059d0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	059b      	lsls	r3, r3, #22
 80059d6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80059d8:	4313      	orrs	r3, r2
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	0151      	lsls	r1, r2, #5
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	440a      	add	r2, r1
 80059e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059ee:	6013      	str	r3, [r2, #0]
 80059f0:	e036      	b.n	8005a60 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059f8:	69da      	ldr	r2, [r3, #28]
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	f003 030f 	and.w	r3, r3, #15
 8005a02:	2101      	movs	r1, #1
 8005a04:	fa01 f303 	lsl.w	r3, r1, r3
 8005a08:	041b      	lsls	r3, r3, #16
 8005a0a:	68f9      	ldr	r1, [r7, #12]
 8005a0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a10:	4313      	orrs	r3, r2
 8005a12:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	015a      	lsls	r2, r3, #5
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d11a      	bne.n	8005a60 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	015a      	lsls	r2, r3, #5
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	4413      	add	r3, r2
 8005a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	78db      	ldrb	r3, [r3, #3]
 8005a44:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005a46:	430b      	orrs	r3, r1
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	0151      	lsls	r1, r2, #5
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	440a      	add	r2, r1
 8005a52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a5e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3714      	adds	r7, #20
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
	...

08005a70 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	785b      	ldrb	r3, [r3, #1]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d161      	bne.n	8005b50 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	015a      	lsls	r2, r3, #5
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	4413      	add	r3, r2
 8005a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005aa2:	d11f      	bne.n	8005ae4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	015a      	lsls	r2, r3, #5
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	4413      	add	r3, r2
 8005aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68ba      	ldr	r2, [r7, #8]
 8005ab4:	0151      	lsls	r1, r2, #5
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	440a      	add	r2, r1
 8005aba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005abe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ac2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	015a      	lsls	r2, r3, #5
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	4413      	add	r3, r2
 8005acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68ba      	ldr	r2, [r7, #8]
 8005ad4:	0151      	lsls	r1, r2, #5
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	440a      	add	r2, r1
 8005ada:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ade:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ae2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	f003 030f 	and.w	r3, r3, #15
 8005af4:	2101      	movs	r1, #1
 8005af6:	fa01 f303 	lsl.w	r3, r1, r3
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	43db      	mvns	r3, r3
 8005afe:	68f9      	ldr	r1, [r7, #12]
 8005b00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b04:	4013      	ands	r3, r2
 8005b06:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b0e:	69da      	ldr	r2, [r3, #28]
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	f003 030f 	and.w	r3, r3, #15
 8005b18:	2101      	movs	r1, #1
 8005b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	43db      	mvns	r3, r3
 8005b22:	68f9      	ldr	r1, [r7, #12]
 8005b24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b28:	4013      	ands	r3, r2
 8005b2a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	015a      	lsls	r2, r3, #5
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	4413      	add	r3, r2
 8005b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	0159      	lsls	r1, r3, #5
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	440b      	add	r3, r1
 8005b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b46:	4619      	mov	r1, r3
 8005b48:	4b35      	ldr	r3, [pc, #212]	; (8005c20 <USB_DeactivateEndpoint+0x1b0>)
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	600b      	str	r3, [r1, #0]
 8005b4e:	e060      	b.n	8005c12 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	015a      	lsls	r2, r3, #5
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	4413      	add	r3, r2
 8005b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b66:	d11f      	bne.n	8005ba8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	015a      	lsls	r2, r3, #5
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	4413      	add	r3, r2
 8005b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68ba      	ldr	r2, [r7, #8]
 8005b78:	0151      	lsls	r1, r2, #5
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	440a      	add	r2, r1
 8005b7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b86:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	015a      	lsls	r2, r3, #5
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	4413      	add	r3, r2
 8005b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68ba      	ldr	r2, [r7, #8]
 8005b98:	0151      	lsls	r1, r2, #5
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	440a      	add	r2, r1
 8005b9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ba2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ba6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	f003 030f 	and.w	r3, r3, #15
 8005bb8:	2101      	movs	r1, #1
 8005bba:	fa01 f303 	lsl.w	r3, r1, r3
 8005bbe:	041b      	lsls	r3, r3, #16
 8005bc0:	43db      	mvns	r3, r3
 8005bc2:	68f9      	ldr	r1, [r7, #12]
 8005bc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bc8:	4013      	ands	r3, r2
 8005bca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bd2:	69da      	ldr	r2, [r3, #28]
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	f003 030f 	and.w	r3, r3, #15
 8005bdc:	2101      	movs	r1, #1
 8005bde:	fa01 f303 	lsl.w	r3, r1, r3
 8005be2:	041b      	lsls	r3, r3, #16
 8005be4:	43db      	mvns	r3, r3
 8005be6:	68f9      	ldr	r1, [r7, #12]
 8005be8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bec:	4013      	ands	r3, r2
 8005bee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	015a      	lsls	r2, r3, #5
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	0159      	lsls	r1, r3, #5
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	440b      	add	r3, r1
 8005c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	4b05      	ldr	r3, [pc, #20]	; (8005c24 <USB_DeactivateEndpoint+0x1b4>)
 8005c0e:	4013      	ands	r3, r2
 8005c10:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3714      	adds	r7, #20
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr
 8005c20:	ec337800 	.word	0xec337800
 8005c24:	eff37800 	.word	0xeff37800

08005c28 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b08a      	sub	sp, #40	; 0x28
 8005c2c:	af02      	add	r7, sp, #8
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	4613      	mov	r3, r2
 8005c34:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	785b      	ldrb	r3, [r3, #1]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	f040 815c 	bne.w	8005f02 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d132      	bne.n	8005cb8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	015a      	lsls	r2, r3, #5
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	4413      	add	r3, r2
 8005c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	69ba      	ldr	r2, [r7, #24]
 8005c62:	0151      	lsls	r1, r2, #5
 8005c64:	69fa      	ldr	r2, [r7, #28]
 8005c66:	440a      	add	r2, r1
 8005c68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c6c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c70:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	015a      	lsls	r2, r3, #5
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	69ba      	ldr	r2, [r7, #24]
 8005c86:	0151      	lsls	r1, r2, #5
 8005c88:	69fa      	ldr	r2, [r7, #28]
 8005c8a:	440a      	add	r2, r1
 8005c8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	015a      	lsls	r2, r3, #5
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	69ba      	ldr	r2, [r7, #24]
 8005ca6:	0151      	lsls	r1, r2, #5
 8005ca8:	69fa      	ldr	r2, [r7, #28]
 8005caa:	440a      	add	r2, r1
 8005cac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cb0:	0cdb      	lsrs	r3, r3, #19
 8005cb2:	04db      	lsls	r3, r3, #19
 8005cb4:	6113      	str	r3, [r2, #16]
 8005cb6:	e074      	b.n	8005da2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	015a      	lsls	r2, r3, #5
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	69ba      	ldr	r2, [r7, #24]
 8005cc8:	0151      	lsls	r1, r2, #5
 8005cca:	69fa      	ldr	r2, [r7, #28]
 8005ccc:	440a      	add	r2, r1
 8005cce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cd2:	0cdb      	lsrs	r3, r3, #19
 8005cd4:	04db      	lsls	r3, r3, #19
 8005cd6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	015a      	lsls	r2, r3, #5
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	4413      	add	r3, r2
 8005ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	69ba      	ldr	r2, [r7, #24]
 8005ce8:	0151      	lsls	r1, r2, #5
 8005cea:	69fa      	ldr	r2, [r7, #28]
 8005cec:	440a      	add	r2, r1
 8005cee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cf2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005cf6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005cfa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	015a      	lsls	r2, r3, #5
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	4413      	add	r3, r2
 8005d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d08:	691a      	ldr	r2, [r3, #16]
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	6959      	ldr	r1, [r3, #20]
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	440b      	add	r3, r1
 8005d14:	1e59      	subs	r1, r3, #1
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d1e:	04d9      	lsls	r1, r3, #19
 8005d20:	4b9d      	ldr	r3, [pc, #628]	; (8005f98 <USB_EPStartXfer+0x370>)
 8005d22:	400b      	ands	r3, r1
 8005d24:	69b9      	ldr	r1, [r7, #24]
 8005d26:	0148      	lsls	r0, r1, #5
 8005d28:	69f9      	ldr	r1, [r7, #28]
 8005d2a:	4401      	add	r1, r0
 8005d2c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005d30:	4313      	orrs	r3, r2
 8005d32:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	015a      	lsls	r2, r3, #5
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d40:	691a      	ldr	r2, [r3, #16]
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d4a:	69b9      	ldr	r1, [r7, #24]
 8005d4c:	0148      	lsls	r0, r1, #5
 8005d4e:	69f9      	ldr	r1, [r7, #28]
 8005d50:	4401      	add	r1, r0
 8005d52:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005d56:	4313      	orrs	r3, r2
 8005d58:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	78db      	ldrb	r3, [r3, #3]
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d11f      	bne.n	8005da2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	015a      	lsls	r2, r3, #5
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	4413      	add	r3, r2
 8005d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	69ba      	ldr	r2, [r7, #24]
 8005d72:	0151      	lsls	r1, r2, #5
 8005d74:	69fa      	ldr	r2, [r7, #28]
 8005d76:	440a      	add	r2, r1
 8005d78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d7c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005d80:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	015a      	lsls	r2, r3, #5
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	4413      	add	r3, r2
 8005d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	69ba      	ldr	r2, [r7, #24]
 8005d92:	0151      	lsls	r1, r2, #5
 8005d94:	69fa      	ldr	r2, [r7, #28]
 8005d96:	440a      	add	r2, r1
 8005d98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005da0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005da2:	79fb      	ldrb	r3, [r7, #7]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d14b      	bne.n	8005e40 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d009      	beq.n	8005dc4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	015a      	lsls	r2, r3, #5
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	4413      	add	r3, r2
 8005db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	78db      	ldrb	r3, [r3, #3]
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d128      	bne.n	8005e1e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d110      	bne.n	8005dfe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	015a      	lsls	r2, r3, #5
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	4413      	add	r3, r2
 8005de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	69ba      	ldr	r2, [r7, #24]
 8005dec:	0151      	lsls	r1, r2, #5
 8005dee:	69fa      	ldr	r2, [r7, #28]
 8005df0:	440a      	add	r2, r1
 8005df2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005df6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005dfa:	6013      	str	r3, [r2, #0]
 8005dfc:	e00f      	b.n	8005e1e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	015a      	lsls	r2, r3, #5
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	4413      	add	r3, r2
 8005e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	69ba      	ldr	r2, [r7, #24]
 8005e0e:	0151      	lsls	r1, r2, #5
 8005e10:	69fa      	ldr	r2, [r7, #28]
 8005e12:	440a      	add	r2, r1
 8005e14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e1c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	015a      	lsls	r2, r3, #5
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	4413      	add	r3, r2
 8005e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	69ba      	ldr	r2, [r7, #24]
 8005e2e:	0151      	lsls	r1, r2, #5
 8005e30:	69fa      	ldr	r2, [r7, #28]
 8005e32:	440a      	add	r2, r1
 8005e34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e38:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e3c:	6013      	str	r3, [r2, #0]
 8005e3e:	e12f      	b.n	80060a0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	015a      	lsls	r2, r3, #5
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	4413      	add	r3, r2
 8005e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	69ba      	ldr	r2, [r7, #24]
 8005e50:	0151      	lsls	r1, r2, #5
 8005e52:	69fa      	ldr	r2, [r7, #28]
 8005e54:	440a      	add	r2, r1
 8005e56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e5e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	78db      	ldrb	r3, [r3, #3]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d015      	beq.n	8005e94 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	695b      	ldr	r3, [r3, #20]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f000 8117 	beq.w	80060a0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	f003 030f 	and.w	r3, r3, #15
 8005e82:	2101      	movs	r1, #1
 8005e84:	fa01 f303 	lsl.w	r3, r1, r3
 8005e88:	69f9      	ldr	r1, [r7, #28]
 8005e8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	634b      	str	r3, [r1, #52]	; 0x34
 8005e92:	e105      	b.n	80060a0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d110      	bne.n	8005ec6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	015a      	lsls	r2, r3, #5
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	4413      	add	r3, r2
 8005eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	69ba      	ldr	r2, [r7, #24]
 8005eb4:	0151      	lsls	r1, r2, #5
 8005eb6:	69fa      	ldr	r2, [r7, #28]
 8005eb8:	440a      	add	r2, r1
 8005eba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ebe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ec2:	6013      	str	r3, [r2, #0]
 8005ec4:	e00f      	b.n	8005ee6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	015a      	lsls	r2, r3, #5
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	4413      	add	r3, r2
 8005ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	69ba      	ldr	r2, [r7, #24]
 8005ed6:	0151      	lsls	r1, r2, #5
 8005ed8:	69fa      	ldr	r2, [r7, #28]
 8005eda:	440a      	add	r2, r1
 8005edc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ee4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	68d9      	ldr	r1, [r3, #12]
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	781a      	ldrb	r2, [r3, #0]
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	b298      	uxth	r0, r3
 8005ef4:	79fb      	ldrb	r3, [r7, #7]
 8005ef6:	9300      	str	r3, [sp, #0]
 8005ef8:	4603      	mov	r3, r0
 8005efa:	68f8      	ldr	r0, [r7, #12]
 8005efc:	f000 fa2b 	bl	8006356 <USB_WritePacket>
 8005f00:	e0ce      	b.n	80060a0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	015a      	lsls	r2, r3, #5
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	4413      	add	r3, r2
 8005f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	69ba      	ldr	r2, [r7, #24]
 8005f12:	0151      	lsls	r1, r2, #5
 8005f14:	69fa      	ldr	r2, [r7, #28]
 8005f16:	440a      	add	r2, r1
 8005f18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f1c:	0cdb      	lsrs	r3, r3, #19
 8005f1e:	04db      	lsls	r3, r3, #19
 8005f20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	015a      	lsls	r2, r3, #5
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	4413      	add	r3, r2
 8005f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	69ba      	ldr	r2, [r7, #24]
 8005f32:	0151      	lsls	r1, r2, #5
 8005f34:	69fa      	ldr	r2, [r7, #28]
 8005f36:	440a      	add	r2, r1
 8005f38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f3c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f40:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f44:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	695b      	ldr	r3, [r3, #20]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d126      	bne.n	8005f9c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	015a      	lsls	r2, r3, #5
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	4413      	add	r3, r2
 8005f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f5a:	691a      	ldr	r2, [r3, #16]
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f64:	69b9      	ldr	r1, [r7, #24]
 8005f66:	0148      	lsls	r0, r1, #5
 8005f68:	69f9      	ldr	r1, [r7, #28]
 8005f6a:	4401      	add	r1, r0
 8005f6c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f70:	4313      	orrs	r3, r2
 8005f72:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	015a      	lsls	r2, r3, #5
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	69ba      	ldr	r2, [r7, #24]
 8005f84:	0151      	lsls	r1, r2, #5
 8005f86:	69fa      	ldr	r2, [r7, #28]
 8005f88:	440a      	add	r2, r1
 8005f8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f92:	6113      	str	r3, [r2, #16]
 8005f94:	e036      	b.n	8006004 <USB_EPStartXfer+0x3dc>
 8005f96:	bf00      	nop
 8005f98:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	695a      	ldr	r2, [r3, #20]
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	1e5a      	subs	r2, r3, #1
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fb0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	015a      	lsls	r2, r3, #5
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	4413      	add	r3, r2
 8005fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fbe:	691a      	ldr	r2, [r3, #16]
 8005fc0:	8afb      	ldrh	r3, [r7, #22]
 8005fc2:	04d9      	lsls	r1, r3, #19
 8005fc4:	4b39      	ldr	r3, [pc, #228]	; (80060ac <USB_EPStartXfer+0x484>)
 8005fc6:	400b      	ands	r3, r1
 8005fc8:	69b9      	ldr	r1, [r7, #24]
 8005fca:	0148      	lsls	r0, r1, #5
 8005fcc:	69f9      	ldr	r1, [r7, #28]
 8005fce:	4401      	add	r1, r0
 8005fd0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	015a      	lsls	r2, r3, #5
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	4413      	add	r3, r2
 8005fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fe4:	691a      	ldr	r2, [r3, #16]
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	8af9      	ldrh	r1, [r7, #22]
 8005fec:	fb01 f303 	mul.w	r3, r1, r3
 8005ff0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ff4:	69b9      	ldr	r1, [r7, #24]
 8005ff6:	0148      	lsls	r0, r1, #5
 8005ff8:	69f9      	ldr	r1, [r7, #28]
 8005ffa:	4401      	add	r1, r0
 8005ffc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006000:	4313      	orrs	r3, r2
 8006002:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006004:	79fb      	ldrb	r3, [r7, #7]
 8006006:	2b01      	cmp	r3, #1
 8006008:	d10d      	bne.n	8006026 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d009      	beq.n	8006026 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	68d9      	ldr	r1, [r3, #12]
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	015a      	lsls	r2, r3, #5
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	4413      	add	r3, r2
 800601e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006022:	460a      	mov	r2, r1
 8006024:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	78db      	ldrb	r3, [r3, #3]
 800602a:	2b01      	cmp	r3, #1
 800602c:	d128      	bne.n	8006080 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800603a:	2b00      	cmp	r3, #0
 800603c:	d110      	bne.n	8006060 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	015a      	lsls	r2, r3, #5
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	4413      	add	r3, r2
 8006046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	69ba      	ldr	r2, [r7, #24]
 800604e:	0151      	lsls	r1, r2, #5
 8006050:	69fa      	ldr	r2, [r7, #28]
 8006052:	440a      	add	r2, r1
 8006054:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006058:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800605c:	6013      	str	r3, [r2, #0]
 800605e:	e00f      	b.n	8006080 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	015a      	lsls	r2, r3, #5
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	4413      	add	r3, r2
 8006068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	69ba      	ldr	r2, [r7, #24]
 8006070:	0151      	lsls	r1, r2, #5
 8006072:	69fa      	ldr	r2, [r7, #28]
 8006074:	440a      	add	r2, r1
 8006076:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800607a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800607e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	015a      	lsls	r2, r3, #5
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	4413      	add	r3, r2
 8006088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	69ba      	ldr	r2, [r7, #24]
 8006090:	0151      	lsls	r1, r2, #5
 8006092:	69fa      	ldr	r2, [r7, #28]
 8006094:	440a      	add	r2, r1
 8006096:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800609a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800609e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3720      	adds	r7, #32
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	1ff80000 	.word	0x1ff80000

080060b0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b087      	sub	sp, #28
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	4613      	mov	r3, r2
 80060bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	785b      	ldrb	r3, [r3, #1]
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	f040 80cd 	bne.w	800626c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d132      	bne.n	8006140 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	015a      	lsls	r2, r3, #5
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	4413      	add	r3, r2
 80060e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	0151      	lsls	r1, r2, #5
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	440a      	add	r2, r1
 80060f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80060f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80060fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	015a      	lsls	r2, r3, #5
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	4413      	add	r3, r2
 8006106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800610a:	691b      	ldr	r3, [r3, #16]
 800610c:	693a      	ldr	r2, [r7, #16]
 800610e:	0151      	lsls	r1, r2, #5
 8006110:	697a      	ldr	r2, [r7, #20]
 8006112:	440a      	add	r2, r1
 8006114:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006118:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800611c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	015a      	lsls	r2, r3, #5
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	4413      	add	r3, r2
 8006126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	0151      	lsls	r1, r2, #5
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	440a      	add	r2, r1
 8006134:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006138:	0cdb      	lsrs	r3, r3, #19
 800613a:	04db      	lsls	r3, r3, #19
 800613c:	6113      	str	r3, [r2, #16]
 800613e:	e04e      	b.n	80061de <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	015a      	lsls	r2, r3, #5
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	4413      	add	r3, r2
 8006148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	0151      	lsls	r1, r2, #5
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	440a      	add	r2, r1
 8006156:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800615a:	0cdb      	lsrs	r3, r3, #19
 800615c:	04db      	lsls	r3, r3, #19
 800615e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	015a      	lsls	r2, r3, #5
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	4413      	add	r3, r2
 8006168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	693a      	ldr	r2, [r7, #16]
 8006170:	0151      	lsls	r1, r2, #5
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	440a      	add	r2, r1
 8006176:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800617a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800617e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006182:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	695a      	ldr	r2, [r3, #20]
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	429a      	cmp	r2, r3
 800618e:	d903      	bls.n	8006198 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	689a      	ldr	r2, [r3, #8]
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	015a      	lsls	r2, r3, #5
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	4413      	add	r3, r2
 80061a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	693a      	ldr	r2, [r7, #16]
 80061a8:	0151      	lsls	r1, r2, #5
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	440a      	add	r2, r1
 80061ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	015a      	lsls	r2, r3, #5
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	4413      	add	r3, r2
 80061c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061c4:	691a      	ldr	r2, [r3, #16]
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	695b      	ldr	r3, [r3, #20]
 80061ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061ce:	6939      	ldr	r1, [r7, #16]
 80061d0:	0148      	lsls	r0, r1, #5
 80061d2:	6979      	ldr	r1, [r7, #20]
 80061d4:	4401      	add	r1, r0
 80061d6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80061da:	4313      	orrs	r3, r2
 80061dc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80061de:	79fb      	ldrb	r3, [r7, #7]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d11e      	bne.n	8006222 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d009      	beq.n	8006200 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	015a      	lsls	r2, r3, #5
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	4413      	add	r3, r2
 80061f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061f8:	461a      	mov	r2, r3
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	015a      	lsls	r2, r3, #5
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	4413      	add	r3, r2
 8006208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	693a      	ldr	r2, [r7, #16]
 8006210:	0151      	lsls	r1, r2, #5
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	440a      	add	r2, r1
 8006216:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800621a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800621e:	6013      	str	r3, [r2, #0]
 8006220:	e092      	b.n	8006348 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	015a      	lsls	r2, r3, #5
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	4413      	add	r3, r2
 800622a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	693a      	ldr	r2, [r7, #16]
 8006232:	0151      	lsls	r1, r2, #5
 8006234:	697a      	ldr	r2, [r7, #20]
 8006236:	440a      	add	r2, r1
 8006238:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800623c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006240:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	695b      	ldr	r3, [r3, #20]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d07e      	beq.n	8006348 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006250:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	f003 030f 	and.w	r3, r3, #15
 800625a:	2101      	movs	r1, #1
 800625c:	fa01 f303 	lsl.w	r3, r1, r3
 8006260:	6979      	ldr	r1, [r7, #20]
 8006262:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006266:	4313      	orrs	r3, r2
 8006268:	634b      	str	r3, [r1, #52]	; 0x34
 800626a:	e06d      	b.n	8006348 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	015a      	lsls	r2, r3, #5
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	4413      	add	r3, r2
 8006274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	693a      	ldr	r2, [r7, #16]
 800627c:	0151      	lsls	r1, r2, #5
 800627e:	697a      	ldr	r2, [r7, #20]
 8006280:	440a      	add	r2, r1
 8006282:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006286:	0cdb      	lsrs	r3, r3, #19
 8006288:	04db      	lsls	r3, r3, #19
 800628a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	015a      	lsls	r2, r3, #5
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	4413      	add	r3, r2
 8006294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	693a      	ldr	r2, [r7, #16]
 800629c:	0151      	lsls	r1, r2, #5
 800629e:	697a      	ldr	r2, [r7, #20]
 80062a0:	440a      	add	r2, r1
 80062a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80062aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80062ae:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	695b      	ldr	r3, [r3, #20]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d003      	beq.n	80062c0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	689a      	ldr	r2, [r3, #8]
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	015a      	lsls	r2, r3, #5
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	4413      	add	r3, r2
 80062c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	693a      	ldr	r2, [r7, #16]
 80062d0:	0151      	lsls	r1, r2, #5
 80062d2:	697a      	ldr	r2, [r7, #20]
 80062d4:	440a      	add	r2, r1
 80062d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062de:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	015a      	lsls	r2, r3, #5
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	4413      	add	r3, r2
 80062e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ec:	691a      	ldr	r2, [r3, #16]
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062f6:	6939      	ldr	r1, [r7, #16]
 80062f8:	0148      	lsls	r0, r1, #5
 80062fa:	6979      	ldr	r1, [r7, #20]
 80062fc:	4401      	add	r1, r0
 80062fe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006302:	4313      	orrs	r3, r2
 8006304:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006306:	79fb      	ldrb	r3, [r7, #7]
 8006308:	2b01      	cmp	r3, #1
 800630a:	d10d      	bne.n	8006328 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d009      	beq.n	8006328 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	68d9      	ldr	r1, [r3, #12]
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	015a      	lsls	r2, r3, #5
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	4413      	add	r3, r2
 8006320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006324:	460a      	mov	r2, r1
 8006326:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	015a      	lsls	r2, r3, #5
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	4413      	add	r3, r2
 8006330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	693a      	ldr	r2, [r7, #16]
 8006338:	0151      	lsls	r1, r2, #5
 800633a:	697a      	ldr	r2, [r7, #20]
 800633c:	440a      	add	r2, r1
 800633e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006342:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006346:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	371c      	adds	r7, #28
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr

08006356 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006356:	b480      	push	{r7}
 8006358:	b089      	sub	sp, #36	; 0x24
 800635a:	af00      	add	r7, sp, #0
 800635c:	60f8      	str	r0, [r7, #12]
 800635e:	60b9      	str	r1, [r7, #8]
 8006360:	4611      	mov	r1, r2
 8006362:	461a      	mov	r2, r3
 8006364:	460b      	mov	r3, r1
 8006366:	71fb      	strb	r3, [r7, #7]
 8006368:	4613      	mov	r3, r2
 800636a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006374:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006378:	2b00      	cmp	r3, #0
 800637a:	d11a      	bne.n	80063b2 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800637c:	88bb      	ldrh	r3, [r7, #4]
 800637e:	3303      	adds	r3, #3
 8006380:	089b      	lsrs	r3, r3, #2
 8006382:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006384:	2300      	movs	r3, #0
 8006386:	61bb      	str	r3, [r7, #24]
 8006388:	e00f      	b.n	80063aa <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800638a:	79fb      	ldrb	r3, [r7, #7]
 800638c:	031a      	lsls	r2, r3, #12
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	4413      	add	r3, r2
 8006392:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006396:	461a      	mov	r2, r3
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	3304      	adds	r3, #4
 80063a2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	3301      	adds	r3, #1
 80063a8:	61bb      	str	r3, [r7, #24]
 80063aa:	69ba      	ldr	r2, [r7, #24]
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d3eb      	bcc.n	800638a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3724      	adds	r7, #36	; 0x24
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b089      	sub	sp, #36	; 0x24
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	4613      	mov	r3, r2
 80063cc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80063d6:	88fb      	ldrh	r3, [r7, #6]
 80063d8:	3303      	adds	r3, #3
 80063da:	089b      	lsrs	r3, r3, #2
 80063dc:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80063de:	2300      	movs	r3, #0
 80063e0:	61bb      	str	r3, [r7, #24]
 80063e2:	e00b      	b.n	80063fc <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	601a      	str	r2, [r3, #0]
    pDest++;
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	3304      	adds	r3, #4
 80063f4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	3301      	adds	r3, #1
 80063fa:	61bb      	str	r3, [r7, #24]
 80063fc:	69ba      	ldr	r2, [r7, #24]
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	429a      	cmp	r2, r3
 8006402:	d3ef      	bcc.n	80063e4 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006404:	69fb      	ldr	r3, [r7, #28]
}
 8006406:	4618      	mov	r0, r3
 8006408:	3724      	adds	r7, #36	; 0x24
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr

08006412 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006412:	b480      	push	{r7}
 8006414:	b085      	sub	sp, #20
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
 800641a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	785b      	ldrb	r3, [r3, #1]
 800642a:	2b01      	cmp	r3, #1
 800642c:	d12c      	bne.n	8006488 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	015a      	lsls	r2, r3, #5
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	4413      	add	r3, r2
 8006436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	db12      	blt.n	8006466 <USB_EPSetStall+0x54>
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00f      	beq.n	8006466 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	015a      	lsls	r2, r3, #5
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	4413      	add	r3, r2
 800644e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68ba      	ldr	r2, [r7, #8]
 8006456:	0151      	lsls	r1, r2, #5
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	440a      	add	r2, r1
 800645c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006460:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006464:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	015a      	lsls	r2, r3, #5
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	4413      	add	r3, r2
 800646e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68ba      	ldr	r2, [r7, #8]
 8006476:	0151      	lsls	r1, r2, #5
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	440a      	add	r2, r1
 800647c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006480:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006484:	6013      	str	r3, [r2, #0]
 8006486:	e02b      	b.n	80064e0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	015a      	lsls	r2, r3, #5
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	4413      	add	r3, r2
 8006490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	db12      	blt.n	80064c0 <USB_EPSetStall+0xae>
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00f      	beq.n	80064c0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68ba      	ldr	r2, [r7, #8]
 80064b0:	0151      	lsls	r1, r2, #5
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	440a      	add	r2, r1
 80064b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80064be:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	015a      	lsls	r2, r3, #5
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	4413      	add	r3, r2
 80064c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68ba      	ldr	r2, [r7, #8]
 80064d0:	0151      	lsls	r1, r2, #5
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	440a      	add	r2, r1
 80064d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80064de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3714      	adds	r7, #20
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr

080064ee <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80064ee:	b480      	push	{r7}
 80064f0:	b085      	sub	sp, #20
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
 80064f6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	785b      	ldrb	r3, [r3, #1]
 8006506:	2b01      	cmp	r3, #1
 8006508:	d128      	bne.n	800655c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	015a      	lsls	r2, r3, #5
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	4413      	add	r3, r2
 8006512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68ba      	ldr	r2, [r7, #8]
 800651a:	0151      	lsls	r1, r2, #5
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	440a      	add	r2, r1
 8006520:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006524:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006528:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	78db      	ldrb	r3, [r3, #3]
 800652e:	2b03      	cmp	r3, #3
 8006530:	d003      	beq.n	800653a <USB_EPClearStall+0x4c>
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	78db      	ldrb	r3, [r3, #3]
 8006536:	2b02      	cmp	r3, #2
 8006538:	d138      	bne.n	80065ac <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	015a      	lsls	r2, r3, #5
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	4413      	add	r3, r2
 8006542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68ba      	ldr	r2, [r7, #8]
 800654a:	0151      	lsls	r1, r2, #5
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	440a      	add	r2, r1
 8006550:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006558:	6013      	str	r3, [r2, #0]
 800655a:	e027      	b.n	80065ac <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	015a      	lsls	r2, r3, #5
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	4413      	add	r3, r2
 8006564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	68ba      	ldr	r2, [r7, #8]
 800656c:	0151      	lsls	r1, r2, #5
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	440a      	add	r2, r1
 8006572:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006576:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800657a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	78db      	ldrb	r3, [r3, #3]
 8006580:	2b03      	cmp	r3, #3
 8006582:	d003      	beq.n	800658c <USB_EPClearStall+0x9e>
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	78db      	ldrb	r3, [r3, #3]
 8006588:	2b02      	cmp	r3, #2
 800658a:	d10f      	bne.n	80065ac <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	015a      	lsls	r2, r3, #5
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	4413      	add	r3, r2
 8006594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68ba      	ldr	r2, [r7, #8]
 800659c:	0151      	lsls	r1, r2, #5
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	440a      	add	r2, r1
 80065a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065aa:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3714      	adds	r7, #20
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr

080065ba <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80065ba:	b480      	push	{r7}
 80065bc:	b085      	sub	sp, #20
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
 80065c2:	460b      	mov	r3, r1
 80065c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065d8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80065dc:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	78fb      	ldrb	r3, [r7, #3]
 80065e8:	011b      	lsls	r3, r3, #4
 80065ea:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80065ee:	68f9      	ldr	r1, [r7, #12]
 80065f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065f4:	4313      	orrs	r3, r2
 80065f6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3714      	adds	r7, #20
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr

08006606 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006606:	b480      	push	{r7}
 8006608:	b085      	sub	sp, #20
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68fa      	ldr	r2, [r7, #12]
 800661c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006620:	f023 0303 	bic.w	r3, r3, #3
 8006624:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006634:	f023 0302 	bic.w	r3, r3, #2
 8006638:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3714      	adds	r7, #20
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006662:	f023 0303 	bic.w	r3, r3, #3
 8006666:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006676:	f043 0302 	orr.w	r3, r3, #2
 800667a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3714      	adds	r7, #20
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr

0800668a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800668a:	b480      	push	{r7}
 800668c:	b085      	sub	sp, #20
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	695b      	ldr	r3, [r3, #20]
 8006696:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	699b      	ldr	r3, [r3, #24]
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	4013      	ands	r3, r2
 80066a0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80066a2:	68fb      	ldr	r3, [r7, #12]
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3714      	adds	r7, #20
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066c2:	699b      	ldr	r3, [r3, #24]
 80066c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066cc:	69db      	ldr	r3, [r3, #28]
 80066ce:	68ba      	ldr	r2, [r7, #8]
 80066d0:	4013      	ands	r3, r2
 80066d2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	0c1b      	lsrs	r3, r3, #16
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3714      	adds	r7, #20
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b085      	sub	sp, #20
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066f6:	699b      	ldr	r3, [r3, #24]
 80066f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006700:	69db      	ldr	r3, [r3, #28]
 8006702:	68ba      	ldr	r2, [r7, #8]
 8006704:	4013      	ands	r3, r2
 8006706:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	b29b      	uxth	r3, r3
}
 800670c:	4618      	mov	r0, r3
 800670e:	3714      	adds	r7, #20
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	460b      	mov	r3, r1
 8006722:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006728:	78fb      	ldrb	r3, [r7, #3]
 800672a:	015a      	lsls	r2, r3, #5
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	4413      	add	r3, r2
 8006730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800673e:	695b      	ldr	r3, [r3, #20]
 8006740:	68ba      	ldr	r2, [r7, #8]
 8006742:	4013      	ands	r3, r2
 8006744:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006746:	68bb      	ldr	r3, [r7, #8]
}
 8006748:	4618      	mov	r0, r3
 800674a:	3714      	adds	r7, #20
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006754:	b480      	push	{r7}
 8006756:	b087      	sub	sp, #28
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	460b      	mov	r3, r1
 800675e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006776:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006778:	78fb      	ldrb	r3, [r7, #3]
 800677a:	f003 030f 	and.w	r3, r3, #15
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	fa22 f303 	lsr.w	r3, r2, r3
 8006784:	01db      	lsls	r3, r3, #7
 8006786:	b2db      	uxtb	r3, r3
 8006788:	693a      	ldr	r2, [r7, #16]
 800678a:	4313      	orrs	r3, r2
 800678c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800678e:	78fb      	ldrb	r3, [r7, #3]
 8006790:	015a      	lsls	r2, r3, #5
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	4413      	add	r3, r2
 8006796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	693a      	ldr	r2, [r7, #16]
 800679e:	4013      	ands	r3, r2
 80067a0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80067a2:	68bb      	ldr	r3, [r7, #8]
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	371c      	adds	r7, #28
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	695b      	ldr	r3, [r3, #20]
 80067bc:	f003 0301 	and.w	r3, r3, #1
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b085      	sub	sp, #20
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68fa      	ldr	r2, [r7, #12]
 80067e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067e6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80067ea:	f023 0307 	bic.w	r3, r3, #7
 80067ee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006802:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3714      	adds	r7, #20
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
	...

08006814 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006814:	b480      	push	{r7}
 8006816:	b087      	sub	sp, #28
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	460b      	mov	r3, r1
 800681e:	607a      	str	r2, [r7, #4]
 8006820:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	333c      	adds	r3, #60	; 0x3c
 800682a:	3304      	adds	r3, #4
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	4a26      	ldr	r2, [pc, #152]	; (80068cc <USB_EP0_OutStart+0xb8>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d90a      	bls.n	800684e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006844:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006848:	d101      	bne.n	800684e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800684a:	2300      	movs	r3, #0
 800684c:	e037      	b.n	80068be <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006854:	461a      	mov	r2, r3
 8006856:	2300      	movs	r3, #0
 8006858:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	697a      	ldr	r2, [r7, #20]
 8006864:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006868:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800686c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	697a      	ldr	r2, [r7, #20]
 8006878:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800687c:	f043 0318 	orr.w	r3, r3, #24
 8006880:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	697a      	ldr	r2, [r7, #20]
 800688c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006890:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006894:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006896:	7afb      	ldrb	r3, [r7, #11]
 8006898:	2b01      	cmp	r3, #1
 800689a:	d10f      	bne.n	80068bc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068a2:	461a      	mov	r2, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	697a      	ldr	r2, [r7, #20]
 80068b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068b6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80068ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	371c      	adds	r7, #28
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop
 80068cc:	4f54300a 	.word	0x4f54300a

080068d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80068d8:	2300      	movs	r3, #0
 80068da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	3301      	adds	r3, #1
 80068e0:	60fb      	str	r3, [r7, #12]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	4a13      	ldr	r2, [pc, #76]	; (8006934 <USB_CoreReset+0x64>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d901      	bls.n	80068ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80068ea:	2303      	movs	r3, #3
 80068ec:	e01b      	b.n	8006926 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	691b      	ldr	r3, [r3, #16]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	daf2      	bge.n	80068dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80068f6:	2300      	movs	r3, #0
 80068f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	f043 0201 	orr.w	r2, r3, #1
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	3301      	adds	r3, #1
 800690a:	60fb      	str	r3, [r7, #12]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	4a09      	ldr	r2, [pc, #36]	; (8006934 <USB_CoreReset+0x64>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d901      	bls.n	8006918 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006914:	2303      	movs	r3, #3
 8006916:	e006      	b.n	8006926 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	f003 0301 	and.w	r3, r3, #1
 8006920:	2b01      	cmp	r3, #1
 8006922:	d0f0      	beq.n	8006906 <USB_CoreReset+0x36>

  return HAL_OK;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3714      	adds	r7, #20
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	00030d40 	.word	0x00030d40

08006938 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	460b      	mov	r3, r1
 8006942:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006944:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006948:	f002 f9ae 	bl	8008ca8 <malloc>
 800694c:	4603      	mov	r3, r0
 800694e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d105      	bne.n	8006962 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800695e:	2302      	movs	r3, #2
 8006960:	e066      	b.n	8006a30 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	7c1b      	ldrb	r3, [r3, #16]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d119      	bne.n	80069a6 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006972:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006976:	2202      	movs	r2, #2
 8006978:	2181      	movs	r1, #129	; 0x81
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f002 f81b 	bl	80089b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006986:	f44f 7300 	mov.w	r3, #512	; 0x200
 800698a:	2202      	movs	r2, #2
 800698c:	2101      	movs	r1, #1
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f002 f811 	bl	80089b6 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2210      	movs	r2, #16
 80069a0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80069a4:	e016      	b.n	80069d4 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80069a6:	2340      	movs	r3, #64	; 0x40
 80069a8:	2202      	movs	r2, #2
 80069aa:	2181      	movs	r1, #129	; 0x81
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f002 f802 	bl	80089b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2201      	movs	r2, #1
 80069b6:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80069b8:	2340      	movs	r3, #64	; 0x40
 80069ba:	2202      	movs	r2, #2
 80069bc:	2101      	movs	r1, #1
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f001 fff9 	bl	80089b6 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2210      	movs	r2, #16
 80069d0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80069d4:	2308      	movs	r3, #8
 80069d6:	2203      	movs	r2, #3
 80069d8:	2182      	movs	r1, #130	; 0x82
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f001 ffeb 	bl	80089b6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	7c1b      	ldrb	r3, [r3, #16]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d109      	bne.n	8006a1e <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a14:	2101      	movs	r1, #1
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f002 f8bc 	bl	8008b94 <USBD_LL_PrepareReceive>
 8006a1c:	e007      	b.n	8006a2e <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a24:	2340      	movs	r3, #64	; 0x40
 8006a26:	2101      	movs	r1, #1
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f002 f8b3 	bl	8008b94 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3710      	adds	r7, #16
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	460b      	mov	r3, r1
 8006a42:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8006a44:	2300      	movs	r3, #0
 8006a46:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006a48:	2181      	movs	r1, #129	; 0x81
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f001 ffd9 	bl	8008a02 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006a56:	2101      	movs	r1, #1
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f001 ffd2 	bl	8008a02 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006a66:	2182      	movs	r1, #130	; 0x82
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f001 ffca 	bl	8008a02 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d00e      	beq.n	8006aa6 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f002 f90d 	bl	8008cb8 <free>
    pdev->pClassData = NULL;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8006aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3710      	adds	r7, #16
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b086      	sub	sp, #24
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ac0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006aca:	2300      	movs	r3, #0
 8006acc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d03a      	beq.n	8006b50 <USBD_CDC_Setup+0xa0>
 8006ada:	2b20      	cmp	r3, #32
 8006adc:	f040 8097 	bne.w	8006c0e <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	88db      	ldrh	r3, [r3, #6]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d029      	beq.n	8006b3c <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	b25b      	sxtb	r3, r3
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	da11      	bge.n	8006b16 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	683a      	ldr	r2, [r7, #0]
 8006afc:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8006afe:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006b00:	683a      	ldr	r2, [r7, #0]
 8006b02:	88d2      	ldrh	r2, [r2, #6]
 8006b04:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006b06:	6939      	ldr	r1, [r7, #16]
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	88db      	ldrh	r3, [r3, #6]
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f001 fa9d 	bl	800804e <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8006b14:	e082      	b.n	8006c1c <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	785a      	ldrb	r2, [r3, #1]
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	88db      	ldrh	r3, [r3, #6]
 8006b24:	b2da      	uxtb	r2, r3
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006b2c:	6939      	ldr	r1, [r7, #16]
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	88db      	ldrh	r3, [r3, #6]
 8006b32:	461a      	mov	r2, r3
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f001 fab6 	bl	80080a6 <USBD_CtlPrepareRx>
    break;
 8006b3a:	e06f      	b.n	8006c1c <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	683a      	ldr	r2, [r7, #0]
 8006b46:	7850      	ldrb	r0, [r2, #1]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	6839      	ldr	r1, [r7, #0]
 8006b4c:	4798      	blx	r3
    break;
 8006b4e:	e065      	b.n	8006c1c <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	785b      	ldrb	r3, [r3, #1]
 8006b54:	2b0b      	cmp	r3, #11
 8006b56:	d84f      	bhi.n	8006bf8 <USBD_CDC_Setup+0x148>
 8006b58:	a201      	add	r2, pc, #4	; (adr r2, 8006b60 <USBD_CDC_Setup+0xb0>)
 8006b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b5e:	bf00      	nop
 8006b60:	08006b91 	.word	0x08006b91
 8006b64:	08006c07 	.word	0x08006c07
 8006b68:	08006bf9 	.word	0x08006bf9
 8006b6c:	08006bf9 	.word	0x08006bf9
 8006b70:	08006bf9 	.word	0x08006bf9
 8006b74:	08006bf9 	.word	0x08006bf9
 8006b78:	08006bf9 	.word	0x08006bf9
 8006b7c:	08006bf9 	.word	0x08006bf9
 8006b80:	08006bf9 	.word	0x08006bf9
 8006b84:	08006bf9 	.word	0x08006bf9
 8006b88:	08006bb9 	.word	0x08006bb9
 8006b8c:	08006be1 	.word	0x08006be1
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b96:	2b03      	cmp	r3, #3
 8006b98:	d107      	bne.n	8006baa <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006b9a:	f107 030c 	add.w	r3, r7, #12
 8006b9e:	2202      	movs	r2, #2
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f001 fa53 	bl	800804e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006ba8:	e030      	b.n	8006c0c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006baa:	6839      	ldr	r1, [r7, #0]
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f001 f9dd 	bl	8007f6c <USBD_CtlError>
        ret = USBD_FAIL;
 8006bb2:	2303      	movs	r3, #3
 8006bb4:	75fb      	strb	r3, [r7, #23]
      break;
 8006bb6:	e029      	b.n	8006c0c <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bbe:	2b03      	cmp	r3, #3
 8006bc0:	d107      	bne.n	8006bd2 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006bc2:	f107 030f 	add.w	r3, r7, #15
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	4619      	mov	r1, r3
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f001 fa3f 	bl	800804e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006bd0:	e01c      	b.n	8006c0c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006bd2:	6839      	ldr	r1, [r7, #0]
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f001 f9c9 	bl	8007f6c <USBD_CtlError>
        ret = USBD_FAIL;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	75fb      	strb	r3, [r7, #23]
      break;
 8006bde:	e015      	b.n	8006c0c <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006be6:	2b03      	cmp	r3, #3
 8006be8:	d00f      	beq.n	8006c0a <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8006bea:	6839      	ldr	r1, [r7, #0]
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f001 f9bd 	bl	8007f6c <USBD_CtlError>
        ret = USBD_FAIL;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006bf6:	e008      	b.n	8006c0a <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8006bf8:	6839      	ldr	r1, [r7, #0]
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f001 f9b6 	bl	8007f6c <USBD_CtlError>
      ret = USBD_FAIL;
 8006c00:	2303      	movs	r3, #3
 8006c02:	75fb      	strb	r3, [r7, #23]
      break;
 8006c04:	e002      	b.n	8006c0c <USBD_CDC_Setup+0x15c>
      break;
 8006c06:	bf00      	nop
 8006c08:	e008      	b.n	8006c1c <USBD_CDC_Setup+0x16c>
      break;
 8006c0a:	bf00      	nop
    }
    break;
 8006c0c:	e006      	b.n	8006c1c <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8006c0e:	6839      	ldr	r1, [r7, #0]
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f001 f9ab 	bl	8007f6c <USBD_CtlError>
    ret = USBD_FAIL;
 8006c16:	2303      	movs	r3, #3
 8006c18:	75fb      	strb	r3, [r7, #23]
    break;
 8006c1a:	bf00      	nop
  }

  return (uint8_t)ret;
 8006c1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3718      	adds	r7, #24
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop

08006c28 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	460b      	mov	r3, r1
 8006c32:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006c3a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d101      	bne.n	8006c4a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006c46:	2303      	movs	r3, #3
 8006c48:	e049      	b.n	8006cde <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c50:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006c52:	78fa      	ldrb	r2, [r7, #3]
 8006c54:	6879      	ldr	r1, [r7, #4]
 8006c56:	4613      	mov	r3, r2
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	4413      	add	r3, r2
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	440b      	add	r3, r1
 8006c60:	3318      	adds	r3, #24
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d029      	beq.n	8006cbc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006c68:	78fa      	ldrb	r2, [r7, #3]
 8006c6a:	6879      	ldr	r1, [r7, #4]
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	4413      	add	r3, r2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	440b      	add	r3, r1
 8006c76:	3318      	adds	r3, #24
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	78f9      	ldrb	r1, [r7, #3]
 8006c7c:	68f8      	ldr	r0, [r7, #12]
 8006c7e:	460b      	mov	r3, r1
 8006c80:	00db      	lsls	r3, r3, #3
 8006c82:	1a5b      	subs	r3, r3, r1
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	4403      	add	r3, r0
 8006c88:	3344      	adds	r3, #68	; 0x44
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006c90:	fb03 f301 	mul.w	r3, r3, r1
 8006c94:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d110      	bne.n	8006cbc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006c9a:	78fa      	ldrb	r2, [r7, #3]
 8006c9c:	6879      	ldr	r1, [r7, #4]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	4413      	add	r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	440b      	add	r3, r1
 8006ca8:	3318      	adds	r3, #24
 8006caa:	2200      	movs	r2, #0
 8006cac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006cae:	78f9      	ldrb	r1, [r7, #3]
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f001 ff4c 	bl	8008b52 <USBD_LL_Transmit>
 8006cba:	e00f      	b.n	8006cdc <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006cd2:	68ba      	ldr	r2, [r7, #8]
 8006cd4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006cd8:	78fa      	ldrb	r2, [r7, #3]
 8006cda:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3710      	adds	r7, #16
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b084      	sub	sp, #16
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
 8006cee:	460b      	mov	r3, r1
 8006cf0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cf8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d101      	bne.n	8006d08 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006d04:	2303      	movs	r3, #3
 8006d06:	e015      	b.n	8006d34 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006d08:	78fb      	ldrb	r3, [r7, #3]
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f001 ff62 	bl	8008bd6 <USBD_LL_GetRxDataSize>
 8006d12:	4602      	mov	r2, r0
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d20:	68db      	ldr	r3, [r3, #12]
 8006d22:	68fa      	ldr	r2, [r7, #12]
 8006d24:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006d2e:	4611      	mov	r1, r2
 8006d30:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3710      	adds	r7, #16
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d4a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d015      	beq.n	8006d82 <USBD_CDC_EP0_RxReady+0x46>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006d5c:	2bff      	cmp	r3, #255	; 0xff
 8006d5e:	d010      	beq.n	8006d82 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006d6e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006d70:	68fa      	ldr	r2, [r7, #12]
 8006d72:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006d76:	b292      	uxth	r2, r2
 8006d78:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	22ff      	movs	r2, #255	; 0xff
 8006d7e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8006d82:	2300      	movs	r3, #0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3710      	adds	r7, #16
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2243      	movs	r2, #67	; 0x43
 8006d98:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006d9a:	4b03      	ldr	r3, [pc, #12]	; (8006da8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr
 8006da8:	20000094 	.word	0x20000094

08006dac <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2243      	movs	r2, #67	; 0x43
 8006db8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006dba:	4b03      	ldr	r3, [pc, #12]	; (8006dc8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr
 8006dc8:	20000050 	.word	0x20000050

08006dcc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2243      	movs	r2, #67	; 0x43
 8006dd8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006dda:	4b03      	ldr	r3, [pc, #12]	; (8006de8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	370c      	adds	r7, #12
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr
 8006de8:	200000d8 	.word	0x200000d8

08006dec <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	220a      	movs	r2, #10
 8006df8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006dfa:	4b03      	ldr	r3, [pc, #12]	; (8006e08 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr
 8006e08:	2000000c 	.word	0x2000000c

08006e0c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d101      	bne.n	8006e20 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	e004      	b.n	8006e2a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	683a      	ldr	r2, [r7, #0]
 8006e24:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	370c      	adds	r7, #12
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr

08006e36 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006e36:	b480      	push	{r7}
 8006e38:	b087      	sub	sp, #28
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	60f8      	str	r0, [r7, #12]
 8006e3e:	60b9      	str	r1, [r7, #8]
 8006e40:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e48:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	68ba      	ldr	r2, [r7, #8]
 8006e4e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006e5a:	2300      	movs	r3, #0
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	371c      	adds	r7, #28
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b085      	sub	sp, #20
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e78:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	683a      	ldr	r2, [r7, #0]
 8006e7e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3714      	adds	r7, #20
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e9e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d101      	bne.n	8006eb2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e01a      	b.n	8006ee8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d114      	bne.n	8006ee6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006eda:	2181      	movs	r1, #129	; 0x81
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f001 fe38 	bl	8008b52 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3710      	adds	r7, #16
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006efe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d101      	bne.n	8006f0e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006f0a:	2303      	movs	r3, #3
 8006f0c:	e016      	b.n	8006f3c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	7c1b      	ldrb	r3, [r3, #16]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d109      	bne.n	8006f2a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f20:	2101      	movs	r1, #1
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f001 fe36 	bl	8008b94 <USBD_LL_PrepareReceive>
 8006f28:	e007      	b.n	8006f3a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f30:	2340      	movs	r3, #64	; 0x40
 8006f32:	2101      	movs	r1, #1
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f001 fe2d 	bl	8008b94 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006f3a:	2300      	movs	r3, #0
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3710      	adds	r7, #16
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b086      	sub	sp, #24
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	4613      	mov	r3, r2
 8006f50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d101      	bne.n	8006f5c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006f58:	2303      	movs	r3, #3
 8006f5a:	e025      	b.n	8006fa8 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d003      	beq.n	8006f6e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d003      	beq.n	8006f80 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d003      	beq.n	8006f8e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	68ba      	ldr	r2, [r7, #8]
 8006f8a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2201      	movs	r2, #1
 8006f92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	79fa      	ldrb	r2, [r7, #7]
 8006f9a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006f9c:	68f8      	ldr	r0, [r7, #12]
 8006f9e:	f001 fca3 	bl	80088e8 <USBD_LL_Init>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3718      	adds	r7, #24
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d101      	bne.n	8006fc8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006fc4:	2303      	movs	r3, #3
 8006fc6:	e010      	b.n	8006fea <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	683a      	ldr	r2, [r7, #0]
 8006fcc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd8:	f107 020e 	add.w	r2, r7, #14
 8006fdc:	4610      	mov	r0, r2
 8006fde:	4798      	blx	r3
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b082      	sub	sp, #8
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f001 fcc0 	bl	8008980 <USBD_LL_Start>
 8007000:	4603      	mov	r3, r0
}
 8007002:	4618      	mov	r0, r3
 8007004:	3708      	adds	r7, #8
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}

0800700a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800700a:	b480      	push	{r7}
 800700c:	b083      	sub	sp, #12
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007012:	2300      	movs	r3, #0
}
 8007014:	4618      	mov	r0, r3
 8007016:	370c      	adds	r7, #12
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	460b      	mov	r3, r1
 800702a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800702c:	2303      	movs	r3, #3
 800702e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007036:	2b00      	cmp	r3, #0
 8007038:	d009      	beq.n	800704e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	78fa      	ldrb	r2, [r7, #3]
 8007044:	4611      	mov	r1, r2
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	4798      	blx	r3
 800704a:	4603      	mov	r3, r0
 800704c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800704e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007050:	4618      	mov	r0, r3
 8007052:	3710      	adds	r7, #16
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	460b      	mov	r3, r1
 8007062:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800706a:	2b00      	cmp	r3, #0
 800706c:	d007      	beq.n	800707e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	78fa      	ldrb	r2, [r7, #3]
 8007078:	4611      	mov	r1, r2
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	4798      	blx	r3
  }

  return USBD_OK;
 800707e:	2300      	movs	r3, #0
}
 8007080:	4618      	mov	r0, r3
 8007082:	3708      	adds	r7, #8
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007098:	6839      	ldr	r1, [r7, #0]
 800709a:	4618      	mov	r0, r3
 800709c:	f000 ff2c 	bl	8007ef8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80070ae:	461a      	mov	r2, r3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80070bc:	f003 031f 	and.w	r3, r3, #31
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d00e      	beq.n	80070e2 <USBD_LL_SetupStage+0x5a>
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d302      	bcc.n	80070ce <USBD_LL_SetupStage+0x46>
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d014      	beq.n	80070f6 <USBD_LL_SetupStage+0x6e>
 80070cc:	e01d      	b.n	800710a <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80070d4:	4619      	mov	r1, r3
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 fa18 	bl	800750c <USBD_StdDevReq>
 80070dc:	4603      	mov	r3, r0
 80070de:	73fb      	strb	r3, [r7, #15]
      break;
 80070e0:	e020      	b.n	8007124 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80070e8:	4619      	mov	r1, r3
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 fa7c 	bl	80075e8 <USBD_StdItfReq>
 80070f0:	4603      	mov	r3, r0
 80070f2:	73fb      	strb	r3, [r7, #15]
      break;
 80070f4:	e016      	b.n	8007124 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80070fc:	4619      	mov	r1, r3
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 fab8 	bl	8007674 <USBD_StdEPReq>
 8007104:	4603      	mov	r3, r0
 8007106:	73fb      	strb	r3, [r7, #15]
      break;
 8007108:	e00c      	b.n	8007124 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007110:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007114:	b2db      	uxtb	r3, r3
 8007116:	4619      	mov	r1, r3
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f001 fc91 	bl	8008a40 <USBD_LL_StallEP>
 800711e:	4603      	mov	r3, r0
 8007120:	73fb      	strb	r3, [r7, #15]
      break;
 8007122:	bf00      	nop
  }

  return ret;
 8007124:	7bfb      	ldrb	r3, [r7, #15]
}
 8007126:	4618      	mov	r0, r3
 8007128:	3710      	adds	r7, #16
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800712e:	b580      	push	{r7, lr}
 8007130:	b086      	sub	sp, #24
 8007132:	af00      	add	r7, sp, #0
 8007134:	60f8      	str	r0, [r7, #12]
 8007136:	460b      	mov	r3, r1
 8007138:	607a      	str	r2, [r7, #4]
 800713a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800713c:	7afb      	ldrb	r3, [r7, #11]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d137      	bne.n	80071b2 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007148:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007150:	2b03      	cmp	r3, #3
 8007152:	d14a      	bne.n	80071ea <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	689a      	ldr	r2, [r3, #8]
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	429a      	cmp	r2, r3
 800715e:	d913      	bls.n	8007188 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	689a      	ldr	r2, [r3, #8]
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	1ad2      	subs	r2, r2, r3
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	68da      	ldr	r2, [r3, #12]
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	4293      	cmp	r3, r2
 8007178:	bf28      	it	cs
 800717a:	4613      	movcs	r3, r2
 800717c:	461a      	mov	r2, r3
 800717e:	6879      	ldr	r1, [r7, #4]
 8007180:	68f8      	ldr	r0, [r7, #12]
 8007182:	f000 ffad 	bl	80080e0 <USBD_CtlContinueRx>
 8007186:	e030      	b.n	80071ea <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800718e:	691b      	ldr	r3, [r3, #16]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d00a      	beq.n	80071aa <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800719a:	2b03      	cmp	r3, #3
 800719c:	d105      	bne.n	80071aa <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071a4:	691b      	ldr	r3, [r3, #16]
 80071a6:	68f8      	ldr	r0, [r7, #12]
 80071a8:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	f000 ffa9 	bl	8008102 <USBD_CtlSendStatus>
 80071b0:	e01b      	b.n	80071ea <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071b8:	699b      	ldr	r3, [r3, #24]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d013      	beq.n	80071e6 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80071c4:	2b03      	cmp	r3, #3
 80071c6:	d10e      	bne.n	80071e6 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071ce:	699b      	ldr	r3, [r3, #24]
 80071d0:	7afa      	ldrb	r2, [r7, #11]
 80071d2:	4611      	mov	r1, r2
 80071d4:	68f8      	ldr	r0, [r7, #12]
 80071d6:	4798      	blx	r3
 80071d8:	4603      	mov	r3, r0
 80071da:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80071dc:	7dfb      	ldrb	r3, [r7, #23]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d003      	beq.n	80071ea <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80071e2:	7dfb      	ldrb	r3, [r7, #23]
 80071e4:	e002      	b.n	80071ec <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80071e6:	2303      	movs	r3, #3
 80071e8:	e000      	b.n	80071ec <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3718      	adds	r7, #24
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b086      	sub	sp, #24
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	460b      	mov	r3, r1
 80071fe:	607a      	str	r2, [r7, #4]
 8007200:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007202:	7afb      	ldrb	r3, [r7, #11]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d16a      	bne.n	80072de <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	3314      	adds	r3, #20
 800720c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007214:	2b02      	cmp	r3, #2
 8007216:	d155      	bne.n	80072c4 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	689a      	ldr	r2, [r3, #8]
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	429a      	cmp	r2, r3
 8007222:	d914      	bls.n	800724e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	689a      	ldr	r2, [r3, #8]
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	68db      	ldr	r3, [r3, #12]
 800722c:	1ad2      	subs	r2, r2, r3
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	461a      	mov	r2, r3
 8007238:	6879      	ldr	r1, [r7, #4]
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	f000 ff22 	bl	8008084 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007240:	2300      	movs	r3, #0
 8007242:	2200      	movs	r2, #0
 8007244:	2100      	movs	r1, #0
 8007246:	68f8      	ldr	r0, [r7, #12]
 8007248:	f001 fca4 	bl	8008b94 <USBD_LL_PrepareReceive>
 800724c:	e03a      	b.n	80072c4 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	68da      	ldr	r2, [r3, #12]
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	429a      	cmp	r2, r3
 8007258:	d11c      	bne.n	8007294 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	685a      	ldr	r2, [r3, #4]
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007262:	429a      	cmp	r2, r3
 8007264:	d316      	bcc.n	8007294 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	685a      	ldr	r2, [r3, #4]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007270:	429a      	cmp	r2, r3
 8007272:	d20f      	bcs.n	8007294 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007274:	2200      	movs	r2, #0
 8007276:	2100      	movs	r1, #0
 8007278:	68f8      	ldr	r0, [r7, #12]
 800727a:	f000 ff03 	bl	8008084 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2200      	movs	r2, #0
 8007282:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007286:	2300      	movs	r3, #0
 8007288:	2200      	movs	r2, #0
 800728a:	2100      	movs	r1, #0
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	f001 fc81 	bl	8008b94 <USBD_LL_PrepareReceive>
 8007292:	e017      	b.n	80072c4 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d00a      	beq.n	80072b6 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80072a6:	2b03      	cmp	r3, #3
 80072a8:	d105      	bne.n	80072b6 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80072b6:	2180      	movs	r1, #128	; 0x80
 80072b8:	68f8      	ldr	r0, [r7, #12]
 80072ba:	f001 fbc1 	bl	8008a40 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80072be:	68f8      	ldr	r0, [r7, #12]
 80072c0:	f000 ff32 	bl	8008128 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d123      	bne.n	8007316 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80072ce:	68f8      	ldr	r0, [r7, #12]
 80072d0:	f7ff fe9b 	bl	800700a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80072dc:	e01b      	b.n	8007316 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072e4:	695b      	ldr	r3, [r3, #20]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d013      	beq.n	8007312 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80072f0:	2b03      	cmp	r3, #3
 80072f2:	d10e      	bne.n	8007312 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072fa:	695b      	ldr	r3, [r3, #20]
 80072fc:	7afa      	ldrb	r2, [r7, #11]
 80072fe:	4611      	mov	r1, r2
 8007300:	68f8      	ldr	r0, [r7, #12]
 8007302:	4798      	blx	r3
 8007304:	4603      	mov	r3, r0
 8007306:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007308:	7dfb      	ldrb	r3, [r7, #23]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d003      	beq.n	8007316 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800730e:	7dfb      	ldrb	r3, [r7, #23]
 8007310:	e002      	b.n	8007318 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007312:	2303      	movs	r3, #3
 8007314:	e000      	b.n	8007318 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	4618      	mov	r0, r3
 800731a:	3718      	adds	r7, #24
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800734c:	2b00      	cmp	r3, #0
 800734e:	d009      	beq.n	8007364 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	6852      	ldr	r2, [r2, #4]
 800735c:	b2d2      	uxtb	r2, r2
 800735e:	4611      	mov	r1, r2
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007364:	2340      	movs	r3, #64	; 0x40
 8007366:	2200      	movs	r2, #0
 8007368:	2100      	movs	r1, #0
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f001 fb23 	bl	80089b6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2201      	movs	r2, #1
 8007374:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2240      	movs	r2, #64	; 0x40
 800737c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007380:	2340      	movs	r3, #64	; 0x40
 8007382:	2200      	movs	r2, #0
 8007384:	2180      	movs	r1, #128	; 0x80
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f001 fb15 	bl	80089b6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2240      	movs	r2, #64	; 0x40
 8007396:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	3708      	adds	r7, #8
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80073a2:	b480      	push	{r7}
 80073a4:	b083      	sub	sp, #12
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
 80073aa:	460b      	mov	r3, r1
 80073ac:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	78fa      	ldrb	r2, [r7, #3]
 80073b2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	370c      	adds	r7, #12
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr

080073c2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80073c2:	b480      	push	{r7}
 80073c4:	b083      	sub	sp, #12
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2204      	movs	r2, #4
 80073da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	370c      	adds	r7, #12
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr

080073ec <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073fa:	2b04      	cmp	r3, #4
 80073fc:	d105      	bne.n	800740a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800740a:	2300      	movs	r3, #0
}
 800740c:	4618      	mov	r0, r3
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007426:	2b03      	cmp	r3, #3
 8007428:	d10b      	bne.n	8007442 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007430:	69db      	ldr	r3, [r3, #28]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d005      	beq.n	8007442 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800743c:	69db      	ldr	r3, [r3, #28]
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007442:	2300      	movs	r3, #0
}
 8007444:	4618      	mov	r0, r3
 8007446:	3708      	adds	r7, #8
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	460b      	mov	r3, r1
 8007456:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007458:	2300      	movs	r3, #0
}
 800745a:	4618      	mov	r0, r3
 800745c:	370c      	adds	r7, #12
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr

08007466 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007466:	b480      	push	{r7}
 8007468:	b083      	sub	sp, #12
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
 800746e:	460b      	mov	r3, r1
 8007470:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007472:	2300      	movs	r3, #0
}
 8007474:	4618      	mov	r0, r3
 8007476:	370c      	adds	r7, #12
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007488:	2300      	movs	r3, #0
}
 800748a:	4618      	mov	r0, r3
 800748c:	370c      	adds	r7, #12
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr

08007496 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007496:	b580      	push	{r7, lr}
 8007498:	b082      	sub	sp, #8
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2201      	movs	r2, #1
 80074a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d009      	beq.n	80074c4 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	6852      	ldr	r2, [r2, #4]
 80074bc:	b2d2      	uxtb	r2, r2
 80074be:	4611      	mov	r1, r2
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	4798      	blx	r3
  }

  return USBD_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3708      	adds	r7, #8
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}

080074ce <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80074ce:	b480      	push	{r7}
 80074d0:	b087      	sub	sp, #28
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	3301      	adds	r3, #1
 80074e4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80074ec:	8a3b      	ldrh	r3, [r7, #16]
 80074ee:	021b      	lsls	r3, r3, #8
 80074f0:	b21a      	sxth	r2, r3
 80074f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	b21b      	sxth	r3, r3
 80074fa:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80074fc:	89fb      	ldrh	r3, [r7, #14]
}
 80074fe:	4618      	mov	r0, r3
 8007500:	371c      	adds	r7, #28
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr
	...

0800750c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007516:	2300      	movs	r3, #0
 8007518:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007522:	2b20      	cmp	r3, #32
 8007524:	d004      	beq.n	8007530 <USBD_StdDevReq+0x24>
 8007526:	2b40      	cmp	r3, #64	; 0x40
 8007528:	d002      	beq.n	8007530 <USBD_StdDevReq+0x24>
 800752a:	2b00      	cmp	r3, #0
 800752c:	d00a      	beq.n	8007544 <USBD_StdDevReq+0x38>
 800752e:	e050      	b.n	80075d2 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	6839      	ldr	r1, [r7, #0]
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	4798      	blx	r3
 800753e:	4603      	mov	r3, r0
 8007540:	73fb      	strb	r3, [r7, #15]
    break;
 8007542:	e04b      	b.n	80075dc <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	785b      	ldrb	r3, [r3, #1]
 8007548:	2b09      	cmp	r3, #9
 800754a:	d83c      	bhi.n	80075c6 <USBD_StdDevReq+0xba>
 800754c:	a201      	add	r2, pc, #4	; (adr r2, 8007554 <USBD_StdDevReq+0x48>)
 800754e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007552:	bf00      	nop
 8007554:	080075a9 	.word	0x080075a9
 8007558:	080075bd 	.word	0x080075bd
 800755c:	080075c7 	.word	0x080075c7
 8007560:	080075b3 	.word	0x080075b3
 8007564:	080075c7 	.word	0x080075c7
 8007568:	08007587 	.word	0x08007587
 800756c:	0800757d 	.word	0x0800757d
 8007570:	080075c7 	.word	0x080075c7
 8007574:	0800759f 	.word	0x0800759f
 8007578:	08007591 	.word	0x08007591
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800757c:	6839      	ldr	r1, [r7, #0]
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 f9ce 	bl	8007920 <USBD_GetDescriptor>
      break;
 8007584:	e024      	b.n	80075d0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8007586:	6839      	ldr	r1, [r7, #0]
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 fb33 	bl	8007bf4 <USBD_SetAddress>
      break;
 800758e:	e01f      	b.n	80075d0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8007590:	6839      	ldr	r1, [r7, #0]
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 fb70 	bl	8007c78 <USBD_SetConfig>
 8007598:	4603      	mov	r3, r0
 800759a:	73fb      	strb	r3, [r7, #15]
      break;
 800759c:	e018      	b.n	80075d0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800759e:	6839      	ldr	r1, [r7, #0]
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f000 fc0d 	bl	8007dc0 <USBD_GetConfig>
      break;
 80075a6:	e013      	b.n	80075d0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80075a8:	6839      	ldr	r1, [r7, #0]
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 fc3c 	bl	8007e28 <USBD_GetStatus>
      break;
 80075b0:	e00e      	b.n	80075d0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80075b2:	6839      	ldr	r1, [r7, #0]
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 fc6a 	bl	8007e8e <USBD_SetFeature>
      break;
 80075ba:	e009      	b.n	80075d0 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80075bc:	6839      	ldr	r1, [r7, #0]
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 fc79 	bl	8007eb6 <USBD_ClrFeature>
      break;
 80075c4:	e004      	b.n	80075d0 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80075c6:	6839      	ldr	r1, [r7, #0]
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 fccf 	bl	8007f6c <USBD_CtlError>
      break;
 80075ce:	bf00      	nop
    }
    break;
 80075d0:	e004      	b.n	80075dc <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80075d2:	6839      	ldr	r1, [r7, #0]
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 fcc9 	bl	8007f6c <USBD_CtlError>
    break;
 80075da:	bf00      	nop
  }

  return ret;
 80075dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3710      	adds	r7, #16
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop

080075e8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80075f2:	2300      	movs	r3, #0
 80075f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075fe:	2b20      	cmp	r3, #32
 8007600:	d003      	beq.n	800760a <USBD_StdItfReq+0x22>
 8007602:	2b40      	cmp	r3, #64	; 0x40
 8007604:	d001      	beq.n	800760a <USBD_StdItfReq+0x22>
 8007606:	2b00      	cmp	r3, #0
 8007608:	d12a      	bne.n	8007660 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007610:	3b01      	subs	r3, #1
 8007612:	2b02      	cmp	r3, #2
 8007614:	d81d      	bhi.n	8007652 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	889b      	ldrh	r3, [r3, #4]
 800761a:	b2db      	uxtb	r3, r3
 800761c:	2b01      	cmp	r3, #1
 800761e:	d813      	bhi.n	8007648 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	6839      	ldr	r1, [r7, #0]
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	4798      	blx	r3
 800762e:	4603      	mov	r3, r0
 8007630:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	88db      	ldrh	r3, [r3, #6]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d110      	bne.n	800765c <USBD_StdItfReq+0x74>
 800763a:	7bfb      	ldrb	r3, [r7, #15]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d10d      	bne.n	800765c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f000 fd5e 	bl	8008102 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007646:	e009      	b.n	800765c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8007648:	6839      	ldr	r1, [r7, #0]
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 fc8e 	bl	8007f6c <USBD_CtlError>
      break;
 8007650:	e004      	b.n	800765c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8007652:	6839      	ldr	r1, [r7, #0]
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 fc89 	bl	8007f6c <USBD_CtlError>
      break;
 800765a:	e000      	b.n	800765e <USBD_StdItfReq+0x76>
      break;
 800765c:	bf00      	nop
    }
    break;
 800765e:	e004      	b.n	800766a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8007660:	6839      	ldr	r1, [r7, #0]
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 fc82 	bl	8007f6c <USBD_CtlError>
    break;
 8007668:	bf00      	nop
  }

  return ret;
 800766a:	7bfb      	ldrb	r3, [r7, #15]
}
 800766c:	4618      	mov	r0, r3
 800766e:	3710      	adds	r7, #16
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b084      	sub	sp, #16
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800767e:	2300      	movs	r3, #0
 8007680:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	889b      	ldrh	r3, [r3, #4]
 8007686:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007690:	2b20      	cmp	r3, #32
 8007692:	d004      	beq.n	800769e <USBD_StdEPReq+0x2a>
 8007694:	2b40      	cmp	r3, #64	; 0x40
 8007696:	d002      	beq.n	800769e <USBD_StdEPReq+0x2a>
 8007698:	2b00      	cmp	r3, #0
 800769a:	d00a      	beq.n	80076b2 <USBD_StdEPReq+0x3e>
 800769c:	e135      	b.n	800790a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	6839      	ldr	r1, [r7, #0]
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	4798      	blx	r3
 80076ac:	4603      	mov	r3, r0
 80076ae:	73fb      	strb	r3, [r7, #15]
    break;
 80076b0:	e130      	b.n	8007914 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	785b      	ldrb	r3, [r3, #1]
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d03e      	beq.n	8007738 <USBD_StdEPReq+0xc4>
 80076ba:	2b03      	cmp	r3, #3
 80076bc:	d002      	beq.n	80076c4 <USBD_StdEPReq+0x50>
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d077      	beq.n	80077b2 <USBD_StdEPReq+0x13e>
 80076c2:	e11c      	b.n	80078fe <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076ca:	2b02      	cmp	r3, #2
 80076cc:	d002      	beq.n	80076d4 <USBD_StdEPReq+0x60>
 80076ce:	2b03      	cmp	r3, #3
 80076d0:	d015      	beq.n	80076fe <USBD_StdEPReq+0x8a>
 80076d2:	e02b      	b.n	800772c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076d4:	7bbb      	ldrb	r3, [r7, #14]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00c      	beq.n	80076f4 <USBD_StdEPReq+0x80>
 80076da:	7bbb      	ldrb	r3, [r7, #14]
 80076dc:	2b80      	cmp	r3, #128	; 0x80
 80076de:	d009      	beq.n	80076f4 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80076e0:	7bbb      	ldrb	r3, [r7, #14]
 80076e2:	4619      	mov	r1, r3
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f001 f9ab 	bl	8008a40 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80076ea:	2180      	movs	r1, #128	; 0x80
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f001 f9a7 	bl	8008a40 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80076f2:	e020      	b.n	8007736 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80076f4:	6839      	ldr	r1, [r7, #0]
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 fc38 	bl	8007f6c <USBD_CtlError>
        break;
 80076fc:	e01b      	b.n	8007736 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	885b      	ldrh	r3, [r3, #2]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d10e      	bne.n	8007724 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007706:	7bbb      	ldrb	r3, [r7, #14]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d00b      	beq.n	8007724 <USBD_StdEPReq+0xb0>
 800770c:	7bbb      	ldrb	r3, [r7, #14]
 800770e:	2b80      	cmp	r3, #128	; 0x80
 8007710:	d008      	beq.n	8007724 <USBD_StdEPReq+0xb0>
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	88db      	ldrh	r3, [r3, #6]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d104      	bne.n	8007724 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800771a:	7bbb      	ldrb	r3, [r7, #14]
 800771c:	4619      	mov	r1, r3
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f001 f98e 	bl	8008a40 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 fcec 	bl	8008102 <USBD_CtlSendStatus>

        break;
 800772a:	e004      	b.n	8007736 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800772c:	6839      	ldr	r1, [r7, #0]
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 fc1c 	bl	8007f6c <USBD_CtlError>
        break;
 8007734:	bf00      	nop
      }
      break;
 8007736:	e0e7      	b.n	8007908 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800773e:	2b02      	cmp	r3, #2
 8007740:	d002      	beq.n	8007748 <USBD_StdEPReq+0xd4>
 8007742:	2b03      	cmp	r3, #3
 8007744:	d015      	beq.n	8007772 <USBD_StdEPReq+0xfe>
 8007746:	e02d      	b.n	80077a4 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007748:	7bbb      	ldrb	r3, [r7, #14]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00c      	beq.n	8007768 <USBD_StdEPReq+0xf4>
 800774e:	7bbb      	ldrb	r3, [r7, #14]
 8007750:	2b80      	cmp	r3, #128	; 0x80
 8007752:	d009      	beq.n	8007768 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007754:	7bbb      	ldrb	r3, [r7, #14]
 8007756:	4619      	mov	r1, r3
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f001 f971 	bl	8008a40 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800775e:	2180      	movs	r1, #128	; 0x80
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f001 f96d 	bl	8008a40 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007766:	e023      	b.n	80077b0 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8007768:	6839      	ldr	r1, [r7, #0]
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 fbfe 	bl	8007f6c <USBD_CtlError>
        break;
 8007770:	e01e      	b.n	80077b0 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	885b      	ldrh	r3, [r3, #2]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d119      	bne.n	80077ae <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800777a:	7bbb      	ldrb	r3, [r7, #14]
 800777c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007780:	2b00      	cmp	r3, #0
 8007782:	d004      	beq.n	800778e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007784:	7bbb      	ldrb	r3, [r7, #14]
 8007786:	4619      	mov	r1, r3
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f001 f978 	bl	8008a7e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 fcb7 	bl	8008102 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	6839      	ldr	r1, [r7, #0]
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	4798      	blx	r3
        }
        break;
 80077a2:	e004      	b.n	80077ae <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 80077a4:	6839      	ldr	r1, [r7, #0]
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 fbe0 	bl	8007f6c <USBD_CtlError>
        break;
 80077ac:	e000      	b.n	80077b0 <USBD_StdEPReq+0x13c>
        break;
 80077ae:	bf00      	nop
      }
      break;
 80077b0:	e0aa      	b.n	8007908 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077b8:	2b02      	cmp	r3, #2
 80077ba:	d002      	beq.n	80077c2 <USBD_StdEPReq+0x14e>
 80077bc:	2b03      	cmp	r3, #3
 80077be:	d032      	beq.n	8007826 <USBD_StdEPReq+0x1b2>
 80077c0:	e097      	b.n	80078f2 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077c2:	7bbb      	ldrb	r3, [r7, #14]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d007      	beq.n	80077d8 <USBD_StdEPReq+0x164>
 80077c8:	7bbb      	ldrb	r3, [r7, #14]
 80077ca:	2b80      	cmp	r3, #128	; 0x80
 80077cc:	d004      	beq.n	80077d8 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80077ce:	6839      	ldr	r1, [r7, #0]
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 fbcb 	bl	8007f6c <USBD_CtlError>
          break;
 80077d6:	e091      	b.n	80078fc <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	da0b      	bge.n	80077f8 <USBD_StdEPReq+0x184>
 80077e0:	7bbb      	ldrb	r3, [r7, #14]
 80077e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077e6:	4613      	mov	r3, r2
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	4413      	add	r3, r2
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	3310      	adds	r3, #16
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	4413      	add	r3, r2
 80077f4:	3304      	adds	r3, #4
 80077f6:	e00b      	b.n	8007810 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80077f8:	7bbb      	ldrb	r3, [r7, #14]
 80077fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077fe:	4613      	mov	r3, r2
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	4413      	add	r3, r2
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	4413      	add	r3, r2
 800780e:	3304      	adds	r3, #4
 8007810:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	2200      	movs	r2, #0
 8007816:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	2202      	movs	r2, #2
 800781c:	4619      	mov	r1, r3
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 fc15 	bl	800804e <USBD_CtlSendData>
        break;
 8007824:	e06a      	b.n	80078fc <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8007826:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800782a:	2b00      	cmp	r3, #0
 800782c:	da11      	bge.n	8007852 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800782e:	7bbb      	ldrb	r3, [r7, #14]
 8007830:	f003 020f 	and.w	r2, r3, #15
 8007834:	6879      	ldr	r1, [r7, #4]
 8007836:	4613      	mov	r3, r2
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	4413      	add	r3, r2
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	440b      	add	r3, r1
 8007840:	3324      	adds	r3, #36	; 0x24
 8007842:	881b      	ldrh	r3, [r3, #0]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d117      	bne.n	8007878 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8007848:	6839      	ldr	r1, [r7, #0]
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 fb8e 	bl	8007f6c <USBD_CtlError>
            break;
 8007850:	e054      	b.n	80078fc <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007852:	7bbb      	ldrb	r3, [r7, #14]
 8007854:	f003 020f 	and.w	r2, r3, #15
 8007858:	6879      	ldr	r1, [r7, #4]
 800785a:	4613      	mov	r3, r2
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	4413      	add	r3, r2
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	440b      	add	r3, r1
 8007864:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007868:	881b      	ldrh	r3, [r3, #0]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d104      	bne.n	8007878 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800786e:	6839      	ldr	r1, [r7, #0]
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 fb7b 	bl	8007f6c <USBD_CtlError>
            break;
 8007876:	e041      	b.n	80078fc <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007878:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800787c:	2b00      	cmp	r3, #0
 800787e:	da0b      	bge.n	8007898 <USBD_StdEPReq+0x224>
 8007880:	7bbb      	ldrb	r3, [r7, #14]
 8007882:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007886:	4613      	mov	r3, r2
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	4413      	add	r3, r2
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	3310      	adds	r3, #16
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	4413      	add	r3, r2
 8007894:	3304      	adds	r3, #4
 8007896:	e00b      	b.n	80078b0 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007898:	7bbb      	ldrb	r3, [r7, #14]
 800789a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800789e:	4613      	mov	r3, r2
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	4413      	add	r3, r2
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	4413      	add	r3, r2
 80078ae:	3304      	adds	r3, #4
 80078b0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80078b2:	7bbb      	ldrb	r3, [r7, #14]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d002      	beq.n	80078be <USBD_StdEPReq+0x24a>
 80078b8:	7bbb      	ldrb	r3, [r7, #14]
 80078ba:	2b80      	cmp	r3, #128	; 0x80
 80078bc:	d103      	bne.n	80078c6 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	2200      	movs	r2, #0
 80078c2:	601a      	str	r2, [r3, #0]
 80078c4:	e00e      	b.n	80078e4 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80078c6:	7bbb      	ldrb	r3, [r7, #14]
 80078c8:	4619      	mov	r1, r3
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f001 f8f6 	bl	8008abc <USBD_LL_IsStallEP>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d003      	beq.n	80078de <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	2201      	movs	r2, #1
 80078da:	601a      	str	r2, [r3, #0]
 80078dc:	e002      	b.n	80078e4 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	2200      	movs	r2, #0
 80078e2:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	2202      	movs	r2, #2
 80078e8:	4619      	mov	r1, r3
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 fbaf 	bl	800804e <USBD_CtlSendData>
          break;
 80078f0:	e004      	b.n	80078fc <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 80078f2:	6839      	ldr	r1, [r7, #0]
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 fb39 	bl	8007f6c <USBD_CtlError>
        break;
 80078fa:	bf00      	nop
      }
      break;
 80078fc:	e004      	b.n	8007908 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 80078fe:	6839      	ldr	r1, [r7, #0]
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 fb33 	bl	8007f6c <USBD_CtlError>
      break;
 8007906:	bf00      	nop
    }
    break;
 8007908:	e004      	b.n	8007914 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800790a:	6839      	ldr	r1, [r7, #0]
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 fb2d 	bl	8007f6c <USBD_CtlError>
    break;
 8007912:	bf00      	nop
  }

  return ret;
 8007914:	7bfb      	ldrb	r3, [r7, #15]
}
 8007916:	4618      	mov	r0, r3
 8007918:	3710      	adds	r7, #16
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
	...

08007920 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800792a:	2300      	movs	r3, #0
 800792c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800792e:	2300      	movs	r3, #0
 8007930:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007932:	2300      	movs	r3, #0
 8007934:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	885b      	ldrh	r3, [r3, #2]
 800793a:	0a1b      	lsrs	r3, r3, #8
 800793c:	b29b      	uxth	r3, r3
 800793e:	3b01      	subs	r3, #1
 8007940:	2b06      	cmp	r3, #6
 8007942:	f200 8128 	bhi.w	8007b96 <USBD_GetDescriptor+0x276>
 8007946:	a201      	add	r2, pc, #4	; (adr r2, 800794c <USBD_GetDescriptor+0x2c>)
 8007948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800794c:	08007969 	.word	0x08007969
 8007950:	08007981 	.word	0x08007981
 8007954:	080079c1 	.word	0x080079c1
 8007958:	08007b97 	.word	0x08007b97
 800795c:	08007b97 	.word	0x08007b97
 8007960:	08007b37 	.word	0x08007b37
 8007964:	08007b63 	.word	0x08007b63
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	7c12      	ldrb	r2, [r2, #16]
 8007974:	f107 0108 	add.w	r1, r7, #8
 8007978:	4610      	mov	r0, r2
 800797a:	4798      	blx	r3
 800797c:	60f8      	str	r0, [r7, #12]
    break;
 800797e:	e112      	b.n	8007ba6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	7c1b      	ldrb	r3, [r3, #16]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d10d      	bne.n	80079a4 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800798e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007990:	f107 0208 	add.w	r2, r7, #8
 8007994:	4610      	mov	r0, r2
 8007996:	4798      	blx	r3
 8007998:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	3301      	adds	r3, #1
 800799e:	2202      	movs	r2, #2
 80079a0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80079a2:	e100      	b.n	8007ba6 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ac:	f107 0208 	add.w	r2, r7, #8
 80079b0:	4610      	mov	r0, r2
 80079b2:	4798      	blx	r3
 80079b4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	3301      	adds	r3, #1
 80079ba:	2202      	movs	r2, #2
 80079bc:	701a      	strb	r2, [r3, #0]
    break;
 80079be:	e0f2      	b.n	8007ba6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	885b      	ldrh	r3, [r3, #2]
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	2b05      	cmp	r3, #5
 80079c8:	f200 80ac 	bhi.w	8007b24 <USBD_GetDescriptor+0x204>
 80079cc:	a201      	add	r2, pc, #4	; (adr r2, 80079d4 <USBD_GetDescriptor+0xb4>)
 80079ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d2:	bf00      	nop
 80079d4:	080079ed 	.word	0x080079ed
 80079d8:	08007a21 	.word	0x08007a21
 80079dc:	08007a55 	.word	0x08007a55
 80079e0:	08007a89 	.word	0x08007a89
 80079e4:	08007abd 	.word	0x08007abd
 80079e8:	08007af1 	.word	0x08007af1
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d00b      	beq.n	8007a10 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	7c12      	ldrb	r2, [r2, #16]
 8007a04:	f107 0108 	add.w	r1, r7, #8
 8007a08:	4610      	mov	r0, r2
 8007a0a:	4798      	blx	r3
 8007a0c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a0e:	e091      	b.n	8007b34 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007a10:	6839      	ldr	r1, [r7, #0]
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 faaa 	bl	8007f6c <USBD_CtlError>
        err++;
 8007a18:	7afb      	ldrb	r3, [r7, #11]
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	72fb      	strb	r3, [r7, #11]
      break;
 8007a1e:	e089      	b.n	8007b34 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d00b      	beq.n	8007a44 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	7c12      	ldrb	r2, [r2, #16]
 8007a38:	f107 0108 	add.w	r1, r7, #8
 8007a3c:	4610      	mov	r0, r2
 8007a3e:	4798      	blx	r3
 8007a40:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a42:	e077      	b.n	8007b34 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007a44:	6839      	ldr	r1, [r7, #0]
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 fa90 	bl	8007f6c <USBD_CtlError>
        err++;
 8007a4c:	7afb      	ldrb	r3, [r7, #11]
 8007a4e:	3301      	adds	r3, #1
 8007a50:	72fb      	strb	r3, [r7, #11]
      break;
 8007a52:	e06f      	b.n	8007b34 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a5a:	68db      	ldr	r3, [r3, #12]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d00b      	beq.n	8007a78 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	7c12      	ldrb	r2, [r2, #16]
 8007a6c:	f107 0108 	add.w	r1, r7, #8
 8007a70:	4610      	mov	r0, r2
 8007a72:	4798      	blx	r3
 8007a74:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a76:	e05d      	b.n	8007b34 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007a78:	6839      	ldr	r1, [r7, #0]
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 fa76 	bl	8007f6c <USBD_CtlError>
        err++;
 8007a80:	7afb      	ldrb	r3, [r7, #11]
 8007a82:	3301      	adds	r3, #1
 8007a84:	72fb      	strb	r3, [r7, #11]
      break;
 8007a86:	e055      	b.n	8007b34 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a8e:	691b      	ldr	r3, [r3, #16]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00b      	beq.n	8007aac <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a9a:	691b      	ldr	r3, [r3, #16]
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	7c12      	ldrb	r2, [r2, #16]
 8007aa0:	f107 0108 	add.w	r1, r7, #8
 8007aa4:	4610      	mov	r0, r2
 8007aa6:	4798      	blx	r3
 8007aa8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007aaa:	e043      	b.n	8007b34 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007aac:	6839      	ldr	r1, [r7, #0]
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 fa5c 	bl	8007f6c <USBD_CtlError>
        err++;
 8007ab4:	7afb      	ldrb	r3, [r7, #11]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	72fb      	strb	r3, [r7, #11]
      break;
 8007aba:	e03b      	b.n	8007b34 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ac2:	695b      	ldr	r3, [r3, #20]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d00b      	beq.n	8007ae0 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ace:	695b      	ldr	r3, [r3, #20]
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	7c12      	ldrb	r2, [r2, #16]
 8007ad4:	f107 0108 	add.w	r1, r7, #8
 8007ad8:	4610      	mov	r0, r2
 8007ada:	4798      	blx	r3
 8007adc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ade:	e029      	b.n	8007b34 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007ae0:	6839      	ldr	r1, [r7, #0]
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 fa42 	bl	8007f6c <USBD_CtlError>
        err++;
 8007ae8:	7afb      	ldrb	r3, [r7, #11]
 8007aea:	3301      	adds	r3, #1
 8007aec:	72fb      	strb	r3, [r7, #11]
      break;
 8007aee:	e021      	b.n	8007b34 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007af6:	699b      	ldr	r3, [r3, #24]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d00b      	beq.n	8007b14 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b02:	699b      	ldr	r3, [r3, #24]
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	7c12      	ldrb	r2, [r2, #16]
 8007b08:	f107 0108 	add.w	r1, r7, #8
 8007b0c:	4610      	mov	r0, r2
 8007b0e:	4798      	blx	r3
 8007b10:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b12:	e00f      	b.n	8007b34 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007b14:	6839      	ldr	r1, [r7, #0]
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 fa28 	bl	8007f6c <USBD_CtlError>
        err++;
 8007b1c:	7afb      	ldrb	r3, [r7, #11]
 8007b1e:	3301      	adds	r3, #1
 8007b20:	72fb      	strb	r3, [r7, #11]
      break;
 8007b22:	e007      	b.n	8007b34 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8007b24:	6839      	ldr	r1, [r7, #0]
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 fa20 	bl	8007f6c <USBD_CtlError>
      err++;
 8007b2c:	7afb      	ldrb	r3, [r7, #11]
 8007b2e:	3301      	adds	r3, #1
 8007b30:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8007b32:	bf00      	nop
    }
    break;
 8007b34:	e037      	b.n	8007ba6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	7c1b      	ldrb	r3, [r3, #16]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d109      	bne.n	8007b52 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b46:	f107 0208 	add.w	r2, r7, #8
 8007b4a:	4610      	mov	r0, r2
 8007b4c:	4798      	blx	r3
 8007b4e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007b50:	e029      	b.n	8007ba6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8007b52:	6839      	ldr	r1, [r7, #0]
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 fa09 	bl	8007f6c <USBD_CtlError>
      err++;
 8007b5a:	7afb      	ldrb	r3, [r7, #11]
 8007b5c:	3301      	adds	r3, #1
 8007b5e:	72fb      	strb	r3, [r7, #11]
    break;
 8007b60:	e021      	b.n	8007ba6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	7c1b      	ldrb	r3, [r3, #16]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d10d      	bne.n	8007b86 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b72:	f107 0208 	add.w	r2, r7, #8
 8007b76:	4610      	mov	r0, r2
 8007b78:	4798      	blx	r3
 8007b7a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	3301      	adds	r3, #1
 8007b80:	2207      	movs	r2, #7
 8007b82:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007b84:	e00f      	b.n	8007ba6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8007b86:	6839      	ldr	r1, [r7, #0]
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 f9ef 	bl	8007f6c <USBD_CtlError>
      err++;
 8007b8e:	7afb      	ldrb	r3, [r7, #11]
 8007b90:	3301      	adds	r3, #1
 8007b92:	72fb      	strb	r3, [r7, #11]
    break;
 8007b94:	e007      	b.n	8007ba6 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8007b96:	6839      	ldr	r1, [r7, #0]
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 f9e7 	bl	8007f6c <USBD_CtlError>
    err++;
 8007b9e:	7afb      	ldrb	r3, [r7, #11]
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	72fb      	strb	r3, [r7, #11]
    break;
 8007ba4:	bf00      	nop
  }

  if (err != 0U)
 8007ba6:	7afb      	ldrb	r3, [r7, #11]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d11e      	bne.n	8007bea <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	88db      	ldrh	r3, [r3, #6]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d016      	beq.n	8007be2 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8007bb4:	893b      	ldrh	r3, [r7, #8]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d00e      	beq.n	8007bd8 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	88da      	ldrh	r2, [r3, #6]
 8007bbe:	893b      	ldrh	r3, [r7, #8]
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	bf28      	it	cs
 8007bc4:	4613      	movcs	r3, r2
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007bca:	893b      	ldrh	r3, [r7, #8]
 8007bcc:	461a      	mov	r2, r3
 8007bce:	68f9      	ldr	r1, [r7, #12]
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 fa3c 	bl	800804e <USBD_CtlSendData>
 8007bd6:	e009      	b.n	8007bec <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007bd8:	6839      	ldr	r1, [r7, #0]
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 f9c6 	bl	8007f6c <USBD_CtlError>
 8007be0:	e004      	b.n	8007bec <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 fa8d 	bl	8008102 <USBD_CtlSendStatus>
 8007be8:	e000      	b.n	8007bec <USBD_GetDescriptor+0x2cc>
    return;
 8007bea:	bf00      	nop
    }
  }
}
 8007bec:	3710      	adds	r7, #16
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
 8007bf2:	bf00      	nop

08007bf4 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	889b      	ldrh	r3, [r3, #4]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d130      	bne.n	8007c68 <USBD_SetAddress+0x74>
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	88db      	ldrh	r3, [r3, #6]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d12c      	bne.n	8007c68 <USBD_SetAddress+0x74>
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	885b      	ldrh	r3, [r3, #2]
 8007c12:	2b7f      	cmp	r3, #127	; 0x7f
 8007c14:	d828      	bhi.n	8007c68 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	885b      	ldrh	r3, [r3, #2]
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c20:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c28:	2b03      	cmp	r3, #3
 8007c2a:	d104      	bne.n	8007c36 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007c2c:	6839      	ldr	r1, [r7, #0]
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 f99c 	bl	8007f6c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c34:	e01c      	b.n	8007c70 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	7bfa      	ldrb	r2, [r7, #15]
 8007c3a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007c3e:	7bfb      	ldrb	r3, [r7, #15]
 8007c40:	4619      	mov	r1, r3
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 ff66 	bl	8008b14 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 fa5a 	bl	8008102 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007c4e:	7bfb      	ldrb	r3, [r7, #15]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d004      	beq.n	8007c5e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2202      	movs	r2, #2
 8007c58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c5c:	e008      	b.n	8007c70 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2201      	movs	r2, #1
 8007c62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c66:	e003      	b.n	8007c70 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007c68:	6839      	ldr	r1, [r7, #0]
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 f97e 	bl	8007f6c <USBD_CtlError>
  }
}
 8007c70:	bf00      	nop
 8007c72:	3710      	adds	r7, #16
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c82:	2300      	movs	r3, #0
 8007c84:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	885b      	ldrh	r3, [r3, #2]
 8007c8a:	b2da      	uxtb	r2, r3
 8007c8c:	4b4b      	ldr	r3, [pc, #300]	; (8007dbc <USBD_SetConfig+0x144>)
 8007c8e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007c90:	4b4a      	ldr	r3, [pc, #296]	; (8007dbc <USBD_SetConfig+0x144>)
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d905      	bls.n	8007ca4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007c98:	6839      	ldr	r1, [r7, #0]
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 f966 	bl	8007f6c <USBD_CtlError>
    return USBD_FAIL;
 8007ca0:	2303      	movs	r3, #3
 8007ca2:	e087      	b.n	8007db4 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007caa:	2b02      	cmp	r3, #2
 8007cac:	d002      	beq.n	8007cb4 <USBD_SetConfig+0x3c>
 8007cae:	2b03      	cmp	r3, #3
 8007cb0:	d025      	beq.n	8007cfe <USBD_SetConfig+0x86>
 8007cb2:	e071      	b.n	8007d98 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8007cb4:	4b41      	ldr	r3, [pc, #260]	; (8007dbc <USBD_SetConfig+0x144>)
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d01c      	beq.n	8007cf6 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8007cbc:	4b3f      	ldr	r3, [pc, #252]	; (8007dbc <USBD_SetConfig+0x144>)
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007cc6:	4b3d      	ldr	r3, [pc, #244]	; (8007dbc <USBD_SetConfig+0x144>)
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	4619      	mov	r1, r3
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f7ff f9a7 	bl	8007020 <USBD_SetClassConfig>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8007cd6:	7bfb      	ldrb	r3, [r7, #15]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d004      	beq.n	8007ce6 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8007cdc:	6839      	ldr	r1, [r7, #0]
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 f944 	bl	8007f6c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007ce4:	e065      	b.n	8007db2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 fa0b 	bl	8008102 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2203      	movs	r2, #3
 8007cf0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007cf4:	e05d      	b.n	8007db2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 fa03 	bl	8008102 <USBD_CtlSendStatus>
    break;
 8007cfc:	e059      	b.n	8007db2 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8007cfe:	4b2f      	ldr	r3, [pc, #188]	; (8007dbc <USBD_SetConfig+0x144>)
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d112      	bne.n	8007d2c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2202      	movs	r2, #2
 8007d0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8007d0e:	4b2b      	ldr	r3, [pc, #172]	; (8007dbc <USBD_SetConfig+0x144>)
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	461a      	mov	r2, r3
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007d18:	4b28      	ldr	r3, [pc, #160]	; (8007dbc <USBD_SetConfig+0x144>)
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f7ff f99a 	bl	8007058 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 f9ec 	bl	8008102 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007d2a:	e042      	b.n	8007db2 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8007d2c:	4b23      	ldr	r3, [pc, #140]	; (8007dbc <USBD_SetConfig+0x144>)
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	461a      	mov	r2, r3
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d02a      	beq.n	8007d90 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	4619      	mov	r1, r3
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f7ff f988 	bl	8007058 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8007d48:	4b1c      	ldr	r3, [pc, #112]	; (8007dbc <USBD_SetConfig+0x144>)
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007d52:	4b1a      	ldr	r3, [pc, #104]	; (8007dbc <USBD_SetConfig+0x144>)
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	4619      	mov	r1, r3
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f7ff f961 	bl	8007020 <USBD_SetClassConfig>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8007d62:	7bfb      	ldrb	r3, [r7, #15]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d00f      	beq.n	8007d88 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8007d68:	6839      	ldr	r1, [r7, #0]
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 f8fe 	bl	8007f6c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	4619      	mov	r1, r3
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f7ff f96d 	bl	8007058 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2202      	movs	r2, #2
 8007d82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007d86:	e014      	b.n	8007db2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 f9ba 	bl	8008102 <USBD_CtlSendStatus>
    break;
 8007d8e:	e010      	b.n	8007db2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 f9b6 	bl	8008102 <USBD_CtlSendStatus>
    break;
 8007d96:	e00c      	b.n	8007db2 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8007d98:	6839      	ldr	r1, [r7, #0]
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 f8e6 	bl	8007f6c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007da0:	4b06      	ldr	r3, [pc, #24]	; (8007dbc <USBD_SetConfig+0x144>)
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	4619      	mov	r1, r3
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f7ff f956 	bl	8007058 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8007dac:	2303      	movs	r3, #3
 8007dae:	73fb      	strb	r3, [r7, #15]
    break;
 8007db0:	bf00      	nop
  }

  return ret;
 8007db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3710      	adds	r7, #16
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}
 8007dbc:	20000210 	.word	0x20000210

08007dc0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	88db      	ldrh	r3, [r3, #6]
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d004      	beq.n	8007ddc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007dd2:	6839      	ldr	r1, [r7, #0]
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 f8c9 	bl	8007f6c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8007dda:	e021      	b.n	8007e20 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	db17      	blt.n	8007e16 <USBD_GetConfig+0x56>
 8007de6:	2b02      	cmp	r3, #2
 8007de8:	dd02      	ble.n	8007df0 <USBD_GetConfig+0x30>
 8007dea:	2b03      	cmp	r3, #3
 8007dec:	d00b      	beq.n	8007e06 <USBD_GetConfig+0x46>
 8007dee:	e012      	b.n	8007e16 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2200      	movs	r2, #0
 8007df4:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	3308      	adds	r3, #8
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 f925 	bl	800804e <USBD_CtlSendData>
      break;
 8007e04:	e00c      	b.n	8007e20 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	3304      	adds	r3, #4
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 f91d 	bl	800804e <USBD_CtlSendData>
      break;
 8007e14:	e004      	b.n	8007e20 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8007e16:	6839      	ldr	r1, [r7, #0]
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 f8a7 	bl	8007f6c <USBD_CtlError>
      break;
 8007e1e:	bf00      	nop
}
 8007e20:	bf00      	nop
 8007e22:	3708      	adds	r7, #8
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e38:	3b01      	subs	r3, #1
 8007e3a:	2b02      	cmp	r3, #2
 8007e3c:	d81e      	bhi.n	8007e7c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	88db      	ldrh	r3, [r3, #6]
 8007e42:	2b02      	cmp	r3, #2
 8007e44:	d004      	beq.n	8007e50 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007e46:	6839      	ldr	r1, [r7, #0]
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 f88f 	bl	8007f6c <USBD_CtlError>
      break;
 8007e4e:	e01a      	b.n	8007e86 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2201      	movs	r2, #1
 8007e54:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d005      	beq.n	8007e6c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	f043 0202 	orr.w	r2, r3, #2
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	330c      	adds	r3, #12
 8007e70:	2202      	movs	r2, #2
 8007e72:	4619      	mov	r1, r3
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 f8ea 	bl	800804e <USBD_CtlSendData>
    break;
 8007e7a:	e004      	b.n	8007e86 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8007e7c:	6839      	ldr	r1, [r7, #0]
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 f874 	bl	8007f6c <USBD_CtlError>
    break;
 8007e84:	bf00      	nop
  }
}
 8007e86:	bf00      	nop
 8007e88:	3708      	adds	r7, #8
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}

08007e8e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b082      	sub	sp, #8
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
 8007e96:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	885b      	ldrh	r3, [r3, #2]
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d106      	bne.n	8007eae <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 f92a 	bl	8008102 <USBD_CtlSendStatus>
  }
}
 8007eae:	bf00      	nop
 8007eb0:	3708      	adds	r7, #8
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}

08007eb6 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007eb6:	b580      	push	{r7, lr}
 8007eb8:	b082      	sub	sp, #8
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
 8007ebe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ec6:	3b01      	subs	r3, #1
 8007ec8:	2b02      	cmp	r3, #2
 8007eca:	d80b      	bhi.n	8007ee4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	885b      	ldrh	r3, [r3, #2]
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d10c      	bne.n	8007eee <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 f910 	bl	8008102 <USBD_CtlSendStatus>
      }
      break;
 8007ee2:	e004      	b.n	8007eee <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007ee4:	6839      	ldr	r1, [r7, #0]
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 f840 	bl	8007f6c <USBD_CtlError>
      break;
 8007eec:	e000      	b.n	8007ef0 <USBD_ClrFeature+0x3a>
      break;
 8007eee:	bf00      	nop
  }
}
 8007ef0:	bf00      	nop
 8007ef2:	3708      	adds	r7, #8
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	781a      	ldrb	r2, [r3, #0]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	3301      	adds	r3, #1
 8007f12:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	781a      	ldrb	r2, [r3, #0]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	3301      	adds	r3, #1
 8007f20:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007f22:	68f8      	ldr	r0, [r7, #12]
 8007f24:	f7ff fad3 	bl	80074ce <SWAPBYTE>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	3301      	adds	r3, #1
 8007f34:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	3301      	adds	r3, #1
 8007f3a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007f3c:	68f8      	ldr	r0, [r7, #12]
 8007f3e:	f7ff fac6 	bl	80074ce <SWAPBYTE>
 8007f42:	4603      	mov	r3, r0
 8007f44:	461a      	mov	r2, r3
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	3301      	adds	r3, #1
 8007f54:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007f56:	68f8      	ldr	r0, [r7, #12]
 8007f58:	f7ff fab9 	bl	80074ce <SWAPBYTE>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	461a      	mov	r2, r3
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	80da      	strh	r2, [r3, #6]
}
 8007f64:	bf00      	nop
 8007f66:	3710      	adds	r7, #16
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f76:	2180      	movs	r1, #128	; 0x80
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 fd61 	bl	8008a40 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007f7e:	2100      	movs	r1, #0
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 fd5d 	bl	8008a40 <USBD_LL_StallEP>
}
 8007f86:	bf00      	nop
 8007f88:	3708      	adds	r7, #8
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}

08007f8e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007f8e:	b580      	push	{r7, lr}
 8007f90:	b086      	sub	sp, #24
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	60f8      	str	r0, [r7, #12]
 8007f96:	60b9      	str	r1, [r7, #8]
 8007f98:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d036      	beq.n	8008012 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007fa8:	6938      	ldr	r0, [r7, #16]
 8007faa:	f000 f836 	bl	800801a <USBD_GetLen>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	005b      	lsls	r3, r3, #1
 8007fb6:	b29a      	uxth	r2, r3
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007fbc:	7dfb      	ldrb	r3, [r7, #23]
 8007fbe:	68ba      	ldr	r2, [r7, #8]
 8007fc0:	4413      	add	r3, r2
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	7812      	ldrb	r2, [r2, #0]
 8007fc6:	701a      	strb	r2, [r3, #0]
  idx++;
 8007fc8:	7dfb      	ldrb	r3, [r7, #23]
 8007fca:	3301      	adds	r3, #1
 8007fcc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007fce:	7dfb      	ldrb	r3, [r7, #23]
 8007fd0:	68ba      	ldr	r2, [r7, #8]
 8007fd2:	4413      	add	r3, r2
 8007fd4:	2203      	movs	r2, #3
 8007fd6:	701a      	strb	r2, [r3, #0]
  idx++;
 8007fd8:	7dfb      	ldrb	r3, [r7, #23]
 8007fda:	3301      	adds	r3, #1
 8007fdc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007fde:	e013      	b.n	8008008 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007fe0:	7dfb      	ldrb	r3, [r7, #23]
 8007fe2:	68ba      	ldr	r2, [r7, #8]
 8007fe4:	4413      	add	r3, r2
 8007fe6:	693a      	ldr	r2, [r7, #16]
 8007fe8:	7812      	ldrb	r2, [r2, #0]
 8007fea:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	3301      	adds	r3, #1
 8007ff0:	613b      	str	r3, [r7, #16]
    idx++;
 8007ff2:	7dfb      	ldrb	r3, [r7, #23]
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007ff8:	7dfb      	ldrb	r3, [r7, #23]
 8007ffa:	68ba      	ldr	r2, [r7, #8]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	2200      	movs	r2, #0
 8008000:	701a      	strb	r2, [r3, #0]
    idx++;
 8008002:	7dfb      	ldrb	r3, [r7, #23]
 8008004:	3301      	adds	r3, #1
 8008006:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d1e7      	bne.n	8007fe0 <USBD_GetString+0x52>
 8008010:	e000      	b.n	8008014 <USBD_GetString+0x86>
    return;
 8008012:	bf00      	nop
  }
}
 8008014:	3718      	adds	r7, #24
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800801a:	b480      	push	{r7}
 800801c:	b085      	sub	sp, #20
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008022:	2300      	movs	r3, #0
 8008024:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800802a:	e005      	b.n	8008038 <USBD_GetLen+0x1e>
  {
    len++;
 800802c:	7bfb      	ldrb	r3, [r7, #15]
 800802e:	3301      	adds	r3, #1
 8008030:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	3301      	adds	r3, #1
 8008036:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d1f5      	bne.n	800802c <USBD_GetLen+0x12>
  }

  return len;
 8008040:	7bfb      	ldrb	r3, [r7, #15]
}
 8008042:	4618      	mov	r0, r3
 8008044:	3714      	adds	r7, #20
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr

0800804e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800804e:	b580      	push	{r7, lr}
 8008050:	b084      	sub	sp, #16
 8008052:	af00      	add	r7, sp, #0
 8008054:	60f8      	str	r0, [r7, #12]
 8008056:	60b9      	str	r1, [r7, #8]
 8008058:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2202      	movs	r2, #2
 800805e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	68ba      	ldr	r2, [r7, #8]
 8008072:	2100      	movs	r1, #0
 8008074:	68f8      	ldr	r0, [r7, #12]
 8008076:	f000 fd6c 	bl	8008b52 <USBD_LL_Transmit>

  return USBD_OK;
 800807a:	2300      	movs	r3, #0
}
 800807c:	4618      	mov	r0, r3
 800807e:	3710      	adds	r7, #16
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	60f8      	str	r0, [r7, #12]
 800808c:	60b9      	str	r1, [r7, #8]
 800808e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	68ba      	ldr	r2, [r7, #8]
 8008094:	2100      	movs	r1, #0
 8008096:	68f8      	ldr	r0, [r7, #12]
 8008098:	f000 fd5b 	bl	8008b52 <USBD_LL_Transmit>

  return USBD_OK;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3710      	adds	r7, #16
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b084      	sub	sp, #16
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	60f8      	str	r0, [r7, #12]
 80080ae:	60b9      	str	r1, [r7, #8]
 80080b0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2203      	movs	r2, #3
 80080b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	68ba      	ldr	r2, [r7, #8]
 80080ce:	2100      	movs	r1, #0
 80080d0:	68f8      	ldr	r0, [r7, #12]
 80080d2:	f000 fd5f 	bl	8008b94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80080d6:	2300      	movs	r3, #0
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3710      	adds	r7, #16
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	68ba      	ldr	r2, [r7, #8]
 80080f0:	2100      	movs	r1, #0
 80080f2:	68f8      	ldr	r0, [r7, #12]
 80080f4:	f000 fd4e 	bl	8008b94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80080f8:	2300      	movs	r3, #0
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3710      	adds	r7, #16
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}

08008102 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008102:	b580      	push	{r7, lr}
 8008104:	b082      	sub	sp, #8
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2204      	movs	r2, #4
 800810e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008112:	2300      	movs	r3, #0
 8008114:	2200      	movs	r2, #0
 8008116:	2100      	movs	r1, #0
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 fd1a 	bl	8008b52 <USBD_LL_Transmit>

  return USBD_OK;
 800811e:	2300      	movs	r3, #0
}
 8008120:	4618      	mov	r0, r3
 8008122:	3708      	adds	r7, #8
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2205      	movs	r2, #5
 8008134:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008138:	2300      	movs	r3, #0
 800813a:	2200      	movs	r2, #0
 800813c:	2100      	movs	r1, #0
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 fd28 	bl	8008b94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3708      	adds	r7, #8
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
	...

08008150 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008154:	2200      	movs	r2, #0
 8008156:	4912      	ldr	r1, [pc, #72]	; (80081a0 <MX_USB_DEVICE_Init+0x50>)
 8008158:	4812      	ldr	r0, [pc, #72]	; (80081a4 <MX_USB_DEVICE_Init+0x54>)
 800815a:	f7fe fef3 	bl	8006f44 <USBD_Init>
 800815e:	4603      	mov	r3, r0
 8008160:	2b00      	cmp	r3, #0
 8008162:	d001      	beq.n	8008168 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008164:	f7f8 fc88 	bl	8000a78 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008168:	490f      	ldr	r1, [pc, #60]	; (80081a8 <MX_USB_DEVICE_Init+0x58>)
 800816a:	480e      	ldr	r0, [pc, #56]	; (80081a4 <MX_USB_DEVICE_Init+0x54>)
 800816c:	f7fe ff20 	bl	8006fb0 <USBD_RegisterClass>
 8008170:	4603      	mov	r3, r0
 8008172:	2b00      	cmp	r3, #0
 8008174:	d001      	beq.n	800817a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008176:	f7f8 fc7f 	bl	8000a78 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800817a:	490c      	ldr	r1, [pc, #48]	; (80081ac <MX_USB_DEVICE_Init+0x5c>)
 800817c:	4809      	ldr	r0, [pc, #36]	; (80081a4 <MX_USB_DEVICE_Init+0x54>)
 800817e:	f7fe fe45 	bl	8006e0c <USBD_CDC_RegisterInterface>
 8008182:	4603      	mov	r3, r0
 8008184:	2b00      	cmp	r3, #0
 8008186:	d001      	beq.n	800818c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008188:	f7f8 fc76 	bl	8000a78 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800818c:	4805      	ldr	r0, [pc, #20]	; (80081a4 <MX_USB_DEVICE_Init+0x54>)
 800818e:	f7fe ff30 	bl	8006ff2 <USBD_Start>
 8008192:	4603      	mov	r3, r0
 8008194:	2b00      	cmp	r3, #0
 8008196:	d001      	beq.n	800819c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008198:	f7f8 fc6e 	bl	8000a78 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800819c:	bf00      	nop
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	20000138 	.word	0x20000138
 80081a4:	20000900 	.word	0x20000900
 80081a8:	20000018 	.word	0x20000018
 80081ac:	20000124 	.word	0x20000124

080081b0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80081b4:	2200      	movs	r2, #0
 80081b6:	4905      	ldr	r1, [pc, #20]	; (80081cc <CDC_Init_FS+0x1c>)
 80081b8:	4805      	ldr	r0, [pc, #20]	; (80081d0 <CDC_Init_FS+0x20>)
 80081ba:	f7fe fe3c 	bl	8006e36 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80081be:	4905      	ldr	r1, [pc, #20]	; (80081d4 <CDC_Init_FS+0x24>)
 80081c0:	4803      	ldr	r0, [pc, #12]	; (80081d0 <CDC_Init_FS+0x20>)
 80081c2:	f7fe fe51 	bl	8006e68 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80081c6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	200013d0 	.word	0x200013d0
 80081d0:	20000900 	.word	0x20000900
 80081d4:	20000bd0 	.word	0x20000bd0

080081d8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80081d8:	b480      	push	{r7}
 80081da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80081dc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80081de:	4618      	mov	r0, r3
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr

080081e8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b083      	sub	sp, #12
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	4603      	mov	r3, r0
 80081f0:	6039      	str	r1, [r7, #0]
 80081f2:	71fb      	strb	r3, [r7, #7]
 80081f4:	4613      	mov	r3, r2
 80081f6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80081f8:	79fb      	ldrb	r3, [r7, #7]
 80081fa:	2b23      	cmp	r3, #35	; 0x23
 80081fc:	f200 8098 	bhi.w	8008330 <CDC_Control_FS+0x148>
 8008200:	a201      	add	r2, pc, #4	; (adr r2, 8008208 <CDC_Control_FS+0x20>)
 8008202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008206:	bf00      	nop
 8008208:	08008331 	.word	0x08008331
 800820c:	08008331 	.word	0x08008331
 8008210:	08008331 	.word	0x08008331
 8008214:	08008331 	.word	0x08008331
 8008218:	08008331 	.word	0x08008331
 800821c:	08008331 	.word	0x08008331
 8008220:	08008331 	.word	0x08008331
 8008224:	08008331 	.word	0x08008331
 8008228:	08008331 	.word	0x08008331
 800822c:	08008331 	.word	0x08008331
 8008230:	08008331 	.word	0x08008331
 8008234:	08008331 	.word	0x08008331
 8008238:	08008331 	.word	0x08008331
 800823c:	08008331 	.word	0x08008331
 8008240:	08008331 	.word	0x08008331
 8008244:	08008331 	.word	0x08008331
 8008248:	08008331 	.word	0x08008331
 800824c:	08008331 	.word	0x08008331
 8008250:	08008331 	.word	0x08008331
 8008254:	08008331 	.word	0x08008331
 8008258:	08008331 	.word	0x08008331
 800825c:	08008331 	.word	0x08008331
 8008260:	08008331 	.word	0x08008331
 8008264:	08008331 	.word	0x08008331
 8008268:	08008331 	.word	0x08008331
 800826c:	08008331 	.word	0x08008331
 8008270:	08008331 	.word	0x08008331
 8008274:	08008331 	.word	0x08008331
 8008278:	08008331 	.word	0x08008331
 800827c:	08008331 	.word	0x08008331
 8008280:	08008331 	.word	0x08008331
 8008284:	08008331 	.word	0x08008331
 8008288:	08008299 	.word	0x08008299
 800828c:	080082dd 	.word	0x080082dd
 8008290:	08008331 	.word	0x08008331
 8008294:	08008331 	.word	0x08008331
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
       linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	461a      	mov	r2, r3
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	3301      	adds	r3, #1
 80082a2:	781b      	ldrb	r3, [r3, #0]
 80082a4:	021b      	lsls	r3, r3, #8
 80082a6:	431a      	orrs	r2, r3
                               (pbuf[2] << 16) | (pbuf[3] << 24));
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	3302      	adds	r3, #2
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	041b      	lsls	r3, r3, #16
       linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 80082b0:	431a      	orrs	r2, r3
                               (pbuf[2] << 16) | (pbuf[3] << 24));
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	3303      	adds	r3, #3
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	061b      	lsls	r3, r3, #24
 80082ba:	4313      	orrs	r3, r2
       linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 80082bc:	461a      	mov	r2, r3
 80082be:	4b20      	ldr	r3, [pc, #128]	; (8008340 <CDC_Control_FS+0x158>)
 80082c0:	601a      	str	r2, [r3, #0]
       linecoding.format     = pbuf[4];
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	791a      	ldrb	r2, [r3, #4]
 80082c6:	4b1e      	ldr	r3, [pc, #120]	; (8008340 <CDC_Control_FS+0x158>)
 80082c8:	711a      	strb	r2, [r3, #4]
       linecoding.paritytype = pbuf[5];
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	795a      	ldrb	r2, [r3, #5]
 80082ce:	4b1c      	ldr	r3, [pc, #112]	; (8008340 <CDC_Control_FS+0x158>)
 80082d0:	715a      	strb	r2, [r3, #5]
       linecoding.datatype   = pbuf[6];
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	799a      	ldrb	r2, [r3, #6]
 80082d6:	4b1a      	ldr	r3, [pc, #104]	; (8008340 <CDC_Control_FS+0x158>)
 80082d8:	719a      	strb	r2, [r3, #6]

       /* Add your code here */
       break;
 80082da:	e02a      	b.n	8008332 <CDC_Control_FS+0x14a>

     case CDC_GET_LINE_CODING:
       pbuf[0] = (uint8_t)(linecoding.bitrate);
 80082dc:	4b18      	ldr	r3, [pc, #96]	; (8008340 <CDC_Control_FS+0x158>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	b2da      	uxtb	r2, r3
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	701a      	strb	r2, [r3, #0]
       pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 80082e6:	4b16      	ldr	r3, [pc, #88]	; (8008340 <CDC_Control_FS+0x158>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	0a1a      	lsrs	r2, r3, #8
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	3301      	adds	r3, #1
 80082f0:	b2d2      	uxtb	r2, r2
 80082f2:	701a      	strb	r2, [r3, #0]
       pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 80082f4:	4b12      	ldr	r3, [pc, #72]	; (8008340 <CDC_Control_FS+0x158>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	0c1a      	lsrs	r2, r3, #16
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	3302      	adds	r3, #2
 80082fe:	b2d2      	uxtb	r2, r2
 8008300:	701a      	strb	r2, [r3, #0]
       pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 8008302:	4b0f      	ldr	r3, [pc, #60]	; (8008340 <CDC_Control_FS+0x158>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	0e1a      	lsrs	r2, r3, #24
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	3303      	adds	r3, #3
 800830c:	b2d2      	uxtb	r2, r2
 800830e:	701a      	strb	r2, [r3, #0]
       pbuf[4] = linecoding.format;
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	3304      	adds	r3, #4
 8008314:	4a0a      	ldr	r2, [pc, #40]	; (8008340 <CDC_Control_FS+0x158>)
 8008316:	7912      	ldrb	r2, [r2, #4]
 8008318:	701a      	strb	r2, [r3, #0]
       pbuf[5] = linecoding.paritytype;
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	3305      	adds	r3, #5
 800831e:	4a08      	ldr	r2, [pc, #32]	; (8008340 <CDC_Control_FS+0x158>)
 8008320:	7952      	ldrb	r2, [r2, #5]
 8008322:	701a      	strb	r2, [r3, #0]
       pbuf[6] = linecoding.datatype;
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	3306      	adds	r3, #6
 8008328:	4a05      	ldr	r2, [pc, #20]	; (8008340 <CDC_Control_FS+0x158>)
 800832a:	7992      	ldrb	r2, [r2, #6]
 800832c:	701a      	strb	r2, [r3, #0]

       /* Add your code here */
       break;
 800832e:	e000      	b.n	8008332 <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008330:	bf00      	nop
  }

  return (USBD_OK);
 8008332:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008334:	4618      	mov	r0, r3
 8008336:	370c      	adds	r7, #12
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr
 8008340:	2000011c 	.word	0x2000011c

08008344 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b082      	sub	sp, #8
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800834e:	6879      	ldr	r1, [r7, #4]
 8008350:	4805      	ldr	r0, [pc, #20]	; (8008368 <CDC_Receive_FS+0x24>)
 8008352:	f7fe fd89 	bl	8006e68 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008356:	4804      	ldr	r0, [pc, #16]	; (8008368 <CDC_Receive_FS+0x24>)
 8008358:	f7fe fdca 	bl	8006ef0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800835c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800835e:	4618      	mov	r0, r3
 8008360:	3708      	adds	r7, #8
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
 8008366:	bf00      	nop
 8008368:	20000900 	.word	0x20000900

0800836c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	460b      	mov	r3, r1
 8008376:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008378:	2300      	movs	r3, #0
 800837a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800837c:	4b0d      	ldr	r3, [pc, #52]	; (80083b4 <CDC_Transmit_FS+0x48>)
 800837e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008382:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800838a:	2b00      	cmp	r3, #0
 800838c:	d001      	beq.n	8008392 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800838e:	2301      	movs	r3, #1
 8008390:	e00b      	b.n	80083aa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008392:	887b      	ldrh	r3, [r7, #2]
 8008394:	461a      	mov	r2, r3
 8008396:	6879      	ldr	r1, [r7, #4]
 8008398:	4806      	ldr	r0, [pc, #24]	; (80083b4 <CDC_Transmit_FS+0x48>)
 800839a:	f7fe fd4c 	bl	8006e36 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800839e:	4805      	ldr	r0, [pc, #20]	; (80083b4 <CDC_Transmit_FS+0x48>)
 80083a0:	f7fe fd76 	bl	8006e90 <USBD_CDC_TransmitPacket>
 80083a4:	4603      	mov	r3, r0
 80083a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80083a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3710      	adds	r7, #16
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
 80083b2:	bf00      	nop
 80083b4:	20000900 	.word	0x20000900

080083b8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b087      	sub	sp, #28
 80083bc:	af00      	add	r7, sp, #0
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	60b9      	str	r1, [r7, #8]
 80083c2:	4613      	mov	r3, r2
 80083c4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80083c6:	2300      	movs	r3, #0
 80083c8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80083ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	371c      	adds	r7, #28
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr
	...

080083dc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083dc:	b480      	push	{r7}
 80083de:	b083      	sub	sp, #12
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	4603      	mov	r3, r0
 80083e4:	6039      	str	r1, [r7, #0]
 80083e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	2212      	movs	r2, #18
 80083ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80083ee:	4b03      	ldr	r3, [pc, #12]	; (80083fc <USBD_FS_DeviceDescriptor+0x20>)
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr
 80083fc:	20000154 	.word	0x20000154

08008400 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
 8008406:	4603      	mov	r3, r0
 8008408:	6039      	str	r1, [r7, #0]
 800840a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	2204      	movs	r2, #4
 8008410:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008412:	4b03      	ldr	r3, [pc, #12]	; (8008420 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008414:	4618      	mov	r0, r3
 8008416:	370c      	adds	r7, #12
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr
 8008420:	20000168 	.word	0x20000168

08008424 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b082      	sub	sp, #8
 8008428:	af00      	add	r7, sp, #0
 800842a:	4603      	mov	r3, r0
 800842c:	6039      	str	r1, [r7, #0]
 800842e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008430:	79fb      	ldrb	r3, [r7, #7]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d105      	bne.n	8008442 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008436:	683a      	ldr	r2, [r7, #0]
 8008438:	4907      	ldr	r1, [pc, #28]	; (8008458 <USBD_FS_ProductStrDescriptor+0x34>)
 800843a:	4808      	ldr	r0, [pc, #32]	; (800845c <USBD_FS_ProductStrDescriptor+0x38>)
 800843c:	f7ff fda7 	bl	8007f8e <USBD_GetString>
 8008440:	e004      	b.n	800844c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008442:	683a      	ldr	r2, [r7, #0]
 8008444:	4904      	ldr	r1, [pc, #16]	; (8008458 <USBD_FS_ProductStrDescriptor+0x34>)
 8008446:	4805      	ldr	r0, [pc, #20]	; (800845c <USBD_FS_ProductStrDescriptor+0x38>)
 8008448:	f7ff fda1 	bl	8007f8e <USBD_GetString>
  }
  return USBD_StrDesc;
 800844c:	4b02      	ldr	r3, [pc, #8]	; (8008458 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800844e:	4618      	mov	r0, r3
 8008450:	3708      	adds	r7, #8
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop
 8008458:	20001bd0 	.word	0x20001bd0
 800845c:	08008e64 	.word	0x08008e64

08008460 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b082      	sub	sp, #8
 8008464:	af00      	add	r7, sp, #0
 8008466:	4603      	mov	r3, r0
 8008468:	6039      	str	r1, [r7, #0]
 800846a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800846c:	683a      	ldr	r2, [r7, #0]
 800846e:	4904      	ldr	r1, [pc, #16]	; (8008480 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008470:	4804      	ldr	r0, [pc, #16]	; (8008484 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008472:	f7ff fd8c 	bl	8007f8e <USBD_GetString>
  return USBD_StrDesc;
 8008476:	4b02      	ldr	r3, [pc, #8]	; (8008480 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008478:	4618      	mov	r0, r3
 800847a:	3708      	adds	r7, #8
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}
 8008480:	20001bd0 	.word	0x20001bd0
 8008484:	08008e64 	.word	0x08008e64

08008488 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
 800848e:	4603      	mov	r3, r0
 8008490:	6039      	str	r1, [r7, #0]
 8008492:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	221a      	movs	r2, #26
 8008498:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800849a:	f000 f843 	bl	8008524 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800849e:	4b02      	ldr	r3, [pc, #8]	; (80084a8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3708      	adds	r7, #8
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	2000016c 	.word	0x2000016c

080084ac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b082      	sub	sp, #8
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	4603      	mov	r3, r0
 80084b4:	6039      	str	r1, [r7, #0]
 80084b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80084b8:	79fb      	ldrb	r3, [r7, #7]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d105      	bne.n	80084ca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80084be:	683a      	ldr	r2, [r7, #0]
 80084c0:	4907      	ldr	r1, [pc, #28]	; (80084e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80084c2:	4808      	ldr	r0, [pc, #32]	; (80084e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80084c4:	f7ff fd63 	bl	8007f8e <USBD_GetString>
 80084c8:	e004      	b.n	80084d4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80084ca:	683a      	ldr	r2, [r7, #0]
 80084cc:	4904      	ldr	r1, [pc, #16]	; (80084e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80084ce:	4805      	ldr	r0, [pc, #20]	; (80084e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80084d0:	f7ff fd5d 	bl	8007f8e <USBD_GetString>
  }
  return USBD_StrDesc;
 80084d4:	4b02      	ldr	r3, [pc, #8]	; (80084e0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3708      	adds	r7, #8
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
 80084de:	bf00      	nop
 80084e0:	20001bd0 	.word	0x20001bd0
 80084e4:	08008e70 	.word	0x08008e70

080084e8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	4603      	mov	r3, r0
 80084f0:	6039      	str	r1, [r7, #0]
 80084f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80084f4:	79fb      	ldrb	r3, [r7, #7]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d105      	bne.n	8008506 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80084fa:	683a      	ldr	r2, [r7, #0]
 80084fc:	4907      	ldr	r1, [pc, #28]	; (800851c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80084fe:	4808      	ldr	r0, [pc, #32]	; (8008520 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008500:	f7ff fd45 	bl	8007f8e <USBD_GetString>
 8008504:	e004      	b.n	8008510 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008506:	683a      	ldr	r2, [r7, #0]
 8008508:	4904      	ldr	r1, [pc, #16]	; (800851c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800850a:	4805      	ldr	r0, [pc, #20]	; (8008520 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800850c:	f7ff fd3f 	bl	8007f8e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008510:	4b02      	ldr	r3, [pc, #8]	; (800851c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008512:	4618      	mov	r0, r3
 8008514:	3708      	adds	r7, #8
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop
 800851c:	20001bd0 	.word	0x20001bd0
 8008520:	08008e7c 	.word	0x08008e7c

08008524 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800852a:	4b0f      	ldr	r3, [pc, #60]	; (8008568 <Get_SerialNum+0x44>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008530:	4b0e      	ldr	r3, [pc, #56]	; (800856c <Get_SerialNum+0x48>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008536:	4b0e      	ldr	r3, [pc, #56]	; (8008570 <Get_SerialNum+0x4c>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800853c:	68fa      	ldr	r2, [r7, #12]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	4413      	add	r3, r2
 8008542:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d009      	beq.n	800855e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800854a:	2208      	movs	r2, #8
 800854c:	4909      	ldr	r1, [pc, #36]	; (8008574 <Get_SerialNum+0x50>)
 800854e:	68f8      	ldr	r0, [r7, #12]
 8008550:	f000 f814 	bl	800857c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008554:	2204      	movs	r2, #4
 8008556:	4908      	ldr	r1, [pc, #32]	; (8008578 <Get_SerialNum+0x54>)
 8008558:	68b8      	ldr	r0, [r7, #8]
 800855a:	f000 f80f 	bl	800857c <IntToUnicode>
  }
}
 800855e:	bf00      	nop
 8008560:	3710      	adds	r7, #16
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
 8008566:	bf00      	nop
 8008568:	1fff7a10 	.word	0x1fff7a10
 800856c:	1fff7a14 	.word	0x1fff7a14
 8008570:	1fff7a18 	.word	0x1fff7a18
 8008574:	2000016e 	.word	0x2000016e
 8008578:	2000017e 	.word	0x2000017e

0800857c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800857c:	b480      	push	{r7}
 800857e:	b087      	sub	sp, #28
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	4613      	mov	r3, r2
 8008588:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800858a:	2300      	movs	r3, #0
 800858c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800858e:	2300      	movs	r3, #0
 8008590:	75fb      	strb	r3, [r7, #23]
 8008592:	e027      	b.n	80085e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	0f1b      	lsrs	r3, r3, #28
 8008598:	2b09      	cmp	r3, #9
 800859a:	d80b      	bhi.n	80085b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	0f1b      	lsrs	r3, r3, #28
 80085a0:	b2da      	uxtb	r2, r3
 80085a2:	7dfb      	ldrb	r3, [r7, #23]
 80085a4:	005b      	lsls	r3, r3, #1
 80085a6:	4619      	mov	r1, r3
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	440b      	add	r3, r1
 80085ac:	3230      	adds	r2, #48	; 0x30
 80085ae:	b2d2      	uxtb	r2, r2
 80085b0:	701a      	strb	r2, [r3, #0]
 80085b2:	e00a      	b.n	80085ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	0f1b      	lsrs	r3, r3, #28
 80085b8:	b2da      	uxtb	r2, r3
 80085ba:	7dfb      	ldrb	r3, [r7, #23]
 80085bc:	005b      	lsls	r3, r3, #1
 80085be:	4619      	mov	r1, r3
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	440b      	add	r3, r1
 80085c4:	3237      	adds	r2, #55	; 0x37
 80085c6:	b2d2      	uxtb	r2, r2
 80085c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	011b      	lsls	r3, r3, #4
 80085ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80085d0:	7dfb      	ldrb	r3, [r7, #23]
 80085d2:	005b      	lsls	r3, r3, #1
 80085d4:	3301      	adds	r3, #1
 80085d6:	68ba      	ldr	r2, [r7, #8]
 80085d8:	4413      	add	r3, r2
 80085da:	2200      	movs	r2, #0
 80085dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80085de:	7dfb      	ldrb	r3, [r7, #23]
 80085e0:	3301      	adds	r3, #1
 80085e2:	75fb      	strb	r3, [r7, #23]
 80085e4:	7dfa      	ldrb	r2, [r7, #23]
 80085e6:	79fb      	ldrb	r3, [r7, #7]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d3d3      	bcc.n	8008594 <IntToUnicode+0x18>
  }
}
 80085ec:	bf00      	nop
 80085ee:	371c      	adds	r7, #28
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr

080085f8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b08a      	sub	sp, #40	; 0x28
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008600:	f107 0314 	add.w	r3, r7, #20
 8008604:	2200      	movs	r2, #0
 8008606:	601a      	str	r2, [r3, #0]
 8008608:	605a      	str	r2, [r3, #4]
 800860a:	609a      	str	r2, [r3, #8]
 800860c:	60da      	str	r2, [r3, #12]
 800860e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008618:	d169      	bne.n	80086ee <HAL_PCD_MspInit+0xf6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800861a:	2300      	movs	r3, #0
 800861c:	613b      	str	r3, [r7, #16]
 800861e:	4b36      	ldr	r3, [pc, #216]	; (80086f8 <HAL_PCD_MspInit+0x100>)
 8008620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008622:	4a35      	ldr	r2, [pc, #212]	; (80086f8 <HAL_PCD_MspInit+0x100>)
 8008624:	f043 0301 	orr.w	r3, r3, #1
 8008628:	6313      	str	r3, [r2, #48]	; 0x30
 800862a:	4b33      	ldr	r3, [pc, #204]	; (80086f8 <HAL_PCD_MspInit+0x100>)
 800862c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800862e:	f003 0301 	and.w	r3, r3, #1
 8008632:	613b      	str	r3, [r7, #16]
 8008634:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008636:	f44f 7300 	mov.w	r3, #512	; 0x200
 800863a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800863c:	2300      	movs	r3, #0
 800863e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008640:	2300      	movs	r3, #0
 8008642:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008644:	f107 0314 	add.w	r3, r7, #20
 8008648:	4619      	mov	r1, r3
 800864a:	482c      	ldr	r0, [pc, #176]	; (80086fc <HAL_PCD_MspInit+0x104>)
 800864c:	f7f9 fee2 	bl	8002414 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008650:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008656:	2302      	movs	r3, #2
 8008658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800865a:	2300      	movs	r3, #0
 800865c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800865e:	2303      	movs	r3, #3
 8008660:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008662:	230a      	movs	r3, #10
 8008664:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008666:	f107 0314 	add.w	r3, r7, #20
 800866a:	4619      	mov	r1, r3
 800866c:	4823      	ldr	r0, [pc, #140]	; (80086fc <HAL_PCD_MspInit+0x104>)
 800866e:	f7f9 fed1 	bl	8002414 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008672:	4b21      	ldr	r3, [pc, #132]	; (80086f8 <HAL_PCD_MspInit+0x100>)
 8008674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008676:	4a20      	ldr	r2, [pc, #128]	; (80086f8 <HAL_PCD_MspInit+0x100>)
 8008678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800867c:	6353      	str	r3, [r2, #52]	; 0x34
 800867e:	2300      	movs	r3, #0
 8008680:	60fb      	str	r3, [r7, #12]
 8008682:	4b1d      	ldr	r3, [pc, #116]	; (80086f8 <HAL_PCD_MspInit+0x100>)
 8008684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008686:	4a1c      	ldr	r2, [pc, #112]	; (80086f8 <HAL_PCD_MspInit+0x100>)
 8008688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800868c:	6453      	str	r3, [r2, #68]	; 0x44
 800868e:	4b1a      	ldr	r3, [pc, #104]	; (80086f8 <HAL_PCD_MspInit+0x100>)
 8008690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008696:	60fb      	str	r3, [r7, #12]
 8008698:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800869a:	2200      	movs	r2, #0
 800869c:	2100      	movs	r1, #0
 800869e:	2043      	movs	r0, #67	; 0x43
 80086a0:	f7f9 f9ad 	bl	80019fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80086a4:	2043      	movs	r0, #67	; 0x43
 80086a6:	f7f9 f9c6 	bl	8001a36 <HAL_NVIC_EnableIRQ>
    if(pcdHandle->Init.low_power_enable == 1)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6a1b      	ldr	r3, [r3, #32]
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d11d      	bne.n	80086ee <HAL_PCD_MspInit+0xf6>
    {
      /* Enable EXTI Line 18 for USB wakeup */
      __HAL_USB_OTG_FS_WAKEUP_EXTI_CLEAR_FLAG();
 80086b2:	4b13      	ldr	r3, [pc, #76]	; (8008700 <HAL_PCD_MspInit+0x108>)
 80086b4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80086b8:	615a      	str	r2, [r3, #20]
      __HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_RISING_EDGE();
 80086ba:	4b11      	ldr	r3, [pc, #68]	; (8008700 <HAL_PCD_MspInit+0x108>)
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	4a10      	ldr	r2, [pc, #64]	; (8008700 <HAL_PCD_MspInit+0x108>)
 80086c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80086c4:	60d3      	str	r3, [r2, #12]
 80086c6:	4b0e      	ldr	r3, [pc, #56]	; (8008700 <HAL_PCD_MspInit+0x108>)
 80086c8:	689b      	ldr	r3, [r3, #8]
 80086ca:	4a0d      	ldr	r2, [pc, #52]	; (8008700 <HAL_PCD_MspInit+0x108>)
 80086cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80086d0:	6093      	str	r3, [r2, #8]
      __HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_IT();
 80086d2:	4b0b      	ldr	r3, [pc, #44]	; (8008700 <HAL_PCD_MspInit+0x108>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a0a      	ldr	r2, [pc, #40]	; (8008700 <HAL_PCD_MspInit+0x108>)
 80086d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80086dc:	6013      	str	r3, [r2, #0]
      HAL_NVIC_SetPriority(OTG_FS_WKUP_IRQn, 0, 0);
 80086de:	2200      	movs	r2, #0
 80086e0:	2100      	movs	r1, #0
 80086e2:	202a      	movs	r0, #42	; 0x2a
 80086e4:	f7f9 f98b 	bl	80019fe <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(OTG_FS_WKUP_IRQn);
 80086e8:	202a      	movs	r0, #42	; 0x2a
 80086ea:	f7f9 f9a4 	bl	8001a36 <HAL_NVIC_EnableIRQ>
    }
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80086ee:	bf00      	nop
 80086f0:	3728      	adds	r7, #40	; 0x28
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop
 80086f8:	40023800 	.word	0x40023800
 80086fc:	40020000 	.word	0x40020000
 8008700:	40013c00 	.word	0x40013c00

08008704 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008718:	4619      	mov	r1, r3
 800871a:	4610      	mov	r0, r2
 800871c:	f7fe fcb4 	bl	8007088 <USBD_LL_SetupStage>
}
 8008720:	bf00      	nop
 8008722:	3708      	adds	r7, #8
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	460b      	mov	r3, r1
 8008732:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800873a:	78fa      	ldrb	r2, [r7, #3]
 800873c:	6879      	ldr	r1, [r7, #4]
 800873e:	4613      	mov	r3, r2
 8008740:	00db      	lsls	r3, r3, #3
 8008742:	1a9b      	subs	r3, r3, r2
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	440b      	add	r3, r1
 8008748:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800874c:	681a      	ldr	r2, [r3, #0]
 800874e:	78fb      	ldrb	r3, [r7, #3]
 8008750:	4619      	mov	r1, r3
 8008752:	f7fe fcec 	bl	800712e <USBD_LL_DataOutStage>
}
 8008756:	bf00      	nop
 8008758:	3708      	adds	r7, #8
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}

0800875e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800875e:	b580      	push	{r7, lr}
 8008760:	b082      	sub	sp, #8
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
 8008766:	460b      	mov	r3, r1
 8008768:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008770:	78fa      	ldrb	r2, [r7, #3]
 8008772:	6879      	ldr	r1, [r7, #4]
 8008774:	4613      	mov	r3, r2
 8008776:	00db      	lsls	r3, r3, #3
 8008778:	1a9b      	subs	r3, r3, r2
 800877a:	009b      	lsls	r3, r3, #2
 800877c:	440b      	add	r3, r1
 800877e:	3348      	adds	r3, #72	; 0x48
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	78fb      	ldrb	r3, [r7, #3]
 8008784:	4619      	mov	r1, r3
 8008786:	f7fe fd35 	bl	80071f4 <USBD_LL_DataInStage>
}
 800878a:	bf00      	nop
 800878c:	3708      	adds	r7, #8
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}

08008792 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008792:	b580      	push	{r7, lr}
 8008794:	b082      	sub	sp, #8
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80087a0:	4618      	mov	r0, r3
 80087a2:	f7fe fe39 	bl	8007418 <USBD_LL_SOF>
}
 80087a6:	bf00      	nop
 80087a8:	3708      	adds	r7, #8
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}

080087ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087ae:	b580      	push	{r7, lr}
 80087b0:	b084      	sub	sp, #16
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80087b6:	2301      	movs	r3, #1
 80087b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	68db      	ldr	r3, [r3, #12]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d102      	bne.n	80087c8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80087c2:	2300      	movs	r3, #0
 80087c4:	73fb      	strb	r3, [r7, #15]
 80087c6:	e008      	b.n	80087da <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	68db      	ldr	r3, [r3, #12]
 80087cc:	2b02      	cmp	r3, #2
 80087ce:	d102      	bne.n	80087d6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80087d0:	2301      	movs	r3, #1
 80087d2:	73fb      	strb	r3, [r7, #15]
 80087d4:	e001      	b.n	80087da <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80087d6:	f7f8 f94f 	bl	8000a78 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80087e0:	7bfa      	ldrb	r2, [r7, #15]
 80087e2:	4611      	mov	r1, r2
 80087e4:	4618      	mov	r0, r3
 80087e6:	f7fe fddc 	bl	80073a2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80087f0:	4618      	mov	r0, r3
 80087f2:	f7fe fd95 	bl	8007320 <USBD_LL_Reset>
}
 80087f6:	bf00      	nop
 80087f8:	3710      	adds	r7, #16
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
	...

08008800 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b082      	sub	sp, #8
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800880e:	4618      	mov	r0, r3
 8008810:	f7fe fdd7 	bl	80073c2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	6812      	ldr	r2, [r2, #0]
 8008822:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008826:	f043 0301 	orr.w	r3, r3, #1
 800882a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6a1b      	ldr	r3, [r3, #32]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d005      	beq.n	8008840 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008834:	4b04      	ldr	r3, [pc, #16]	; (8008848 <HAL_PCD_SuspendCallback+0x48>)
 8008836:	691b      	ldr	r3, [r3, #16]
 8008838:	4a03      	ldr	r2, [pc, #12]	; (8008848 <HAL_PCD_SuspendCallback+0x48>)
 800883a:	f043 0306 	orr.w	r3, r3, #6
 800883e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008840:	bf00      	nop
 8008842:	3708      	adds	r7, #8
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}
 8008848:	e000ed00 	.word	0xe000ed00

0800884c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b082      	sub	sp, #8
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800885a:	4618      	mov	r0, r3
 800885c:	f7fe fdc6 	bl	80073ec <USBD_LL_Resume>
}
 8008860:	bf00      	nop
 8008862:	3708      	adds	r7, #8
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	460b      	mov	r3, r1
 8008872:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800887a:	78fa      	ldrb	r2, [r7, #3]
 800887c:	4611      	mov	r1, r2
 800887e:	4618      	mov	r0, r3
 8008880:	f7fe fdf1 	bl	8007466 <USBD_LL_IsoOUTIncomplete>
}
 8008884:	bf00      	nop
 8008886:	3708      	adds	r7, #8
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b082      	sub	sp, #8
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	460b      	mov	r3, r1
 8008896:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800889e:	78fa      	ldrb	r2, [r7, #3]
 80088a0:	4611      	mov	r1, r2
 80088a2:	4618      	mov	r0, r3
 80088a4:	f7fe fdd2 	bl	800744c <USBD_LL_IsoINIncomplete>
}
 80088a8:	bf00      	nop
 80088aa:	3708      	adds	r7, #8
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b082      	sub	sp, #8
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80088be:	4618      	mov	r0, r3
 80088c0:	f7fe fdde 	bl	8007480 <USBD_LL_DevConnected>
}
 80088c4:	bf00      	nop
 80088c6:	3708      	adds	r7, #8
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b082      	sub	sp, #8
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80088da:	4618      	mov	r0, r3
 80088dc:	f7fe fddb 	bl	8007496 <USBD_LL_DevDisconnected>
}
 80088e0:	bf00      	nop
 80088e2:	3708      	adds	r7, #8
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b082      	sub	sp, #8
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	781b      	ldrb	r3, [r3, #0]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d13c      	bne.n	8008972 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80088f8:	4a20      	ldr	r2, [pc, #128]	; (800897c <USBD_LL_Init+0x94>)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	4a1e      	ldr	r2, [pc, #120]	; (800897c <USBD_LL_Init+0x94>)
 8008904:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008908:	4b1c      	ldr	r3, [pc, #112]	; (800897c <USBD_LL_Init+0x94>)
 800890a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800890e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008910:	4b1a      	ldr	r3, [pc, #104]	; (800897c <USBD_LL_Init+0x94>)
 8008912:	2204      	movs	r2, #4
 8008914:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008916:	4b19      	ldr	r3, [pc, #100]	; (800897c <USBD_LL_Init+0x94>)
 8008918:	2202      	movs	r2, #2
 800891a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800891c:	4b17      	ldr	r3, [pc, #92]	; (800897c <USBD_LL_Init+0x94>)
 800891e:	2200      	movs	r2, #0
 8008920:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008922:	4b16      	ldr	r3, [pc, #88]	; (800897c <USBD_LL_Init+0x94>)
 8008924:	2202      	movs	r2, #2
 8008926:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008928:	4b14      	ldr	r3, [pc, #80]	; (800897c <USBD_LL_Init+0x94>)
 800892a:	2200      	movs	r2, #0
 800892c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = ENABLE;
 800892e:	4b13      	ldr	r3, [pc, #76]	; (800897c <USBD_LL_Init+0x94>)
 8008930:	2201      	movs	r2, #1
 8008932:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = ENABLE;
 8008934:	4b11      	ldr	r3, [pc, #68]	; (800897c <USBD_LL_Init+0x94>)
 8008936:	2201      	movs	r2, #1
 8008938:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800893a:	4b10      	ldr	r3, [pc, #64]	; (800897c <USBD_LL_Init+0x94>)
 800893c:	2201      	movs	r2, #1
 800893e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008940:	4b0e      	ldr	r3, [pc, #56]	; (800897c <USBD_LL_Init+0x94>)
 8008942:	2200      	movs	r2, #0
 8008944:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008946:	480d      	ldr	r0, [pc, #52]	; (800897c <USBD_LL_Init+0x94>)
 8008948:	f7f9 ff17 	bl	800277a <HAL_PCD_Init>
 800894c:	4603      	mov	r3, r0
 800894e:	2b00      	cmp	r3, #0
 8008950:	d001      	beq.n	8008956 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008952:	f7f8 f891 	bl	8000a78 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008956:	2180      	movs	r1, #128	; 0x80
 8008958:	4808      	ldr	r0, [pc, #32]	; (800897c <USBD_LL_Init+0x94>)
 800895a:	f7fb f874 	bl	8003a46 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800895e:	2240      	movs	r2, #64	; 0x40
 8008960:	2100      	movs	r1, #0
 8008962:	4806      	ldr	r0, [pc, #24]	; (800897c <USBD_LL_Init+0x94>)
 8008964:	f7fb f828 	bl	80039b8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008968:	2280      	movs	r2, #128	; 0x80
 800896a:	2101      	movs	r1, #1
 800896c:	4803      	ldr	r0, [pc, #12]	; (800897c <USBD_LL_Init+0x94>)
 800896e:	f7fb f823 	bl	80039b8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008972:	2300      	movs	r3, #0
}
 8008974:	4618      	mov	r0, r3
 8008976:	3708      	adds	r7, #8
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}
 800897c:	20001dd0 	.word	0x20001dd0

08008980 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b084      	sub	sp, #16
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008988:	2300      	movs	r3, #0
 800898a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800898c:	2300      	movs	r3, #0
 800898e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008996:	4618      	mov	r0, r3
 8008998:	f7fa f80c 	bl	80029b4 <HAL_PCD_Start>
 800899c:	4603      	mov	r3, r0
 800899e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089a0:	7bfb      	ldrb	r3, [r7, #15]
 80089a2:	4618      	mov	r0, r3
 80089a4:	f000 f92a 	bl	8008bfc <USBD_Get_USB_Status>
 80089a8:	4603      	mov	r3, r0
 80089aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3710      	adds	r7, #16
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}

080089b6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80089b6:	b580      	push	{r7, lr}
 80089b8:	b084      	sub	sp, #16
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]
 80089be:	4608      	mov	r0, r1
 80089c0:	4611      	mov	r1, r2
 80089c2:	461a      	mov	r2, r3
 80089c4:	4603      	mov	r3, r0
 80089c6:	70fb      	strb	r3, [r7, #3]
 80089c8:	460b      	mov	r3, r1
 80089ca:	70bb      	strb	r3, [r7, #2]
 80089cc:	4613      	mov	r3, r2
 80089ce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089d0:	2300      	movs	r3, #0
 80089d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089d4:	2300      	movs	r3, #0
 80089d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80089de:	78bb      	ldrb	r3, [r7, #2]
 80089e0:	883a      	ldrh	r2, [r7, #0]
 80089e2:	78f9      	ldrb	r1, [r7, #3]
 80089e4:	f7fa fbf0 	bl	80031c8 <HAL_PCD_EP_Open>
 80089e8:	4603      	mov	r3, r0
 80089ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089ec:	7bfb      	ldrb	r3, [r7, #15]
 80089ee:	4618      	mov	r0, r3
 80089f0:	f000 f904 	bl	8008bfc <USBD_Get_USB_Status>
 80089f4:	4603      	mov	r3, r0
 80089f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3710      	adds	r7, #16
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}

08008a02 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a02:	b580      	push	{r7, lr}
 8008a04:	b084      	sub	sp, #16
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	6078      	str	r0, [r7, #4]
 8008a0a:	460b      	mov	r3, r1
 8008a0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a12:	2300      	movs	r3, #0
 8008a14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a1c:	78fa      	ldrb	r2, [r7, #3]
 8008a1e:	4611      	mov	r1, r2
 8008a20:	4618      	mov	r0, r3
 8008a22:	f7fa fc39 	bl	8003298 <HAL_PCD_EP_Close>
 8008a26:	4603      	mov	r3, r0
 8008a28:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a2a:	7bfb      	ldrb	r3, [r7, #15]
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f000 f8e5 	bl	8008bfc <USBD_Get_USB_Status>
 8008a32:	4603      	mov	r3, r0
 8008a34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a36:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3710      	adds	r7, #16
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	460b      	mov	r3, r1
 8008a4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a50:	2300      	movs	r3, #0
 8008a52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a5a:	78fa      	ldrb	r2, [r7, #3]
 8008a5c:	4611      	mov	r1, r2
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7fa fd11 	bl	8003486 <HAL_PCD_EP_SetStall>
 8008a64:	4603      	mov	r3, r0
 8008a66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a68:	7bfb      	ldrb	r3, [r7, #15]
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f000 f8c6 	bl	8008bfc <USBD_Get_USB_Status>
 8008a70:	4603      	mov	r3, r0
 8008a72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a74:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3710      	adds	r7, #16
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}

08008a7e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a7e:	b580      	push	{r7, lr}
 8008a80:	b084      	sub	sp, #16
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	6078      	str	r0, [r7, #4]
 8008a86:	460b      	mov	r3, r1
 8008a88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a98:	78fa      	ldrb	r2, [r7, #3]
 8008a9a:	4611      	mov	r1, r2
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f7fa fd56 	bl	800354e <HAL_PCD_EP_ClrStall>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008aa6:	7bfb      	ldrb	r3, [r7, #15]
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f000 f8a7 	bl	8008bfc <USBD_Get_USB_Status>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ab2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3710      	adds	r7, #16
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b085      	sub	sp, #20
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008ace:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008ad0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	da0b      	bge.n	8008af0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008ad8:	78fb      	ldrb	r3, [r7, #3]
 8008ada:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ade:	68f9      	ldr	r1, [r7, #12]
 8008ae0:	4613      	mov	r3, r2
 8008ae2:	00db      	lsls	r3, r3, #3
 8008ae4:	1a9b      	subs	r3, r3, r2
 8008ae6:	009b      	lsls	r3, r3, #2
 8008ae8:	440b      	add	r3, r1
 8008aea:	333e      	adds	r3, #62	; 0x3e
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	e00b      	b.n	8008b08 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008af0:	78fb      	ldrb	r3, [r7, #3]
 8008af2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008af6:	68f9      	ldr	r1, [r7, #12]
 8008af8:	4613      	mov	r3, r2
 8008afa:	00db      	lsls	r3, r3, #3
 8008afc:	1a9b      	subs	r3, r3, r2
 8008afe:	009b      	lsls	r3, r3, #2
 8008b00:	440b      	add	r3, r1
 8008b02:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008b06:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3714      	adds	r7, #20
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr

08008b14 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b20:	2300      	movs	r3, #0
 8008b22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b24:	2300      	movs	r3, #0
 8008b26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b2e:	78fa      	ldrb	r2, [r7, #3]
 8008b30:	4611      	mov	r1, r2
 8008b32:	4618      	mov	r0, r3
 8008b34:	f7fa fb23 	bl	800317e <HAL_PCD_SetAddress>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b3c:	7bfb      	ldrb	r3, [r7, #15]
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f000 f85c 	bl	8008bfc <USBD_Get_USB_Status>
 8008b44:	4603      	mov	r3, r0
 8008b46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b48:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3710      	adds	r7, #16
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}

08008b52 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008b52:	b580      	push	{r7, lr}
 8008b54:	b086      	sub	sp, #24
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	60f8      	str	r0, [r7, #12]
 8008b5a:	607a      	str	r2, [r7, #4]
 8008b5c:	603b      	str	r3, [r7, #0]
 8008b5e:	460b      	mov	r3, r1
 8008b60:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b62:	2300      	movs	r3, #0
 8008b64:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b66:	2300      	movs	r3, #0
 8008b68:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008b70:	7af9      	ldrb	r1, [r7, #11]
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	f7fa fc3c 	bl	80033f2 <HAL_PCD_EP_Transmit>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b7e:	7dfb      	ldrb	r3, [r7, #23]
 8008b80:	4618      	mov	r0, r3
 8008b82:	f000 f83b 	bl	8008bfc <USBD_Get_USB_Status>
 8008b86:	4603      	mov	r3, r0
 8008b88:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008b8a:	7dbb      	ldrb	r3, [r7, #22]
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3718      	adds	r7, #24
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b086      	sub	sp, #24
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	607a      	str	r2, [r7, #4]
 8008b9e:	603b      	str	r3, [r7, #0]
 8008ba0:	460b      	mov	r3, r1
 8008ba2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008bb2:	7af9      	ldrb	r1, [r7, #11]
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	f7fa fbb8 	bl	800332c <HAL_PCD_EP_Receive>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bc0:	7dfb      	ldrb	r3, [r7, #23]
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f000 f81a 	bl	8008bfc <USBD_Get_USB_Status>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008bcc:	7dbb      	ldrb	r3, [r7, #22]
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3718      	adds	r7, #24
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}

08008bd6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bd6:	b580      	push	{r7, lr}
 8008bd8:	b082      	sub	sp, #8
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	6078      	str	r0, [r7, #4]
 8008bde:	460b      	mov	r3, r1
 8008be0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008be8:	78fa      	ldrb	r2, [r7, #3]
 8008bea:	4611      	mov	r1, r2
 8008bec:	4618      	mov	r0, r3
 8008bee:	f7fa fbe8 	bl	80033c2 <HAL_PCD_EP_GetRxCount>
 8008bf2:	4603      	mov	r3, r0
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3708      	adds	r7, #8
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b085      	sub	sp, #20
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	4603      	mov	r3, r0
 8008c04:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c06:	2300      	movs	r3, #0
 8008c08:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008c0a:	79fb      	ldrb	r3, [r7, #7]
 8008c0c:	2b03      	cmp	r3, #3
 8008c0e:	d817      	bhi.n	8008c40 <USBD_Get_USB_Status+0x44>
 8008c10:	a201      	add	r2, pc, #4	; (adr r2, 8008c18 <USBD_Get_USB_Status+0x1c>)
 8008c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c16:	bf00      	nop
 8008c18:	08008c29 	.word	0x08008c29
 8008c1c:	08008c2f 	.word	0x08008c2f
 8008c20:	08008c35 	.word	0x08008c35
 8008c24:	08008c3b 	.word	0x08008c3b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	73fb      	strb	r3, [r7, #15]
    break;
 8008c2c:	e00b      	b.n	8008c46 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008c2e:	2303      	movs	r3, #3
 8008c30:	73fb      	strb	r3, [r7, #15]
    break;
 8008c32:	e008      	b.n	8008c46 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008c34:	2301      	movs	r3, #1
 8008c36:	73fb      	strb	r3, [r7, #15]
    break;
 8008c38:	e005      	b.n	8008c46 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008c3a:	2303      	movs	r3, #3
 8008c3c:	73fb      	strb	r3, [r7, #15]
    break;
 8008c3e:	e002      	b.n	8008c46 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008c40:	2303      	movs	r3, #3
 8008c42:	73fb      	strb	r3, [r7, #15]
    break;
 8008c44:	bf00      	nop
  }
  return usb_status;
 8008c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3714      	adds	r7, #20
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr

08008c54 <__errno>:
 8008c54:	4b01      	ldr	r3, [pc, #4]	; (8008c5c <__errno+0x8>)
 8008c56:	6818      	ldr	r0, [r3, #0]
 8008c58:	4770      	bx	lr
 8008c5a:	bf00      	nop
 8008c5c:	20000188 	.word	0x20000188

08008c60 <__libc_init_array>:
 8008c60:	b570      	push	{r4, r5, r6, lr}
 8008c62:	4e0d      	ldr	r6, [pc, #52]	; (8008c98 <__libc_init_array+0x38>)
 8008c64:	4c0d      	ldr	r4, [pc, #52]	; (8008c9c <__libc_init_array+0x3c>)
 8008c66:	1ba4      	subs	r4, r4, r6
 8008c68:	10a4      	asrs	r4, r4, #2
 8008c6a:	2500      	movs	r5, #0
 8008c6c:	42a5      	cmp	r5, r4
 8008c6e:	d109      	bne.n	8008c84 <__libc_init_array+0x24>
 8008c70:	4e0b      	ldr	r6, [pc, #44]	; (8008ca0 <__libc_init_array+0x40>)
 8008c72:	4c0c      	ldr	r4, [pc, #48]	; (8008ca4 <__libc_init_array+0x44>)
 8008c74:	f000 f8ea 	bl	8008e4c <_init>
 8008c78:	1ba4      	subs	r4, r4, r6
 8008c7a:	10a4      	asrs	r4, r4, #2
 8008c7c:	2500      	movs	r5, #0
 8008c7e:	42a5      	cmp	r5, r4
 8008c80:	d105      	bne.n	8008c8e <__libc_init_array+0x2e>
 8008c82:	bd70      	pop	{r4, r5, r6, pc}
 8008c84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008c88:	4798      	blx	r3
 8008c8a:	3501      	adds	r5, #1
 8008c8c:	e7ee      	b.n	8008c6c <__libc_init_array+0xc>
 8008c8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008c92:	4798      	blx	r3
 8008c94:	3501      	adds	r5, #1
 8008c96:	e7f2      	b.n	8008c7e <__libc_init_array+0x1e>
 8008c98:	08008eb4 	.word	0x08008eb4
 8008c9c:	08008eb4 	.word	0x08008eb4
 8008ca0:	08008eb4 	.word	0x08008eb4
 8008ca4:	08008eb8 	.word	0x08008eb8

08008ca8 <malloc>:
 8008ca8:	4b02      	ldr	r3, [pc, #8]	; (8008cb4 <malloc+0xc>)
 8008caa:	4601      	mov	r1, r0
 8008cac:	6818      	ldr	r0, [r3, #0]
 8008cae:	f000 b861 	b.w	8008d74 <_malloc_r>
 8008cb2:	bf00      	nop
 8008cb4:	20000188 	.word	0x20000188

08008cb8 <free>:
 8008cb8:	4b02      	ldr	r3, [pc, #8]	; (8008cc4 <free+0xc>)
 8008cba:	4601      	mov	r1, r0
 8008cbc:	6818      	ldr	r0, [r3, #0]
 8008cbe:	f000 b80b 	b.w	8008cd8 <_free_r>
 8008cc2:	bf00      	nop
 8008cc4:	20000188 	.word	0x20000188

08008cc8 <memset>:
 8008cc8:	4402      	add	r2, r0
 8008cca:	4603      	mov	r3, r0
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d100      	bne.n	8008cd2 <memset+0xa>
 8008cd0:	4770      	bx	lr
 8008cd2:	f803 1b01 	strb.w	r1, [r3], #1
 8008cd6:	e7f9      	b.n	8008ccc <memset+0x4>

08008cd8 <_free_r>:
 8008cd8:	b538      	push	{r3, r4, r5, lr}
 8008cda:	4605      	mov	r5, r0
 8008cdc:	2900      	cmp	r1, #0
 8008cde:	d045      	beq.n	8008d6c <_free_r+0x94>
 8008ce0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ce4:	1f0c      	subs	r4, r1, #4
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	bfb8      	it	lt
 8008cea:	18e4      	addlt	r4, r4, r3
 8008cec:	f000 f8ac 	bl	8008e48 <__malloc_lock>
 8008cf0:	4a1f      	ldr	r2, [pc, #124]	; (8008d70 <_free_r+0x98>)
 8008cf2:	6813      	ldr	r3, [r2, #0]
 8008cf4:	4610      	mov	r0, r2
 8008cf6:	b933      	cbnz	r3, 8008d06 <_free_r+0x2e>
 8008cf8:	6063      	str	r3, [r4, #4]
 8008cfa:	6014      	str	r4, [r2, #0]
 8008cfc:	4628      	mov	r0, r5
 8008cfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d02:	f000 b8a2 	b.w	8008e4a <__malloc_unlock>
 8008d06:	42a3      	cmp	r3, r4
 8008d08:	d90c      	bls.n	8008d24 <_free_r+0x4c>
 8008d0a:	6821      	ldr	r1, [r4, #0]
 8008d0c:	1862      	adds	r2, r4, r1
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	bf04      	itt	eq
 8008d12:	681a      	ldreq	r2, [r3, #0]
 8008d14:	685b      	ldreq	r3, [r3, #4]
 8008d16:	6063      	str	r3, [r4, #4]
 8008d18:	bf04      	itt	eq
 8008d1a:	1852      	addeq	r2, r2, r1
 8008d1c:	6022      	streq	r2, [r4, #0]
 8008d1e:	6004      	str	r4, [r0, #0]
 8008d20:	e7ec      	b.n	8008cfc <_free_r+0x24>
 8008d22:	4613      	mov	r3, r2
 8008d24:	685a      	ldr	r2, [r3, #4]
 8008d26:	b10a      	cbz	r2, 8008d2c <_free_r+0x54>
 8008d28:	42a2      	cmp	r2, r4
 8008d2a:	d9fa      	bls.n	8008d22 <_free_r+0x4a>
 8008d2c:	6819      	ldr	r1, [r3, #0]
 8008d2e:	1858      	adds	r0, r3, r1
 8008d30:	42a0      	cmp	r0, r4
 8008d32:	d10b      	bne.n	8008d4c <_free_r+0x74>
 8008d34:	6820      	ldr	r0, [r4, #0]
 8008d36:	4401      	add	r1, r0
 8008d38:	1858      	adds	r0, r3, r1
 8008d3a:	4282      	cmp	r2, r0
 8008d3c:	6019      	str	r1, [r3, #0]
 8008d3e:	d1dd      	bne.n	8008cfc <_free_r+0x24>
 8008d40:	6810      	ldr	r0, [r2, #0]
 8008d42:	6852      	ldr	r2, [r2, #4]
 8008d44:	605a      	str	r2, [r3, #4]
 8008d46:	4401      	add	r1, r0
 8008d48:	6019      	str	r1, [r3, #0]
 8008d4a:	e7d7      	b.n	8008cfc <_free_r+0x24>
 8008d4c:	d902      	bls.n	8008d54 <_free_r+0x7c>
 8008d4e:	230c      	movs	r3, #12
 8008d50:	602b      	str	r3, [r5, #0]
 8008d52:	e7d3      	b.n	8008cfc <_free_r+0x24>
 8008d54:	6820      	ldr	r0, [r4, #0]
 8008d56:	1821      	adds	r1, r4, r0
 8008d58:	428a      	cmp	r2, r1
 8008d5a:	bf04      	itt	eq
 8008d5c:	6811      	ldreq	r1, [r2, #0]
 8008d5e:	6852      	ldreq	r2, [r2, #4]
 8008d60:	6062      	str	r2, [r4, #4]
 8008d62:	bf04      	itt	eq
 8008d64:	1809      	addeq	r1, r1, r0
 8008d66:	6021      	streq	r1, [r4, #0]
 8008d68:	605c      	str	r4, [r3, #4]
 8008d6a:	e7c7      	b.n	8008cfc <_free_r+0x24>
 8008d6c:	bd38      	pop	{r3, r4, r5, pc}
 8008d6e:	bf00      	nop
 8008d70:	20000214 	.word	0x20000214

08008d74 <_malloc_r>:
 8008d74:	b570      	push	{r4, r5, r6, lr}
 8008d76:	1ccd      	adds	r5, r1, #3
 8008d78:	f025 0503 	bic.w	r5, r5, #3
 8008d7c:	3508      	adds	r5, #8
 8008d7e:	2d0c      	cmp	r5, #12
 8008d80:	bf38      	it	cc
 8008d82:	250c      	movcc	r5, #12
 8008d84:	2d00      	cmp	r5, #0
 8008d86:	4606      	mov	r6, r0
 8008d88:	db01      	blt.n	8008d8e <_malloc_r+0x1a>
 8008d8a:	42a9      	cmp	r1, r5
 8008d8c:	d903      	bls.n	8008d96 <_malloc_r+0x22>
 8008d8e:	230c      	movs	r3, #12
 8008d90:	6033      	str	r3, [r6, #0]
 8008d92:	2000      	movs	r0, #0
 8008d94:	bd70      	pop	{r4, r5, r6, pc}
 8008d96:	f000 f857 	bl	8008e48 <__malloc_lock>
 8008d9a:	4a21      	ldr	r2, [pc, #132]	; (8008e20 <_malloc_r+0xac>)
 8008d9c:	6814      	ldr	r4, [r2, #0]
 8008d9e:	4621      	mov	r1, r4
 8008da0:	b991      	cbnz	r1, 8008dc8 <_malloc_r+0x54>
 8008da2:	4c20      	ldr	r4, [pc, #128]	; (8008e24 <_malloc_r+0xb0>)
 8008da4:	6823      	ldr	r3, [r4, #0]
 8008da6:	b91b      	cbnz	r3, 8008db0 <_malloc_r+0x3c>
 8008da8:	4630      	mov	r0, r6
 8008daa:	f000 f83d 	bl	8008e28 <_sbrk_r>
 8008dae:	6020      	str	r0, [r4, #0]
 8008db0:	4629      	mov	r1, r5
 8008db2:	4630      	mov	r0, r6
 8008db4:	f000 f838 	bl	8008e28 <_sbrk_r>
 8008db8:	1c43      	adds	r3, r0, #1
 8008dba:	d124      	bne.n	8008e06 <_malloc_r+0x92>
 8008dbc:	230c      	movs	r3, #12
 8008dbe:	6033      	str	r3, [r6, #0]
 8008dc0:	4630      	mov	r0, r6
 8008dc2:	f000 f842 	bl	8008e4a <__malloc_unlock>
 8008dc6:	e7e4      	b.n	8008d92 <_malloc_r+0x1e>
 8008dc8:	680b      	ldr	r3, [r1, #0]
 8008dca:	1b5b      	subs	r3, r3, r5
 8008dcc:	d418      	bmi.n	8008e00 <_malloc_r+0x8c>
 8008dce:	2b0b      	cmp	r3, #11
 8008dd0:	d90f      	bls.n	8008df2 <_malloc_r+0x7e>
 8008dd2:	600b      	str	r3, [r1, #0]
 8008dd4:	50cd      	str	r5, [r1, r3]
 8008dd6:	18cc      	adds	r4, r1, r3
 8008dd8:	4630      	mov	r0, r6
 8008dda:	f000 f836 	bl	8008e4a <__malloc_unlock>
 8008dde:	f104 000b 	add.w	r0, r4, #11
 8008de2:	1d23      	adds	r3, r4, #4
 8008de4:	f020 0007 	bic.w	r0, r0, #7
 8008de8:	1ac3      	subs	r3, r0, r3
 8008dea:	d0d3      	beq.n	8008d94 <_malloc_r+0x20>
 8008dec:	425a      	negs	r2, r3
 8008dee:	50e2      	str	r2, [r4, r3]
 8008df0:	e7d0      	b.n	8008d94 <_malloc_r+0x20>
 8008df2:	428c      	cmp	r4, r1
 8008df4:	684b      	ldr	r3, [r1, #4]
 8008df6:	bf16      	itet	ne
 8008df8:	6063      	strne	r3, [r4, #4]
 8008dfa:	6013      	streq	r3, [r2, #0]
 8008dfc:	460c      	movne	r4, r1
 8008dfe:	e7eb      	b.n	8008dd8 <_malloc_r+0x64>
 8008e00:	460c      	mov	r4, r1
 8008e02:	6849      	ldr	r1, [r1, #4]
 8008e04:	e7cc      	b.n	8008da0 <_malloc_r+0x2c>
 8008e06:	1cc4      	adds	r4, r0, #3
 8008e08:	f024 0403 	bic.w	r4, r4, #3
 8008e0c:	42a0      	cmp	r0, r4
 8008e0e:	d005      	beq.n	8008e1c <_malloc_r+0xa8>
 8008e10:	1a21      	subs	r1, r4, r0
 8008e12:	4630      	mov	r0, r6
 8008e14:	f000 f808 	bl	8008e28 <_sbrk_r>
 8008e18:	3001      	adds	r0, #1
 8008e1a:	d0cf      	beq.n	8008dbc <_malloc_r+0x48>
 8008e1c:	6025      	str	r5, [r4, #0]
 8008e1e:	e7db      	b.n	8008dd8 <_malloc_r+0x64>
 8008e20:	20000214 	.word	0x20000214
 8008e24:	20000218 	.word	0x20000218

08008e28 <_sbrk_r>:
 8008e28:	b538      	push	{r3, r4, r5, lr}
 8008e2a:	4c06      	ldr	r4, [pc, #24]	; (8008e44 <_sbrk_r+0x1c>)
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	4605      	mov	r5, r0
 8008e30:	4608      	mov	r0, r1
 8008e32:	6023      	str	r3, [r4, #0]
 8008e34:	f7f8 f81e 	bl	8000e74 <_sbrk>
 8008e38:	1c43      	adds	r3, r0, #1
 8008e3a:	d102      	bne.n	8008e42 <_sbrk_r+0x1a>
 8008e3c:	6823      	ldr	r3, [r4, #0]
 8008e3e:	b103      	cbz	r3, 8008e42 <_sbrk_r+0x1a>
 8008e40:	602b      	str	r3, [r5, #0]
 8008e42:	bd38      	pop	{r3, r4, r5, pc}
 8008e44:	200021d8 	.word	0x200021d8

08008e48 <__malloc_lock>:
 8008e48:	4770      	bx	lr

08008e4a <__malloc_unlock>:
 8008e4a:	4770      	bx	lr

08008e4c <_init>:
 8008e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e4e:	bf00      	nop
 8008e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e52:	bc08      	pop	{r3}
 8008e54:	469e      	mov	lr, r3
 8008e56:	4770      	bx	lr

08008e58 <_fini>:
 8008e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e5a:	bf00      	nop
 8008e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e5e:	bc08      	pop	{r3}
 8008e60:	469e      	mov	lr, r3
 8008e62:	4770      	bx	lr
