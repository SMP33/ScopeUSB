
ScopeUSB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f54  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080080dc  080080dc  000180dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008124  08008124  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  08008124  08008124  00018124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800812c  0800812c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800812c  0800812c  0001812c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008130  08008130  00018130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08008134  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bb8  200001ec  08008320  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00001504  20001da4  08008320  00021da4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015ca5  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003224  00000000  00000000  00035ec1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ea8  00000000  00000000  000390e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d30  00000000  00000000  00039f90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023ec5  00000000  00000000  0003acc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ee3a  00000000  00000000  0005eb85  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000caf52  00000000  00000000  0006d9bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00138911  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ca4  00000000  00000000  0013898c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001ec 	.word	0x200001ec
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080080c4 	.word	0x080080c4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001f0 	.word	0x200001f0
 80001c4:	080080c4 	.word	0x080080c4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_ADC_ConvCpltCallback>:
 DataADC value=0;

 uint16_t count=0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	 //HAL_ADC_Stop_DMA(&hadc1);

	 CDC_Transmit_FS((DataADC*)data, pkgSize*sizeof(DataADC));
 80004d0:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 80004d4:	4805      	ldr	r0, [pc, #20]	; (80004ec <HAL_ADC_ConvCpltCallback+0x24>)
 80004d6:	f007 f885 	bl	80075e4 <CDC_Transmit_FS>
//			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
//	}else{
//		count++;
//	}

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&data,pkgSize);
 80004da:	22e1      	movs	r2, #225	; 0xe1
 80004dc:	4903      	ldr	r1, [pc, #12]	; (80004ec <HAL_ADC_ConvCpltCallback+0x24>)
 80004de:	4804      	ldr	r0, [pc, #16]	; (80004f0 <HAL_ADC_ConvCpltCallback+0x28>)
 80004e0:	f000 fcb8 	bl	8000e54 <HAL_ADC_Start_DMA>

}
 80004e4:	bf00      	nop
 80004e6:	3708      	adds	r7, #8
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	200002c0 	.word	0x200002c0
 80004f0:	20000218 	.word	0x20000218

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 fbd3 	bl	8000ca4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f823 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f927 	bl	8000754 <MX_GPIO_Init>
  MX_DMA_Init();
 8000506:	f000 f905 	bl	8000714 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 800050a:	f006 ff5d 	bl	80073c8 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 800050e:	f000 f885 	bl	800061c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000512:	f000 f8d5 	bl	80006c0 <MX_USART2_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  for(uint32_t i=0;i<pkgSize;i++){
 8000516:	2300      	movs	r3, #0
 8000518:	607b      	str	r3, [r7, #4]
 800051a:	e007      	b.n	800052c <main+0x38>
	  data[i]=0;
 800051c:	4a08      	ldr	r2, [pc, #32]	; (8000540 <main+0x4c>)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2100      	movs	r1, #0
 8000522:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(uint32_t i=0;i<pkgSize;i++){
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	3301      	adds	r3, #1
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2be0      	cmp	r3, #224	; 0xe0
 8000530:	d9f4      	bls.n	800051c <main+0x28>
  }

  //HAL_ADC_Start_DMA(&hadc1, (uint16_t*)&value,1);
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&data,pkgSize);
 8000532:	22e1      	movs	r2, #225	; 0xe1
 8000534:	4902      	ldr	r1, [pc, #8]	; (8000540 <main+0x4c>)
 8000536:	4803      	ldr	r0, [pc, #12]	; (8000544 <main+0x50>)
 8000538:	f000 fc8c 	bl	8000e54 <HAL_ADC_Start_DMA>

  while (1)
 800053c:	e7fe      	b.n	800053c <main+0x48>
 800053e:	bf00      	nop
 8000540:	200002c0 	.word	0x200002c0
 8000544:	20000218 	.word	0x20000218

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b094      	sub	sp, #80	; 0x50
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 0320 	add.w	r3, r7, #32
 8000552:	2230      	movs	r2, #48	; 0x30
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f007 fcf2 	bl	8007f40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	f107 030c 	add.w	r3, r7, #12
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800056c:	2300      	movs	r3, #0
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	4b28      	ldr	r3, [pc, #160]	; (8000614 <SystemClock_Config+0xcc>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	4a27      	ldr	r2, [pc, #156]	; (8000614 <SystemClock_Config+0xcc>)
 8000576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800057a:	6413      	str	r3, [r2, #64]	; 0x40
 800057c:	4b25      	ldr	r3, [pc, #148]	; (8000614 <SystemClock_Config+0xcc>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000584:	60bb      	str	r3, [r7, #8]
 8000586:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000588:	2300      	movs	r3, #0
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	4b22      	ldr	r3, [pc, #136]	; (8000618 <SystemClock_Config+0xd0>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a21      	ldr	r2, [pc, #132]	; (8000618 <SystemClock_Config+0xd0>)
 8000592:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000596:	6013      	str	r3, [r2, #0]
 8000598:	4b1f      	ldr	r3, [pc, #124]	; (8000618 <SystemClock_Config+0xd0>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a4:	2301      	movs	r3, #1
 80005a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ae:	2302      	movs	r3, #2
 80005b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005b8:	2304      	movs	r3, #4
 80005ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80005bc:	2390      	movs	r3, #144	; 0x90
 80005be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c0:	2302      	movs	r3, #2
 80005c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80005c4:	2306      	movs	r3, #6
 80005c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c8:	f107 0320 	add.w	r3, r7, #32
 80005cc:	4618      	mov	r0, r3
 80005ce:	f002 ff9d 	bl	800350c <HAL_RCC_OscConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005d8:	f000 f976 	bl	80008c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005dc:	230f      	movs	r3, #15
 80005de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e0:	2302      	movs	r3, #2
 80005e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	2104      	movs	r1, #4
 80005fa:	4618      	mov	r0, r3
 80005fc:	f003 f9f6 	bl	80039ec <HAL_RCC_ClockConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000606:	f000 f95f 	bl	80008c8 <Error_Handler>
  }
}
 800060a:	bf00      	nop
 800060c:	3750      	adds	r7, #80	; 0x50
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40023800 	.word	0x40023800
 8000618:	40007000 	.word	0x40007000

0800061c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000622:	463b      	mov	r3, r7
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800062e:	4b21      	ldr	r3, [pc, #132]	; (80006b4 <MX_ADC1_Init+0x98>)
 8000630:	4a21      	ldr	r2, [pc, #132]	; (80006b8 <MX_ADC1_Init+0x9c>)
 8000632:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000634:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <MX_ADC1_Init+0x98>)
 8000636:	2200      	movs	r2, #0
 8000638:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800063a:	4b1e      	ldr	r3, [pc, #120]	; (80006b4 <MX_ADC1_Init+0x98>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000640:	4b1c      	ldr	r3, [pc, #112]	; (80006b4 <MX_ADC1_Init+0x98>)
 8000642:	2200      	movs	r2, #0
 8000644:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000646:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <MX_ADC1_Init+0x98>)
 8000648:	2201      	movs	r2, #1
 800064a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800064c:	4b19      	ldr	r3, [pc, #100]	; (80006b4 <MX_ADC1_Init+0x98>)
 800064e:	2200      	movs	r2, #0
 8000650:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000654:	4b17      	ldr	r3, [pc, #92]	; (80006b4 <MX_ADC1_Init+0x98>)
 8000656:	2200      	movs	r2, #0
 8000658:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800065a:	4b16      	ldr	r3, [pc, #88]	; (80006b4 <MX_ADC1_Init+0x98>)
 800065c:	4a17      	ldr	r2, [pc, #92]	; (80006bc <MX_ADC1_Init+0xa0>)
 800065e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000660:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <MX_ADC1_Init+0x98>)
 8000662:	2200      	movs	r2, #0
 8000664:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000666:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <MX_ADC1_Init+0x98>)
 8000668:	2201      	movs	r2, #1
 800066a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800066c:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <MX_ADC1_Init+0x98>)
 800066e:	2201      	movs	r2, #1
 8000670:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000674:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <MX_ADC1_Init+0x98>)
 8000676:	2201      	movs	r2, #1
 8000678:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800067a:	480e      	ldr	r0, [pc, #56]	; (80006b4 <MX_ADC1_Init+0x98>)
 800067c:	f000 fba6 	bl	8000dcc <HAL_ADC_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000686:	f000 f91f 	bl	80008c8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800068a:	2301      	movs	r3, #1
 800068c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800068e:	2301      	movs	r3, #1
 8000690:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000692:	2307      	movs	r3, #7
 8000694:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000696:	463b      	mov	r3, r7
 8000698:	4619      	mov	r1, r3
 800069a:	4806      	ldr	r0, [pc, #24]	; (80006b4 <MX_ADC1_Init+0x98>)
 800069c:	f000 fce0 	bl	8001060 <HAL_ADC_ConfigChannel>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80006a6:	f000 f90f 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	3710      	adds	r7, #16
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000218 	.word	0x20000218
 80006b8:	40012000 	.word	0x40012000
 80006bc:	0f000001 	.word	0x0f000001

080006c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006c4:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006c6:	4a12      	ldr	r2, [pc, #72]	; (8000710 <MX_USART2_UART_Init+0x50>)
 80006c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ca:	4b10      	ldr	r3, [pc, #64]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d8:	4b0c      	ldr	r3, [pc, #48]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006de:	4b0b      	ldr	r3, [pc, #44]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006e4:	4b09      	ldr	r3, [pc, #36]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006e6:	220c      	movs	r2, #12
 80006e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ea:	4b08      	ldr	r3, [pc, #32]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006f6:	4805      	ldr	r0, [pc, #20]	; (800070c <MX_USART2_UART_Init+0x4c>)
 80006f8:	f003 fb6a 	bl	8003dd0 <HAL_UART_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000702:	f000 f8e1 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20000484 	.word	0x20000484
 8000710:	40004400 	.word	0x40004400

08000714 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_DMA_Init+0x3c>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a0b      	ldr	r2, [pc, #44]	; (8000750 <MX_DMA_Init+0x3c>)
 8000724:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_DMA_Init+0x3c>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000736:	2200      	movs	r2, #0
 8000738:	2100      	movs	r1, #0
 800073a:	2038      	movs	r0, #56	; 0x38
 800073c:	f001 f80b 	bl	8001756 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000740:	2038      	movs	r0, #56	; 0x38
 8000742:	f001 f824 	bl	800178e <HAL_NVIC_EnableIRQ>

}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800

08000754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08c      	sub	sp, #48	; 0x30
 8000758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075a:	f107 031c 	add.w	r3, r7, #28
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
 8000768:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	61bb      	str	r3, [r7, #24]
 800076e:	4b51      	ldr	r3, [pc, #324]	; (80008b4 <MX_GPIO_Init+0x160>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a50      	ldr	r2, [pc, #320]	; (80008b4 <MX_GPIO_Init+0x160>)
 8000774:	f043 0310 	orr.w	r3, r3, #16
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b4e      	ldr	r3, [pc, #312]	; (80008b4 <MX_GPIO_Init+0x160>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0310 	and.w	r3, r3, #16
 8000782:	61bb      	str	r3, [r7, #24]
 8000784:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
 800078a:	4b4a      	ldr	r3, [pc, #296]	; (80008b4 <MX_GPIO_Init+0x160>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a49      	ldr	r2, [pc, #292]	; (80008b4 <MX_GPIO_Init+0x160>)
 8000790:	f043 0304 	orr.w	r3, r3, #4
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b47      	ldr	r3, [pc, #284]	; (80008b4 <MX_GPIO_Init+0x160>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0304 	and.w	r3, r3, #4
 800079e:	617b      	str	r3, [r7, #20]
 80007a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	613b      	str	r3, [r7, #16]
 80007a6:	4b43      	ldr	r3, [pc, #268]	; (80008b4 <MX_GPIO_Init+0x160>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a42      	ldr	r2, [pc, #264]	; (80008b4 <MX_GPIO_Init+0x160>)
 80007ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b40      	ldr	r3, [pc, #256]	; (80008b4 <MX_GPIO_Init+0x160>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ba:	613b      	str	r3, [r7, #16]
 80007bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	4b3c      	ldr	r3, [pc, #240]	; (80008b4 <MX_GPIO_Init+0x160>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a3b      	ldr	r2, [pc, #236]	; (80008b4 <MX_GPIO_Init+0x160>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b39      	ldr	r3, [pc, #228]	; (80008b4 <MX_GPIO_Init+0x160>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	4b35      	ldr	r3, [pc, #212]	; (80008b4 <MX_GPIO_Init+0x160>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a34      	ldr	r2, [pc, #208]	; (80008b4 <MX_GPIO_Init+0x160>)
 80007e4:	f043 0302 	orr.w	r3, r3, #2
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b32      	ldr	r3, [pc, #200]	; (80008b4 <MX_GPIO_Init+0x160>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	4b2e      	ldr	r3, [pc, #184]	; (80008b4 <MX_GPIO_Init+0x160>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a2d      	ldr	r2, [pc, #180]	; (80008b4 <MX_GPIO_Init+0x160>)
 8000800:	f043 0308 	orr.w	r3, r3, #8
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b2b      	ldr	r3, [pc, #172]	; (80008b4 <MX_GPIO_Init+0x160>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0308 	and.w	r3, r3, #8
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2108      	movs	r1, #8
 8000816:	4828      	ldr	r0, [pc, #160]	; (80008b8 <MX_GPIO_Init+0x164>)
 8000818:	f001 fcdc 	bl	80021d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800081c:	2200      	movs	r2, #0
 800081e:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000822:	4826      	ldr	r0, [pc, #152]	; (80008bc <MX_GPIO_Init+0x168>)
 8000824:	f001 fcd6 	bl	80021d4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000828:	2308      	movs	r3, #8
 800082a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082c:	2301      	movs	r3, #1
 800082e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000838:	f107 031c 	add.w	r3, r7, #28
 800083c:	4619      	mov	r1, r3
 800083e:	481e      	ldr	r0, [pc, #120]	; (80008b8 <MX_GPIO_Init+0x164>)
 8000840:	f001 fb2e 	bl	8001ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000844:	2304      	movs	r3, #4
 8000846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000848:	2300      	movs	r3, #0
 800084a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000850:	f107 031c 	add.w	r3, r7, #28
 8000854:	4619      	mov	r1, r3
 8000856:	481a      	ldr	r0, [pc, #104]	; (80008c0 <MX_GPIO_Init+0x16c>)
 8000858:	f001 fb22 	bl	8001ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800085c:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000860:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000862:	2301      	movs	r3, #1
 8000864:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086a:	2300      	movs	r3, #0
 800086c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	4619      	mov	r1, r3
 8000874:	4811      	ldr	r0, [pc, #68]	; (80008bc <MX_GPIO_Init+0x168>)
 8000876:	f001 fb13 	bl	8001ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800087a:	2320      	movs	r3, #32
 800087c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087e:	2300      	movs	r3, #0
 8000880:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	4619      	mov	r1, r3
 800088c:	480b      	ldr	r0, [pc, #44]	; (80008bc <MX_GPIO_Init+0x168>)
 800088e:	f001 fb07 	bl	8001ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000892:	2302      	movs	r3, #2
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000896:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <MX_GPIO_Init+0x170>)
 8000898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	4804      	ldr	r0, [pc, #16]	; (80008b8 <MX_GPIO_Init+0x164>)
 80008a6:	f001 fafb 	bl	8001ea0 <HAL_GPIO_Init>

}
 80008aa:	bf00      	nop
 80008ac:	3730      	adds	r7, #48	; 0x30
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40023800 	.word	0x40023800
 80008b8:	40021000 	.word	0x40021000
 80008bc:	40020c00 	.word	0x40020c00
 80008c0:	40020400 	.word	0x40020400
 80008c4:	10120000 	.word	0x10120000

080008c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
	...

080008d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	4b10      	ldr	r3, [pc, #64]	; (8000924 <HAL_MspInit+0x4c>)
 80008e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e6:	4a0f      	ldr	r2, [pc, #60]	; (8000924 <HAL_MspInit+0x4c>)
 80008e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ec:	6453      	str	r3, [r2, #68]	; 0x44
 80008ee:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <HAL_MspInit+0x4c>)
 80008f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	603b      	str	r3, [r7, #0]
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <HAL_MspInit+0x4c>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	4a08      	ldr	r2, [pc, #32]	; (8000924 <HAL_MspInit+0x4c>)
 8000904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000908:	6413      	str	r3, [r2, #64]	; 0x40
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <HAL_MspInit+0x4c>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000916:	2007      	movs	r0, #7
 8000918:	f000 ff12 	bl	8001740 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091c:	bf00      	nop
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40023800 	.word	0x40023800

08000928 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08a      	sub	sp, #40	; 0x28
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a2f      	ldr	r2, [pc, #188]	; (8000a04 <HAL_ADC_MspInit+0xdc>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d157      	bne.n	80009fa <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	613b      	str	r3, [r7, #16]
 800094e:	4b2e      	ldr	r3, [pc, #184]	; (8000a08 <HAL_ADC_MspInit+0xe0>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000952:	4a2d      	ldr	r2, [pc, #180]	; (8000a08 <HAL_ADC_MspInit+0xe0>)
 8000954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000958:	6453      	str	r3, [r2, #68]	; 0x44
 800095a:	4b2b      	ldr	r3, [pc, #172]	; (8000a08 <HAL_ADC_MspInit+0xe0>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	4b27      	ldr	r3, [pc, #156]	; (8000a08 <HAL_ADC_MspInit+0xe0>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a26      	ldr	r2, [pc, #152]	; (8000a08 <HAL_ADC_MspInit+0xe0>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b24      	ldr	r3, [pc, #144]	; (8000a08 <HAL_ADC_MspInit+0xe0>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000982:	2302      	movs	r3, #2
 8000984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000986:	2303      	movs	r3, #3
 8000988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098e:	f107 0314 	add.w	r3, r7, #20
 8000992:	4619      	mov	r1, r3
 8000994:	481d      	ldr	r0, [pc, #116]	; (8000a0c <HAL_ADC_MspInit+0xe4>)
 8000996:	f001 fa83 	bl	8001ea0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800099a:	4b1d      	ldr	r3, [pc, #116]	; (8000a10 <HAL_ADC_MspInit+0xe8>)
 800099c:	4a1d      	ldr	r2, [pc, #116]	; (8000a14 <HAL_ADC_MspInit+0xec>)
 800099e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80009a0:	4b1b      	ldr	r3, [pc, #108]	; (8000a10 <HAL_ADC_MspInit+0xe8>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009a6:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <HAL_ADC_MspInit+0xe8>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80009ac:	4b18      	ldr	r3, [pc, #96]	; (8000a10 <HAL_ADC_MspInit+0xe8>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80009b2:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <HAL_ADC_MspInit+0xe8>)
 80009b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009b8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009ba:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <HAL_ADC_MspInit+0xe8>)
 80009bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009c0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009c2:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <HAL_ADC_MspInit+0xe8>)
 80009c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009c8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80009ca:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <HAL_ADC_MspInit+0xe8>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <HAL_ADC_MspInit+0xe8>)
 80009d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80009d6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009d8:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <HAL_ADC_MspInit+0xe8>)
 80009da:	2200      	movs	r2, #0
 80009dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80009de:	480c      	ldr	r0, [pc, #48]	; (8000a10 <HAL_ADC_MspInit+0xe8>)
 80009e0:	f000 fef0 	bl	80017c4 <HAL_DMA_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80009ea:	f7ff ff6d 	bl	80008c8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a07      	ldr	r2, [pc, #28]	; (8000a10 <HAL_ADC_MspInit+0xe8>)
 80009f2:	639a      	str	r2, [r3, #56]	; 0x38
 80009f4:	4a06      	ldr	r2, [pc, #24]	; (8000a10 <HAL_ADC_MspInit+0xe8>)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009fa:	bf00      	nop
 80009fc:	3728      	adds	r7, #40	; 0x28
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40012000 	.word	0x40012000
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40020000 	.word	0x40020000
 8000a10:	20000260 	.word	0x20000260
 8000a14:	40026410 	.word	0x40026410

08000a18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08a      	sub	sp, #40	; 0x28
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a28      	ldr	r2, [pc, #160]	; (8000ad8 <HAL_UART_MspInit+0xc0>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d149      	bne.n	8000ace <HAL_UART_MspInit+0xb6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	613b      	str	r3, [r7, #16]
 8000a3e:	4b27      	ldr	r3, [pc, #156]	; (8000adc <HAL_UART_MspInit+0xc4>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	4a26      	ldr	r2, [pc, #152]	; (8000adc <HAL_UART_MspInit+0xc4>)
 8000a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a48:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4a:	4b24      	ldr	r3, [pc, #144]	; (8000adc <HAL_UART_MspInit+0xc4>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	4b20      	ldr	r3, [pc, #128]	; (8000adc <HAL_UART_MspInit+0xc4>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a1f      	ldr	r2, [pc, #124]	; (8000adc <HAL_UART_MspInit+0xc4>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b1d      	ldr	r3, [pc, #116]	; (8000adc <HAL_UART_MspInit+0xc4>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	4b19      	ldr	r3, [pc, #100]	; (8000adc <HAL_UART_MspInit+0xc4>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a18      	ldr	r2, [pc, #96]	; (8000adc <HAL_UART_MspInit+0xc4>)
 8000a7c:	f043 0308 	orr.w	r3, r3, #8
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b16      	ldr	r3, [pc, #88]	; (8000adc <HAL_UART_MspInit+0xc4>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0308 	and.w	r3, r3, #8
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a8e:	2304      	movs	r3, #4
 8000a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a92:	2302      	movs	r3, #2
 8000a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a9e:	2307      	movs	r3, #7
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	480d      	ldr	r0, [pc, #52]	; (8000ae0 <HAL_UART_MspInit+0xc8>)
 8000aaa:	f001 f9f9 	bl	8001ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000aae:	2340      	movs	r3, #64	; 0x40
 8000ab0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aba:	2303      	movs	r3, #3
 8000abc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000abe:	2307      	movs	r3, #7
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4806      	ldr	r0, [pc, #24]	; (8000ae4 <HAL_UART_MspInit+0xcc>)
 8000aca:	f001 f9e9 	bl	8001ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ace:	bf00      	nop
 8000ad0:	3728      	adds	r7, #40	; 0x28
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40004400 	.word	0x40004400
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	40020000 	.word	0x40020000
 8000ae4:	40020c00 	.word	0x40020c00

08000ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr

08000af6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afa:	e7fe      	b.n	8000afa <HardFault_Handler+0x4>

08000afc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <MemManage_Handler+0x4>

08000b02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b06:	e7fe      	b.n	8000b06 <BusFault_Handler+0x4>

08000b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <UsageFault_Handler+0x4>

08000b0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr

08000b2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b3c:	f000 f904 	bl	8000d48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <OTG_FS_WKUP_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS wake-up interrupt through EXTI line 18.
  */
void OTG_FS_WKUP_IRQHandler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_WKUP_IRQn 0 */

  /* USER CODE END OTG_FS_WKUP_IRQn 0 */
  if ((&hpcd_USB_OTG_FS)->Init.low_power_enable) {
 8000b48:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <OTG_FS_WKUP_IRQHandler+0x40>)
 8000b4a:	6a1b      	ldr	r3, [r3, #32]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d007      	beq.n	8000b60 <OTG_FS_WKUP_IRQHandler+0x1c>
    /* Reset SLEEPDEEP bit of Cortex System Control Register */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8000b50:	4b0d      	ldr	r3, [pc, #52]	; (8000b88 <OTG_FS_WKUP_IRQHandler+0x44>)
 8000b52:	691b      	ldr	r3, [r3, #16]
 8000b54:	4a0c      	ldr	r2, [pc, #48]	; (8000b88 <OTG_FS_WKUP_IRQHandler+0x44>)
 8000b56:	f023 0306 	bic.w	r3, r3, #6
 8000b5a:	6113      	str	r3, [r2, #16]
    SystemClock_Config();
 8000b5c:	f7ff fcf4 	bl	8000548 <SystemClock_Config>
  }
  __HAL_PCD_UNGATE_PHYCLOCK(&hpcd_USB_OTG_FS);
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <OTG_FS_WKUP_IRQHandler+0x40>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a06      	ldr	r2, [pc, #24]	; (8000b84 <OTG_FS_WKUP_IRQHandler+0x40>)
 8000b6c:	6812      	ldr	r2, [r2, #0]
 8000b6e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8000b72:	f023 0301 	bic.w	r3, r3, #1
 8000b76:	6013      	str	r3, [r2, #0]
  /* Clear EXTI pending bit */
  __HAL_USB_OTG_FS_WAKEUP_EXTI_CLEAR_FLAG();
 8000b78:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <OTG_FS_WKUP_IRQHandler+0x48>)
 8000b7a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b7e:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN OTG_FS_WKUP_IRQn 1 */

  /* USER CODE END OTG_FS_WKUP_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20001998 	.word	0x20001998
 8000b88:	e000ed00 	.word	0xe000ed00
 8000b8c:	40013c00 	.word	0x40013c00

08000b90 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000b94:	4802      	ldr	r0, [pc, #8]	; (8000ba0 <DMA2_Stream0_IRQHandler+0x10>)
 8000b96:	f000 ff1b 	bl	80019d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000260 	.word	0x20000260

08000ba4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ba8:	4802      	ldr	r0, [pc, #8]	; (8000bb4 <OTG_FS_IRQHandler+0x10>)
 8000baa:	f001 fc7c 	bl	80024a6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20001998 	.word	0x20001998

08000bb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bc0:	4a14      	ldr	r2, [pc, #80]	; (8000c14 <_sbrk+0x5c>)
 8000bc2:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <_sbrk+0x60>)
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bcc:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <_sbrk+0x64>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d102      	bne.n	8000bda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bd4:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <_sbrk+0x64>)
 8000bd6:	4a12      	ldr	r2, [pc, #72]	; (8000c20 <_sbrk+0x68>)
 8000bd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <_sbrk+0x64>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4413      	add	r3, r2
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d207      	bcs.n	8000bf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000be8:	f007 f970 	bl	8007ecc <__errno>
 8000bec:	4602      	mov	r2, r0
 8000bee:	230c      	movs	r3, #12
 8000bf0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf6:	e009      	b.n	8000c0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bf8:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <_sbrk+0x64>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bfe:	4b07      	ldr	r3, [pc, #28]	; (8000c1c <_sbrk+0x64>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4413      	add	r3, r2
 8000c06:	4a05      	ldr	r2, [pc, #20]	; (8000c1c <_sbrk+0x64>)
 8000c08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3718      	adds	r7, #24
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20020000 	.word	0x20020000
 8000c18:	00000500 	.word	0x00000500
 8000c1c:	20000208 	.word	0x20000208
 8000c20:	20001da8 	.word	0x20001da8

08000c24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c28:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <SystemInit+0x28>)
 8000c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c2e:	4a07      	ldr	r2, [pc, #28]	; (8000c4c <SystemInit+0x28>)
 8000c30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c38:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <SystemInit+0x28>)
 8000c3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c3e:	609a      	str	r2, [r3, #8]
#endif
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c88 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c54:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c56:	e003      	b.n	8000c60 <LoopCopyDataInit>

08000c58 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c58:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c5a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c5c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c5e:	3104      	adds	r1, #4

08000c60 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c60:	480b      	ldr	r0, [pc, #44]	; (8000c90 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c62:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c64:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c66:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c68:	d3f6      	bcc.n	8000c58 <CopyDataInit>
  ldr  r2, =_sbss
 8000c6a:	4a0b      	ldr	r2, [pc, #44]	; (8000c98 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c6c:	e002      	b.n	8000c74 <LoopFillZerobss>

08000c6e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c6e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c70:	f842 3b04 	str.w	r3, [r2], #4

08000c74 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c74:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c76:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c78:	d3f9      	bcc.n	8000c6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c7a:	f7ff ffd3 	bl	8000c24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c7e:	f007 f92b 	bl	8007ed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c82:	f7ff fc37 	bl	80004f4 <main>
  bx  lr    
 8000c86:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c88:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000c8c:	08008134 	.word	0x08008134
  ldr  r0, =_sdata
 8000c90:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c94:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 8000c98:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 8000c9c:	20001da4 	.word	0x20001da4

08000ca0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ca0:	e7fe      	b.n	8000ca0 <ADC_IRQHandler>
	...

08000ca4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ca8:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <HAL_Init+0x40>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a0d      	ldr	r2, [pc, #52]	; (8000ce4 <HAL_Init+0x40>)
 8000cae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <HAL_Init+0x40>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a0a      	ldr	r2, [pc, #40]	; (8000ce4 <HAL_Init+0x40>)
 8000cba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc0:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <HAL_Init+0x40>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a07      	ldr	r2, [pc, #28]	; (8000ce4 <HAL_Init+0x40>)
 8000cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ccc:	2003      	movs	r0, #3
 8000cce:	f000 fd37 	bl	8001740 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cd2:	2000      	movs	r0, #0
 8000cd4:	f000 f808 	bl	8000ce8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd8:	f7ff fdfe 	bl	80008d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40023c00 	.word	0x40023c00

08000ce8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <HAL_InitTick+0x54>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <HAL_InitTick+0x58>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d06:	4618      	mov	r0, r3
 8000d08:	f000 fd4f 	bl	80017aa <HAL_SYSTICK_Config>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e00e      	b.n	8000d34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2b0f      	cmp	r3, #15
 8000d1a:	d80a      	bhi.n	8000d32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	6879      	ldr	r1, [r7, #4]
 8000d20:	f04f 30ff 	mov.w	r0, #4294967295
 8000d24:	f000 fd17 	bl	8001756 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d28:	4a06      	ldr	r2, [pc, #24]	; (8000d44 <HAL_InitTick+0x5c>)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	e000      	b.n	8000d34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000000 	.word	0x20000000
 8000d40:	20000008 	.word	0x20000008
 8000d44:	20000004 	.word	0x20000004

08000d48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d4c:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_IncTick+0x20>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	461a      	mov	r2, r3
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_IncTick+0x24>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4413      	add	r3, r2
 8000d58:	4a04      	ldr	r2, [pc, #16]	; (8000d6c <HAL_IncTick+0x24>)
 8000d5a:	6013      	str	r3, [r2, #0]
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	20000008 	.word	0x20000008
 8000d6c:	200004c4 	.word	0x200004c4

08000d70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  return uwTick;
 8000d74:	4b03      	ldr	r3, [pc, #12]	; (8000d84 <HAL_GetTick+0x14>)
 8000d76:	681b      	ldr	r3, [r3, #0]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	200004c4 	.word	0x200004c4

08000d88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d90:	f7ff ffee 	bl	8000d70 <HAL_GetTick>
 8000d94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000da0:	d005      	beq.n	8000dae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000da2:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <HAL_Delay+0x40>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	461a      	mov	r2, r3
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	4413      	add	r3, r2
 8000dac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dae:	bf00      	nop
 8000db0:	f7ff ffde 	bl	8000d70 <HAL_GetTick>
 8000db4:	4602      	mov	r2, r0
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	68fa      	ldr	r2, [r7, #12]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d8f7      	bhi.n	8000db0 <HAL_Delay+0x28>
  {
  }
}
 8000dc0:	bf00      	nop
 8000dc2:	3710      	adds	r7, #16
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20000008 	.word	0x20000008

08000dcc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d101      	bne.n	8000de2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e033      	b.n	8000e4a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d109      	bne.n	8000dfe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f7ff fd9c 	bl	8000928 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2200      	movs	r2, #0
 8000df4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	f003 0310 	and.w	r3, r3, #16
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d118      	bne.n	8000e3c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e12:	f023 0302 	bic.w	r3, r3, #2
 8000e16:	f043 0202 	orr.w	r2, r3, #2
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f000 fa40 	bl	80012a4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2200      	movs	r2, #0
 8000e28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	f023 0303 	bic.w	r3, r3, #3
 8000e32:	f043 0201 	orr.w	r2, r3, #1
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	641a      	str	r2, [r3, #64]	; 0x40
 8000e3a:	e001      	b.n	8000e40 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2200      	movs	r2, #0
 8000e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3710      	adds	r7, #16
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000e60:	2300      	movs	r3, #0
 8000e62:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d101      	bne.n	8000e72 <HAL_ADC_Start_DMA+0x1e>
 8000e6e:	2302      	movs	r3, #2
 8000e70:	e0cc      	b.n	800100c <HAL_ADC_Start_DMA+0x1b8>
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	2201      	movs	r2, #1
 8000e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d018      	beq.n	8000eba <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	689a      	ldr	r2, [r3, #8]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f042 0201 	orr.w	r2, r2, #1
 8000e96:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e98:	4b5e      	ldr	r3, [pc, #376]	; (8001014 <HAL_ADC_Start_DMA+0x1c0>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a5e      	ldr	r2, [pc, #376]	; (8001018 <HAL_ADC_Start_DMA+0x1c4>)
 8000e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea2:	0c9a      	lsrs	r2, r3, #18
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	4413      	add	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000eac:	e002      	b.n	8000eb4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	3b01      	subs	r3, #1
 8000eb2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d1f9      	bne.n	8000eae <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	f003 0301 	and.w	r3, r3, #1
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	f040 80a0 	bne.w	800100a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000ed2:	f023 0301 	bic.w	r3, r3, #1
 8000ed6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d007      	beq.n	8000efc <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ef4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f08:	d106      	bne.n	8000f18 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0e:	f023 0206 	bic.w	r2, r3, #6
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	645a      	str	r2, [r3, #68]	; 0x44
 8000f16:	e002      	b.n	8000f1e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	2200      	movs	r2, #0
 8000f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f26:	4b3d      	ldr	r3, [pc, #244]	; (800101c <HAL_ADC_Start_DMA+0x1c8>)
 8000f28:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f2e:	4a3c      	ldr	r2, [pc, #240]	; (8001020 <HAL_ADC_Start_DMA+0x1cc>)
 8000f30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f36:	4a3b      	ldr	r2, [pc, #236]	; (8001024 <HAL_ADC_Start_DMA+0x1d0>)
 8000f38:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f3e:	4a3a      	ldr	r2, [pc, #232]	; (8001028 <HAL_ADC_Start_DMA+0x1d4>)
 8000f40:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000f4a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	685a      	ldr	r2, [r3, #4]
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000f5a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	689a      	ldr	r2, [r3, #8]
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f6a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	334c      	adds	r3, #76	; 0x4c
 8000f76:	4619      	mov	r1, r3
 8000f78:	68ba      	ldr	r2, [r7, #8]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f000 fcd0 	bl	8001920 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 031f 	and.w	r3, r3, #31
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d12a      	bne.n	8000fe2 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a26      	ldr	r2, [pc, #152]	; (800102c <HAL_ADC_Start_DMA+0x1d8>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d015      	beq.n	8000fc2 <HAL_ADC_Start_DMA+0x16e>
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a25      	ldr	r2, [pc, #148]	; (8001030 <HAL_ADC_Start_DMA+0x1dc>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d105      	bne.n	8000fac <HAL_ADC_Start_DMA+0x158>
 8000fa0:	4b1e      	ldr	r3, [pc, #120]	; (800101c <HAL_ADC_Start_DMA+0x1c8>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f003 031f 	and.w	r3, r3, #31
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d00a      	beq.n	8000fc2 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a20      	ldr	r2, [pc, #128]	; (8001034 <HAL_ADC_Start_DMA+0x1e0>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d129      	bne.n	800100a <HAL_ADC_Start_DMA+0x1b6>
 8000fb6:	4b19      	ldr	r3, [pc, #100]	; (800101c <HAL_ADC_Start_DMA+0x1c8>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f003 031f 	and.w	r3, r3, #31
 8000fbe:	2b0f      	cmp	r3, #15
 8000fc0:	d823      	bhi.n	800100a <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d11c      	bne.n	800100a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	689a      	ldr	r2, [r3, #8]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	e013      	b.n	800100a <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a11      	ldr	r2, [pc, #68]	; (800102c <HAL_ADC_Start_DMA+0x1d8>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d10e      	bne.n	800100a <HAL_ADC_Start_DMA+0x1b6>
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d107      	bne.n	800100a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	689a      	ldr	r2, [r3, #8]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001008:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800100a:	2300      	movs	r3, #0
}
 800100c:	4618      	mov	r0, r3
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000000 	.word	0x20000000
 8001018:	431bde83 	.word	0x431bde83
 800101c:	40012300 	.word	0x40012300
 8001020:	0800149d 	.word	0x0800149d
 8001024:	08001557 	.word	0x08001557
 8001028:	08001573 	.word	0x08001573
 800102c:	40012000 	.word	0x40012000
 8001030:	40012100 	.word	0x40012100
 8001034:	40012200 	.word	0x40012200

08001038 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800106a:	2300      	movs	r3, #0
 800106c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001074:	2b01      	cmp	r3, #1
 8001076:	d101      	bne.n	800107c <HAL_ADC_ConfigChannel+0x1c>
 8001078:	2302      	movs	r3, #2
 800107a:	e105      	b.n	8001288 <HAL_ADC_ConfigChannel+0x228>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2201      	movs	r2, #1
 8001080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b09      	cmp	r3, #9
 800108a:	d925      	bls.n	80010d8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	68d9      	ldr	r1, [r3, #12]
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	b29b      	uxth	r3, r3
 8001098:	461a      	mov	r2, r3
 800109a:	4613      	mov	r3, r2
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	4413      	add	r3, r2
 80010a0:	3b1e      	subs	r3, #30
 80010a2:	2207      	movs	r2, #7
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43da      	mvns	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	400a      	ands	r2, r1
 80010b0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	68d9      	ldr	r1, [r3, #12]
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	689a      	ldr	r2, [r3, #8]
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	4618      	mov	r0, r3
 80010c4:	4603      	mov	r3, r0
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	4403      	add	r3, r0
 80010ca:	3b1e      	subs	r3, #30
 80010cc:	409a      	lsls	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	430a      	orrs	r2, r1
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	e022      	b.n	800111e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	6919      	ldr	r1, [r3, #16]
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	461a      	mov	r2, r3
 80010e6:	4613      	mov	r3, r2
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	4413      	add	r3, r2
 80010ec:	2207      	movs	r2, #7
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43da      	mvns	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	400a      	ands	r2, r1
 80010fa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	6919      	ldr	r1, [r3, #16]
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	689a      	ldr	r2, [r3, #8]
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	b29b      	uxth	r3, r3
 800110c:	4618      	mov	r0, r3
 800110e:	4603      	mov	r3, r0
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	4403      	add	r3, r0
 8001114:	409a      	lsls	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	430a      	orrs	r2, r1
 800111c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	2b06      	cmp	r3, #6
 8001124:	d824      	bhi.n	8001170 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685a      	ldr	r2, [r3, #4]
 8001130:	4613      	mov	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	3b05      	subs	r3, #5
 8001138:	221f      	movs	r2, #31
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43da      	mvns	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	400a      	ands	r2, r1
 8001146:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	b29b      	uxth	r3, r3
 8001154:	4618      	mov	r0, r3
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685a      	ldr	r2, [r3, #4]
 800115a:	4613      	mov	r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	4413      	add	r3, r2
 8001160:	3b05      	subs	r3, #5
 8001162:	fa00 f203 	lsl.w	r2, r0, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	430a      	orrs	r2, r1
 800116c:	635a      	str	r2, [r3, #52]	; 0x34
 800116e:	e04c      	b.n	800120a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	2b0c      	cmp	r3, #12
 8001176:	d824      	bhi.n	80011c2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685a      	ldr	r2, [r3, #4]
 8001182:	4613      	mov	r3, r2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	4413      	add	r3, r2
 8001188:	3b23      	subs	r3, #35	; 0x23
 800118a:	221f      	movs	r2, #31
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43da      	mvns	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	400a      	ands	r2, r1
 8001198:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	4618      	mov	r0, r3
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685a      	ldr	r2, [r3, #4]
 80011ac:	4613      	mov	r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	4413      	add	r3, r2
 80011b2:	3b23      	subs	r3, #35	; 0x23
 80011b4:	fa00 f203 	lsl.w	r2, r0, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	430a      	orrs	r2, r1
 80011be:	631a      	str	r2, [r3, #48]	; 0x30
 80011c0:	e023      	b.n	800120a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685a      	ldr	r2, [r3, #4]
 80011cc:	4613      	mov	r3, r2
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	4413      	add	r3, r2
 80011d2:	3b41      	subs	r3, #65	; 0x41
 80011d4:	221f      	movs	r2, #31
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43da      	mvns	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	400a      	ands	r2, r1
 80011e2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	4618      	mov	r0, r3
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685a      	ldr	r2, [r3, #4]
 80011f6:	4613      	mov	r3, r2
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	4413      	add	r3, r2
 80011fc:	3b41      	subs	r3, #65	; 0x41
 80011fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	430a      	orrs	r2, r1
 8001208:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800120a:	4b22      	ldr	r3, [pc, #136]	; (8001294 <HAL_ADC_ConfigChannel+0x234>)
 800120c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a21      	ldr	r2, [pc, #132]	; (8001298 <HAL_ADC_ConfigChannel+0x238>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d109      	bne.n	800122c <HAL_ADC_ConfigChannel+0x1cc>
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b12      	cmp	r3, #18
 800121e:	d105      	bne.n	800122c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a19      	ldr	r2, [pc, #100]	; (8001298 <HAL_ADC_ConfigChannel+0x238>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d123      	bne.n	800127e <HAL_ADC_ConfigChannel+0x21e>
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2b10      	cmp	r3, #16
 800123c:	d003      	beq.n	8001246 <HAL_ADC_ConfigChannel+0x1e6>
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2b11      	cmp	r3, #17
 8001244:	d11b      	bne.n	800127e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2b10      	cmp	r3, #16
 8001258:	d111      	bne.n	800127e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800125a:	4b10      	ldr	r3, [pc, #64]	; (800129c <HAL_ADC_ConfigChannel+0x23c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a10      	ldr	r2, [pc, #64]	; (80012a0 <HAL_ADC_ConfigChannel+0x240>)
 8001260:	fba2 2303 	umull	r2, r3, r2, r3
 8001264:	0c9a      	lsrs	r2, r3, #18
 8001266:	4613      	mov	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	4413      	add	r3, r2
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001270:	e002      	b.n	8001278 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	3b01      	subs	r3, #1
 8001276:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d1f9      	bne.n	8001272 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001286:	2300      	movs	r3, #0
}
 8001288:	4618      	mov	r0, r3
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	40012300 	.word	0x40012300
 8001298:	40012000 	.word	0x40012000
 800129c:	20000000 	.word	0x20000000
 80012a0:	431bde83 	.word	0x431bde83

080012a4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012ac:	4b79      	ldr	r3, [pc, #484]	; (8001494 <ADC_Init+0x1f0>)
 80012ae:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	685a      	ldr	r2, [r3, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	431a      	orrs	r2, r3
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	685a      	ldr	r2, [r3, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	6859      	ldr	r1, [r3, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	691b      	ldr	r3, [r3, #16]
 80012e4:	021a      	lsls	r2, r3, #8
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	430a      	orrs	r2, r1
 80012ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	685a      	ldr	r2, [r3, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80012fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	6859      	ldr	r1, [r3, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689a      	ldr	r2, [r3, #8]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	430a      	orrs	r2, r1
 800130e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	689a      	ldr	r2, [r3, #8]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800131e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	6899      	ldr	r1, [r3, #8]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	68da      	ldr	r2, [r3, #12]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	430a      	orrs	r2, r1
 8001330:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001336:	4a58      	ldr	r2, [pc, #352]	; (8001498 <ADC_Init+0x1f4>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d022      	beq.n	8001382 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	689a      	ldr	r2, [r3, #8]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800134a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	6899      	ldr	r1, [r3, #8]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	430a      	orrs	r2, r1
 800135c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	689a      	ldr	r2, [r3, #8]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800136c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6899      	ldr	r1, [r3, #8]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	430a      	orrs	r2, r1
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	e00f      	b.n	80013a2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001390:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	689a      	ldr	r2, [r3, #8]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013a0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	689a      	ldr	r2, [r3, #8]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f022 0202 	bic.w	r2, r2, #2
 80013b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	6899      	ldr	r1, [r3, #8]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	7e1b      	ldrb	r3, [r3, #24]
 80013bc:	005a      	lsls	r2, r3, #1
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	430a      	orrs	r2, r1
 80013c4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d01b      	beq.n	8001408 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	685a      	ldr	r2, [r3, #4]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80013de:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	685a      	ldr	r2, [r3, #4]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80013ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	6859      	ldr	r1, [r3, #4]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fa:	3b01      	subs	r3, #1
 80013fc:	035a      	lsls	r2, r3, #13
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	430a      	orrs	r2, r1
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	e007      	b.n	8001418 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	685a      	ldr	r2, [r3, #4]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001416:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001426:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	3b01      	subs	r3, #1
 8001434:	051a      	lsls	r2, r3, #20
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	430a      	orrs	r2, r1
 800143c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	689a      	ldr	r2, [r3, #8]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800144c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	6899      	ldr	r1, [r3, #8]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800145a:	025a      	lsls	r2, r3, #9
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	430a      	orrs	r2, r1
 8001462:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	689a      	ldr	r2, [r3, #8]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001472:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6899      	ldr	r1, [r3, #8]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	029a      	lsls	r2, r3, #10
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	430a      	orrs	r2, r1
 8001486:	609a      	str	r2, [r3, #8]
}
 8001488:	bf00      	nop
 800148a:	3714      	adds	r7, #20
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	40012300 	.word	0x40012300
 8001498:	0f000001 	.word	0x0f000001

0800149c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014a8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d13c      	bne.n	8001530 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d12b      	bne.n	8001528 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d127      	bne.n	8001528 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014de:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d006      	beq.n	80014f4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d119      	bne.n	8001528 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	685a      	ldr	r2, [r3, #4]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f022 0220 	bic.w	r2, r2, #32
 8001502:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001508:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001514:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d105      	bne.n	8001528 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001520:	f043 0201 	orr.w	r2, r3, #1
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001528:	68f8      	ldr	r0, [r7, #12]
 800152a:	f7fe ffcd 	bl	80004c8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800152e:	e00e      	b.n	800154e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	f003 0310 	and.w	r3, r3, #16
 8001538:	2b00      	cmp	r3, #0
 800153a:	d003      	beq.n	8001544 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800153c:	68f8      	ldr	r0, [r7, #12]
 800153e:	f7ff fd85 	bl	800104c <HAL_ADC_ErrorCallback>
}
 8001542:	e004      	b.n	800154e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	4798      	blx	r3
}
 800154e:	bf00      	nop
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b084      	sub	sp, #16
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001562:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001564:	68f8      	ldr	r0, [r7, #12]
 8001566:	f7ff fd67 	bl	8001038 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b084      	sub	sp, #16
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800157e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	2240      	movs	r2, #64	; 0x40
 8001584:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158a:	f043 0204 	orr.w	r2, r3, #4
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001592:	68f8      	ldr	r0, [r7, #12]
 8001594:	f7ff fd5a 	bl	800104c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001598:	bf00      	nop
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b0:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <__NVIC_SetPriorityGrouping+0x44>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015b6:	68ba      	ldr	r2, [r7, #8]
 80015b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015bc:	4013      	ands	r3, r2
 80015be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015d2:	4a04      	ldr	r2, [pc, #16]	; (80015e4 <__NVIC_SetPriorityGrouping+0x44>)
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	60d3      	str	r3, [r2, #12]
}
 80015d8:	bf00      	nop
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015ec:	4b04      	ldr	r3, [pc, #16]	; (8001600 <__NVIC_GetPriorityGrouping+0x18>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	0a1b      	lsrs	r3, r3, #8
 80015f2:	f003 0307 	and.w	r3, r3, #7
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	2b00      	cmp	r3, #0
 8001614:	db0b      	blt.n	800162e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	f003 021f 	and.w	r2, r3, #31
 800161c:	4907      	ldr	r1, [pc, #28]	; (800163c <__NVIC_EnableIRQ+0x38>)
 800161e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001622:	095b      	lsrs	r3, r3, #5
 8001624:	2001      	movs	r0, #1
 8001626:	fa00 f202 	lsl.w	r2, r0, r2
 800162a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	e000e100 	.word	0xe000e100

08001640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	6039      	str	r1, [r7, #0]
 800164a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001650:	2b00      	cmp	r3, #0
 8001652:	db0a      	blt.n	800166a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	b2da      	uxtb	r2, r3
 8001658:	490c      	ldr	r1, [pc, #48]	; (800168c <__NVIC_SetPriority+0x4c>)
 800165a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165e:	0112      	lsls	r2, r2, #4
 8001660:	b2d2      	uxtb	r2, r2
 8001662:	440b      	add	r3, r1
 8001664:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001668:	e00a      	b.n	8001680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	b2da      	uxtb	r2, r3
 800166e:	4908      	ldr	r1, [pc, #32]	; (8001690 <__NVIC_SetPriority+0x50>)
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	f003 030f 	and.w	r3, r3, #15
 8001676:	3b04      	subs	r3, #4
 8001678:	0112      	lsls	r2, r2, #4
 800167a:	b2d2      	uxtb	r2, r2
 800167c:	440b      	add	r3, r1
 800167e:	761a      	strb	r2, [r3, #24]
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	e000e100 	.word	0xe000e100
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001694:	b480      	push	{r7}
 8001696:	b089      	sub	sp, #36	; 0x24
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	f1c3 0307 	rsb	r3, r3, #7
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	bf28      	it	cs
 80016b2:	2304      	movcs	r3, #4
 80016b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	3304      	adds	r3, #4
 80016ba:	2b06      	cmp	r3, #6
 80016bc:	d902      	bls.n	80016c4 <NVIC_EncodePriority+0x30>
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	3b03      	subs	r3, #3
 80016c2:	e000      	b.n	80016c6 <NVIC_EncodePriority+0x32>
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c8:	f04f 32ff 	mov.w	r2, #4294967295
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43da      	mvns	r2, r3
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	401a      	ands	r2, r3
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016dc:	f04f 31ff 	mov.w	r1, #4294967295
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	fa01 f303 	lsl.w	r3, r1, r3
 80016e6:	43d9      	mvns	r1, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ec:	4313      	orrs	r3, r2
         );
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3724      	adds	r7, #36	; 0x24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
	...

080016fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3b01      	subs	r3, #1
 8001708:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800170c:	d301      	bcc.n	8001712 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800170e:	2301      	movs	r3, #1
 8001710:	e00f      	b.n	8001732 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001712:	4a0a      	ldr	r2, [pc, #40]	; (800173c <SysTick_Config+0x40>)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3b01      	subs	r3, #1
 8001718:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800171a:	210f      	movs	r1, #15
 800171c:	f04f 30ff 	mov.w	r0, #4294967295
 8001720:	f7ff ff8e 	bl	8001640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001724:	4b05      	ldr	r3, [pc, #20]	; (800173c <SysTick_Config+0x40>)
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800172a:	4b04      	ldr	r3, [pc, #16]	; (800173c <SysTick_Config+0x40>)
 800172c:	2207      	movs	r2, #7
 800172e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	e000e010 	.word	0xe000e010

08001740 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff ff29 	bl	80015a0 <__NVIC_SetPriorityGrouping>
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001756:	b580      	push	{r7, lr}
 8001758:	b086      	sub	sp, #24
 800175a:	af00      	add	r7, sp, #0
 800175c:	4603      	mov	r3, r0
 800175e:	60b9      	str	r1, [r7, #8]
 8001760:	607a      	str	r2, [r7, #4]
 8001762:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001768:	f7ff ff3e 	bl	80015e8 <__NVIC_GetPriorityGrouping>
 800176c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	68b9      	ldr	r1, [r7, #8]
 8001772:	6978      	ldr	r0, [r7, #20]
 8001774:	f7ff ff8e 	bl	8001694 <NVIC_EncodePriority>
 8001778:	4602      	mov	r2, r0
 800177a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800177e:	4611      	mov	r1, r2
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff ff5d 	bl	8001640 <__NVIC_SetPriority>
}
 8001786:	bf00      	nop
 8001788:	3718      	adds	r7, #24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	4603      	mov	r3, r0
 8001796:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff ff31 	bl	8001604 <__NVIC_EnableIRQ>
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b082      	sub	sp, #8
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f7ff ffa2 	bl	80016fc <SysTick_Config>
 80017b8:	4603      	mov	r3, r0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80017d0:	f7ff face 	bl	8000d70 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d101      	bne.n	80017e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e099      	b.n	8001914 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2202      	movs	r2, #2
 80017ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f022 0201 	bic.w	r2, r2, #1
 80017fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001800:	e00f      	b.n	8001822 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001802:	f7ff fab5 	bl	8000d70 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b05      	cmp	r3, #5
 800180e:	d908      	bls.n	8001822 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2220      	movs	r2, #32
 8001814:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2203      	movs	r2, #3
 800181a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e078      	b.n	8001914 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1e8      	bne.n	8001802 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	4b38      	ldr	r3, [pc, #224]	; (800191c <HAL_DMA_Init+0x158>)
 800183c:	4013      	ands	r3, r2
 800183e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685a      	ldr	r2, [r3, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800184e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800185a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001866:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800186e:	697a      	ldr	r2, [r7, #20]
 8001870:	4313      	orrs	r3, r2
 8001872:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001878:	2b04      	cmp	r3, #4
 800187a:	d107      	bne.n	800188c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001884:	4313      	orrs	r3, r2
 8001886:	697a      	ldr	r2, [r7, #20]
 8001888:	4313      	orrs	r3, r2
 800188a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	f023 0307 	bic.w	r3, r3, #7
 80018a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a8:	697a      	ldr	r2, [r7, #20]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	d117      	bne.n	80018e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ba:	697a      	ldr	r2, [r7, #20]
 80018bc:	4313      	orrs	r3, r2
 80018be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d00e      	beq.n	80018e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f000 fa6f 	bl	8001dac <DMA_CheckFifoParam>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d008      	beq.n	80018e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2240      	movs	r2, #64	; 0x40
 80018d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2201      	movs	r2, #1
 80018de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80018e2:	2301      	movs	r3, #1
 80018e4:	e016      	b.n	8001914 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	697a      	ldr	r2, [r7, #20]
 80018ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 fa26 	bl	8001d40 <DMA_CalcBaseAndBitshift>
 80018f4:	4603      	mov	r3, r0
 80018f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018fc:	223f      	movs	r2, #63	; 0x3f
 80018fe:	409a      	lsls	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2201      	movs	r2, #1
 800190e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3718      	adds	r7, #24
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	f010803f 	.word	0xf010803f

08001920 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
 800192c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800192e:	2300      	movs	r3, #0
 8001930:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001936:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800193e:	2b01      	cmp	r3, #1
 8001940:	d101      	bne.n	8001946 <HAL_DMA_Start_IT+0x26>
 8001942:	2302      	movs	r3, #2
 8001944:	e040      	b.n	80019c8 <HAL_DMA_Start_IT+0xa8>
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2201      	movs	r2, #1
 800194a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b01      	cmp	r3, #1
 8001958:	d12f      	bne.n	80019ba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2202      	movs	r2, #2
 800195e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2200      	movs	r2, #0
 8001966:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	68b9      	ldr	r1, [r7, #8]
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	f000 f9b8 	bl	8001ce4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001978:	223f      	movs	r2, #63	; 0x3f
 800197a:	409a      	lsls	r2, r3
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f042 0216 	orr.w	r2, r2, #22
 800198e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001994:	2b00      	cmp	r3, #0
 8001996:	d007      	beq.n	80019a8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f042 0208 	orr.w	r2, r2, #8
 80019a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f042 0201 	orr.w	r2, r2, #1
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	e005      	b.n	80019c6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80019c2:	2302      	movs	r3, #2
 80019c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80019c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3718      	adds	r7, #24
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80019d8:	2300      	movs	r3, #0
 80019da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80019dc:	4b92      	ldr	r3, [pc, #584]	; (8001c28 <HAL_DMA_IRQHandler+0x258>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a92      	ldr	r2, [pc, #584]	; (8001c2c <HAL_DMA_IRQHandler+0x25c>)
 80019e2:	fba2 2303 	umull	r2, r3, r2, r3
 80019e6:	0a9b      	lsrs	r3, r3, #10
 80019e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019fa:	2208      	movs	r2, #8
 80019fc:	409a      	lsls	r2, r3
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	4013      	ands	r3, r2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d01a      	beq.n	8001a3c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d013      	beq.n	8001a3c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f022 0204 	bic.w	r2, r2, #4
 8001a22:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a28:	2208      	movs	r2, #8
 8001a2a:	409a      	lsls	r2, r3
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a34:	f043 0201 	orr.w	r2, r3, #1
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a40:	2201      	movs	r2, #1
 8001a42:	409a      	lsls	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	4013      	ands	r3, r2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d012      	beq.n	8001a72 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00b      	beq.n	8001a72 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a5e:	2201      	movs	r2, #1
 8001a60:	409a      	lsls	r2, r3
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a6a:	f043 0202 	orr.w	r2, r3, #2
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a76:	2204      	movs	r2, #4
 8001a78:	409a      	lsls	r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d012      	beq.n	8001aa8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d00b      	beq.n	8001aa8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a94:	2204      	movs	r2, #4
 8001a96:	409a      	lsls	r2, r3
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aa0:	f043 0204 	orr.w	r2, r3, #4
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aac:	2210      	movs	r2, #16
 8001aae:	409a      	lsls	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d043      	beq.n	8001b40 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0308 	and.w	r3, r3, #8
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d03c      	beq.n	8001b40 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aca:	2210      	movs	r2, #16
 8001acc:	409a      	lsls	r2, r3
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d018      	beq.n	8001b12 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d108      	bne.n	8001b00 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d024      	beq.n	8001b40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	4798      	blx	r3
 8001afe:	e01f      	b.n	8001b40 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d01b      	beq.n	8001b40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	4798      	blx	r3
 8001b10:	e016      	b.n	8001b40 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d107      	bne.n	8001b30 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 0208 	bic.w	r2, r2, #8
 8001b2e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d003      	beq.n	8001b40 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b44:	2220      	movs	r2, #32
 8001b46:	409a      	lsls	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f000 808e 	beq.w	8001c6e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0310 	and.w	r3, r3, #16
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f000 8086 	beq.w	8001c6e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b66:	2220      	movs	r2, #32
 8001b68:	409a      	lsls	r2, r3
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b05      	cmp	r3, #5
 8001b78:	d136      	bne.n	8001be8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f022 0216 	bic.w	r2, r2, #22
 8001b88:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	695a      	ldr	r2, [r3, #20]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b98:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d103      	bne.n	8001baa <HAL_DMA_IRQHandler+0x1da>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d007      	beq.n	8001bba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 0208 	bic.w	r2, r2, #8
 8001bb8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bbe:	223f      	movs	r2, #63	; 0x3f
 8001bc0:	409a      	lsls	r2, r3
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d07d      	beq.n	8001cda <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	4798      	blx	r3
        }
        return;
 8001be6:	e078      	b.n	8001cda <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d01c      	beq.n	8001c30 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d108      	bne.n	8001c16 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d030      	beq.n	8001c6e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	4798      	blx	r3
 8001c14:	e02b      	b.n	8001c6e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d027      	beq.n	8001c6e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	4798      	blx	r3
 8001c26:	e022      	b.n	8001c6e <HAL_DMA_IRQHandler+0x29e>
 8001c28:	20000000 	.word	0x20000000
 8001c2c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d10f      	bne.n	8001c5e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f022 0210 	bic.w	r2, r2, #16
 8001c4c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d032      	beq.n	8001cdc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d022      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2205      	movs	r2, #5
 8001c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f022 0201 	bic.w	r2, r2, #1
 8001c98:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	60bb      	str	r3, [r7, #8]
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d307      	bcc.n	8001cb6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1f2      	bne.n	8001c9a <HAL_DMA_IRQHandler+0x2ca>
 8001cb4:	e000      	b.n	8001cb8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001cb6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d005      	beq.n	8001cdc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	4798      	blx	r3
 8001cd8:	e000      	b.n	8001cdc <HAL_DMA_IRQHandler+0x30c>
        return;
 8001cda:	bf00      	nop
    }
  }
}
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop

08001ce4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
 8001cf0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d00:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	2b40      	cmp	r3, #64	; 0x40
 8001d10:	d108      	bne.n	8001d24 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001d22:	e007      	b.n	8001d34 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68ba      	ldr	r2, [r7, #8]
 8001d2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	60da      	str	r2, [r3, #12]
}
 8001d34:	bf00      	nop
 8001d36:	3714      	adds	r7, #20
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	3b10      	subs	r3, #16
 8001d50:	4a14      	ldr	r2, [pc, #80]	; (8001da4 <DMA_CalcBaseAndBitshift+0x64>)
 8001d52:	fba2 2303 	umull	r2, r3, r2, r3
 8001d56:	091b      	lsrs	r3, r3, #4
 8001d58:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d5a:	4a13      	ldr	r2, [pc, #76]	; (8001da8 <DMA_CalcBaseAndBitshift+0x68>)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	4413      	add	r3, r2
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	461a      	mov	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2b03      	cmp	r3, #3
 8001d6c:	d909      	bls.n	8001d82 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d76:	f023 0303 	bic.w	r3, r3, #3
 8001d7a:	1d1a      	adds	r2, r3, #4
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	659a      	str	r2, [r3, #88]	; 0x58
 8001d80:	e007      	b.n	8001d92 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d8a:	f023 0303 	bic.w	r3, r3, #3
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3714      	adds	r7, #20
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	aaaaaaab 	.word	0xaaaaaaab
 8001da8:	0800811c 	.word	0x0800811c

08001dac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001db4:	2300      	movs	r3, #0
 8001db6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dbc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d11f      	bne.n	8001e06 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	2b03      	cmp	r3, #3
 8001dca:	d855      	bhi.n	8001e78 <DMA_CheckFifoParam+0xcc>
 8001dcc:	a201      	add	r2, pc, #4	; (adr r2, 8001dd4 <DMA_CheckFifoParam+0x28>)
 8001dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd2:	bf00      	nop
 8001dd4:	08001de5 	.word	0x08001de5
 8001dd8:	08001df7 	.word	0x08001df7
 8001ddc:	08001de5 	.word	0x08001de5
 8001de0:	08001e79 	.word	0x08001e79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d045      	beq.n	8001e7c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001df4:	e042      	b.n	8001e7c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001dfe:	d13f      	bne.n	8001e80 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e04:	e03c      	b.n	8001e80 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e0e:	d121      	bne.n	8001e54 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	2b03      	cmp	r3, #3
 8001e14:	d836      	bhi.n	8001e84 <DMA_CheckFifoParam+0xd8>
 8001e16:	a201      	add	r2, pc, #4	; (adr r2, 8001e1c <DMA_CheckFifoParam+0x70>)
 8001e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e1c:	08001e2d 	.word	0x08001e2d
 8001e20:	08001e33 	.word	0x08001e33
 8001e24:	08001e2d 	.word	0x08001e2d
 8001e28:	08001e45 	.word	0x08001e45
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	73fb      	strb	r3, [r7, #15]
      break;
 8001e30:	e02f      	b.n	8001e92 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d024      	beq.n	8001e88 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e42:	e021      	b.n	8001e88 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e48:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e4c:	d11e      	bne.n	8001e8c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e52:	e01b      	b.n	8001e8c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d902      	bls.n	8001e60 <DMA_CheckFifoParam+0xb4>
 8001e5a:	2b03      	cmp	r3, #3
 8001e5c:	d003      	beq.n	8001e66 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e5e:	e018      	b.n	8001e92 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	73fb      	strb	r3, [r7, #15]
      break;
 8001e64:	e015      	b.n	8001e92 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00e      	beq.n	8001e90 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	73fb      	strb	r3, [r7, #15]
      break;
 8001e76:	e00b      	b.n	8001e90 <DMA_CheckFifoParam+0xe4>
      break;
 8001e78:	bf00      	nop
 8001e7a:	e00a      	b.n	8001e92 <DMA_CheckFifoParam+0xe6>
      break;
 8001e7c:	bf00      	nop
 8001e7e:	e008      	b.n	8001e92 <DMA_CheckFifoParam+0xe6>
      break;
 8001e80:	bf00      	nop
 8001e82:	e006      	b.n	8001e92 <DMA_CheckFifoParam+0xe6>
      break;
 8001e84:	bf00      	nop
 8001e86:	e004      	b.n	8001e92 <DMA_CheckFifoParam+0xe6>
      break;
 8001e88:	bf00      	nop
 8001e8a:	e002      	b.n	8001e92 <DMA_CheckFifoParam+0xe6>
      break;   
 8001e8c:	bf00      	nop
 8001e8e:	e000      	b.n	8001e92 <DMA_CheckFifoParam+0xe6>
      break;
 8001e90:	bf00      	nop
    }
  } 
  
  return status; 
 8001e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3714      	adds	r7, #20
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b089      	sub	sp, #36	; 0x24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61fb      	str	r3, [r7, #28]
 8001eba:	e16b      	b.n	8002194 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	f040 815a 	bne.w	800218e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d00b      	beq.n	8001efa <HAL_GPIO_Init+0x5a>
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d007      	beq.n	8001efa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001eee:	2b11      	cmp	r3, #17
 8001ef0:	d003      	beq.n	8001efa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b12      	cmp	r3, #18
 8001ef8:	d130      	bne.n	8001f5c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	2203      	movs	r2, #3
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	68da      	ldr	r2, [r3, #12]
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f30:	2201      	movs	r2, #1
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	091b      	lsrs	r3, r3, #4
 8001f46:	f003 0201 	and.w	r2, r3, #1
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	2203      	movs	r2, #3
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4013      	ands	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d003      	beq.n	8001f9c <HAL_GPIO_Init+0xfc>
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	2b12      	cmp	r3, #18
 8001f9a:	d123      	bne.n	8001fe4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	08da      	lsrs	r2, r3, #3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3208      	adds	r2, #8
 8001fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	220f      	movs	r2, #15
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	691a      	ldr	r2, [r3, #16]
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	08da      	lsrs	r2, r3, #3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	3208      	adds	r2, #8
 8001fde:	69b9      	ldr	r1, [r7, #24]
 8001fe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	2203      	movs	r2, #3
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 0203 	and.w	r2, r3, #3
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	4313      	orrs	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 80b4 	beq.w	800218e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	4b5f      	ldr	r3, [pc, #380]	; (80021a8 <HAL_GPIO_Init+0x308>)
 800202c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202e:	4a5e      	ldr	r2, [pc, #376]	; (80021a8 <HAL_GPIO_Init+0x308>)
 8002030:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002034:	6453      	str	r3, [r2, #68]	; 0x44
 8002036:	4b5c      	ldr	r3, [pc, #368]	; (80021a8 <HAL_GPIO_Init+0x308>)
 8002038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002042:	4a5a      	ldr	r2, [pc, #360]	; (80021ac <HAL_GPIO_Init+0x30c>)
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	089b      	lsrs	r3, r3, #2
 8002048:	3302      	adds	r3, #2
 800204a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800204e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	220f      	movs	r2, #15
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43db      	mvns	r3, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4013      	ands	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a51      	ldr	r2, [pc, #324]	; (80021b0 <HAL_GPIO_Init+0x310>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d02b      	beq.n	80020c6 <HAL_GPIO_Init+0x226>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a50      	ldr	r2, [pc, #320]	; (80021b4 <HAL_GPIO_Init+0x314>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d025      	beq.n	80020c2 <HAL_GPIO_Init+0x222>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a4f      	ldr	r2, [pc, #316]	; (80021b8 <HAL_GPIO_Init+0x318>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d01f      	beq.n	80020be <HAL_GPIO_Init+0x21e>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a4e      	ldr	r2, [pc, #312]	; (80021bc <HAL_GPIO_Init+0x31c>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d019      	beq.n	80020ba <HAL_GPIO_Init+0x21a>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a4d      	ldr	r2, [pc, #308]	; (80021c0 <HAL_GPIO_Init+0x320>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d013      	beq.n	80020b6 <HAL_GPIO_Init+0x216>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a4c      	ldr	r2, [pc, #304]	; (80021c4 <HAL_GPIO_Init+0x324>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d00d      	beq.n	80020b2 <HAL_GPIO_Init+0x212>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a4b      	ldr	r2, [pc, #300]	; (80021c8 <HAL_GPIO_Init+0x328>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d007      	beq.n	80020ae <HAL_GPIO_Init+0x20e>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a4a      	ldr	r2, [pc, #296]	; (80021cc <HAL_GPIO_Init+0x32c>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d101      	bne.n	80020aa <HAL_GPIO_Init+0x20a>
 80020a6:	2307      	movs	r3, #7
 80020a8:	e00e      	b.n	80020c8 <HAL_GPIO_Init+0x228>
 80020aa:	2308      	movs	r3, #8
 80020ac:	e00c      	b.n	80020c8 <HAL_GPIO_Init+0x228>
 80020ae:	2306      	movs	r3, #6
 80020b0:	e00a      	b.n	80020c8 <HAL_GPIO_Init+0x228>
 80020b2:	2305      	movs	r3, #5
 80020b4:	e008      	b.n	80020c8 <HAL_GPIO_Init+0x228>
 80020b6:	2304      	movs	r3, #4
 80020b8:	e006      	b.n	80020c8 <HAL_GPIO_Init+0x228>
 80020ba:	2303      	movs	r3, #3
 80020bc:	e004      	b.n	80020c8 <HAL_GPIO_Init+0x228>
 80020be:	2302      	movs	r3, #2
 80020c0:	e002      	b.n	80020c8 <HAL_GPIO_Init+0x228>
 80020c2:	2301      	movs	r3, #1
 80020c4:	e000      	b.n	80020c8 <HAL_GPIO_Init+0x228>
 80020c6:	2300      	movs	r3, #0
 80020c8:	69fa      	ldr	r2, [r7, #28]
 80020ca:	f002 0203 	and.w	r2, r2, #3
 80020ce:	0092      	lsls	r2, r2, #2
 80020d0:	4093      	lsls	r3, r2
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020d8:	4934      	ldr	r1, [pc, #208]	; (80021ac <HAL_GPIO_Init+0x30c>)
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	089b      	lsrs	r3, r3, #2
 80020de:	3302      	adds	r3, #2
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020e6:	4b3a      	ldr	r3, [pc, #232]	; (80021d0 <HAL_GPIO_Init+0x330>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	43db      	mvns	r3, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4013      	ands	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	4313      	orrs	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800210a:	4a31      	ldr	r2, [pc, #196]	; (80021d0 <HAL_GPIO_Init+0x330>)
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002110:	4b2f      	ldr	r3, [pc, #188]	; (80021d0 <HAL_GPIO_Init+0x330>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	43db      	mvns	r3, r3
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4013      	ands	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	4313      	orrs	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002134:	4a26      	ldr	r2, [pc, #152]	; (80021d0 <HAL_GPIO_Init+0x330>)
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800213a:	4b25      	ldr	r3, [pc, #148]	; (80021d0 <HAL_GPIO_Init+0x330>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	43db      	mvns	r3, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4013      	ands	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	4313      	orrs	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800215e:	4a1c      	ldr	r2, [pc, #112]	; (80021d0 <HAL_GPIO_Init+0x330>)
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002164:	4b1a      	ldr	r3, [pc, #104]	; (80021d0 <HAL_GPIO_Init+0x330>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	43db      	mvns	r3, r3
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4013      	ands	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d003      	beq.n	8002188 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	4313      	orrs	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002188:	4a11      	ldr	r2, [pc, #68]	; (80021d0 <HAL_GPIO_Init+0x330>)
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	3301      	adds	r3, #1
 8002192:	61fb      	str	r3, [r7, #28]
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	2b0f      	cmp	r3, #15
 8002198:	f67f ae90 	bls.w	8001ebc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800219c:	bf00      	nop
 800219e:	3724      	adds	r7, #36	; 0x24
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	40023800 	.word	0x40023800
 80021ac:	40013800 	.word	0x40013800
 80021b0:	40020000 	.word	0x40020000
 80021b4:	40020400 	.word	0x40020400
 80021b8:	40020800 	.word	0x40020800
 80021bc:	40020c00 	.word	0x40020c00
 80021c0:	40021000 	.word	0x40021000
 80021c4:	40021400 	.word	0x40021400
 80021c8:	40021800 	.word	0x40021800
 80021cc:	40021c00 	.word	0x40021c00
 80021d0:	40013c00 	.word	0x40013c00

080021d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	460b      	mov	r3, r1
 80021de:	807b      	strh	r3, [r7, #2]
 80021e0:	4613      	mov	r3, r2
 80021e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021e4:	787b      	ldrb	r3, [r7, #1]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d003      	beq.n	80021f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ea:	887a      	ldrh	r2, [r7, #2]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021f0:	e003      	b.n	80021fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021f2:	887b      	ldrh	r3, [r7, #2]
 80021f4:	041a      	lsls	r2, r3, #16
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	619a      	str	r2, [r3, #24]
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002206:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002208:	b08f      	sub	sp, #60	; 0x3c
 800220a:	af0a      	add	r7, sp, #40	; 0x28
 800220c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e10f      	b.n	8002438 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d106      	bne.n	8002238 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f005 fb1c 	bl	8007870 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2203      	movs	r2, #3
 800223c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002248:	2b00      	cmp	r3, #0
 800224a:	d102      	bne.n	8002252 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f002 fa99 	bl	800478e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	603b      	str	r3, [r7, #0]
 8002262:	687e      	ldr	r6, [r7, #4]
 8002264:	466d      	mov	r5, sp
 8002266:	f106 0410 	add.w	r4, r6, #16
 800226a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800226c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800226e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002270:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002272:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002276:	e885 0003 	stmia.w	r5, {r0, r1}
 800227a:	1d33      	adds	r3, r6, #4
 800227c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800227e:	6838      	ldr	r0, [r7, #0]
 8002280:	f002 f970 	bl	8004564 <USB_CoreInit>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d005      	beq.n	8002296 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2202      	movs	r2, #2
 800228e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e0d0      	b.n	8002438 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2100      	movs	r1, #0
 800229c:	4618      	mov	r0, r3
 800229e:	f002 fa87 	bl	80047b0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022a2:	2300      	movs	r3, #0
 80022a4:	73fb      	strb	r3, [r7, #15]
 80022a6:	e04a      	b.n	800233e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022a8:	7bfa      	ldrb	r2, [r7, #15]
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	4613      	mov	r3, r2
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	1a9b      	subs	r3, r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	440b      	add	r3, r1
 80022b6:	333d      	adds	r3, #61	; 0x3d
 80022b8:	2201      	movs	r2, #1
 80022ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022bc:	7bfa      	ldrb	r2, [r7, #15]
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	4613      	mov	r3, r2
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	1a9b      	subs	r3, r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	440b      	add	r3, r1
 80022ca:	333c      	adds	r3, #60	; 0x3c
 80022cc:	7bfa      	ldrb	r2, [r7, #15]
 80022ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022d0:	7bfa      	ldrb	r2, [r7, #15]
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
 80022d4:	b298      	uxth	r0, r3
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	4613      	mov	r3, r2
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	1a9b      	subs	r3, r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	440b      	add	r3, r1
 80022e2:	3342      	adds	r3, #66	; 0x42
 80022e4:	4602      	mov	r2, r0
 80022e6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022e8:	7bfa      	ldrb	r2, [r7, #15]
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	4613      	mov	r3, r2
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	1a9b      	subs	r3, r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	440b      	add	r3, r1
 80022f6:	333f      	adds	r3, #63	; 0x3f
 80022f8:	2200      	movs	r2, #0
 80022fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022fc:	7bfa      	ldrb	r2, [r7, #15]
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	4613      	mov	r3, r2
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	1a9b      	subs	r3, r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	440b      	add	r3, r1
 800230a:	3344      	adds	r3, #68	; 0x44
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002310:	7bfa      	ldrb	r2, [r7, #15]
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	4613      	mov	r3, r2
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	1a9b      	subs	r3, r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	440b      	add	r3, r1
 800231e:	3348      	adds	r3, #72	; 0x48
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002324:	7bfa      	ldrb	r2, [r7, #15]
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	4613      	mov	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	1a9b      	subs	r3, r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	3350      	adds	r3, #80	; 0x50
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002338:	7bfb      	ldrb	r3, [r7, #15]
 800233a:	3301      	adds	r3, #1
 800233c:	73fb      	strb	r3, [r7, #15]
 800233e:	7bfa      	ldrb	r2, [r7, #15]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	429a      	cmp	r2, r3
 8002346:	d3af      	bcc.n	80022a8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002348:	2300      	movs	r3, #0
 800234a:	73fb      	strb	r3, [r7, #15]
 800234c:	e044      	b.n	80023d8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800234e:	7bfa      	ldrb	r2, [r7, #15]
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	4613      	mov	r3, r2
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	1a9b      	subs	r3, r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	440b      	add	r3, r1
 800235c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002360:	2200      	movs	r2, #0
 8002362:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002364:	7bfa      	ldrb	r2, [r7, #15]
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	4613      	mov	r3, r2
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	1a9b      	subs	r3, r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	440b      	add	r3, r1
 8002372:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002376:	7bfa      	ldrb	r2, [r7, #15]
 8002378:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800237a:	7bfa      	ldrb	r2, [r7, #15]
 800237c:	6879      	ldr	r1, [r7, #4]
 800237e:	4613      	mov	r3, r2
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	1a9b      	subs	r3, r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	440b      	add	r3, r1
 8002388:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800238c:	2200      	movs	r2, #0
 800238e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002390:	7bfa      	ldrb	r2, [r7, #15]
 8002392:	6879      	ldr	r1, [r7, #4]
 8002394:	4613      	mov	r3, r2
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	1a9b      	subs	r3, r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	440b      	add	r3, r1
 800239e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023a6:	7bfa      	ldrb	r2, [r7, #15]
 80023a8:	6879      	ldr	r1, [r7, #4]
 80023aa:	4613      	mov	r3, r2
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	1a9b      	subs	r3, r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	440b      	add	r3, r1
 80023b4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023bc:	7bfa      	ldrb	r2, [r7, #15]
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	4613      	mov	r3, r2
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	1a9b      	subs	r3, r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	440b      	add	r3, r1
 80023ca:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80023ce:	2200      	movs	r2, #0
 80023d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023d2:	7bfb      	ldrb	r3, [r7, #15]
 80023d4:	3301      	adds	r3, #1
 80023d6:	73fb      	strb	r3, [r7, #15]
 80023d8:	7bfa      	ldrb	r2, [r7, #15]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d3b5      	bcc.n	800234e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	603b      	str	r3, [r7, #0]
 80023e8:	687e      	ldr	r6, [r7, #4]
 80023ea:	466d      	mov	r5, sp
 80023ec:	f106 0410 	add.w	r4, r6, #16
 80023f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8002400:	1d33      	adds	r3, r6, #4
 8002402:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002404:	6838      	ldr	r0, [r7, #0]
 8002406:	f002 f9fd 	bl	8004804 <USB_DevInit>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d005      	beq.n	800241c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2202      	movs	r2, #2
 8002414:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e00d      	b.n	8002438 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f003 fa45 	bl	80058c0 <USB_DevDisconnect>

  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3714      	adds	r7, #20
 800243c:	46bd      	mov	sp, r7
 800243e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002440 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002454:	2b01      	cmp	r3, #1
 8002456:	d101      	bne.n	800245c <HAL_PCD_Start+0x1c>
 8002458:	2302      	movs	r3, #2
 800245a:	e020      	b.n	800249e <HAL_PCD_Start+0x5e>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002468:	2b01      	cmp	r3, #1
 800246a:	d109      	bne.n	8002480 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002470:	2b01      	cmp	r3, #1
 8002472:	d005      	beq.n	8002480 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002478:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f002 f971 	bl	800476c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f003 f9f5 	bl	800587e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80024a6:	b590      	push	{r4, r7, lr}
 80024a8:	b08d      	sub	sp, #52	; 0x34
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024b4:	6a3b      	ldr	r3, [r7, #32]
 80024b6:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4618      	mov	r0, r3
 80024be:	f003 fab3 	bl	8005a28 <USB_GetMode>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f040 839d 	bne.w	8002c04 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f003 fa17 	bl	8005902 <USB_ReadInterrupts>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f000 8393 	beq.w	8002c02 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f003 fa0e 	bl	8005902 <USB_ReadInterrupts>
 80024e6:	4603      	mov	r3, r0
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d107      	bne.n	8002500 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	695a      	ldr	r2, [r3, #20]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f002 0202 	and.w	r2, r2, #2
 80024fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f003 f9fc 	bl	8005902 <USB_ReadInterrupts>
 800250a:	4603      	mov	r3, r0
 800250c:	f003 0310 	and.w	r3, r3, #16
 8002510:	2b10      	cmp	r3, #16
 8002512:	d161      	bne.n	80025d8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	699a      	ldr	r2, [r3, #24]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 0210 	bic.w	r2, r2, #16
 8002522:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002524:	6a3b      	ldr	r3, [r7, #32]
 8002526:	6a1b      	ldr	r3, [r3, #32]
 8002528:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	f003 020f 	and.w	r2, r3, #15
 8002530:	4613      	mov	r3, r2
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	1a9b      	subs	r3, r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	4413      	add	r3, r2
 8002540:	3304      	adds	r3, #4
 8002542:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	0c5b      	lsrs	r3, r3, #17
 8002548:	f003 030f 	and.w	r3, r3, #15
 800254c:	2b02      	cmp	r3, #2
 800254e:	d124      	bne.n	800259a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002556:	4013      	ands	r3, r2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d035      	beq.n	80025c8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	091b      	lsrs	r3, r3, #4
 8002564:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002566:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800256a:	b29b      	uxth	r3, r3
 800256c:	461a      	mov	r2, r3
 800256e:	6a38      	ldr	r0, [r7, #32]
 8002570:	f003 f862 	bl	8005638 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	68da      	ldr	r2, [r3, #12]
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	091b      	lsrs	r3, r3, #4
 800257c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002580:	441a      	add	r2, r3
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	699a      	ldr	r2, [r3, #24]
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	091b      	lsrs	r3, r3, #4
 800258e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002592:	441a      	add	r2, r3
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	619a      	str	r2, [r3, #24]
 8002598:	e016      	b.n	80025c8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	0c5b      	lsrs	r3, r3, #17
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	2b06      	cmp	r3, #6
 80025a4:	d110      	bne.n	80025c8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80025ac:	2208      	movs	r2, #8
 80025ae:	4619      	mov	r1, r3
 80025b0:	6a38      	ldr	r0, [r7, #32]
 80025b2:	f003 f841 	bl	8005638 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	699a      	ldr	r2, [r3, #24]
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	091b      	lsrs	r3, r3, #4
 80025be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025c2:	441a      	add	r2, r3
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	699a      	ldr	r2, [r3, #24]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f042 0210 	orr.w	r2, r2, #16
 80025d6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	f003 f990 	bl	8005902 <USB_ReadInterrupts>
 80025e2:	4603      	mov	r3, r0
 80025e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025e8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80025ec:	d16e      	bne.n	80026cc <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f003 f996 	bl	8005928 <USB_ReadDevAllOutEpInterrupt>
 80025fc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80025fe:	e062      	b.n	80026c6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b00      	cmp	r3, #0
 8002608:	d057      	beq.n	80026ba <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	4611      	mov	r1, r2
 8002614:	4618      	mov	r0, r3
 8002616:	f003 f9bb 	bl	8005990 <USB_ReadDevOutEPInterrupt>
 800261a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00c      	beq.n	8002640 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	015a      	lsls	r2, r3, #5
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	4413      	add	r3, r2
 800262e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002632:	461a      	mov	r2, r3
 8002634:	2301      	movs	r3, #1
 8002636:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002638:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 fdb0 	bl	80031a0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	f003 0308 	and.w	r3, r3, #8
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00c      	beq.n	8002664 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	015a      	lsls	r2, r3, #5
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	4413      	add	r3, r2
 8002652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002656:	461a      	mov	r2, r3
 8002658:	2308      	movs	r3, #8
 800265a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800265c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 feaa 	bl	80033b8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	f003 0310 	and.w	r3, r3, #16
 800266a:	2b00      	cmp	r3, #0
 800266c:	d008      	beq.n	8002680 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	015a      	lsls	r2, r3, #5
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	4413      	add	r3, r2
 8002676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800267a:	461a      	mov	r2, r3
 800267c:	2310      	movs	r3, #16
 800267e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	f003 0320 	and.w	r3, r3, #32
 8002686:	2b00      	cmp	r3, #0
 8002688:	d008      	beq.n	800269c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	015a      	lsls	r2, r3, #5
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	4413      	add	r3, r2
 8002692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002696:	461a      	mov	r2, r3
 8002698:	2320      	movs	r3, #32
 800269a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d009      	beq.n	80026ba <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	015a      	lsls	r2, r3, #5
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	4413      	add	r3, r2
 80026ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026b2:	461a      	mov	r2, r3
 80026b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026b8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80026ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026bc:	3301      	adds	r3, #1
 80026be:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80026c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c2:	085b      	lsrs	r3, r3, #1
 80026c4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80026c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d199      	bne.n	8002600 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f003 f916 	bl	8005902 <USB_ReadInterrupts>
 80026d6:	4603      	mov	r3, r0
 80026d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80026e0:	f040 80c0 	bne.w	8002864 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f003 f937 	bl	800595c <USB_ReadDevAllInEpInterrupt>
 80026ee:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80026f0:	2300      	movs	r3, #0
 80026f2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80026f4:	e0b2      	b.n	800285c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80026f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 80a7 	beq.w	8002850 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002708:	b2d2      	uxtb	r2, r2
 800270a:	4611      	mov	r1, r2
 800270c:	4618      	mov	r0, r3
 800270e:	f003 f95d 	bl	80059cc <USB_ReadDevInEPInterrupt>
 8002712:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b00      	cmp	r3, #0
 800271c:	d057      	beq.n	80027ce <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	f003 030f 	and.w	r3, r3, #15
 8002724:	2201      	movs	r2, #1
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002732:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	43db      	mvns	r3, r3
 8002738:	69f9      	ldr	r1, [r7, #28]
 800273a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800273e:	4013      	ands	r3, r2
 8002740:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	015a      	lsls	r2, r3, #5
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	4413      	add	r3, r2
 800274a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800274e:	461a      	mov	r2, r3
 8002750:	2301      	movs	r3, #1
 8002752:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d132      	bne.n	80027c2 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800275c:	6879      	ldr	r1, [r7, #4]
 800275e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002760:	4613      	mov	r3, r2
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	1a9b      	subs	r3, r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	440b      	add	r3, r1
 800276a:	3348      	adds	r3, #72	; 0x48
 800276c:	6819      	ldr	r1, [r3, #0]
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002772:	4613      	mov	r3, r2
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	1a9b      	subs	r3, r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	4403      	add	r3, r0
 800277c:	3344      	adds	r3, #68	; 0x44
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4419      	add	r1, r3
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002786:	4613      	mov	r3, r2
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	1a9b      	subs	r3, r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4403      	add	r3, r0
 8002790:	3348      	adds	r3, #72	; 0x48
 8002792:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002796:	2b00      	cmp	r3, #0
 8002798:	d113      	bne.n	80027c2 <HAL_PCD_IRQHandler+0x31c>
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800279e:	4613      	mov	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	1a9b      	subs	r3, r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	440b      	add	r3, r1
 80027a8:	3350      	adds	r3, #80	; 0x50
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d108      	bne.n	80027c2 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6818      	ldr	r0, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80027ba:	461a      	mov	r2, r3
 80027bc:	2101      	movs	r1, #1
 80027be:	f003 f965 	bl	8005a8c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	4619      	mov	r1, r3
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f005 f904 	bl	80079d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	f003 0308 	and.w	r3, r3, #8
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d008      	beq.n	80027ea <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	015a      	lsls	r2, r3, #5
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	4413      	add	r3, r2
 80027e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027e4:	461a      	mov	r2, r3
 80027e6:	2308      	movs	r3, #8
 80027e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	f003 0310 	and.w	r3, r3, #16
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d008      	beq.n	8002806 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80027f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f6:	015a      	lsls	r2, r3, #5
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	4413      	add	r3, r2
 80027fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002800:	461a      	mov	r2, r3
 8002802:	2310      	movs	r3, #16
 8002804:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800280c:	2b00      	cmp	r3, #0
 800280e:	d008      	beq.n	8002822 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002812:	015a      	lsls	r2, r3, #5
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	4413      	add	r3, r2
 8002818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800281c:	461a      	mov	r2, r3
 800281e:	2340      	movs	r3, #64	; 0x40
 8002820:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d008      	beq.n	800283e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282e:	015a      	lsls	r2, r3, #5
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	4413      	add	r3, r2
 8002834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002838:	461a      	mov	r2, r3
 800283a:	2302      	movs	r3, #2
 800283c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002844:	2b00      	cmp	r3, #0
 8002846:	d003      	beq.n	8002850 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002848:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 fc1b 	bl	8003086 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002852:	3301      	adds	r3, #1
 8002854:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002858:	085b      	lsrs	r3, r3, #1
 800285a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800285c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285e:	2b00      	cmp	r3, #0
 8002860:	f47f af49 	bne.w	80026f6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f003 f84a 	bl	8005902 <USB_ReadInterrupts>
 800286e:	4603      	mov	r3, r0
 8002870:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002874:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002878:	d122      	bne.n	80028c0 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	69fa      	ldr	r2, [r7, #28]
 8002884:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002888:	f023 0301 	bic.w	r3, r3, #1
 800288c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002894:	2b01      	cmp	r3, #1
 8002896:	d108      	bne.n	80028aa <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80028a0:	2100      	movs	r1, #0
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 fe26 	bl	80034f4 <HAL_PCDEx_LPM_Callback>
 80028a8:	e002      	b.n	80028b0 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f005 f90a 	bl	8007ac4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	695a      	ldr	r2, [r3, #20]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80028be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f003 f81c 	bl	8005902 <USB_ReadInterrupts>
 80028ca:	4603      	mov	r3, r0
 80028cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028d4:	d112      	bne.n	80028fc <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d102      	bne.n	80028ec <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f005 f8c6 	bl	8007a78 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	695a      	ldr	r2, [r3, #20]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80028fa:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f002 fffe 	bl	8005902 <USB_ReadInterrupts>
 8002906:	4603      	mov	r3, r0
 8002908:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800290c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002910:	f040 80c7 	bne.w	8002aa2 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	69fa      	ldr	r2, [r7, #28]
 800291e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002922:	f023 0301 	bic.w	r3, r3, #1
 8002926:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2110      	movs	r1, #16
 800292e:	4618      	mov	r0, r3
 8002930:	f002 f8cc 	bl	8004acc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002934:	2300      	movs	r3, #0
 8002936:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002938:	e056      	b.n	80029e8 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800293a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800293c:	015a      	lsls	r2, r3, #5
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	4413      	add	r3, r2
 8002942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002946:	461a      	mov	r2, r3
 8002948:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800294c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800294e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002950:	015a      	lsls	r2, r3, #5
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	4413      	add	r3, r2
 8002956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800295e:	0151      	lsls	r1, r2, #5
 8002960:	69fa      	ldr	r2, [r7, #28]
 8002962:	440a      	add	r2, r1
 8002964:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002968:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800296c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800296e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002970:	015a      	lsls	r2, r3, #5
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	4413      	add	r3, r2
 8002976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800297e:	0151      	lsls	r1, r2, #5
 8002980:	69fa      	ldr	r2, [r7, #28]
 8002982:	440a      	add	r2, r1
 8002984:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002988:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800298c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800298e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002990:	015a      	lsls	r2, r3, #5
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	4413      	add	r3, r2
 8002996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800299a:	461a      	mov	r2, r3
 800299c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80029a0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80029a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a4:	015a      	lsls	r2, r3, #5
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	4413      	add	r3, r2
 80029aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029b2:	0151      	lsls	r1, r2, #5
 80029b4:	69fa      	ldr	r2, [r7, #28]
 80029b6:	440a      	add	r2, r1
 80029b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80029bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029c0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80029c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c4:	015a      	lsls	r2, r3, #5
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	4413      	add	r3, r2
 80029ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029d2:	0151      	lsls	r1, r2, #5
 80029d4:	69fa      	ldr	r2, [r7, #28]
 80029d6:	440a      	add	r2, r1
 80029d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80029dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80029e0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e4:	3301      	adds	r3, #1
 80029e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d3a3      	bcc.n	800293a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	69fa      	ldr	r2, [r7, #28]
 80029fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a00:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002a04:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d016      	beq.n	8002a3c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a18:	69fa      	ldr	r2, [r7, #28]
 8002a1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a1e:	f043 030b 	orr.w	r3, r3, #11
 8002a22:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2e:	69fa      	ldr	r2, [r7, #28]
 8002a30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a34:	f043 030b 	orr.w	r3, r3, #11
 8002a38:	6453      	str	r3, [r2, #68]	; 0x44
 8002a3a:	e015      	b.n	8002a68 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	69fa      	ldr	r2, [r7, #28]
 8002a46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a4a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a4e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002a52:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	69fa      	ldr	r2, [r7, #28]
 8002a5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a62:	f043 030b 	orr.w	r3, r3, #11
 8002a66:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	69fa      	ldr	r2, [r7, #28]
 8002a72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a76:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002a7a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6818      	ldr	r0, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	f002 fffd 	bl	8005a8c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	695a      	ldr	r2, [r3, #20]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002aa0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f002 ff2b 	bl	8005902 <USB_ReadInterrupts>
 8002aac:	4603      	mov	r3, r0
 8002aae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ab2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ab6:	d124      	bne.n	8002b02 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f002 ffc1 	bl	8005a44 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f002 f861 	bl	8004b8e <USB_GetDevSpeed>
 8002acc:	4603      	mov	r3, r0
 8002ace:	461a      	mov	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681c      	ldr	r4, [r3, #0]
 8002ad8:	f001 f946 	bl	8003d68 <HAL_RCC_GetHCLKFreq>
 8002adc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	4620      	mov	r0, r4
 8002ae8:	f001 fd9e 	bl	8004628 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f004 ff9a 	bl	8007a26 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	695a      	ldr	r2, [r3, #20]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002b00:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f002 fefb 	bl	8005902 <USB_ReadInterrupts>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	f003 0308 	and.w	r3, r3, #8
 8002b12:	2b08      	cmp	r3, #8
 8002b14:	d10a      	bne.n	8002b2c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f004 ff77 	bl	8007a0a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	695a      	ldr	r2, [r3, #20]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f002 0208 	and.w	r2, r2, #8
 8002b2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f002 fee6 	bl	8005902 <USB_ReadInterrupts>
 8002b36:	4603      	mov	r3, r0
 8002b38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b40:	d10f      	bne.n	8002b62 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002b42:	2300      	movs	r3, #0
 8002b44:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f004 ffd9 	bl	8007b04 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	695a      	ldr	r2, [r3, #20]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002b60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f002 fecb 	bl	8005902 <USB_ReadInterrupts>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b76:	d10f      	bne.n	8002b98 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	4619      	mov	r1, r3
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f004 ffac 	bl	8007ae0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	695a      	ldr	r2, [r3, #20]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002b96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f002 feb0 	bl	8005902 <USB_ReadInterrupts>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bac:	d10a      	bne.n	8002bc4 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f004 ffba 	bl	8007b28 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	695a      	ldr	r2, [r3, #20]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002bc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f002 fe9a 	bl	8005902 <USB_ReadInterrupts>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	d115      	bne.n	8002c04 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	f003 0304 	and.w	r3, r3, #4
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d002      	beq.n	8002bf0 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f004 ffaa 	bl	8007b44 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6859      	ldr	r1, [r3, #4]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	605a      	str	r2, [r3, #4]
 8002c00:	e000      	b.n	8002c04 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002c02:	bf00      	nop
    }
  }
}
 8002c04:	3734      	adds	r7, #52	; 0x34
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd90      	pop	{r4, r7, pc}

08002c0a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b082      	sub	sp, #8
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
 8002c12:	460b      	mov	r3, r1
 8002c14:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d101      	bne.n	8002c24 <HAL_PCD_SetAddress+0x1a>
 8002c20:	2302      	movs	r3, #2
 8002c22:	e013      	b.n	8002c4c <HAL_PCD_SetAddress+0x42>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	78fa      	ldrb	r2, [r7, #3]
 8002c30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	78fa      	ldrb	r2, [r7, #3]
 8002c3a:	4611      	mov	r1, r2
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f002 fdf8 	bl	8005832 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	4608      	mov	r0, r1
 8002c5e:	4611      	mov	r1, r2
 8002c60:	461a      	mov	r2, r3
 8002c62:	4603      	mov	r3, r0
 8002c64:	70fb      	strb	r3, [r7, #3]
 8002c66:	460b      	mov	r3, r1
 8002c68:	803b      	strh	r3, [r7, #0]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	da0f      	bge.n	8002c9a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c7a:	78fb      	ldrb	r3, [r7, #3]
 8002c7c:	f003 020f 	and.w	r2, r3, #15
 8002c80:	4613      	mov	r3, r2
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	1a9b      	subs	r3, r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	3338      	adds	r3, #56	; 0x38
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	3304      	adds	r3, #4
 8002c90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2201      	movs	r2, #1
 8002c96:	705a      	strb	r2, [r3, #1]
 8002c98:	e00f      	b.n	8002cba <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c9a:	78fb      	ldrb	r3, [r7, #3]
 8002c9c:	f003 020f 	and.w	r2, r3, #15
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	1a9b      	subs	r3, r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	4413      	add	r3, r2
 8002cb0:	3304      	adds	r3, #4
 8002cb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002cba:	78fb      	ldrb	r3, [r7, #3]
 8002cbc:	f003 030f 	and.w	r3, r3, #15
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002cc6:	883a      	ldrh	r2, [r7, #0]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	78ba      	ldrb	r2, [r7, #2]
 8002cd0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	785b      	ldrb	r3, [r3, #1]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d004      	beq.n	8002ce4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ce4:	78bb      	ldrb	r3, [r7, #2]
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d102      	bne.n	8002cf0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d101      	bne.n	8002cfe <HAL_PCD_EP_Open+0xaa>
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	e00e      	b.n	8002d1c <HAL_PCD_EP_Open+0xc8>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68f9      	ldr	r1, [r7, #12]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f001 ff63 	bl	8004bd8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002d1a:	7afb      	ldrb	r3, [r7, #11]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	da0f      	bge.n	8002d58 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d38:	78fb      	ldrb	r3, [r7, #3]
 8002d3a:	f003 020f 	and.w	r2, r3, #15
 8002d3e:	4613      	mov	r3, r2
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	1a9b      	subs	r3, r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	3338      	adds	r3, #56	; 0x38
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	3304      	adds	r3, #4
 8002d4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2201      	movs	r2, #1
 8002d54:	705a      	strb	r2, [r3, #1]
 8002d56:	e00f      	b.n	8002d78 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d58:	78fb      	ldrb	r3, [r7, #3]
 8002d5a:	f003 020f 	and.w	r2, r3, #15
 8002d5e:	4613      	mov	r3, r2
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	1a9b      	subs	r3, r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	3304      	adds	r3, #4
 8002d70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002d78:	78fb      	ldrb	r3, [r7, #3]
 8002d7a:	f003 030f 	and.w	r3, r3, #15
 8002d7e:	b2da      	uxtb	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d101      	bne.n	8002d92 <HAL_PCD_EP_Close+0x6e>
 8002d8e:	2302      	movs	r3, #2
 8002d90:	e00e      	b.n	8002db0 <HAL_PCD_EP_Close+0x8c>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2201      	movs	r2, #1
 8002d96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68f9      	ldr	r1, [r7, #12]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f001 ffa1 	bl	8004ce8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	607a      	str	r2, [r7, #4]
 8002dc2:	603b      	str	r3, [r7, #0]
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dc8:	7afb      	ldrb	r3, [r7, #11]
 8002dca:	f003 020f 	and.w	r2, r3, #15
 8002dce:	4613      	mov	r3, r2
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	1a9b      	subs	r3, r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	4413      	add	r3, r2
 8002dde:	3304      	adds	r3, #4
 8002de0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	2200      	movs	r2, #0
 8002df2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	2200      	movs	r2, #0
 8002df8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dfa:	7afb      	ldrb	r3, [r7, #11]
 8002dfc:	f003 030f 	and.w	r3, r3, #15
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d102      	bne.n	8002e14 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e14:	7afb      	ldrb	r3, [r7, #11]
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d109      	bne.n	8002e32 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6818      	ldr	r0, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	461a      	mov	r2, r3
 8002e2a:	6979      	ldr	r1, [r7, #20]
 8002e2c:	f002 fa7c 	bl	8005328 <USB_EP0StartXfer>
 8002e30:	e008      	b.n	8002e44 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6818      	ldr	r0, [r3, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	6979      	ldr	r1, [r7, #20]
 8002e40:	f002 f82e 	bl	8004ea0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3718      	adds	r7, #24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b083      	sub	sp, #12
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
 8002e56:	460b      	mov	r3, r1
 8002e58:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e5a:	78fb      	ldrb	r3, [r7, #3]
 8002e5c:	f003 020f 	and.w	r2, r3, #15
 8002e60:	6879      	ldr	r1, [r7, #4]
 8002e62:	4613      	mov	r3, r2
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	1a9b      	subs	r3, r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	440b      	add	r3, r1
 8002e6c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002e70:	681b      	ldr	r3, [r3, #0]
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b086      	sub	sp, #24
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	60f8      	str	r0, [r7, #12]
 8002e86:	607a      	str	r2, [r7, #4]
 8002e88:	603b      	str	r3, [r7, #0]
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e8e:	7afb      	ldrb	r3, [r7, #11]
 8002e90:	f003 020f 	and.w	r2, r3, #15
 8002e94:	4613      	mov	r3, r2
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	1a9b      	subs	r3, r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	3338      	adds	r3, #56	; 0x38
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	3304      	adds	r3, #4
 8002ea4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ebe:	7afb      	ldrb	r3, [r7, #11]
 8002ec0:	f003 030f 	and.w	r3, r3, #15
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d102      	bne.n	8002ed8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ed8:	7afb      	ldrb	r3, [r7, #11]
 8002eda:	f003 030f 	and.w	r3, r3, #15
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d109      	bne.n	8002ef6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6818      	ldr	r0, [r3, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	461a      	mov	r2, r3
 8002eee:	6979      	ldr	r1, [r7, #20]
 8002ef0:	f002 fa1a 	bl	8005328 <USB_EP0StartXfer>
 8002ef4:	e008      	b.n	8002f08 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6818      	ldr	r0, [r3, #0]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	461a      	mov	r2, r3
 8002f02:	6979      	ldr	r1, [r7, #20]
 8002f04:	f001 ffcc 	bl	8004ea0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3718      	adds	r7, #24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b084      	sub	sp, #16
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f1e:	78fb      	ldrb	r3, [r7, #3]
 8002f20:	f003 020f 	and.w	r2, r3, #15
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d901      	bls.n	8002f30 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e050      	b.n	8002fd2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	da0f      	bge.n	8002f58 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f38:	78fb      	ldrb	r3, [r7, #3]
 8002f3a:	f003 020f 	and.w	r2, r3, #15
 8002f3e:	4613      	mov	r3, r2
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	1a9b      	subs	r3, r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	3338      	adds	r3, #56	; 0x38
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	3304      	adds	r3, #4
 8002f4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2201      	movs	r2, #1
 8002f54:	705a      	strb	r2, [r3, #1]
 8002f56:	e00d      	b.n	8002f74 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f58:	78fa      	ldrb	r2, [r7, #3]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	00db      	lsls	r3, r3, #3
 8002f5e:	1a9b      	subs	r3, r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	4413      	add	r3, r2
 8002f6a:	3304      	adds	r3, #4
 8002f6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2201      	movs	r2, #1
 8002f78:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f7a:	78fb      	ldrb	r3, [r7, #3]
 8002f7c:	f003 030f 	and.w	r3, r3, #15
 8002f80:	b2da      	uxtb	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d101      	bne.n	8002f94 <HAL_PCD_EP_SetStall+0x82>
 8002f90:	2302      	movs	r3, #2
 8002f92:	e01e      	b.n	8002fd2 <HAL_PCD_EP_SetStall+0xc0>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68f9      	ldr	r1, [r7, #12]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f002 fb71 	bl	800568a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002fa8:	78fb      	ldrb	r3, [r7, #3]
 8002faa:	f003 030f 	and.w	r3, r3, #15
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10a      	bne.n	8002fc8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6818      	ldr	r0, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	b2d9      	uxtb	r1, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	f002 fd62 	bl	8005a8c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b084      	sub	sp, #16
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002fe6:	78fb      	ldrb	r3, [r7, #3]
 8002fe8:	f003 020f 	and.w	r2, r3, #15
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d901      	bls.n	8002ff8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e042      	b.n	800307e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ff8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	da0f      	bge.n	8003020 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003000:	78fb      	ldrb	r3, [r7, #3]
 8003002:	f003 020f 	and.w	r2, r3, #15
 8003006:	4613      	mov	r3, r2
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	1a9b      	subs	r3, r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	3338      	adds	r3, #56	; 0x38
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	4413      	add	r3, r2
 8003014:	3304      	adds	r3, #4
 8003016:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2201      	movs	r2, #1
 800301c:	705a      	strb	r2, [r3, #1]
 800301e:	e00f      	b.n	8003040 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003020:	78fb      	ldrb	r3, [r7, #3]
 8003022:	f003 020f 	and.w	r2, r3, #15
 8003026:	4613      	mov	r3, r2
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	1a9b      	subs	r3, r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	4413      	add	r3, r2
 8003036:	3304      	adds	r3, #4
 8003038:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003046:	78fb      	ldrb	r3, [r7, #3]
 8003048:	f003 030f 	and.w	r3, r3, #15
 800304c:	b2da      	uxtb	r2, r3
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003058:	2b01      	cmp	r3, #1
 800305a:	d101      	bne.n	8003060 <HAL_PCD_EP_ClrStall+0x86>
 800305c:	2302      	movs	r3, #2
 800305e:	e00e      	b.n	800307e <HAL_PCD_EP_ClrStall+0xa4>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68f9      	ldr	r1, [r7, #12]
 800306e:	4618      	mov	r0, r3
 8003070:	f002 fb79 	bl	8005766 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b08a      	sub	sp, #40	; 0x28
 800308a:	af02      	add	r7, sp, #8
 800308c:	6078      	str	r0, [r7, #4]
 800308e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	4613      	mov	r3, r2
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	1a9b      	subs	r3, r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	3338      	adds	r3, #56	; 0x38
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	4413      	add	r3, r2
 80030aa:	3304      	adds	r3, #4
 80030ac:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	699a      	ldr	r2, [r3, #24]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d901      	bls.n	80030be <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e06c      	b.n	8003198 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	695a      	ldr	r2, [r3, #20]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	69fa      	ldr	r2, [r7, #28]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d902      	bls.n	80030da <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	3303      	adds	r3, #3
 80030de:	089b      	lsrs	r3, r3, #2
 80030e0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030e2:	e02b      	b.n	800313c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	695a      	ldr	r2, [r3, #20]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	69fa      	ldr	r2, [r7, #28]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d902      	bls.n	8003100 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	3303      	adds	r3, #3
 8003104:	089b      	lsrs	r3, r3, #2
 8003106:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	68d9      	ldr	r1, [r3, #12]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	b2da      	uxtb	r2, r3
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003118:	b2db      	uxtb	r3, r3
 800311a:	9300      	str	r3, [sp, #0]
 800311c:	4603      	mov	r3, r0
 800311e:	6978      	ldr	r0, [r7, #20]
 8003120:	f002 fa55 	bl	80055ce <USB_WritePacket>

    ep->xfer_buff  += len;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	68da      	ldr	r2, [r3, #12]
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	441a      	add	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	699a      	ldr	r2, [r3, #24]
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	441a      	add	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	015a      	lsls	r2, r3, #5
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	4413      	add	r3, r2
 8003144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	b29b      	uxth	r3, r3
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	429a      	cmp	r2, r3
 8003150:	d809      	bhi.n	8003166 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	699a      	ldr	r2, [r3, #24]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800315a:	429a      	cmp	r2, r3
 800315c:	d203      	bcs.n	8003166 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1be      	bne.n	80030e4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	695a      	ldr	r2, [r3, #20]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	429a      	cmp	r2, r3
 8003170:	d811      	bhi.n	8003196 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	f003 030f 	and.w	r3, r3, #15
 8003178:	2201      	movs	r2, #1
 800317a:	fa02 f303 	lsl.w	r3, r2, r3
 800317e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003186:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	43db      	mvns	r3, r3
 800318c:	6939      	ldr	r1, [r7, #16]
 800318e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003192:	4013      	ands	r3, r2
 8003194:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3720      	adds	r7, #32
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	333c      	adds	r3, #60	; 0x3c
 80031b8:	3304      	adds	r3, #4
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	015a      	lsls	r2, r3, #5
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	4413      	add	r3, r2
 80031c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	f040 80a0 	bne.w	8003318 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	f003 0308 	and.w	r3, r3, #8
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d015      	beq.n	800320e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	4a72      	ldr	r2, [pc, #456]	; (80033b0 <PCD_EP_OutXfrComplete_int+0x210>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	f240 80dd 	bls.w	80033a6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f000 80d7 	beq.w	80033a6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	015a      	lsls	r2, r3, #5
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	4413      	add	r3, r2
 8003200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003204:	461a      	mov	r2, r3
 8003206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800320a:	6093      	str	r3, [r2, #8]
 800320c:	e0cb      	b.n	80033a6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	f003 0320 	and.w	r3, r3, #32
 8003214:	2b00      	cmp	r3, #0
 8003216:	d009      	beq.n	800322c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	015a      	lsls	r2, r3, #5
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	4413      	add	r3, r2
 8003220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003224:	461a      	mov	r2, r3
 8003226:	2320      	movs	r3, #32
 8003228:	6093      	str	r3, [r2, #8]
 800322a:	e0bc      	b.n	80033a6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003232:	2b00      	cmp	r3, #0
 8003234:	f040 80b7 	bne.w	80033a6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	4a5d      	ldr	r2, [pc, #372]	; (80033b0 <PCD_EP_OutXfrComplete_int+0x210>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d90f      	bls.n	8003260 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00a      	beq.n	8003260 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	015a      	lsls	r2, r3, #5
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	4413      	add	r3, r2
 8003252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003256:	461a      	mov	r2, r3
 8003258:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800325c:	6093      	str	r3, [r2, #8]
 800325e:	e0a2      	b.n	80033a6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003260:	6879      	ldr	r1, [r7, #4]
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	4613      	mov	r3, r2
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	1a9b      	subs	r3, r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	440b      	add	r3, r1
 800326e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003272:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	0159      	lsls	r1, r3, #5
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	440b      	add	r3, r1
 800327c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003286:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	4613      	mov	r3, r2
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	1a9b      	subs	r3, r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4403      	add	r3, r0
 8003296:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800329a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	4613      	mov	r3, r2
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	1a9b      	subs	r3, r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	440b      	add	r3, r1
 80032aa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80032ae:	6819      	ldr	r1, [r3, #0]
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	4613      	mov	r3, r2
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	1a9b      	subs	r3, r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4403      	add	r3, r0
 80032be:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4419      	add	r1, r3
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	4613      	mov	r3, r2
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	1a9b      	subs	r3, r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4403      	add	r3, r0
 80032d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80032d8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d114      	bne.n	800330a <PCD_EP_OutXfrComplete_int+0x16a>
 80032e0:	6879      	ldr	r1, [r7, #4]
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	4613      	mov	r3, r2
 80032e6:	00db      	lsls	r3, r3, #3
 80032e8:	1a9b      	subs	r3, r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	440b      	add	r3, r1
 80032ee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d108      	bne.n	800330a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6818      	ldr	r0, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003302:	461a      	mov	r2, r3
 8003304:	2101      	movs	r1, #1
 8003306:	f002 fbc1 	bl	8005a8c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	b2db      	uxtb	r3, r3
 800330e:	4619      	mov	r1, r3
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f004 fb45 	bl	80079a0 <HAL_PCD_DataOutStageCallback>
 8003316:	e046      	b.n	80033a6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4a26      	ldr	r2, [pc, #152]	; (80033b4 <PCD_EP_OutXfrComplete_int+0x214>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d124      	bne.n	800336a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00a      	beq.n	8003340 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	015a      	lsls	r2, r3, #5
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	4413      	add	r3, r2
 8003332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003336:	461a      	mov	r2, r3
 8003338:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800333c:	6093      	str	r3, [r2, #8]
 800333e:	e032      	b.n	80033a6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	f003 0320 	and.w	r3, r3, #32
 8003346:	2b00      	cmp	r3, #0
 8003348:	d008      	beq.n	800335c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	015a      	lsls	r2, r3, #5
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	4413      	add	r3, r2
 8003352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003356:	461a      	mov	r2, r3
 8003358:	2320      	movs	r3, #32
 800335a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	b2db      	uxtb	r3, r3
 8003360:	4619      	mov	r1, r3
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f004 fb1c 	bl	80079a0 <HAL_PCD_DataOutStageCallback>
 8003368:	e01d      	b.n	80033a6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d114      	bne.n	800339a <PCD_EP_OutXfrComplete_int+0x1fa>
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	4613      	mov	r3, r2
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	1a9b      	subs	r3, r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	440b      	add	r3, r1
 800337e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d108      	bne.n	800339a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6818      	ldr	r0, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003392:	461a      	mov	r2, r3
 8003394:	2100      	movs	r1, #0
 8003396:	f002 fb79 	bl	8005a8c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	b2db      	uxtb	r3, r3
 800339e:	4619      	mov	r1, r3
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f004 fafd 	bl	80079a0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3718      	adds	r7, #24
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	4f54300a 	.word	0x4f54300a
 80033b4:	4f54310a 	.word	0x4f54310a

080033b8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	333c      	adds	r3, #60	; 0x3c
 80033d0:	3304      	adds	r3, #4
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	015a      	lsls	r2, r3, #5
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	4413      	add	r3, r2
 80033de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	4a15      	ldr	r2, [pc, #84]	; (8003440 <PCD_EP_OutSetupPacket_int+0x88>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d90e      	bls.n	800340c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d009      	beq.n	800340c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	015a      	lsls	r2, r3, #5
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	4413      	add	r3, r2
 8003400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003404:	461a      	mov	r2, r3
 8003406:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800340a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f004 fab5 	bl	800797c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	4a0a      	ldr	r2, [pc, #40]	; (8003440 <PCD_EP_OutSetupPacket_int+0x88>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d90c      	bls.n	8003434 <PCD_EP_OutSetupPacket_int+0x7c>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d108      	bne.n	8003434 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6818      	ldr	r0, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800342c:	461a      	mov	r2, r3
 800342e:	2101      	movs	r1, #1
 8003430:	f002 fb2c 	bl	8005a8c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3718      	adds	r7, #24
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	4f54300a 	.word	0x4f54300a

08003444 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	460b      	mov	r3, r1
 800344e:	70fb      	strb	r3, [r7, #3]
 8003450:	4613      	mov	r3, r2
 8003452:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800345c:	78fb      	ldrb	r3, [r7, #3]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d107      	bne.n	8003472 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003462:	883b      	ldrh	r3, [r7, #0]
 8003464:	0419      	lsls	r1, r3, #16
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68ba      	ldr	r2, [r7, #8]
 800346c:	430a      	orrs	r2, r1
 800346e:	629a      	str	r2, [r3, #40]	; 0x28
 8003470:	e028      	b.n	80034c4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003478:	0c1b      	lsrs	r3, r3, #16
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	4413      	add	r3, r2
 800347e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003480:	2300      	movs	r3, #0
 8003482:	73fb      	strb	r3, [r7, #15]
 8003484:	e00d      	b.n	80034a2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	7bfb      	ldrb	r3, [r7, #15]
 800348c:	3340      	adds	r3, #64	; 0x40
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4413      	add	r3, r2
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	0c1b      	lsrs	r3, r3, #16
 8003496:	68ba      	ldr	r2, [r7, #8]
 8003498:	4413      	add	r3, r2
 800349a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800349c:	7bfb      	ldrb	r3, [r7, #15]
 800349e:	3301      	adds	r3, #1
 80034a0:	73fb      	strb	r3, [r7, #15]
 80034a2:	7bfa      	ldrb	r2, [r7, #15]
 80034a4:	78fb      	ldrb	r3, [r7, #3]
 80034a6:	3b01      	subs	r3, #1
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d3ec      	bcc.n	8003486 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80034ac:	883b      	ldrh	r3, [r7, #0]
 80034ae:	0418      	lsls	r0, r3, #16
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6819      	ldr	r1, [r3, #0]
 80034b4:	78fb      	ldrb	r3, [r7, #3]
 80034b6:	3b01      	subs	r3, #1
 80034b8:	68ba      	ldr	r2, [r7, #8]
 80034ba:	4302      	orrs	r2, r0
 80034bc:	3340      	adds	r3, #64	; 0x40
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	440b      	add	r3, r1
 80034c2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3714      	adds	r7, #20
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b083      	sub	sp, #12
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
 80034da:	460b      	mov	r3, r1
 80034dc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	887a      	ldrh	r2, [r7, #2]
 80034e4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	460b      	mov	r3, r1
 80034fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e25b      	b.n	80039d6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b00      	cmp	r3, #0
 8003528:	d075      	beq.n	8003616 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800352a:	4ba3      	ldr	r3, [pc, #652]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 030c 	and.w	r3, r3, #12
 8003532:	2b04      	cmp	r3, #4
 8003534:	d00c      	beq.n	8003550 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003536:	4ba0      	ldr	r3, [pc, #640]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800353e:	2b08      	cmp	r3, #8
 8003540:	d112      	bne.n	8003568 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003542:	4b9d      	ldr	r3, [pc, #628]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800354a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800354e:	d10b      	bne.n	8003568 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003550:	4b99      	ldr	r3, [pc, #612]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d05b      	beq.n	8003614 <HAL_RCC_OscConfig+0x108>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d157      	bne.n	8003614 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e236      	b.n	80039d6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003570:	d106      	bne.n	8003580 <HAL_RCC_OscConfig+0x74>
 8003572:	4b91      	ldr	r3, [pc, #580]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a90      	ldr	r2, [pc, #576]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 8003578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800357c:	6013      	str	r3, [r2, #0]
 800357e:	e01d      	b.n	80035bc <HAL_RCC_OscConfig+0xb0>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003588:	d10c      	bne.n	80035a4 <HAL_RCC_OscConfig+0x98>
 800358a:	4b8b      	ldr	r3, [pc, #556]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a8a      	ldr	r2, [pc, #552]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 8003590:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003594:	6013      	str	r3, [r2, #0]
 8003596:	4b88      	ldr	r3, [pc, #544]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a87      	ldr	r2, [pc, #540]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 800359c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a0:	6013      	str	r3, [r2, #0]
 80035a2:	e00b      	b.n	80035bc <HAL_RCC_OscConfig+0xb0>
 80035a4:	4b84      	ldr	r3, [pc, #528]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a83      	ldr	r2, [pc, #524]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 80035aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ae:	6013      	str	r3, [r2, #0]
 80035b0:	4b81      	ldr	r3, [pc, #516]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a80      	ldr	r2, [pc, #512]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 80035b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d013      	beq.n	80035ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c4:	f7fd fbd4 	bl	8000d70 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035cc:	f7fd fbd0 	bl	8000d70 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b64      	cmp	r3, #100	; 0x64
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e1fb      	b.n	80039d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035de:	4b76      	ldr	r3, [pc, #472]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d0f0      	beq.n	80035cc <HAL_RCC_OscConfig+0xc0>
 80035ea:	e014      	b.n	8003616 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ec:	f7fd fbc0 	bl	8000d70 <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035f4:	f7fd fbbc 	bl	8000d70 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b64      	cmp	r3, #100	; 0x64
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e1e7      	b.n	80039d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003606:	4b6c      	ldr	r3, [pc, #432]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1f0      	bne.n	80035f4 <HAL_RCC_OscConfig+0xe8>
 8003612:	e000      	b.n	8003616 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d063      	beq.n	80036ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003622:	4b65      	ldr	r3, [pc, #404]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f003 030c 	and.w	r3, r3, #12
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00b      	beq.n	8003646 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800362e:	4b62      	ldr	r3, [pc, #392]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003636:	2b08      	cmp	r3, #8
 8003638:	d11c      	bne.n	8003674 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800363a:	4b5f      	ldr	r3, [pc, #380]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d116      	bne.n	8003674 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003646:	4b5c      	ldr	r3, [pc, #368]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d005      	beq.n	800365e <HAL_RCC_OscConfig+0x152>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d001      	beq.n	800365e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e1bb      	b.n	80039d6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800365e:	4b56      	ldr	r3, [pc, #344]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	4952      	ldr	r1, [pc, #328]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 800366e:	4313      	orrs	r3, r2
 8003670:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003672:	e03a      	b.n	80036ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d020      	beq.n	80036be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800367c:	4b4f      	ldr	r3, [pc, #316]	; (80037bc <HAL_RCC_OscConfig+0x2b0>)
 800367e:	2201      	movs	r2, #1
 8003680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003682:	f7fd fb75 	bl	8000d70 <HAL_GetTick>
 8003686:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003688:	e008      	b.n	800369c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800368a:	f7fd fb71 	bl	8000d70 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e19c      	b.n	80039d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800369c:	4b46      	ldr	r3, [pc, #280]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0f0      	beq.n	800368a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a8:	4b43      	ldr	r3, [pc, #268]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	00db      	lsls	r3, r3, #3
 80036b6:	4940      	ldr	r1, [pc, #256]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	600b      	str	r3, [r1, #0]
 80036bc:	e015      	b.n	80036ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036be:	4b3f      	ldr	r3, [pc, #252]	; (80037bc <HAL_RCC_OscConfig+0x2b0>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c4:	f7fd fb54 	bl	8000d70 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036cc:	f7fd fb50 	bl	8000d70 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e17b      	b.n	80039d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036de:	4b36      	ldr	r3, [pc, #216]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1f0      	bne.n	80036cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0308 	and.w	r3, r3, #8
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d030      	beq.n	8003758 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d016      	beq.n	800372c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036fe:	4b30      	ldr	r3, [pc, #192]	; (80037c0 <HAL_RCC_OscConfig+0x2b4>)
 8003700:	2201      	movs	r2, #1
 8003702:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003704:	f7fd fb34 	bl	8000d70 <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800370c:	f7fd fb30 	bl	8000d70 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e15b      	b.n	80039d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800371e:	4b26      	ldr	r3, [pc, #152]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 8003720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d0f0      	beq.n	800370c <HAL_RCC_OscConfig+0x200>
 800372a:	e015      	b.n	8003758 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800372c:	4b24      	ldr	r3, [pc, #144]	; (80037c0 <HAL_RCC_OscConfig+0x2b4>)
 800372e:	2200      	movs	r2, #0
 8003730:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003732:	f7fd fb1d 	bl	8000d70 <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003738:	e008      	b.n	800374c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800373a:	f7fd fb19 	bl	8000d70 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e144      	b.n	80039d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800374c:	4b1a      	ldr	r3, [pc, #104]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 800374e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1f0      	bne.n	800373a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0304 	and.w	r3, r3, #4
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 80a0 	beq.w	80038a6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003766:	2300      	movs	r3, #0
 8003768:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800376a:	4b13      	ldr	r3, [pc, #76]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10f      	bne.n	8003796 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003776:	2300      	movs	r3, #0
 8003778:	60bb      	str	r3, [r7, #8]
 800377a:	4b0f      	ldr	r3, [pc, #60]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	4a0e      	ldr	r2, [pc, #56]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 8003780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003784:	6413      	str	r3, [r2, #64]	; 0x40
 8003786:	4b0c      	ldr	r3, [pc, #48]	; (80037b8 <HAL_RCC_OscConfig+0x2ac>)
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800378e:	60bb      	str	r3, [r7, #8]
 8003790:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003792:	2301      	movs	r3, #1
 8003794:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003796:	4b0b      	ldr	r3, [pc, #44]	; (80037c4 <HAL_RCC_OscConfig+0x2b8>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d121      	bne.n	80037e6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037a2:	4b08      	ldr	r3, [pc, #32]	; (80037c4 <HAL_RCC_OscConfig+0x2b8>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a07      	ldr	r2, [pc, #28]	; (80037c4 <HAL_RCC_OscConfig+0x2b8>)
 80037a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ae:	f7fd fadf 	bl	8000d70 <HAL_GetTick>
 80037b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b4:	e011      	b.n	80037da <HAL_RCC_OscConfig+0x2ce>
 80037b6:	bf00      	nop
 80037b8:	40023800 	.word	0x40023800
 80037bc:	42470000 	.word	0x42470000
 80037c0:	42470e80 	.word	0x42470e80
 80037c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037c8:	f7fd fad2 	bl	8000d70 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e0fd      	b.n	80039d6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037da:	4b81      	ldr	r3, [pc, #516]	; (80039e0 <HAL_RCC_OscConfig+0x4d4>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d0f0      	beq.n	80037c8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d106      	bne.n	80037fc <HAL_RCC_OscConfig+0x2f0>
 80037ee:	4b7d      	ldr	r3, [pc, #500]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 80037f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f2:	4a7c      	ldr	r2, [pc, #496]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 80037f4:	f043 0301 	orr.w	r3, r3, #1
 80037f8:	6713      	str	r3, [r2, #112]	; 0x70
 80037fa:	e01c      	b.n	8003836 <HAL_RCC_OscConfig+0x32a>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	2b05      	cmp	r3, #5
 8003802:	d10c      	bne.n	800381e <HAL_RCC_OscConfig+0x312>
 8003804:	4b77      	ldr	r3, [pc, #476]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 8003806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003808:	4a76      	ldr	r2, [pc, #472]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 800380a:	f043 0304 	orr.w	r3, r3, #4
 800380e:	6713      	str	r3, [r2, #112]	; 0x70
 8003810:	4b74      	ldr	r3, [pc, #464]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 8003812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003814:	4a73      	ldr	r2, [pc, #460]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 8003816:	f043 0301 	orr.w	r3, r3, #1
 800381a:	6713      	str	r3, [r2, #112]	; 0x70
 800381c:	e00b      	b.n	8003836 <HAL_RCC_OscConfig+0x32a>
 800381e:	4b71      	ldr	r3, [pc, #452]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 8003820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003822:	4a70      	ldr	r2, [pc, #448]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 8003824:	f023 0301 	bic.w	r3, r3, #1
 8003828:	6713      	str	r3, [r2, #112]	; 0x70
 800382a:	4b6e      	ldr	r3, [pc, #440]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 800382c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382e:	4a6d      	ldr	r2, [pc, #436]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 8003830:	f023 0304 	bic.w	r3, r3, #4
 8003834:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d015      	beq.n	800386a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800383e:	f7fd fa97 	bl	8000d70 <HAL_GetTick>
 8003842:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003844:	e00a      	b.n	800385c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003846:	f7fd fa93 	bl	8000d70 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	f241 3288 	movw	r2, #5000	; 0x1388
 8003854:	4293      	cmp	r3, r2
 8003856:	d901      	bls.n	800385c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e0bc      	b.n	80039d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800385c:	4b61      	ldr	r3, [pc, #388]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 800385e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d0ee      	beq.n	8003846 <HAL_RCC_OscConfig+0x33a>
 8003868:	e014      	b.n	8003894 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800386a:	f7fd fa81 	bl	8000d70 <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003870:	e00a      	b.n	8003888 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003872:	f7fd fa7d 	bl	8000d70 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003880:	4293      	cmp	r3, r2
 8003882:	d901      	bls.n	8003888 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e0a6      	b.n	80039d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003888:	4b56      	ldr	r3, [pc, #344]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 800388a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1ee      	bne.n	8003872 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003894:	7dfb      	ldrb	r3, [r7, #23]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d105      	bne.n	80038a6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800389a:	4b52      	ldr	r3, [pc, #328]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	4a51      	ldr	r2, [pc, #324]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 80038a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f000 8092 	beq.w	80039d4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038b0:	4b4c      	ldr	r3, [pc, #304]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f003 030c 	and.w	r3, r3, #12
 80038b8:	2b08      	cmp	r3, #8
 80038ba:	d05c      	beq.n	8003976 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d141      	bne.n	8003948 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038c4:	4b48      	ldr	r3, [pc, #288]	; (80039e8 <HAL_RCC_OscConfig+0x4dc>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ca:	f7fd fa51 	bl	8000d70 <HAL_GetTick>
 80038ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038d0:	e008      	b.n	80038e4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038d2:	f7fd fa4d 	bl	8000d70 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d901      	bls.n	80038e4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e078      	b.n	80039d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038e4:	4b3f      	ldr	r3, [pc, #252]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1f0      	bne.n	80038d2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	69da      	ldr	r2, [r3, #28]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	431a      	orrs	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fe:	019b      	lsls	r3, r3, #6
 8003900:	431a      	orrs	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003906:	085b      	lsrs	r3, r3, #1
 8003908:	3b01      	subs	r3, #1
 800390a:	041b      	lsls	r3, r3, #16
 800390c:	431a      	orrs	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003912:	061b      	lsls	r3, r3, #24
 8003914:	4933      	ldr	r1, [pc, #204]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 8003916:	4313      	orrs	r3, r2
 8003918:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800391a:	4b33      	ldr	r3, [pc, #204]	; (80039e8 <HAL_RCC_OscConfig+0x4dc>)
 800391c:	2201      	movs	r2, #1
 800391e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003920:	f7fd fa26 	bl	8000d70 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003928:	f7fd fa22 	bl	8000d70 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e04d      	b.n	80039d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800393a:	4b2a      	ldr	r3, [pc, #168]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d0f0      	beq.n	8003928 <HAL_RCC_OscConfig+0x41c>
 8003946:	e045      	b.n	80039d4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003948:	4b27      	ldr	r3, [pc, #156]	; (80039e8 <HAL_RCC_OscConfig+0x4dc>)
 800394a:	2200      	movs	r2, #0
 800394c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800394e:	f7fd fa0f 	bl	8000d70 <HAL_GetTick>
 8003952:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003954:	e008      	b.n	8003968 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003956:	f7fd fa0b 	bl	8000d70 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d901      	bls.n	8003968 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e036      	b.n	80039d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003968:	4b1e      	ldr	r3, [pc, #120]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1f0      	bne.n	8003956 <HAL_RCC_OscConfig+0x44a>
 8003974:	e02e      	b.n	80039d4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d101      	bne.n	8003982 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e029      	b.n	80039d6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003982:	4b18      	ldr	r3, [pc, #96]	; (80039e4 <HAL_RCC_OscConfig+0x4d8>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	69db      	ldr	r3, [r3, #28]
 8003992:	429a      	cmp	r2, r3
 8003994:	d11c      	bne.n	80039d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d115      	bne.n	80039d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039aa:	4013      	ands	r3, r2
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d10d      	bne.n	80039d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80039be:	429a      	cmp	r2, r3
 80039c0:	d106      	bne.n	80039d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d001      	beq.n	80039d4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e000      	b.n	80039d6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3718      	adds	r7, #24
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	40007000 	.word	0x40007000
 80039e4:	40023800 	.word	0x40023800
 80039e8:	42470060 	.word	0x42470060

080039ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d101      	bne.n	8003a00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e0cc      	b.n	8003b9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a00:	4b68      	ldr	r3, [pc, #416]	; (8003ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 030f 	and.w	r3, r3, #15
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d90c      	bls.n	8003a28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a0e:	4b65      	ldr	r3, [pc, #404]	; (8003ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	b2d2      	uxtb	r2, r2
 8003a14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a16:	4b63      	ldr	r3, [pc, #396]	; (8003ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 030f 	and.w	r3, r3, #15
 8003a1e:	683a      	ldr	r2, [r7, #0]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d001      	beq.n	8003a28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e0b8      	b.n	8003b9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d020      	beq.n	8003a76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0304 	and.w	r3, r3, #4
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d005      	beq.n	8003a4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a40:	4b59      	ldr	r3, [pc, #356]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	4a58      	ldr	r2, [pc, #352]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0308 	and.w	r3, r3, #8
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d005      	beq.n	8003a64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a58:	4b53      	ldr	r3, [pc, #332]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	4a52      	ldr	r2, [pc, #328]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a64:	4b50      	ldr	r3, [pc, #320]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	494d      	ldr	r1, [pc, #308]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d044      	beq.n	8003b0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d107      	bne.n	8003a9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a8a:	4b47      	ldr	r3, [pc, #284]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d119      	bne.n	8003aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e07f      	b.n	8003b9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d003      	beq.n	8003aaa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aa6:	2b03      	cmp	r3, #3
 8003aa8:	d107      	bne.n	8003aba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aaa:	4b3f      	ldr	r3, [pc, #252]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d109      	bne.n	8003aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e06f      	b.n	8003b9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aba:	4b3b      	ldr	r3, [pc, #236]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d101      	bne.n	8003aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e067      	b.n	8003b9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aca:	4b37      	ldr	r3, [pc, #220]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f023 0203 	bic.w	r2, r3, #3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	4934      	ldr	r1, [pc, #208]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003adc:	f7fd f948 	bl	8000d70 <HAL_GetTick>
 8003ae0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ae2:	e00a      	b.n	8003afa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ae4:	f7fd f944 	bl	8000d70 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e04f      	b.n	8003b9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003afa:	4b2b      	ldr	r3, [pc, #172]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f003 020c 	and.w	r2, r3, #12
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d1eb      	bne.n	8003ae4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b0c:	4b25      	ldr	r3, [pc, #148]	; (8003ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 030f 	and.w	r3, r3, #15
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d20c      	bcs.n	8003b34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b1a:	4b22      	ldr	r3, [pc, #136]	; (8003ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	b2d2      	uxtb	r2, r2
 8003b20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b22:	4b20      	ldr	r3, [pc, #128]	; (8003ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d001      	beq.n	8003b34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e032      	b.n	8003b9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0304 	and.w	r3, r3, #4
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d008      	beq.n	8003b52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b40:	4b19      	ldr	r3, [pc, #100]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	4916      	ldr	r1, [pc, #88]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0308 	and.w	r3, r3, #8
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d009      	beq.n	8003b72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b5e:	4b12      	ldr	r3, [pc, #72]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	490e      	ldr	r1, [pc, #56]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b72:	f000 f821 	bl	8003bb8 <HAL_RCC_GetSysClockFreq>
 8003b76:	4601      	mov	r1, r0
 8003b78:	4b0b      	ldr	r3, [pc, #44]	; (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	091b      	lsrs	r3, r3, #4
 8003b7e:	f003 030f 	and.w	r3, r3, #15
 8003b82:	4a0a      	ldr	r2, [pc, #40]	; (8003bac <HAL_RCC_ClockConfig+0x1c0>)
 8003b84:	5cd3      	ldrb	r3, [r2, r3]
 8003b86:	fa21 f303 	lsr.w	r3, r1, r3
 8003b8a:	4a09      	ldr	r2, [pc, #36]	; (8003bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b8e:	4b09      	ldr	r3, [pc, #36]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7fd f8a8 	bl	8000ce8 <HAL_InitTick>

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3710      	adds	r7, #16
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	40023c00 	.word	0x40023c00
 8003ba8:	40023800 	.word	0x40023800
 8003bac:	08008104 	.word	0x08008104
 8003bb0:	20000000 	.word	0x20000000
 8003bb4:	20000004 	.word	0x20000004

08003bb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	607b      	str	r3, [r7, #4]
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	60fb      	str	r3, [r7, #12]
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bce:	4b63      	ldr	r3, [pc, #396]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 030c 	and.w	r3, r3, #12
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d007      	beq.n	8003bea <HAL_RCC_GetSysClockFreq+0x32>
 8003bda:	2b08      	cmp	r3, #8
 8003bdc:	d008      	beq.n	8003bf0 <HAL_RCC_GetSysClockFreq+0x38>
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	f040 80b4 	bne.w	8003d4c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003be4:	4b5e      	ldr	r3, [pc, #376]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003be6:	60bb      	str	r3, [r7, #8]
       break;
 8003be8:	e0b3      	b.n	8003d52 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bea:	4b5e      	ldr	r3, [pc, #376]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003bec:	60bb      	str	r3, [r7, #8]
      break;
 8003bee:	e0b0      	b.n	8003d52 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bf0:	4b5a      	ldr	r3, [pc, #360]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bf8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bfa:	4b58      	ldr	r3, [pc, #352]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d04a      	beq.n	8003c9c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c06:	4b55      	ldr	r3, [pc, #340]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	099b      	lsrs	r3, r3, #6
 8003c0c:	f04f 0400 	mov.w	r4, #0
 8003c10:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003c14:	f04f 0200 	mov.w	r2, #0
 8003c18:	ea03 0501 	and.w	r5, r3, r1
 8003c1c:	ea04 0602 	and.w	r6, r4, r2
 8003c20:	4629      	mov	r1, r5
 8003c22:	4632      	mov	r2, r6
 8003c24:	f04f 0300 	mov.w	r3, #0
 8003c28:	f04f 0400 	mov.w	r4, #0
 8003c2c:	0154      	lsls	r4, r2, #5
 8003c2e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003c32:	014b      	lsls	r3, r1, #5
 8003c34:	4619      	mov	r1, r3
 8003c36:	4622      	mov	r2, r4
 8003c38:	1b49      	subs	r1, r1, r5
 8003c3a:	eb62 0206 	sbc.w	r2, r2, r6
 8003c3e:	f04f 0300 	mov.w	r3, #0
 8003c42:	f04f 0400 	mov.w	r4, #0
 8003c46:	0194      	lsls	r4, r2, #6
 8003c48:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003c4c:	018b      	lsls	r3, r1, #6
 8003c4e:	1a5b      	subs	r3, r3, r1
 8003c50:	eb64 0402 	sbc.w	r4, r4, r2
 8003c54:	f04f 0100 	mov.w	r1, #0
 8003c58:	f04f 0200 	mov.w	r2, #0
 8003c5c:	00e2      	lsls	r2, r4, #3
 8003c5e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003c62:	00d9      	lsls	r1, r3, #3
 8003c64:	460b      	mov	r3, r1
 8003c66:	4614      	mov	r4, r2
 8003c68:	195b      	adds	r3, r3, r5
 8003c6a:	eb44 0406 	adc.w	r4, r4, r6
 8003c6e:	f04f 0100 	mov.w	r1, #0
 8003c72:	f04f 0200 	mov.w	r2, #0
 8003c76:	0262      	lsls	r2, r4, #9
 8003c78:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003c7c:	0259      	lsls	r1, r3, #9
 8003c7e:	460b      	mov	r3, r1
 8003c80:	4614      	mov	r4, r2
 8003c82:	4618      	mov	r0, r3
 8003c84:	4621      	mov	r1, r4
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f04f 0400 	mov.w	r4, #0
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	4623      	mov	r3, r4
 8003c90:	f7fc fa9a 	bl	80001c8 <__aeabi_uldivmod>
 8003c94:	4603      	mov	r3, r0
 8003c96:	460c      	mov	r4, r1
 8003c98:	60fb      	str	r3, [r7, #12]
 8003c9a:	e049      	b.n	8003d30 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c9c:	4b2f      	ldr	r3, [pc, #188]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	099b      	lsrs	r3, r3, #6
 8003ca2:	f04f 0400 	mov.w	r4, #0
 8003ca6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003caa:	f04f 0200 	mov.w	r2, #0
 8003cae:	ea03 0501 	and.w	r5, r3, r1
 8003cb2:	ea04 0602 	and.w	r6, r4, r2
 8003cb6:	4629      	mov	r1, r5
 8003cb8:	4632      	mov	r2, r6
 8003cba:	f04f 0300 	mov.w	r3, #0
 8003cbe:	f04f 0400 	mov.w	r4, #0
 8003cc2:	0154      	lsls	r4, r2, #5
 8003cc4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003cc8:	014b      	lsls	r3, r1, #5
 8003cca:	4619      	mov	r1, r3
 8003ccc:	4622      	mov	r2, r4
 8003cce:	1b49      	subs	r1, r1, r5
 8003cd0:	eb62 0206 	sbc.w	r2, r2, r6
 8003cd4:	f04f 0300 	mov.w	r3, #0
 8003cd8:	f04f 0400 	mov.w	r4, #0
 8003cdc:	0194      	lsls	r4, r2, #6
 8003cde:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003ce2:	018b      	lsls	r3, r1, #6
 8003ce4:	1a5b      	subs	r3, r3, r1
 8003ce6:	eb64 0402 	sbc.w	r4, r4, r2
 8003cea:	f04f 0100 	mov.w	r1, #0
 8003cee:	f04f 0200 	mov.w	r2, #0
 8003cf2:	00e2      	lsls	r2, r4, #3
 8003cf4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003cf8:	00d9      	lsls	r1, r3, #3
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	4614      	mov	r4, r2
 8003cfe:	195b      	adds	r3, r3, r5
 8003d00:	eb44 0406 	adc.w	r4, r4, r6
 8003d04:	f04f 0100 	mov.w	r1, #0
 8003d08:	f04f 0200 	mov.w	r2, #0
 8003d0c:	02a2      	lsls	r2, r4, #10
 8003d0e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003d12:	0299      	lsls	r1, r3, #10
 8003d14:	460b      	mov	r3, r1
 8003d16:	4614      	mov	r4, r2
 8003d18:	4618      	mov	r0, r3
 8003d1a:	4621      	mov	r1, r4
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f04f 0400 	mov.w	r4, #0
 8003d22:	461a      	mov	r2, r3
 8003d24:	4623      	mov	r3, r4
 8003d26:	f7fc fa4f 	bl	80001c8 <__aeabi_uldivmod>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	460c      	mov	r4, r1
 8003d2e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d30:	4b0a      	ldr	r3, [pc, #40]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	0c1b      	lsrs	r3, r3, #16
 8003d36:	f003 0303 	and.w	r3, r3, #3
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d48:	60bb      	str	r3, [r7, #8]
      break;
 8003d4a:	e002      	b.n	8003d52 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d4c:	4b04      	ldr	r3, [pc, #16]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003d4e:	60bb      	str	r3, [r7, #8]
      break;
 8003d50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d52:	68bb      	ldr	r3, [r7, #8]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3714      	adds	r7, #20
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	00f42400 	.word	0x00f42400
 8003d64:	007a1200 	.word	0x007a1200

08003d68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d6c:	4b03      	ldr	r3, [pc, #12]	; (8003d7c <HAL_RCC_GetHCLKFreq+0x14>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	20000000 	.word	0x20000000

08003d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d84:	f7ff fff0 	bl	8003d68 <HAL_RCC_GetHCLKFreq>
 8003d88:	4601      	mov	r1, r0
 8003d8a:	4b05      	ldr	r3, [pc, #20]	; (8003da0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	0a9b      	lsrs	r3, r3, #10
 8003d90:	f003 0307 	and.w	r3, r3, #7
 8003d94:	4a03      	ldr	r2, [pc, #12]	; (8003da4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d96:	5cd3      	ldrb	r3, [r2, r3]
 8003d98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	40023800 	.word	0x40023800
 8003da4:	08008114 	.word	0x08008114

08003da8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003dac:	f7ff ffdc 	bl	8003d68 <HAL_RCC_GetHCLKFreq>
 8003db0:	4601      	mov	r1, r0
 8003db2:	4b05      	ldr	r3, [pc, #20]	; (8003dc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	0b5b      	lsrs	r3, r3, #13
 8003db8:	f003 0307 	and.w	r3, r3, #7
 8003dbc:	4a03      	ldr	r2, [pc, #12]	; (8003dcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dbe:	5cd3      	ldrb	r3, [r2, r3]
 8003dc0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	40023800 	.word	0x40023800
 8003dcc:	08008114 	.word	0x08008114

08003dd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e03f      	b.n	8003e62 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d106      	bne.n	8003dfc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7fc fe0e 	bl	8000a18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2224      	movs	r2, #36	; 0x24
 8003e00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68da      	ldr	r2, [r3, #12]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 f829 	bl	8003e6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	691a      	ldr	r2, [r3, #16]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	695a      	ldr	r2, [r3, #20]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68da      	ldr	r2, [r3, #12]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2220      	movs	r2, #32
 8003e54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
	...

08003e6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e70:	b085      	sub	sp, #20
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	68da      	ldr	r2, [r3, #12]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	431a      	orrs	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	69db      	ldr	r3, [r3, #28]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003eae:	f023 030c 	bic.w	r3, r3, #12
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	6812      	ldr	r2, [r2, #0]
 8003eb6:	68f9      	ldr	r1, [r7, #12]
 8003eb8:	430b      	orrs	r3, r1
 8003eba:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	699a      	ldr	r2, [r3, #24]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eda:	f040 818b 	bne.w	80041f4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4ac1      	ldr	r2, [pc, #772]	; (80041e8 <UART_SetConfig+0x37c>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d005      	beq.n	8003ef4 <UART_SetConfig+0x88>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4abf      	ldr	r2, [pc, #764]	; (80041ec <UART_SetConfig+0x380>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	f040 80bd 	bne.w	800406e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ef4:	f7ff ff58 	bl	8003da8 <HAL_RCC_GetPCLK2Freq>
 8003ef8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	461d      	mov	r5, r3
 8003efe:	f04f 0600 	mov.w	r6, #0
 8003f02:	46a8      	mov	r8, r5
 8003f04:	46b1      	mov	r9, r6
 8003f06:	eb18 0308 	adds.w	r3, r8, r8
 8003f0a:	eb49 0409 	adc.w	r4, r9, r9
 8003f0e:	4698      	mov	r8, r3
 8003f10:	46a1      	mov	r9, r4
 8003f12:	eb18 0805 	adds.w	r8, r8, r5
 8003f16:	eb49 0906 	adc.w	r9, r9, r6
 8003f1a:	f04f 0100 	mov.w	r1, #0
 8003f1e:	f04f 0200 	mov.w	r2, #0
 8003f22:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003f26:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003f2a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003f2e:	4688      	mov	r8, r1
 8003f30:	4691      	mov	r9, r2
 8003f32:	eb18 0005 	adds.w	r0, r8, r5
 8003f36:	eb49 0106 	adc.w	r1, r9, r6
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	461d      	mov	r5, r3
 8003f40:	f04f 0600 	mov.w	r6, #0
 8003f44:	196b      	adds	r3, r5, r5
 8003f46:	eb46 0406 	adc.w	r4, r6, r6
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	4623      	mov	r3, r4
 8003f4e:	f7fc f93b 	bl	80001c8 <__aeabi_uldivmod>
 8003f52:	4603      	mov	r3, r0
 8003f54:	460c      	mov	r4, r1
 8003f56:	461a      	mov	r2, r3
 8003f58:	4ba5      	ldr	r3, [pc, #660]	; (80041f0 <UART_SetConfig+0x384>)
 8003f5a:	fba3 2302 	umull	r2, r3, r3, r2
 8003f5e:	095b      	lsrs	r3, r3, #5
 8003f60:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	461d      	mov	r5, r3
 8003f68:	f04f 0600 	mov.w	r6, #0
 8003f6c:	46a9      	mov	r9, r5
 8003f6e:	46b2      	mov	sl, r6
 8003f70:	eb19 0309 	adds.w	r3, r9, r9
 8003f74:	eb4a 040a 	adc.w	r4, sl, sl
 8003f78:	4699      	mov	r9, r3
 8003f7a:	46a2      	mov	sl, r4
 8003f7c:	eb19 0905 	adds.w	r9, r9, r5
 8003f80:	eb4a 0a06 	adc.w	sl, sl, r6
 8003f84:	f04f 0100 	mov.w	r1, #0
 8003f88:	f04f 0200 	mov.w	r2, #0
 8003f8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f90:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f94:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f98:	4689      	mov	r9, r1
 8003f9a:	4692      	mov	sl, r2
 8003f9c:	eb19 0005 	adds.w	r0, r9, r5
 8003fa0:	eb4a 0106 	adc.w	r1, sl, r6
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	461d      	mov	r5, r3
 8003faa:	f04f 0600 	mov.w	r6, #0
 8003fae:	196b      	adds	r3, r5, r5
 8003fb0:	eb46 0406 	adc.w	r4, r6, r6
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	4623      	mov	r3, r4
 8003fb8:	f7fc f906 	bl	80001c8 <__aeabi_uldivmod>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	460c      	mov	r4, r1
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	4b8b      	ldr	r3, [pc, #556]	; (80041f0 <UART_SetConfig+0x384>)
 8003fc4:	fba3 1302 	umull	r1, r3, r3, r2
 8003fc8:	095b      	lsrs	r3, r3, #5
 8003fca:	2164      	movs	r1, #100	; 0x64
 8003fcc:	fb01 f303 	mul.w	r3, r1, r3
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	00db      	lsls	r3, r3, #3
 8003fd4:	3332      	adds	r3, #50	; 0x32
 8003fd6:	4a86      	ldr	r2, [pc, #536]	; (80041f0 <UART_SetConfig+0x384>)
 8003fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fdc:	095b      	lsrs	r3, r3, #5
 8003fde:	005b      	lsls	r3, r3, #1
 8003fe0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003fe4:	4498      	add	r8, r3
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	461d      	mov	r5, r3
 8003fea:	f04f 0600 	mov.w	r6, #0
 8003fee:	46a9      	mov	r9, r5
 8003ff0:	46b2      	mov	sl, r6
 8003ff2:	eb19 0309 	adds.w	r3, r9, r9
 8003ff6:	eb4a 040a 	adc.w	r4, sl, sl
 8003ffa:	4699      	mov	r9, r3
 8003ffc:	46a2      	mov	sl, r4
 8003ffe:	eb19 0905 	adds.w	r9, r9, r5
 8004002:	eb4a 0a06 	adc.w	sl, sl, r6
 8004006:	f04f 0100 	mov.w	r1, #0
 800400a:	f04f 0200 	mov.w	r2, #0
 800400e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004012:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004016:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800401a:	4689      	mov	r9, r1
 800401c:	4692      	mov	sl, r2
 800401e:	eb19 0005 	adds.w	r0, r9, r5
 8004022:	eb4a 0106 	adc.w	r1, sl, r6
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	461d      	mov	r5, r3
 800402c:	f04f 0600 	mov.w	r6, #0
 8004030:	196b      	adds	r3, r5, r5
 8004032:	eb46 0406 	adc.w	r4, r6, r6
 8004036:	461a      	mov	r2, r3
 8004038:	4623      	mov	r3, r4
 800403a:	f7fc f8c5 	bl	80001c8 <__aeabi_uldivmod>
 800403e:	4603      	mov	r3, r0
 8004040:	460c      	mov	r4, r1
 8004042:	461a      	mov	r2, r3
 8004044:	4b6a      	ldr	r3, [pc, #424]	; (80041f0 <UART_SetConfig+0x384>)
 8004046:	fba3 1302 	umull	r1, r3, r3, r2
 800404a:	095b      	lsrs	r3, r3, #5
 800404c:	2164      	movs	r1, #100	; 0x64
 800404e:	fb01 f303 	mul.w	r3, r1, r3
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	00db      	lsls	r3, r3, #3
 8004056:	3332      	adds	r3, #50	; 0x32
 8004058:	4a65      	ldr	r2, [pc, #404]	; (80041f0 <UART_SetConfig+0x384>)
 800405a:	fba2 2303 	umull	r2, r3, r2, r3
 800405e:	095b      	lsrs	r3, r3, #5
 8004060:	f003 0207 	and.w	r2, r3, #7
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4442      	add	r2, r8
 800406a:	609a      	str	r2, [r3, #8]
 800406c:	e26f      	b.n	800454e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800406e:	f7ff fe87 	bl	8003d80 <HAL_RCC_GetPCLK1Freq>
 8004072:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	461d      	mov	r5, r3
 8004078:	f04f 0600 	mov.w	r6, #0
 800407c:	46a8      	mov	r8, r5
 800407e:	46b1      	mov	r9, r6
 8004080:	eb18 0308 	adds.w	r3, r8, r8
 8004084:	eb49 0409 	adc.w	r4, r9, r9
 8004088:	4698      	mov	r8, r3
 800408a:	46a1      	mov	r9, r4
 800408c:	eb18 0805 	adds.w	r8, r8, r5
 8004090:	eb49 0906 	adc.w	r9, r9, r6
 8004094:	f04f 0100 	mov.w	r1, #0
 8004098:	f04f 0200 	mov.w	r2, #0
 800409c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80040a0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80040a4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80040a8:	4688      	mov	r8, r1
 80040aa:	4691      	mov	r9, r2
 80040ac:	eb18 0005 	adds.w	r0, r8, r5
 80040b0:	eb49 0106 	adc.w	r1, r9, r6
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	461d      	mov	r5, r3
 80040ba:	f04f 0600 	mov.w	r6, #0
 80040be:	196b      	adds	r3, r5, r5
 80040c0:	eb46 0406 	adc.w	r4, r6, r6
 80040c4:	461a      	mov	r2, r3
 80040c6:	4623      	mov	r3, r4
 80040c8:	f7fc f87e 	bl	80001c8 <__aeabi_uldivmod>
 80040cc:	4603      	mov	r3, r0
 80040ce:	460c      	mov	r4, r1
 80040d0:	461a      	mov	r2, r3
 80040d2:	4b47      	ldr	r3, [pc, #284]	; (80041f0 <UART_SetConfig+0x384>)
 80040d4:	fba3 2302 	umull	r2, r3, r3, r2
 80040d8:	095b      	lsrs	r3, r3, #5
 80040da:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	461d      	mov	r5, r3
 80040e2:	f04f 0600 	mov.w	r6, #0
 80040e6:	46a9      	mov	r9, r5
 80040e8:	46b2      	mov	sl, r6
 80040ea:	eb19 0309 	adds.w	r3, r9, r9
 80040ee:	eb4a 040a 	adc.w	r4, sl, sl
 80040f2:	4699      	mov	r9, r3
 80040f4:	46a2      	mov	sl, r4
 80040f6:	eb19 0905 	adds.w	r9, r9, r5
 80040fa:	eb4a 0a06 	adc.w	sl, sl, r6
 80040fe:	f04f 0100 	mov.w	r1, #0
 8004102:	f04f 0200 	mov.w	r2, #0
 8004106:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800410a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800410e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004112:	4689      	mov	r9, r1
 8004114:	4692      	mov	sl, r2
 8004116:	eb19 0005 	adds.w	r0, r9, r5
 800411a:	eb4a 0106 	adc.w	r1, sl, r6
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	461d      	mov	r5, r3
 8004124:	f04f 0600 	mov.w	r6, #0
 8004128:	196b      	adds	r3, r5, r5
 800412a:	eb46 0406 	adc.w	r4, r6, r6
 800412e:	461a      	mov	r2, r3
 8004130:	4623      	mov	r3, r4
 8004132:	f7fc f849 	bl	80001c8 <__aeabi_uldivmod>
 8004136:	4603      	mov	r3, r0
 8004138:	460c      	mov	r4, r1
 800413a:	461a      	mov	r2, r3
 800413c:	4b2c      	ldr	r3, [pc, #176]	; (80041f0 <UART_SetConfig+0x384>)
 800413e:	fba3 1302 	umull	r1, r3, r3, r2
 8004142:	095b      	lsrs	r3, r3, #5
 8004144:	2164      	movs	r1, #100	; 0x64
 8004146:	fb01 f303 	mul.w	r3, r1, r3
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	00db      	lsls	r3, r3, #3
 800414e:	3332      	adds	r3, #50	; 0x32
 8004150:	4a27      	ldr	r2, [pc, #156]	; (80041f0 <UART_SetConfig+0x384>)
 8004152:	fba2 2303 	umull	r2, r3, r2, r3
 8004156:	095b      	lsrs	r3, r3, #5
 8004158:	005b      	lsls	r3, r3, #1
 800415a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800415e:	4498      	add	r8, r3
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	461d      	mov	r5, r3
 8004164:	f04f 0600 	mov.w	r6, #0
 8004168:	46a9      	mov	r9, r5
 800416a:	46b2      	mov	sl, r6
 800416c:	eb19 0309 	adds.w	r3, r9, r9
 8004170:	eb4a 040a 	adc.w	r4, sl, sl
 8004174:	4699      	mov	r9, r3
 8004176:	46a2      	mov	sl, r4
 8004178:	eb19 0905 	adds.w	r9, r9, r5
 800417c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004180:	f04f 0100 	mov.w	r1, #0
 8004184:	f04f 0200 	mov.w	r2, #0
 8004188:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800418c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004190:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004194:	4689      	mov	r9, r1
 8004196:	4692      	mov	sl, r2
 8004198:	eb19 0005 	adds.w	r0, r9, r5
 800419c:	eb4a 0106 	adc.w	r1, sl, r6
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	461d      	mov	r5, r3
 80041a6:	f04f 0600 	mov.w	r6, #0
 80041aa:	196b      	adds	r3, r5, r5
 80041ac:	eb46 0406 	adc.w	r4, r6, r6
 80041b0:	461a      	mov	r2, r3
 80041b2:	4623      	mov	r3, r4
 80041b4:	f7fc f808 	bl	80001c8 <__aeabi_uldivmod>
 80041b8:	4603      	mov	r3, r0
 80041ba:	460c      	mov	r4, r1
 80041bc:	461a      	mov	r2, r3
 80041be:	4b0c      	ldr	r3, [pc, #48]	; (80041f0 <UART_SetConfig+0x384>)
 80041c0:	fba3 1302 	umull	r1, r3, r3, r2
 80041c4:	095b      	lsrs	r3, r3, #5
 80041c6:	2164      	movs	r1, #100	; 0x64
 80041c8:	fb01 f303 	mul.w	r3, r1, r3
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	00db      	lsls	r3, r3, #3
 80041d0:	3332      	adds	r3, #50	; 0x32
 80041d2:	4a07      	ldr	r2, [pc, #28]	; (80041f0 <UART_SetConfig+0x384>)
 80041d4:	fba2 2303 	umull	r2, r3, r2, r3
 80041d8:	095b      	lsrs	r3, r3, #5
 80041da:	f003 0207 	and.w	r2, r3, #7
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4442      	add	r2, r8
 80041e4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80041e6:	e1b2      	b.n	800454e <UART_SetConfig+0x6e2>
 80041e8:	40011000 	.word	0x40011000
 80041ec:	40011400 	.word	0x40011400
 80041f0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4ad7      	ldr	r2, [pc, #860]	; (8004558 <UART_SetConfig+0x6ec>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d005      	beq.n	800420a <UART_SetConfig+0x39e>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4ad6      	ldr	r2, [pc, #856]	; (800455c <UART_SetConfig+0x6f0>)
 8004204:	4293      	cmp	r3, r2
 8004206:	f040 80d1 	bne.w	80043ac <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800420a:	f7ff fdcd 	bl	8003da8 <HAL_RCC_GetPCLK2Freq>
 800420e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	469a      	mov	sl, r3
 8004214:	f04f 0b00 	mov.w	fp, #0
 8004218:	46d0      	mov	r8, sl
 800421a:	46d9      	mov	r9, fp
 800421c:	eb18 0308 	adds.w	r3, r8, r8
 8004220:	eb49 0409 	adc.w	r4, r9, r9
 8004224:	4698      	mov	r8, r3
 8004226:	46a1      	mov	r9, r4
 8004228:	eb18 080a 	adds.w	r8, r8, sl
 800422c:	eb49 090b 	adc.w	r9, r9, fp
 8004230:	f04f 0100 	mov.w	r1, #0
 8004234:	f04f 0200 	mov.w	r2, #0
 8004238:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800423c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004240:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004244:	4688      	mov	r8, r1
 8004246:	4691      	mov	r9, r2
 8004248:	eb1a 0508 	adds.w	r5, sl, r8
 800424c:	eb4b 0609 	adc.w	r6, fp, r9
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	4619      	mov	r1, r3
 8004256:	f04f 0200 	mov.w	r2, #0
 800425a:	f04f 0300 	mov.w	r3, #0
 800425e:	f04f 0400 	mov.w	r4, #0
 8004262:	0094      	lsls	r4, r2, #2
 8004264:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004268:	008b      	lsls	r3, r1, #2
 800426a:	461a      	mov	r2, r3
 800426c:	4623      	mov	r3, r4
 800426e:	4628      	mov	r0, r5
 8004270:	4631      	mov	r1, r6
 8004272:	f7fb ffa9 	bl	80001c8 <__aeabi_uldivmod>
 8004276:	4603      	mov	r3, r0
 8004278:	460c      	mov	r4, r1
 800427a:	461a      	mov	r2, r3
 800427c:	4bb8      	ldr	r3, [pc, #736]	; (8004560 <UART_SetConfig+0x6f4>)
 800427e:	fba3 2302 	umull	r2, r3, r3, r2
 8004282:	095b      	lsrs	r3, r3, #5
 8004284:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	469b      	mov	fp, r3
 800428c:	f04f 0c00 	mov.w	ip, #0
 8004290:	46d9      	mov	r9, fp
 8004292:	46e2      	mov	sl, ip
 8004294:	eb19 0309 	adds.w	r3, r9, r9
 8004298:	eb4a 040a 	adc.w	r4, sl, sl
 800429c:	4699      	mov	r9, r3
 800429e:	46a2      	mov	sl, r4
 80042a0:	eb19 090b 	adds.w	r9, r9, fp
 80042a4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80042a8:	f04f 0100 	mov.w	r1, #0
 80042ac:	f04f 0200 	mov.w	r2, #0
 80042b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042b4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042b8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042bc:	4689      	mov	r9, r1
 80042be:	4692      	mov	sl, r2
 80042c0:	eb1b 0509 	adds.w	r5, fp, r9
 80042c4:	eb4c 060a 	adc.w	r6, ip, sl
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	4619      	mov	r1, r3
 80042ce:	f04f 0200 	mov.w	r2, #0
 80042d2:	f04f 0300 	mov.w	r3, #0
 80042d6:	f04f 0400 	mov.w	r4, #0
 80042da:	0094      	lsls	r4, r2, #2
 80042dc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80042e0:	008b      	lsls	r3, r1, #2
 80042e2:	461a      	mov	r2, r3
 80042e4:	4623      	mov	r3, r4
 80042e6:	4628      	mov	r0, r5
 80042e8:	4631      	mov	r1, r6
 80042ea:	f7fb ff6d 	bl	80001c8 <__aeabi_uldivmod>
 80042ee:	4603      	mov	r3, r0
 80042f0:	460c      	mov	r4, r1
 80042f2:	461a      	mov	r2, r3
 80042f4:	4b9a      	ldr	r3, [pc, #616]	; (8004560 <UART_SetConfig+0x6f4>)
 80042f6:	fba3 1302 	umull	r1, r3, r3, r2
 80042fa:	095b      	lsrs	r3, r3, #5
 80042fc:	2164      	movs	r1, #100	; 0x64
 80042fe:	fb01 f303 	mul.w	r3, r1, r3
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	011b      	lsls	r3, r3, #4
 8004306:	3332      	adds	r3, #50	; 0x32
 8004308:	4a95      	ldr	r2, [pc, #596]	; (8004560 <UART_SetConfig+0x6f4>)
 800430a:	fba2 2303 	umull	r2, r3, r2, r3
 800430e:	095b      	lsrs	r3, r3, #5
 8004310:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004314:	4498      	add	r8, r3
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	469b      	mov	fp, r3
 800431a:	f04f 0c00 	mov.w	ip, #0
 800431e:	46d9      	mov	r9, fp
 8004320:	46e2      	mov	sl, ip
 8004322:	eb19 0309 	adds.w	r3, r9, r9
 8004326:	eb4a 040a 	adc.w	r4, sl, sl
 800432a:	4699      	mov	r9, r3
 800432c:	46a2      	mov	sl, r4
 800432e:	eb19 090b 	adds.w	r9, r9, fp
 8004332:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004336:	f04f 0100 	mov.w	r1, #0
 800433a:	f04f 0200 	mov.w	r2, #0
 800433e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004342:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004346:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800434a:	4689      	mov	r9, r1
 800434c:	4692      	mov	sl, r2
 800434e:	eb1b 0509 	adds.w	r5, fp, r9
 8004352:	eb4c 060a 	adc.w	r6, ip, sl
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	4619      	mov	r1, r3
 800435c:	f04f 0200 	mov.w	r2, #0
 8004360:	f04f 0300 	mov.w	r3, #0
 8004364:	f04f 0400 	mov.w	r4, #0
 8004368:	0094      	lsls	r4, r2, #2
 800436a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800436e:	008b      	lsls	r3, r1, #2
 8004370:	461a      	mov	r2, r3
 8004372:	4623      	mov	r3, r4
 8004374:	4628      	mov	r0, r5
 8004376:	4631      	mov	r1, r6
 8004378:	f7fb ff26 	bl	80001c8 <__aeabi_uldivmod>
 800437c:	4603      	mov	r3, r0
 800437e:	460c      	mov	r4, r1
 8004380:	461a      	mov	r2, r3
 8004382:	4b77      	ldr	r3, [pc, #476]	; (8004560 <UART_SetConfig+0x6f4>)
 8004384:	fba3 1302 	umull	r1, r3, r3, r2
 8004388:	095b      	lsrs	r3, r3, #5
 800438a:	2164      	movs	r1, #100	; 0x64
 800438c:	fb01 f303 	mul.w	r3, r1, r3
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	011b      	lsls	r3, r3, #4
 8004394:	3332      	adds	r3, #50	; 0x32
 8004396:	4a72      	ldr	r2, [pc, #456]	; (8004560 <UART_SetConfig+0x6f4>)
 8004398:	fba2 2303 	umull	r2, r3, r2, r3
 800439c:	095b      	lsrs	r3, r3, #5
 800439e:	f003 020f 	and.w	r2, r3, #15
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4442      	add	r2, r8
 80043a8:	609a      	str	r2, [r3, #8]
 80043aa:	e0d0      	b.n	800454e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80043ac:	f7ff fce8 	bl	8003d80 <HAL_RCC_GetPCLK1Freq>
 80043b0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	469a      	mov	sl, r3
 80043b6:	f04f 0b00 	mov.w	fp, #0
 80043ba:	46d0      	mov	r8, sl
 80043bc:	46d9      	mov	r9, fp
 80043be:	eb18 0308 	adds.w	r3, r8, r8
 80043c2:	eb49 0409 	adc.w	r4, r9, r9
 80043c6:	4698      	mov	r8, r3
 80043c8:	46a1      	mov	r9, r4
 80043ca:	eb18 080a 	adds.w	r8, r8, sl
 80043ce:	eb49 090b 	adc.w	r9, r9, fp
 80043d2:	f04f 0100 	mov.w	r1, #0
 80043d6:	f04f 0200 	mov.w	r2, #0
 80043da:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80043de:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80043e2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80043e6:	4688      	mov	r8, r1
 80043e8:	4691      	mov	r9, r2
 80043ea:	eb1a 0508 	adds.w	r5, sl, r8
 80043ee:	eb4b 0609 	adc.w	r6, fp, r9
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	4619      	mov	r1, r3
 80043f8:	f04f 0200 	mov.w	r2, #0
 80043fc:	f04f 0300 	mov.w	r3, #0
 8004400:	f04f 0400 	mov.w	r4, #0
 8004404:	0094      	lsls	r4, r2, #2
 8004406:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800440a:	008b      	lsls	r3, r1, #2
 800440c:	461a      	mov	r2, r3
 800440e:	4623      	mov	r3, r4
 8004410:	4628      	mov	r0, r5
 8004412:	4631      	mov	r1, r6
 8004414:	f7fb fed8 	bl	80001c8 <__aeabi_uldivmod>
 8004418:	4603      	mov	r3, r0
 800441a:	460c      	mov	r4, r1
 800441c:	461a      	mov	r2, r3
 800441e:	4b50      	ldr	r3, [pc, #320]	; (8004560 <UART_SetConfig+0x6f4>)
 8004420:	fba3 2302 	umull	r2, r3, r3, r2
 8004424:	095b      	lsrs	r3, r3, #5
 8004426:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	469b      	mov	fp, r3
 800442e:	f04f 0c00 	mov.w	ip, #0
 8004432:	46d9      	mov	r9, fp
 8004434:	46e2      	mov	sl, ip
 8004436:	eb19 0309 	adds.w	r3, r9, r9
 800443a:	eb4a 040a 	adc.w	r4, sl, sl
 800443e:	4699      	mov	r9, r3
 8004440:	46a2      	mov	sl, r4
 8004442:	eb19 090b 	adds.w	r9, r9, fp
 8004446:	eb4a 0a0c 	adc.w	sl, sl, ip
 800444a:	f04f 0100 	mov.w	r1, #0
 800444e:	f04f 0200 	mov.w	r2, #0
 8004452:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004456:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800445a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800445e:	4689      	mov	r9, r1
 8004460:	4692      	mov	sl, r2
 8004462:	eb1b 0509 	adds.w	r5, fp, r9
 8004466:	eb4c 060a 	adc.w	r6, ip, sl
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	4619      	mov	r1, r3
 8004470:	f04f 0200 	mov.w	r2, #0
 8004474:	f04f 0300 	mov.w	r3, #0
 8004478:	f04f 0400 	mov.w	r4, #0
 800447c:	0094      	lsls	r4, r2, #2
 800447e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004482:	008b      	lsls	r3, r1, #2
 8004484:	461a      	mov	r2, r3
 8004486:	4623      	mov	r3, r4
 8004488:	4628      	mov	r0, r5
 800448a:	4631      	mov	r1, r6
 800448c:	f7fb fe9c 	bl	80001c8 <__aeabi_uldivmod>
 8004490:	4603      	mov	r3, r0
 8004492:	460c      	mov	r4, r1
 8004494:	461a      	mov	r2, r3
 8004496:	4b32      	ldr	r3, [pc, #200]	; (8004560 <UART_SetConfig+0x6f4>)
 8004498:	fba3 1302 	umull	r1, r3, r3, r2
 800449c:	095b      	lsrs	r3, r3, #5
 800449e:	2164      	movs	r1, #100	; 0x64
 80044a0:	fb01 f303 	mul.w	r3, r1, r3
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	011b      	lsls	r3, r3, #4
 80044a8:	3332      	adds	r3, #50	; 0x32
 80044aa:	4a2d      	ldr	r2, [pc, #180]	; (8004560 <UART_SetConfig+0x6f4>)
 80044ac:	fba2 2303 	umull	r2, r3, r2, r3
 80044b0:	095b      	lsrs	r3, r3, #5
 80044b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044b6:	4498      	add	r8, r3
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	469b      	mov	fp, r3
 80044bc:	f04f 0c00 	mov.w	ip, #0
 80044c0:	46d9      	mov	r9, fp
 80044c2:	46e2      	mov	sl, ip
 80044c4:	eb19 0309 	adds.w	r3, r9, r9
 80044c8:	eb4a 040a 	adc.w	r4, sl, sl
 80044cc:	4699      	mov	r9, r3
 80044ce:	46a2      	mov	sl, r4
 80044d0:	eb19 090b 	adds.w	r9, r9, fp
 80044d4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80044d8:	f04f 0100 	mov.w	r1, #0
 80044dc:	f04f 0200 	mov.w	r2, #0
 80044e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044ec:	4689      	mov	r9, r1
 80044ee:	4692      	mov	sl, r2
 80044f0:	eb1b 0509 	adds.w	r5, fp, r9
 80044f4:	eb4c 060a 	adc.w	r6, ip, sl
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	4619      	mov	r1, r3
 80044fe:	f04f 0200 	mov.w	r2, #0
 8004502:	f04f 0300 	mov.w	r3, #0
 8004506:	f04f 0400 	mov.w	r4, #0
 800450a:	0094      	lsls	r4, r2, #2
 800450c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004510:	008b      	lsls	r3, r1, #2
 8004512:	461a      	mov	r2, r3
 8004514:	4623      	mov	r3, r4
 8004516:	4628      	mov	r0, r5
 8004518:	4631      	mov	r1, r6
 800451a:	f7fb fe55 	bl	80001c8 <__aeabi_uldivmod>
 800451e:	4603      	mov	r3, r0
 8004520:	460c      	mov	r4, r1
 8004522:	461a      	mov	r2, r3
 8004524:	4b0e      	ldr	r3, [pc, #56]	; (8004560 <UART_SetConfig+0x6f4>)
 8004526:	fba3 1302 	umull	r1, r3, r3, r2
 800452a:	095b      	lsrs	r3, r3, #5
 800452c:	2164      	movs	r1, #100	; 0x64
 800452e:	fb01 f303 	mul.w	r3, r1, r3
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	3332      	adds	r3, #50	; 0x32
 8004538:	4a09      	ldr	r2, [pc, #36]	; (8004560 <UART_SetConfig+0x6f4>)
 800453a:	fba2 2303 	umull	r2, r3, r2, r3
 800453e:	095b      	lsrs	r3, r3, #5
 8004540:	f003 020f 	and.w	r2, r3, #15
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4442      	add	r2, r8
 800454a:	609a      	str	r2, [r3, #8]
}
 800454c:	e7ff      	b.n	800454e <UART_SetConfig+0x6e2>
 800454e:	bf00      	nop
 8004550:	3714      	adds	r7, #20
 8004552:	46bd      	mov	sp, r7
 8004554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004558:	40011000 	.word	0x40011000
 800455c:	40011400 	.word	0x40011400
 8004560:	51eb851f 	.word	0x51eb851f

08004564 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004564:	b084      	sub	sp, #16
 8004566:	b580      	push	{r7, lr}
 8004568:	b084      	sub	sp, #16
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
 800456e:	f107 001c 	add.w	r0, r7, #28
 8004572:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004578:	2b01      	cmp	r3, #1
 800457a:	d122      	bne.n	80045c2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004580:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004590:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80045a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d105      	bne.n	80045b6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f001 fac6 	bl	8005b48 <USB_CoreReset>
 80045bc:	4603      	mov	r3, r0
 80045be:	73fb      	strb	r3, [r7, #15]
 80045c0:	e01a      	b.n	80045f8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f001 faba 	bl	8005b48 <USB_CoreReset>
 80045d4:	4603      	mov	r3, r0
 80045d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80045d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d106      	bne.n	80045ec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	639a      	str	r2, [r3, #56]	; 0x38
 80045ea:	e005      	b.n	80045f8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80045f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d10b      	bne.n	8004616 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f043 0206 	orr.w	r2, r3, #6
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f043 0220 	orr.w	r2, r3, #32
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004616:	7bfb      	ldrb	r3, [r7, #15]
}
 8004618:	4618      	mov	r0, r3
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004622:	b004      	add	sp, #16
 8004624:	4770      	bx	lr
	...

08004628 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004628:	b480      	push	{r7}
 800462a:	b087      	sub	sp, #28
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	4613      	mov	r3, r2
 8004634:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004636:	79fb      	ldrb	r3, [r7, #7]
 8004638:	2b02      	cmp	r3, #2
 800463a:	d165      	bne.n	8004708 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	4a41      	ldr	r2, [pc, #260]	; (8004744 <USB_SetTurnaroundTime+0x11c>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d906      	bls.n	8004652 <USB_SetTurnaroundTime+0x2a>
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	4a40      	ldr	r2, [pc, #256]	; (8004748 <USB_SetTurnaroundTime+0x120>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d802      	bhi.n	8004652 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800464c:	230f      	movs	r3, #15
 800464e:	617b      	str	r3, [r7, #20]
 8004650:	e062      	b.n	8004718 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	4a3c      	ldr	r2, [pc, #240]	; (8004748 <USB_SetTurnaroundTime+0x120>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d906      	bls.n	8004668 <USB_SetTurnaroundTime+0x40>
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	4a3b      	ldr	r2, [pc, #236]	; (800474c <USB_SetTurnaroundTime+0x124>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d802      	bhi.n	8004668 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004662:	230e      	movs	r3, #14
 8004664:	617b      	str	r3, [r7, #20]
 8004666:	e057      	b.n	8004718 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	4a38      	ldr	r2, [pc, #224]	; (800474c <USB_SetTurnaroundTime+0x124>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d906      	bls.n	800467e <USB_SetTurnaroundTime+0x56>
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	4a37      	ldr	r2, [pc, #220]	; (8004750 <USB_SetTurnaroundTime+0x128>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d802      	bhi.n	800467e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004678:	230d      	movs	r3, #13
 800467a:	617b      	str	r3, [r7, #20]
 800467c:	e04c      	b.n	8004718 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	4a33      	ldr	r2, [pc, #204]	; (8004750 <USB_SetTurnaroundTime+0x128>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d906      	bls.n	8004694 <USB_SetTurnaroundTime+0x6c>
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	4a32      	ldr	r2, [pc, #200]	; (8004754 <USB_SetTurnaroundTime+0x12c>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d802      	bhi.n	8004694 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800468e:	230c      	movs	r3, #12
 8004690:	617b      	str	r3, [r7, #20]
 8004692:	e041      	b.n	8004718 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	4a2f      	ldr	r2, [pc, #188]	; (8004754 <USB_SetTurnaroundTime+0x12c>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d906      	bls.n	80046aa <USB_SetTurnaroundTime+0x82>
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	4a2e      	ldr	r2, [pc, #184]	; (8004758 <USB_SetTurnaroundTime+0x130>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d802      	bhi.n	80046aa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80046a4:	230b      	movs	r3, #11
 80046a6:	617b      	str	r3, [r7, #20]
 80046a8:	e036      	b.n	8004718 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	4a2a      	ldr	r2, [pc, #168]	; (8004758 <USB_SetTurnaroundTime+0x130>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d906      	bls.n	80046c0 <USB_SetTurnaroundTime+0x98>
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	4a29      	ldr	r2, [pc, #164]	; (800475c <USB_SetTurnaroundTime+0x134>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d802      	bhi.n	80046c0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80046ba:	230a      	movs	r3, #10
 80046bc:	617b      	str	r3, [r7, #20]
 80046be:	e02b      	b.n	8004718 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	4a26      	ldr	r2, [pc, #152]	; (800475c <USB_SetTurnaroundTime+0x134>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d906      	bls.n	80046d6 <USB_SetTurnaroundTime+0xae>
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	4a25      	ldr	r2, [pc, #148]	; (8004760 <USB_SetTurnaroundTime+0x138>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d802      	bhi.n	80046d6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80046d0:	2309      	movs	r3, #9
 80046d2:	617b      	str	r3, [r7, #20]
 80046d4:	e020      	b.n	8004718 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	4a21      	ldr	r2, [pc, #132]	; (8004760 <USB_SetTurnaroundTime+0x138>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d906      	bls.n	80046ec <USB_SetTurnaroundTime+0xc4>
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	4a20      	ldr	r2, [pc, #128]	; (8004764 <USB_SetTurnaroundTime+0x13c>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d802      	bhi.n	80046ec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80046e6:	2308      	movs	r3, #8
 80046e8:	617b      	str	r3, [r7, #20]
 80046ea:	e015      	b.n	8004718 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	4a1d      	ldr	r2, [pc, #116]	; (8004764 <USB_SetTurnaroundTime+0x13c>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d906      	bls.n	8004702 <USB_SetTurnaroundTime+0xda>
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	4a1c      	ldr	r2, [pc, #112]	; (8004768 <USB_SetTurnaroundTime+0x140>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d802      	bhi.n	8004702 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80046fc:	2307      	movs	r3, #7
 80046fe:	617b      	str	r3, [r7, #20]
 8004700:	e00a      	b.n	8004718 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004702:	2306      	movs	r3, #6
 8004704:	617b      	str	r3, [r7, #20]
 8004706:	e007      	b.n	8004718 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004708:	79fb      	ldrb	r3, [r7, #7]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d102      	bne.n	8004714 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800470e:	2309      	movs	r3, #9
 8004710:	617b      	str	r3, [r7, #20]
 8004712:	e001      	b.n	8004718 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004714:	2309      	movs	r3, #9
 8004716:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	68da      	ldr	r2, [r3, #12]
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	029b      	lsls	r3, r3, #10
 800472c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004730:	431a      	orrs	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	371c      	adds	r7, #28
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr
 8004744:	00d8acbf 	.word	0x00d8acbf
 8004748:	00e4e1bf 	.word	0x00e4e1bf
 800474c:	00f423ff 	.word	0x00f423ff
 8004750:	0106737f 	.word	0x0106737f
 8004754:	011a499f 	.word	0x011a499f
 8004758:	01312cff 	.word	0x01312cff
 800475c:	014ca43f 	.word	0x014ca43f
 8004760:	016e35ff 	.word	0x016e35ff
 8004764:	01a6ab1f 	.word	0x01a6ab1f
 8004768:	01e847ff 	.word	0x01e847ff

0800476c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f043 0201 	orr.w	r2, r3, #1
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr

0800478e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800478e:	b480      	push	{r7}
 8004790:	b083      	sub	sp, #12
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f023 0201 	bic.w	r2, r3, #1
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	460b      	mov	r3, r1
 80047ba:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80047c8:	78fb      	ldrb	r3, [r7, #3]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d106      	bne.n	80047dc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	60da      	str	r2, [r3, #12]
 80047da:	e00b      	b.n	80047f4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80047dc:	78fb      	ldrb	r3, [r7, #3]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d106      	bne.n	80047f0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	60da      	str	r2, [r3, #12]
 80047ee:	e001      	b.n	80047f4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e003      	b.n	80047fc <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80047f4:	2032      	movs	r0, #50	; 0x32
 80047f6:	f7fc fac7 	bl	8000d88 <HAL_Delay>

  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3708      	adds	r7, #8
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004804:	b084      	sub	sp, #16
 8004806:	b580      	push	{r7, lr}
 8004808:	b086      	sub	sp, #24
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
 800480e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004812:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004816:	2300      	movs	r3, #0
 8004818:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800481e:	2300      	movs	r3, #0
 8004820:	613b      	str	r3, [r7, #16]
 8004822:	e009      	b.n	8004838 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	3340      	adds	r3, #64	; 0x40
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4413      	add	r3, r2
 800482e:	2200      	movs	r2, #0
 8004830:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	3301      	adds	r3, #1
 8004836:	613b      	str	r3, [r7, #16]
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	2b0e      	cmp	r3, #14
 800483c:	d9f2      	bls.n	8004824 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800483e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004840:	2b00      	cmp	r3, #0
 8004842:	d11c      	bne.n	800487e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004852:	f043 0302 	orr.w	r3, r3, #2
 8004856:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004868:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004874:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	639a      	str	r2, [r3, #56]	; 0x38
 800487c:	e00b      	b.n	8004896 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004882:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800489c:	461a      	mov	r2, r3
 800489e:	2300      	movs	r3, #0
 80048a0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a8:	4619      	mov	r1, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048b0:	461a      	mov	r2, r3
 80048b2:	680b      	ldr	r3, [r1, #0]
 80048b4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80048b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d10c      	bne.n	80048d6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80048bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d104      	bne.n	80048cc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80048c2:	2100      	movs	r1, #0
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 f949 	bl	8004b5c <USB_SetDevSpeed>
 80048ca:	e008      	b.n	80048de <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80048cc:	2101      	movs	r1, #1
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 f944 	bl	8004b5c <USB_SetDevSpeed>
 80048d4:	e003      	b.n	80048de <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80048d6:	2103      	movs	r1, #3
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 f93f 	bl	8004b5c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80048de:	2110      	movs	r1, #16
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 f8f3 	bl	8004acc <USB_FlushTxFifo>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d001      	beq.n	80048f0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 f911 	bl	8004b18 <USB_FlushRxFifo>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d001      	beq.n	8004900 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004906:	461a      	mov	r2, r3
 8004908:	2300      	movs	r3, #0
 800490a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004912:	461a      	mov	r2, r3
 8004914:	2300      	movs	r3, #0
 8004916:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800491e:	461a      	mov	r2, r3
 8004920:	2300      	movs	r3, #0
 8004922:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004924:	2300      	movs	r3, #0
 8004926:	613b      	str	r3, [r7, #16]
 8004928:	e043      	b.n	80049b2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	015a      	lsls	r2, r3, #5
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	4413      	add	r3, r2
 8004932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800493c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004940:	d118      	bne.n	8004974 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10a      	bne.n	800495e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	015a      	lsls	r2, r3, #5
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	4413      	add	r3, r2
 8004950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004954:	461a      	mov	r2, r3
 8004956:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800495a:	6013      	str	r3, [r2, #0]
 800495c:	e013      	b.n	8004986 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	015a      	lsls	r2, r3, #5
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	4413      	add	r3, r2
 8004966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800496a:	461a      	mov	r2, r3
 800496c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004970:	6013      	str	r3, [r2, #0]
 8004972:	e008      	b.n	8004986 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	015a      	lsls	r2, r3, #5
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	4413      	add	r3, r2
 800497c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004980:	461a      	mov	r2, r3
 8004982:	2300      	movs	r3, #0
 8004984:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	015a      	lsls	r2, r3, #5
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	4413      	add	r3, r2
 800498e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004992:	461a      	mov	r2, r3
 8004994:	2300      	movs	r3, #0
 8004996:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	015a      	lsls	r2, r3, #5
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	4413      	add	r3, r2
 80049a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049a4:	461a      	mov	r2, r3
 80049a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80049aa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	3301      	adds	r3, #1
 80049b0:	613b      	str	r3, [r7, #16]
 80049b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d3b7      	bcc.n	800492a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049ba:	2300      	movs	r3, #0
 80049bc:	613b      	str	r3, [r7, #16]
 80049be:	e043      	b.n	8004a48 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	015a      	lsls	r2, r3, #5
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4413      	add	r3, r2
 80049c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049d6:	d118      	bne.n	8004a0a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10a      	bne.n	80049f4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	015a      	lsls	r2, r3, #5
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	4413      	add	r3, r2
 80049e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ea:	461a      	mov	r2, r3
 80049ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80049f0:	6013      	str	r3, [r2, #0]
 80049f2:	e013      	b.n	8004a1c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	015a      	lsls	r2, r3, #5
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a00:	461a      	mov	r2, r3
 8004a02:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a06:	6013      	str	r3, [r2, #0]
 8004a08:	e008      	b.n	8004a1c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	015a      	lsls	r2, r3, #5
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	4413      	add	r3, r2
 8004a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a16:	461a      	mov	r2, r3
 8004a18:	2300      	movs	r3, #0
 8004a1a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	015a      	lsls	r2, r3, #5
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a28:	461a      	mov	r2, r3
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	015a      	lsls	r2, r3, #5
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	4413      	add	r3, r2
 8004a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a40:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	3301      	adds	r3, #1
 8004a46:	613b      	str	r3, [r7, #16]
 8004a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d3b7      	bcc.n	80049c0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a62:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004a70:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d105      	bne.n	8004a84 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	f043 0210 	orr.w	r2, r3, #16
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	699a      	ldr	r2, [r3, #24]
 8004a88:	4b0f      	ldr	r3, [pc, #60]	; (8004ac8 <USB_DevInit+0x2c4>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d005      	beq.n	8004aa2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	f043 0208 	orr.w	r2, r3, #8
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004aa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d107      	bne.n	8004ab8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ab0:	f043 0304 	orr.w	r3, r3, #4
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004ab8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3718      	adds	r7, #24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ac4:	b004      	add	sp, #16
 8004ac6:	4770      	bx	lr
 8004ac8:	803c3800 	.word	0x803c3800

08004acc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	019b      	lsls	r3, r3, #6
 8004ade:	f043 0220 	orr.w	r2, r3, #32
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	60fb      	str	r3, [r7, #12]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	4a09      	ldr	r2, [pc, #36]	; (8004b14 <USB_FlushTxFifo+0x48>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d901      	bls.n	8004af8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e006      	b.n	8004b06 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	f003 0320 	and.w	r3, r3, #32
 8004b00:	2b20      	cmp	r3, #32
 8004b02:	d0f0      	beq.n	8004ae6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	00030d40 	.word	0x00030d40

08004b18 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004b20:	2300      	movs	r3, #0
 8004b22:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2210      	movs	r2, #16
 8004b28:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	60fb      	str	r3, [r7, #12]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	4a09      	ldr	r2, [pc, #36]	; (8004b58 <USB_FlushRxFifo+0x40>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d901      	bls.n	8004b3c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e006      	b.n	8004b4a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	f003 0310 	and.w	r3, r3, #16
 8004b44:	2b10      	cmp	r3, #16
 8004b46:	d0f0      	beq.n	8004b2a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3714      	adds	r7, #20
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	00030d40 	.word	0x00030d40

08004b5c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	460b      	mov	r3, r1
 8004b66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	78fb      	ldrb	r3, [r7, #3]
 8004b76:	68f9      	ldr	r1, [r7, #12]
 8004b78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3714      	adds	r7, #20
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr

08004b8e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004b8e:	b480      	push	{r7}
 8004b90:	b087      	sub	sp, #28
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f003 0306 	and.w	r3, r3, #6
 8004ba6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d102      	bne.n	8004bb4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	75fb      	strb	r3, [r7, #23]
 8004bb2:	e00a      	b.n	8004bca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d002      	beq.n	8004bc0 <USB_GetDevSpeed+0x32>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2b06      	cmp	r3, #6
 8004bbe:	d102      	bne.n	8004bc6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	75fb      	strb	r3, [r7, #23]
 8004bc4:	e001      	b.n	8004bca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004bc6:	230f      	movs	r3, #15
 8004bc8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004bca:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	371c      	adds	r7, #28
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	785b      	ldrb	r3, [r3, #1]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d13a      	bne.n	8004c6a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bfa:	69da      	ldr	r2, [r3, #28]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	f003 030f 	and.w	r3, r3, #15
 8004c04:	2101      	movs	r1, #1
 8004c06:	fa01 f303 	lsl.w	r3, r1, r3
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	68f9      	ldr	r1, [r7, #12]
 8004c0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c12:	4313      	orrs	r3, r2
 8004c14:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	015a      	lsls	r2, r3, #5
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d155      	bne.n	8004cd8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	015a      	lsls	r2, r3, #5
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	4413      	add	r3, r2
 8004c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	78db      	ldrb	r3, [r3, #3]
 8004c46:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c48:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	059b      	lsls	r3, r3, #22
 8004c4e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c50:	4313      	orrs	r3, r2
 8004c52:	68ba      	ldr	r2, [r7, #8]
 8004c54:	0151      	lsls	r1, r2, #5
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	440a      	add	r2, r1
 8004c5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c66:	6013      	str	r3, [r2, #0]
 8004c68:	e036      	b.n	8004cd8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c70:	69da      	ldr	r2, [r3, #28]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	f003 030f 	and.w	r3, r3, #15
 8004c7a:	2101      	movs	r1, #1
 8004c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c80:	041b      	lsls	r3, r3, #16
 8004c82:	68f9      	ldr	r1, [r7, #12]
 8004c84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	015a      	lsls	r2, r3, #5
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	4413      	add	r3, r2
 8004c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d11a      	bne.n	8004cd8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	015a      	lsls	r2, r3, #5
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	4413      	add	r3, r2
 8004caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	78db      	ldrb	r3, [r3, #3]
 8004cbc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004cbe:	430b      	orrs	r3, r1
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	0151      	lsls	r1, r2, #5
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	440a      	add	r2, r1
 8004cca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cd6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3714      	adds	r7, #20
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
	...

08004ce8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	785b      	ldrb	r3, [r3, #1]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d161      	bne.n	8004dc8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	015a      	lsls	r2, r3, #5
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d1a:	d11f      	bne.n	8004d5c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	015a      	lsls	r2, r3, #5
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	4413      	add	r3, r2
 8004d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68ba      	ldr	r2, [r7, #8]
 8004d2c:	0151      	lsls	r1, r2, #5
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	440a      	add	r2, r1
 8004d32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d36:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d3a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	015a      	lsls	r2, r3, #5
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	4413      	add	r3, r2
 8004d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68ba      	ldr	r2, [r7, #8]
 8004d4c:	0151      	lsls	r1, r2, #5
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	440a      	add	r2, r1
 8004d52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d5a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	f003 030f 	and.w	r3, r3, #15
 8004d6c:	2101      	movs	r1, #1
 8004d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	43db      	mvns	r3, r3
 8004d76:	68f9      	ldr	r1, [r7, #12]
 8004d78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d86:	69da      	ldr	r2, [r3, #28]
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	f003 030f 	and.w	r3, r3, #15
 8004d90:	2101      	movs	r1, #1
 8004d92:	fa01 f303 	lsl.w	r3, r1, r3
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	43db      	mvns	r3, r3
 8004d9a:	68f9      	ldr	r1, [r7, #12]
 8004d9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004da0:	4013      	ands	r3, r2
 8004da2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	015a      	lsls	r2, r3, #5
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	4413      	add	r3, r2
 8004dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	0159      	lsls	r1, r3, #5
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	440b      	add	r3, r1
 8004dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	4b35      	ldr	r3, [pc, #212]	; (8004e98 <USB_DeactivateEndpoint+0x1b0>)
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	600b      	str	r3, [r1, #0]
 8004dc6:	e060      	b.n	8004e8a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dde:	d11f      	bne.n	8004e20 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	015a      	lsls	r2, r3, #5
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	4413      	add	r3, r2
 8004de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68ba      	ldr	r2, [r7, #8]
 8004df0:	0151      	lsls	r1, r2, #5
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	440a      	add	r2, r1
 8004df6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dfa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004dfe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	015a      	lsls	r2, r3, #5
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	4413      	add	r3, r2
 8004e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68ba      	ldr	r2, [r7, #8]
 8004e10:	0151      	lsls	r1, r2, #5
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	440a      	add	r2, r1
 8004e16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e1e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	f003 030f 	and.w	r3, r3, #15
 8004e30:	2101      	movs	r1, #1
 8004e32:	fa01 f303 	lsl.w	r3, r1, r3
 8004e36:	041b      	lsls	r3, r3, #16
 8004e38:	43db      	mvns	r3, r3
 8004e3a:	68f9      	ldr	r1, [r7, #12]
 8004e3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e40:	4013      	ands	r3, r2
 8004e42:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e4a:	69da      	ldr	r2, [r3, #28]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	f003 030f 	and.w	r3, r3, #15
 8004e54:	2101      	movs	r1, #1
 8004e56:	fa01 f303 	lsl.w	r3, r1, r3
 8004e5a:	041b      	lsls	r3, r3, #16
 8004e5c:	43db      	mvns	r3, r3
 8004e5e:	68f9      	ldr	r1, [r7, #12]
 8004e60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e64:	4013      	ands	r3, r2
 8004e66:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	015a      	lsls	r2, r3, #5
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	4413      	add	r3, r2
 8004e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	0159      	lsls	r1, r3, #5
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	440b      	add	r3, r1
 8004e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e82:	4619      	mov	r1, r3
 8004e84:	4b05      	ldr	r3, [pc, #20]	; (8004e9c <USB_DeactivateEndpoint+0x1b4>)
 8004e86:	4013      	ands	r3, r2
 8004e88:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3714      	adds	r7, #20
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr
 8004e98:	ec337800 	.word	0xec337800
 8004e9c:	eff37800 	.word	0xeff37800

08004ea0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b08a      	sub	sp, #40	; 0x28
 8004ea4:	af02      	add	r7, sp, #8
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	4613      	mov	r3, r2
 8004eac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	785b      	ldrb	r3, [r3, #1]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	f040 815c 	bne.w	800517a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d132      	bne.n	8004f30 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	015a      	lsls	r2, r3, #5
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	69ba      	ldr	r2, [r7, #24]
 8004eda:	0151      	lsls	r1, r2, #5
 8004edc:	69fa      	ldr	r2, [r7, #28]
 8004ede:	440a      	add	r2, r1
 8004ee0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ee4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ee8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004eec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	015a      	lsls	r2, r3, #5
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	69ba      	ldr	r2, [r7, #24]
 8004efe:	0151      	lsls	r1, r2, #5
 8004f00:	69fa      	ldr	r2, [r7, #28]
 8004f02:	440a      	add	r2, r1
 8004f04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	015a      	lsls	r2, r3, #5
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	4413      	add	r3, r2
 8004f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f1a:	691b      	ldr	r3, [r3, #16]
 8004f1c:	69ba      	ldr	r2, [r7, #24]
 8004f1e:	0151      	lsls	r1, r2, #5
 8004f20:	69fa      	ldr	r2, [r7, #28]
 8004f22:	440a      	add	r2, r1
 8004f24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f28:	0cdb      	lsrs	r3, r3, #19
 8004f2a:	04db      	lsls	r3, r3, #19
 8004f2c:	6113      	str	r3, [r2, #16]
 8004f2e:	e074      	b.n	800501a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	015a      	lsls	r2, r3, #5
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	4413      	add	r3, r2
 8004f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	69ba      	ldr	r2, [r7, #24]
 8004f40:	0151      	lsls	r1, r2, #5
 8004f42:	69fa      	ldr	r2, [r7, #28]
 8004f44:	440a      	add	r2, r1
 8004f46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f4a:	0cdb      	lsrs	r3, r3, #19
 8004f4c:	04db      	lsls	r3, r3, #19
 8004f4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	015a      	lsls	r2, r3, #5
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	4413      	add	r3, r2
 8004f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	69ba      	ldr	r2, [r7, #24]
 8004f60:	0151      	lsls	r1, r2, #5
 8004f62:	69fa      	ldr	r2, [r7, #28]
 8004f64:	440a      	add	r2, r1
 8004f66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f6a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f6e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	015a      	lsls	r2, r3, #5
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f80:	691a      	ldr	r2, [r3, #16]
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	6959      	ldr	r1, [r3, #20]
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	440b      	add	r3, r1
 8004f8c:	1e59      	subs	r1, r3, #1
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f96:	04d9      	lsls	r1, r3, #19
 8004f98:	4b9d      	ldr	r3, [pc, #628]	; (8005210 <USB_EPStartXfer+0x370>)
 8004f9a:	400b      	ands	r3, r1
 8004f9c:	69b9      	ldr	r1, [r7, #24]
 8004f9e:	0148      	lsls	r0, r1, #5
 8004fa0:	69f9      	ldr	r1, [r7, #28]
 8004fa2:	4401      	add	r1, r0
 8004fa4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	015a      	lsls	r2, r3, #5
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb8:	691a      	ldr	r2, [r3, #16]
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fc2:	69b9      	ldr	r1, [r7, #24]
 8004fc4:	0148      	lsls	r0, r1, #5
 8004fc6:	69f9      	ldr	r1, [r7, #28]
 8004fc8:	4401      	add	r1, r0
 8004fca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	78db      	ldrb	r3, [r3, #3]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d11f      	bne.n	800501a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	015a      	lsls	r2, r3, #5
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	69ba      	ldr	r2, [r7, #24]
 8004fea:	0151      	lsls	r1, r2, #5
 8004fec:	69fa      	ldr	r2, [r7, #28]
 8004fee:	440a      	add	r2, r1
 8004ff0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ff4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004ff8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	015a      	lsls	r2, r3, #5
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	4413      	add	r3, r2
 8005002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	69ba      	ldr	r2, [r7, #24]
 800500a:	0151      	lsls	r1, r2, #5
 800500c:	69fa      	ldr	r2, [r7, #28]
 800500e:	440a      	add	r2, r1
 8005010:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005014:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005018:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800501a:	79fb      	ldrb	r3, [r7, #7]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d14b      	bne.n	80050b8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d009      	beq.n	800503c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	015a      	lsls	r2, r3, #5
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	4413      	add	r3, r2
 8005030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005034:	461a      	mov	r2, r3
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	78db      	ldrb	r3, [r3, #3]
 8005040:	2b01      	cmp	r3, #1
 8005042:	d128      	bne.n	8005096 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005050:	2b00      	cmp	r3, #0
 8005052:	d110      	bne.n	8005076 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	015a      	lsls	r2, r3, #5
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	4413      	add	r3, r2
 800505c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	69ba      	ldr	r2, [r7, #24]
 8005064:	0151      	lsls	r1, r2, #5
 8005066:	69fa      	ldr	r2, [r7, #28]
 8005068:	440a      	add	r2, r1
 800506a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800506e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005072:	6013      	str	r3, [r2, #0]
 8005074:	e00f      	b.n	8005096 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	015a      	lsls	r2, r3, #5
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	4413      	add	r3, r2
 800507e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	69ba      	ldr	r2, [r7, #24]
 8005086:	0151      	lsls	r1, r2, #5
 8005088:	69fa      	ldr	r2, [r7, #28]
 800508a:	440a      	add	r2, r1
 800508c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005094:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	015a      	lsls	r2, r3, #5
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	4413      	add	r3, r2
 800509e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	69ba      	ldr	r2, [r7, #24]
 80050a6:	0151      	lsls	r1, r2, #5
 80050a8:	69fa      	ldr	r2, [r7, #28]
 80050aa:	440a      	add	r2, r1
 80050ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050b4:	6013      	str	r3, [r2, #0]
 80050b6:	e12f      	b.n	8005318 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	015a      	lsls	r2, r3, #5
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	4413      	add	r3, r2
 80050c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	69ba      	ldr	r2, [r7, #24]
 80050c8:	0151      	lsls	r1, r2, #5
 80050ca:	69fa      	ldr	r2, [r7, #28]
 80050cc:	440a      	add	r2, r1
 80050ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050d6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	78db      	ldrb	r3, [r3, #3]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d015      	beq.n	800510c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	695b      	ldr	r3, [r3, #20]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	f000 8117 	beq.w	8005318 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	f003 030f 	and.w	r3, r3, #15
 80050fa:	2101      	movs	r1, #1
 80050fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005100:	69f9      	ldr	r1, [r7, #28]
 8005102:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005106:	4313      	orrs	r3, r2
 8005108:	634b      	str	r3, [r1, #52]	; 0x34
 800510a:	e105      	b.n	8005318 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005118:	2b00      	cmp	r3, #0
 800511a:	d110      	bne.n	800513e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	015a      	lsls	r2, r3, #5
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	4413      	add	r3, r2
 8005124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	69ba      	ldr	r2, [r7, #24]
 800512c:	0151      	lsls	r1, r2, #5
 800512e:	69fa      	ldr	r2, [r7, #28]
 8005130:	440a      	add	r2, r1
 8005132:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005136:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800513a:	6013      	str	r3, [r2, #0]
 800513c:	e00f      	b.n	800515e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	015a      	lsls	r2, r3, #5
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	4413      	add	r3, r2
 8005146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	69ba      	ldr	r2, [r7, #24]
 800514e:	0151      	lsls	r1, r2, #5
 8005150:	69fa      	ldr	r2, [r7, #28]
 8005152:	440a      	add	r2, r1
 8005154:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800515c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	68d9      	ldr	r1, [r3, #12]
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	781a      	ldrb	r2, [r3, #0]
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	b298      	uxth	r0, r3
 800516c:	79fb      	ldrb	r3, [r7, #7]
 800516e:	9300      	str	r3, [sp, #0]
 8005170:	4603      	mov	r3, r0
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f000 fa2b 	bl	80055ce <USB_WritePacket>
 8005178:	e0ce      	b.n	8005318 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	015a      	lsls	r2, r3, #5
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	4413      	add	r3, r2
 8005182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	69ba      	ldr	r2, [r7, #24]
 800518a:	0151      	lsls	r1, r2, #5
 800518c:	69fa      	ldr	r2, [r7, #28]
 800518e:	440a      	add	r2, r1
 8005190:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005194:	0cdb      	lsrs	r3, r3, #19
 8005196:	04db      	lsls	r3, r3, #19
 8005198:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	015a      	lsls	r2, r3, #5
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	69ba      	ldr	r2, [r7, #24]
 80051aa:	0151      	lsls	r1, r2, #5
 80051ac:	69fa      	ldr	r2, [r7, #28]
 80051ae:	440a      	add	r2, r1
 80051b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051bc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d126      	bne.n	8005214 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	015a      	lsls	r2, r3, #5
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	4413      	add	r3, r2
 80051ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051d2:	691a      	ldr	r2, [r3, #16]
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051dc:	69b9      	ldr	r1, [r7, #24]
 80051de:	0148      	lsls	r0, r1, #5
 80051e0:	69f9      	ldr	r1, [r7, #28]
 80051e2:	4401      	add	r1, r0
 80051e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80051e8:	4313      	orrs	r3, r2
 80051ea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	015a      	lsls	r2, r3, #5
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	4413      	add	r3, r2
 80051f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	69ba      	ldr	r2, [r7, #24]
 80051fc:	0151      	lsls	r1, r2, #5
 80051fe:	69fa      	ldr	r2, [r7, #28]
 8005200:	440a      	add	r2, r1
 8005202:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005206:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800520a:	6113      	str	r3, [r2, #16]
 800520c:	e036      	b.n	800527c <USB_EPStartXfer+0x3dc>
 800520e:	bf00      	nop
 8005210:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	695a      	ldr	r2, [r3, #20]
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	4413      	add	r3, r2
 800521e:	1e5a      	subs	r2, r3, #1
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	fbb2 f3f3 	udiv	r3, r2, r3
 8005228:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	015a      	lsls	r2, r3, #5
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	4413      	add	r3, r2
 8005232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005236:	691a      	ldr	r2, [r3, #16]
 8005238:	8afb      	ldrh	r3, [r7, #22]
 800523a:	04d9      	lsls	r1, r3, #19
 800523c:	4b39      	ldr	r3, [pc, #228]	; (8005324 <USB_EPStartXfer+0x484>)
 800523e:	400b      	ands	r3, r1
 8005240:	69b9      	ldr	r1, [r7, #24]
 8005242:	0148      	lsls	r0, r1, #5
 8005244:	69f9      	ldr	r1, [r7, #28]
 8005246:	4401      	add	r1, r0
 8005248:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800524c:	4313      	orrs	r3, r2
 800524e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	015a      	lsls	r2, r3, #5
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	4413      	add	r3, r2
 8005258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800525c:	691a      	ldr	r2, [r3, #16]
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	8af9      	ldrh	r1, [r7, #22]
 8005264:	fb01 f303 	mul.w	r3, r1, r3
 8005268:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800526c:	69b9      	ldr	r1, [r7, #24]
 800526e:	0148      	lsls	r0, r1, #5
 8005270:	69f9      	ldr	r1, [r7, #28]
 8005272:	4401      	add	r1, r0
 8005274:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005278:	4313      	orrs	r3, r2
 800527a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800527c:	79fb      	ldrb	r3, [r7, #7]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d10d      	bne.n	800529e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d009      	beq.n	800529e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	68d9      	ldr	r1, [r3, #12]
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	015a      	lsls	r2, r3, #5
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	4413      	add	r3, r2
 8005296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800529a:	460a      	mov	r2, r1
 800529c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	78db      	ldrb	r3, [r3, #3]
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d128      	bne.n	80052f8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d110      	bne.n	80052d8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	015a      	lsls	r2, r3, #5
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	4413      	add	r3, r2
 80052be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	69ba      	ldr	r2, [r7, #24]
 80052c6:	0151      	lsls	r1, r2, #5
 80052c8:	69fa      	ldr	r2, [r7, #28]
 80052ca:	440a      	add	r2, r1
 80052cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80052d4:	6013      	str	r3, [r2, #0]
 80052d6:	e00f      	b.n	80052f8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	015a      	lsls	r2, r3, #5
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	4413      	add	r3, r2
 80052e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	69ba      	ldr	r2, [r7, #24]
 80052e8:	0151      	lsls	r1, r2, #5
 80052ea:	69fa      	ldr	r2, [r7, #28]
 80052ec:	440a      	add	r2, r1
 80052ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052f6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	015a      	lsls	r2, r3, #5
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	4413      	add	r3, r2
 8005300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	69ba      	ldr	r2, [r7, #24]
 8005308:	0151      	lsls	r1, r2, #5
 800530a:	69fa      	ldr	r2, [r7, #28]
 800530c:	440a      	add	r2, r1
 800530e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005312:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005316:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3720      	adds	r7, #32
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	1ff80000 	.word	0x1ff80000

08005328 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005328:	b480      	push	{r7}
 800532a:	b087      	sub	sp, #28
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	4613      	mov	r3, r2
 8005334:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	785b      	ldrb	r3, [r3, #1]
 8005344:	2b01      	cmp	r3, #1
 8005346:	f040 80cd 	bne.w	80054e4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d132      	bne.n	80053b8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	015a      	lsls	r2, r3, #5
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	4413      	add	r3, r2
 800535a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	0151      	lsls	r1, r2, #5
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	440a      	add	r2, r1
 8005368:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800536c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005370:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005374:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	015a      	lsls	r2, r3, #5
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	4413      	add	r3, r2
 800537e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	0151      	lsls	r1, r2, #5
 8005388:	697a      	ldr	r2, [r7, #20]
 800538a:	440a      	add	r2, r1
 800538c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005390:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005394:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	015a      	lsls	r2, r3, #5
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	4413      	add	r3, r2
 800539e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	0151      	lsls	r1, r2, #5
 80053a8:	697a      	ldr	r2, [r7, #20]
 80053aa:	440a      	add	r2, r1
 80053ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053b0:	0cdb      	lsrs	r3, r3, #19
 80053b2:	04db      	lsls	r3, r3, #19
 80053b4:	6113      	str	r3, [r2, #16]
 80053b6:	e04e      	b.n	8005456 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	015a      	lsls	r2, r3, #5
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	4413      	add	r3, r2
 80053c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	0151      	lsls	r1, r2, #5
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	440a      	add	r2, r1
 80053ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053d2:	0cdb      	lsrs	r3, r3, #19
 80053d4:	04db      	lsls	r3, r3, #19
 80053d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	015a      	lsls	r2, r3, #5
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	4413      	add	r3, r2
 80053e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	693a      	ldr	r2, [r7, #16]
 80053e8:	0151      	lsls	r1, r2, #5
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	440a      	add	r2, r1
 80053ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053f2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053f6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053fa:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	695a      	ldr	r2, [r3, #20]
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	429a      	cmp	r2, r3
 8005406:	d903      	bls.n	8005410 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	689a      	ldr	r2, [r3, #8]
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	015a      	lsls	r2, r3, #5
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	4413      	add	r3, r2
 8005418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	693a      	ldr	r2, [r7, #16]
 8005420:	0151      	lsls	r1, r2, #5
 8005422:	697a      	ldr	r2, [r7, #20]
 8005424:	440a      	add	r2, r1
 8005426:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800542a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800542e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	015a      	lsls	r2, r3, #5
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	4413      	add	r3, r2
 8005438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800543c:	691a      	ldr	r2, [r3, #16]
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005446:	6939      	ldr	r1, [r7, #16]
 8005448:	0148      	lsls	r0, r1, #5
 800544a:	6979      	ldr	r1, [r7, #20]
 800544c:	4401      	add	r1, r0
 800544e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005452:	4313      	orrs	r3, r2
 8005454:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005456:	79fb      	ldrb	r3, [r7, #7]
 8005458:	2b01      	cmp	r3, #1
 800545a:	d11e      	bne.n	800549a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d009      	beq.n	8005478 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	015a      	lsls	r2, r3, #5
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	4413      	add	r3, r2
 800546c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005470:	461a      	mov	r2, r3
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	015a      	lsls	r2, r3, #5
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	4413      	add	r3, r2
 8005480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	0151      	lsls	r1, r2, #5
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	440a      	add	r2, r1
 800548e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005492:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005496:	6013      	str	r3, [r2, #0]
 8005498:	e092      	b.n	80055c0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	015a      	lsls	r2, r3, #5
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	4413      	add	r3, r2
 80054a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	0151      	lsls	r1, r2, #5
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	440a      	add	r2, r1
 80054b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054b8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d07e      	beq.n	80055c0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	f003 030f 	and.w	r3, r3, #15
 80054d2:	2101      	movs	r1, #1
 80054d4:	fa01 f303 	lsl.w	r3, r1, r3
 80054d8:	6979      	ldr	r1, [r7, #20]
 80054da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054de:	4313      	orrs	r3, r2
 80054e0:	634b      	str	r3, [r1, #52]	; 0x34
 80054e2:	e06d      	b.n	80055c0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	015a      	lsls	r2, r3, #5
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	693a      	ldr	r2, [r7, #16]
 80054f4:	0151      	lsls	r1, r2, #5
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	440a      	add	r2, r1
 80054fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054fe:	0cdb      	lsrs	r3, r3, #19
 8005500:	04db      	lsls	r3, r3, #19
 8005502:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	4413      	add	r3, r2
 800550c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	693a      	ldr	r2, [r7, #16]
 8005514:	0151      	lsls	r1, r2, #5
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	440a      	add	r2, r1
 800551a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800551e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005522:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005526:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	695b      	ldr	r3, [r3, #20]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d003      	beq.n	8005538 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	689a      	ldr	r2, [r3, #8]
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	015a      	lsls	r2, r3, #5
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	4413      	add	r3, r2
 8005540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	0151      	lsls	r1, r2, #5
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	440a      	add	r2, r1
 800554e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005552:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005556:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	015a      	lsls	r2, r3, #5
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	4413      	add	r3, r2
 8005560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005564:	691a      	ldr	r2, [r3, #16]
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800556e:	6939      	ldr	r1, [r7, #16]
 8005570:	0148      	lsls	r0, r1, #5
 8005572:	6979      	ldr	r1, [r7, #20]
 8005574:	4401      	add	r1, r0
 8005576:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800557a:	4313      	orrs	r3, r2
 800557c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800557e:	79fb      	ldrb	r3, [r7, #7]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d10d      	bne.n	80055a0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d009      	beq.n	80055a0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	68d9      	ldr	r1, [r3, #12]
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	015a      	lsls	r2, r3, #5
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	4413      	add	r3, r2
 8005598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800559c:	460a      	mov	r2, r1
 800559e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	015a      	lsls	r2, r3, #5
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	4413      	add	r3, r2
 80055a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	0151      	lsls	r1, r2, #5
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	440a      	add	r2, r1
 80055b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	371c      	adds	r7, #28
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr

080055ce <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80055ce:	b480      	push	{r7}
 80055d0:	b089      	sub	sp, #36	; 0x24
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	60f8      	str	r0, [r7, #12]
 80055d6:	60b9      	str	r1, [r7, #8]
 80055d8:	4611      	mov	r1, r2
 80055da:	461a      	mov	r2, r3
 80055dc:	460b      	mov	r3, r1
 80055de:	71fb      	strb	r3, [r7, #7]
 80055e0:	4613      	mov	r3, r2
 80055e2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80055ec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d11a      	bne.n	800562a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80055f4:	88bb      	ldrh	r3, [r7, #4]
 80055f6:	3303      	adds	r3, #3
 80055f8:	089b      	lsrs	r3, r3, #2
 80055fa:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80055fc:	2300      	movs	r3, #0
 80055fe:	61bb      	str	r3, [r7, #24]
 8005600:	e00f      	b.n	8005622 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005602:	79fb      	ldrb	r3, [r7, #7]
 8005604:	031a      	lsls	r2, r3, #12
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	4413      	add	r3, r2
 800560a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800560e:	461a      	mov	r2, r3
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	3304      	adds	r3, #4
 800561a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	3301      	adds	r3, #1
 8005620:	61bb      	str	r3, [r7, #24]
 8005622:	69ba      	ldr	r2, [r7, #24]
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	429a      	cmp	r2, r3
 8005628:	d3eb      	bcc.n	8005602 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3724      	adds	r7, #36	; 0x24
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005638:	b480      	push	{r7}
 800563a:	b089      	sub	sp, #36	; 0x24
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	4613      	mov	r3, r2
 8005644:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800564e:	88fb      	ldrh	r3, [r7, #6]
 8005650:	3303      	adds	r3, #3
 8005652:	089b      	lsrs	r3, r3, #2
 8005654:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005656:	2300      	movs	r3, #0
 8005658:	61bb      	str	r3, [r7, #24]
 800565a:	e00b      	b.n	8005674 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	601a      	str	r2, [r3, #0]
    pDest++;
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	3304      	adds	r3, #4
 800566c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	3301      	adds	r3, #1
 8005672:	61bb      	str	r3, [r7, #24]
 8005674:	69ba      	ldr	r2, [r7, #24]
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	429a      	cmp	r2, r3
 800567a:	d3ef      	bcc.n	800565c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800567c:	69fb      	ldr	r3, [r7, #28]
}
 800567e:	4618      	mov	r0, r3
 8005680:	3724      	adds	r7, #36	; 0x24
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr

0800568a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800568a:	b480      	push	{r7}
 800568c:	b085      	sub	sp, #20
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
 8005692:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	785b      	ldrb	r3, [r3, #1]
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d12c      	bne.n	8005700 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	015a      	lsls	r2, r3, #5
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	4413      	add	r3, r2
 80056ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	db12      	blt.n	80056de <USB_EPSetStall+0x54>
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00f      	beq.n	80056de <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	015a      	lsls	r2, r3, #5
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	4413      	add	r3, r2
 80056c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68ba      	ldr	r2, [r7, #8]
 80056ce:	0151      	lsls	r1, r2, #5
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	440a      	add	r2, r1
 80056d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80056dc:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	015a      	lsls	r2, r3, #5
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	4413      	add	r3, r2
 80056e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68ba      	ldr	r2, [r7, #8]
 80056ee:	0151      	lsls	r1, r2, #5
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	440a      	add	r2, r1
 80056f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80056fc:	6013      	str	r3, [r2, #0]
 80056fe:	e02b      	b.n	8005758 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	015a      	lsls	r2, r3, #5
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	4413      	add	r3, r2
 8005708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2b00      	cmp	r3, #0
 8005710:	db12      	blt.n	8005738 <USB_EPSetStall+0xae>
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00f      	beq.n	8005738 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	015a      	lsls	r2, r3, #5
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	4413      	add	r3, r2
 8005720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68ba      	ldr	r2, [r7, #8]
 8005728:	0151      	lsls	r1, r2, #5
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	440a      	add	r2, r1
 800572e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005732:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005736:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	015a      	lsls	r2, r3, #5
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	4413      	add	r3, r2
 8005740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68ba      	ldr	r2, [r7, #8]
 8005748:	0151      	lsls	r1, r2, #5
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	440a      	add	r2, r1
 800574e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005752:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005756:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr

08005766 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005766:	b480      	push	{r7}
 8005768:	b085      	sub	sp, #20
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
 800576e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	785b      	ldrb	r3, [r3, #1]
 800577e:	2b01      	cmp	r3, #1
 8005780:	d128      	bne.n	80057d4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	015a      	lsls	r2, r3, #5
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	4413      	add	r3, r2
 800578a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68ba      	ldr	r2, [r7, #8]
 8005792:	0151      	lsls	r1, r2, #5
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	440a      	add	r2, r1
 8005798:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800579c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80057a0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	78db      	ldrb	r3, [r3, #3]
 80057a6:	2b03      	cmp	r3, #3
 80057a8:	d003      	beq.n	80057b2 <USB_EPClearStall+0x4c>
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	78db      	ldrb	r3, [r3, #3]
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d138      	bne.n	8005824 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	015a      	lsls	r2, r3, #5
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	4413      	add	r3, r2
 80057ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68ba      	ldr	r2, [r7, #8]
 80057c2:	0151      	lsls	r1, r2, #5
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	440a      	add	r2, r1
 80057c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057d0:	6013      	str	r3, [r2, #0]
 80057d2:	e027      	b.n	8005824 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	015a      	lsls	r2, r3, #5
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	4413      	add	r3, r2
 80057dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68ba      	ldr	r2, [r7, #8]
 80057e4:	0151      	lsls	r1, r2, #5
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	440a      	add	r2, r1
 80057ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80057f2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	78db      	ldrb	r3, [r3, #3]
 80057f8:	2b03      	cmp	r3, #3
 80057fa:	d003      	beq.n	8005804 <USB_EPClearStall+0x9e>
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	78db      	ldrb	r3, [r3, #3]
 8005800:	2b02      	cmp	r3, #2
 8005802:	d10f      	bne.n	8005824 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	015a      	lsls	r2, r3, #5
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	4413      	add	r3, r2
 800580c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	0151      	lsls	r1, r2, #5
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	440a      	add	r2, r1
 800581a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800581e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005822:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3714      	adds	r7, #20
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005832:	b480      	push	{r7}
 8005834:	b085      	sub	sp, #20
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
 800583a:	460b      	mov	r3, r1
 800583c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005850:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005854:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	78fb      	ldrb	r3, [r7, #3]
 8005860:	011b      	lsls	r3, r3, #4
 8005862:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005866:	68f9      	ldr	r1, [r7, #12]
 8005868:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800586c:	4313      	orrs	r3, r2
 800586e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3714      	adds	r7, #20
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr

0800587e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800587e:	b480      	push	{r7}
 8005880:	b085      	sub	sp, #20
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005898:	f023 0303 	bic.w	r3, r3, #3
 800589c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058ac:	f023 0302 	bic.w	r3, r3, #2
 80058b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3714      	adds	r7, #20
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80058da:	f023 0303 	bic.w	r3, r3, #3
 80058de:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058ee:	f043 0302 	orr.w	r3, r3, #2
 80058f2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3714      	adds	r7, #20
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr

08005902 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005902:	b480      	push	{r7}
 8005904:	b085      	sub	sp, #20
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	699b      	ldr	r3, [r3, #24]
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	4013      	ands	r3, r2
 8005918:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800591a:	68fb      	ldr	r3, [r7, #12]
}
 800591c:	4618      	mov	r0, r3
 800591e:	3714      	adds	r7, #20
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005928:	b480      	push	{r7}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800593a:	699b      	ldr	r3, [r3, #24]
 800593c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005944:	69db      	ldr	r3, [r3, #28]
 8005946:	68ba      	ldr	r2, [r7, #8]
 8005948:	4013      	ands	r3, r2
 800594a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	0c1b      	lsrs	r3, r3, #16
}
 8005950:	4618      	mov	r0, r3
 8005952:	3714      	adds	r7, #20
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005978:	69db      	ldr	r3, [r3, #28]
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	4013      	ands	r3, r2
 800597e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	b29b      	uxth	r3, r3
}
 8005984:	4618      	mov	r0, r3
 8005986:	3714      	adds	r7, #20
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	460b      	mov	r3, r1
 800599a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80059a0:	78fb      	ldrb	r3, [r7, #3]
 80059a2:	015a      	lsls	r2, r3, #5
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	4413      	add	r3, r2
 80059a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059b6:	695b      	ldr	r3, [r3, #20]
 80059b8:	68ba      	ldr	r2, [r7, #8]
 80059ba:	4013      	ands	r3, r2
 80059bc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80059be:	68bb      	ldr	r3, [r7, #8]
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3714      	adds	r7, #20
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b087      	sub	sp, #28
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	460b      	mov	r3, r1
 80059d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ee:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80059f0:	78fb      	ldrb	r3, [r7, #3]
 80059f2:	f003 030f 	and.w	r3, r3, #15
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	fa22 f303 	lsr.w	r3, r2, r3
 80059fc:	01db      	lsls	r3, r3, #7
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005a06:	78fb      	ldrb	r3, [r7, #3]
 8005a08:	015a      	lsls	r2, r3, #5
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	4013      	ands	r3, r2
 8005a18:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005a1a:	68bb      	ldr	r3, [r7, #8]
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	371c      	adds	r7, #28
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	695b      	ldr	r3, [r3, #20]
 8005a34:	f003 0301 	and.w	r3, r3, #1
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a5e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005a62:	f023 0307 	bic.w	r3, r3, #7
 8005a66:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a7a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3714      	adds	r7, #20
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
	...

08005a8c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b087      	sub	sp, #28
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	460b      	mov	r3, r1
 8005a96:	607a      	str	r2, [r7, #4]
 8005a98:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	333c      	adds	r3, #60	; 0x3c
 8005aa2:	3304      	adds	r3, #4
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	4a26      	ldr	r2, [pc, #152]	; (8005b44 <USB_EP0_OutStart+0xb8>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d90a      	bls.n	8005ac6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005abc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ac0:	d101      	bne.n	8005ac6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	e037      	b.n	8005b36 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005acc:	461a      	mov	r2, r3
 8005ace:	2300      	movs	r3, #0
 8005ad0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ae0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ae4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005af4:	f043 0318 	orr.w	r3, r3, #24
 8005af8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b08:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005b0c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005b0e:	7afb      	ldrb	r3, [r7, #11]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d10f      	bne.n	8005b34 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	697a      	ldr	r2, [r7, #20]
 8005b2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b2e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005b32:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	371c      	adds	r7, #28
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	4f54300a 	.word	0x4f54300a

08005b48 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005b50:	2300      	movs	r3, #0
 8005b52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	3301      	adds	r3, #1
 8005b58:	60fb      	str	r3, [r7, #12]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	4a13      	ldr	r2, [pc, #76]	; (8005bac <USB_CoreReset+0x64>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d901      	bls.n	8005b66 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005b62:	2303      	movs	r3, #3
 8005b64:	e01b      	b.n	8005b9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	daf2      	bge.n	8005b54 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	f043 0201 	orr.w	r2, r3, #1
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	3301      	adds	r3, #1
 8005b82:	60fb      	str	r3, [r7, #12]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	4a09      	ldr	r2, [pc, #36]	; (8005bac <USB_CoreReset+0x64>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d901      	bls.n	8005b90 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	e006      	b.n	8005b9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	f003 0301 	and.w	r3, r3, #1
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d0f0      	beq.n	8005b7e <USB_CoreReset+0x36>

  return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3714      	adds	r7, #20
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	00030d40 	.word	0x00030d40

08005bb0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	460b      	mov	r3, r1
 8005bba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005bbc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005bc0:	f002 f9ae 	bl	8007f20 <malloc>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d105      	bne.n	8005bda <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005bd6:	2302      	movs	r3, #2
 8005bd8:	e066      	b.n	8005ca8 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	7c1b      	ldrb	r3, [r3, #16]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d119      	bne.n	8005c1e <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005bea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bee:	2202      	movs	r2, #2
 8005bf0:	2181      	movs	r1, #129	; 0x81
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f002 f81b 	bl	8007c2e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005bfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c02:	2202      	movs	r2, #2
 8005c04:	2101      	movs	r1, #1
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f002 f811 	bl	8007c2e <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2210      	movs	r2, #16
 8005c18:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005c1c:	e016      	b.n	8005c4c <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005c1e:	2340      	movs	r3, #64	; 0x40
 8005c20:	2202      	movs	r2, #2
 8005c22:	2181      	movs	r1, #129	; 0x81
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f002 f802 	bl	8007c2e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005c30:	2340      	movs	r3, #64	; 0x40
 8005c32:	2202      	movs	r2, #2
 8005c34:	2101      	movs	r1, #1
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f001 fff9 	bl	8007c2e <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2210      	movs	r2, #16
 8005c48:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005c4c:	2308      	movs	r3, #8
 8005c4e:	2203      	movs	r2, #3
 8005c50:	2182      	movs	r1, #130	; 0x82
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f001 ffeb 	bl	8007c2e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	7c1b      	ldrb	r3, [r3, #16]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d109      	bne.n	8005c96 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c8c:	2101      	movs	r1, #1
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f002 f8bc 	bl	8007e0c <USBD_LL_PrepareReceive>
 8005c94:	e007      	b.n	8005ca6 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c9c:	2340      	movs	r3, #64	; 0x40
 8005c9e:	2101      	movs	r1, #1
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f002 f8b3 	bl	8007e0c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3710      	adds	r7, #16
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	460b      	mov	r3, r1
 8005cba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005cc0:	2181      	movs	r1, #129	; 0x81
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f001 ffd9 	bl	8007c7a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005cce:	2101      	movs	r1, #1
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f001 ffd2 	bl	8007c7a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005cde:	2182      	movs	r1, #130	; 0x82
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f001 ffca 	bl	8007c7a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00e      	beq.n	8005d1e <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d10:	4618      	mov	r0, r3
 8005d12:	f002 f90d 	bl	8007f30 <free>
    pdev->pClassData = NULL;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8005d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3710      	adds	r7, #16
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b086      	sub	sp, #24
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d38:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d42:	2300      	movs	r3, #0
 8005d44:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d03a      	beq.n	8005dc8 <USBD_CDC_Setup+0xa0>
 8005d52:	2b20      	cmp	r3, #32
 8005d54:	f040 8097 	bne.w	8005e86 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	88db      	ldrh	r3, [r3, #6]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d029      	beq.n	8005db4 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	b25b      	sxtb	r3, r3
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	da11      	bge.n	8005d8e <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	683a      	ldr	r2, [r7, #0]
 8005d74:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8005d76:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005d78:	683a      	ldr	r2, [r7, #0]
 8005d7a:	88d2      	ldrh	r2, [r2, #6]
 8005d7c:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005d7e:	6939      	ldr	r1, [r7, #16]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	88db      	ldrh	r3, [r3, #6]
 8005d84:	461a      	mov	r2, r3
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f001 fa9d 	bl	80072c6 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8005d8c:	e082      	b.n	8005e94 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	785a      	ldrb	r2, [r3, #1]
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	88db      	ldrh	r3, [r3, #6]
 8005d9c:	b2da      	uxtb	r2, r3
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005da4:	6939      	ldr	r1, [r7, #16]
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	88db      	ldrh	r3, [r3, #6]
 8005daa:	461a      	mov	r2, r3
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f001 fab6 	bl	800731e <USBD_CtlPrepareRx>
    break;
 8005db2:	e06f      	b.n	8005e94 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	683a      	ldr	r2, [r7, #0]
 8005dbe:	7850      	ldrb	r0, [r2, #1]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	6839      	ldr	r1, [r7, #0]
 8005dc4:	4798      	blx	r3
    break;
 8005dc6:	e065      	b.n	8005e94 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	785b      	ldrb	r3, [r3, #1]
 8005dcc:	2b0b      	cmp	r3, #11
 8005dce:	d84f      	bhi.n	8005e70 <USBD_CDC_Setup+0x148>
 8005dd0:	a201      	add	r2, pc, #4	; (adr r2, 8005dd8 <USBD_CDC_Setup+0xb0>)
 8005dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd6:	bf00      	nop
 8005dd8:	08005e09 	.word	0x08005e09
 8005ddc:	08005e7f 	.word	0x08005e7f
 8005de0:	08005e71 	.word	0x08005e71
 8005de4:	08005e71 	.word	0x08005e71
 8005de8:	08005e71 	.word	0x08005e71
 8005dec:	08005e71 	.word	0x08005e71
 8005df0:	08005e71 	.word	0x08005e71
 8005df4:	08005e71 	.word	0x08005e71
 8005df8:	08005e71 	.word	0x08005e71
 8005dfc:	08005e71 	.word	0x08005e71
 8005e00:	08005e31 	.word	0x08005e31
 8005e04:	08005e59 	.word	0x08005e59
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e0e:	2b03      	cmp	r3, #3
 8005e10:	d107      	bne.n	8005e22 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005e12:	f107 030c 	add.w	r3, r7, #12
 8005e16:	2202      	movs	r2, #2
 8005e18:	4619      	mov	r1, r3
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f001 fa53 	bl	80072c6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005e20:	e030      	b.n	8005e84 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005e22:	6839      	ldr	r1, [r7, #0]
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f001 f9dd 	bl	80071e4 <USBD_CtlError>
        ret = USBD_FAIL;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	75fb      	strb	r3, [r7, #23]
      break;
 8005e2e:	e029      	b.n	8005e84 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e36:	2b03      	cmp	r3, #3
 8005e38:	d107      	bne.n	8005e4a <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005e3a:	f107 030f 	add.w	r3, r7, #15
 8005e3e:	2201      	movs	r2, #1
 8005e40:	4619      	mov	r1, r3
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f001 fa3f 	bl	80072c6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005e48:	e01c      	b.n	8005e84 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005e4a:	6839      	ldr	r1, [r7, #0]
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f001 f9c9 	bl	80071e4 <USBD_CtlError>
        ret = USBD_FAIL;
 8005e52:	2303      	movs	r3, #3
 8005e54:	75fb      	strb	r3, [r7, #23]
      break;
 8005e56:	e015      	b.n	8005e84 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e5e:	2b03      	cmp	r3, #3
 8005e60:	d00f      	beq.n	8005e82 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8005e62:	6839      	ldr	r1, [r7, #0]
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f001 f9bd 	bl	80071e4 <USBD_CtlError>
        ret = USBD_FAIL;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005e6e:	e008      	b.n	8005e82 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8005e70:	6839      	ldr	r1, [r7, #0]
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f001 f9b6 	bl	80071e4 <USBD_CtlError>
      ret = USBD_FAIL;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	75fb      	strb	r3, [r7, #23]
      break;
 8005e7c:	e002      	b.n	8005e84 <USBD_CDC_Setup+0x15c>
      break;
 8005e7e:	bf00      	nop
 8005e80:	e008      	b.n	8005e94 <USBD_CDC_Setup+0x16c>
      break;
 8005e82:	bf00      	nop
    }
    break;
 8005e84:	e006      	b.n	8005e94 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8005e86:	6839      	ldr	r1, [r7, #0]
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f001 f9ab 	bl	80071e4 <USBD_CtlError>
    ret = USBD_FAIL;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	75fb      	strb	r3, [r7, #23]
    break;
 8005e92:	bf00      	nop
  }

  return (uint8_t)ret;
 8005e94:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3718      	adds	r7, #24
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop

08005ea0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	460b      	mov	r3, r1
 8005eaa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005eb2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d101      	bne.n	8005ec2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	e049      	b.n	8005f56 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ec8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005eca:	78fa      	ldrb	r2, [r7, #3]
 8005ecc:	6879      	ldr	r1, [r7, #4]
 8005ece:	4613      	mov	r3, r2
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	4413      	add	r3, r2
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	440b      	add	r3, r1
 8005ed8:	3318      	adds	r3, #24
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d029      	beq.n	8005f34 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005ee0:	78fa      	ldrb	r2, [r7, #3]
 8005ee2:	6879      	ldr	r1, [r7, #4]
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	4413      	add	r3, r2
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	440b      	add	r3, r1
 8005eee:	3318      	adds	r3, #24
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	78f9      	ldrb	r1, [r7, #3]
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	00db      	lsls	r3, r3, #3
 8005efa:	1a5b      	subs	r3, r3, r1
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	4403      	add	r3, r0
 8005f00:	3344      	adds	r3, #68	; 0x44
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	fbb2 f1f3 	udiv	r1, r2, r3
 8005f08:	fb03 f301 	mul.w	r3, r3, r1
 8005f0c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d110      	bne.n	8005f34 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005f12:	78fa      	ldrb	r2, [r7, #3]
 8005f14:	6879      	ldr	r1, [r7, #4]
 8005f16:	4613      	mov	r3, r2
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	4413      	add	r3, r2
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	440b      	add	r3, r1
 8005f20:	3318      	adds	r3, #24
 8005f22:	2200      	movs	r2, #0
 8005f24:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005f26:	78f9      	ldrb	r1, [r7, #3]
 8005f28:	2300      	movs	r3, #0
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f001 ff4c 	bl	8007dca <USBD_LL_Transmit>
 8005f32:	e00f      	b.n	8005f54 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	68ba      	ldr	r2, [r7, #8]
 8005f46:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005f4a:	68ba      	ldr	r2, [r7, #8]
 8005f4c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005f50:	78fa      	ldrb	r2, [r7, #3]
 8005f52:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3710      	adds	r7, #16
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}

08005f5e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005f5e:	b580      	push	{r7, lr}
 8005f60:	b084      	sub	sp, #16
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
 8005f66:	460b      	mov	r3, r1
 8005f68:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f70:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d101      	bne.n	8005f80 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e015      	b.n	8005fac <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005f80:	78fb      	ldrb	r3, [r7, #3]
 8005f82:	4619      	mov	r1, r3
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f001 ff62 	bl	8007e4e <USBD_LL_GetRxDataSize>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005fa6:	4611      	mov	r1, r2
 8005fa8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fc2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d015      	beq.n	8005ffa <USBD_CDC_EP0_RxReady+0x46>
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005fd4:	2bff      	cmp	r3, #255	; 0xff
 8005fd6:	d010      	beq.n	8005ffa <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005fe6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005fee:	b292      	uxth	r2, r2
 8005ff0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	22ff      	movs	r2, #255	; 0xff
 8005ff6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2243      	movs	r2, #67	; 0x43
 8006010:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006012:	4b03      	ldr	r3, [pc, #12]	; (8006020 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006014:	4618      	mov	r0, r3
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr
 8006020:	20000094 	.word	0x20000094

08006024 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2243      	movs	r2, #67	; 0x43
 8006030:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006032:	4b03      	ldr	r3, [pc, #12]	; (8006040 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006034:	4618      	mov	r0, r3
 8006036:	370c      	adds	r7, #12
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr
 8006040:	20000050 	.word	0x20000050

08006044 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2243      	movs	r2, #67	; 0x43
 8006050:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006052:	4b03      	ldr	r3, [pc, #12]	; (8006060 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006054:	4618      	mov	r0, r3
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr
 8006060:	200000d8 	.word	0x200000d8

08006064 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	220a      	movs	r2, #10
 8006070:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006072:	4b03      	ldr	r3, [pc, #12]	; (8006080 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006074:	4618      	mov	r0, r3
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr
 8006080:	2000000c 	.word	0x2000000c

08006084 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d101      	bne.n	8006098 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006094:	2303      	movs	r3, #3
 8006096:	e004      	b.n	80060a2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	683a      	ldr	r2, [r7, #0]
 800609c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	370c      	adds	r7, #12
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr

080060ae <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80060ae:	b480      	push	{r7}
 80060b0:	b087      	sub	sp, #28
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	60f8      	str	r0, [r7, #12]
 80060b6:	60b9      	str	r1, [r7, #8]
 80060b8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060c0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	68ba      	ldr	r2, [r7, #8]
 80060c6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	371c      	adds	r7, #28
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060f0:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	683a      	ldr	r2, [r7, #0]
 80060f6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3714      	adds	r7, #20
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006116:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006118:	2301      	movs	r3, #1
 800611a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006122:	2b00      	cmp	r3, #0
 8006124:	d101      	bne.n	800612a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006126:	2303      	movs	r3, #3
 8006128:	e01a      	b.n	8006160 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006130:	2b00      	cmp	r3, #0
 8006132:	d114      	bne.n	800615e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	2201      	movs	r2, #1
 8006138:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006152:	2181      	movs	r1, #129	; 0x81
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f001 fe38 	bl	8007dca <USBD_LL_Transmit>

    ret = USBD_OK;
 800615a:	2300      	movs	r3, #0
 800615c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800615e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006160:	4618      	mov	r0, r3
 8006162:	3710      	adds	r7, #16
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006176:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800617e:	2b00      	cmp	r3, #0
 8006180:	d101      	bne.n	8006186 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006182:	2303      	movs	r3, #3
 8006184:	e016      	b.n	80061b4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	7c1b      	ldrb	r3, [r3, #16]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d109      	bne.n	80061a2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006194:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006198:	2101      	movs	r1, #1
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f001 fe36 	bl	8007e0c <USBD_LL_PrepareReceive>
 80061a0:	e007      	b.n	80061b2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80061a8:	2340      	movs	r3, #64	; 0x40
 80061aa:	2101      	movs	r1, #1
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f001 fe2d 	bl	8007e0c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80061b2:	2300      	movs	r3, #0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3710      	adds	r7, #16
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b086      	sub	sp, #24
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	4613      	mov	r3, r2
 80061c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d101      	bne.n	80061d4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80061d0:	2303      	movs	r3, #3
 80061d2:	e025      	b.n	8006220 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d003      	beq.n	80061e6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d003      	beq.n	80061f8 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d003      	beq.n	8006206 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	68ba      	ldr	r2, [r7, #8]
 8006202:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2201      	movs	r2, #1
 800620a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	79fa      	ldrb	r2, [r7, #7]
 8006212:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f001 fca3 	bl	8007b60 <USBD_LL_Init>
 800621a:	4603      	mov	r3, r0
 800621c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800621e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006220:	4618      	mov	r0, r3
 8006222:	3718      	adds	r7, #24
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006232:	2300      	movs	r3, #0
 8006234:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d101      	bne.n	8006240 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800623c:	2303      	movs	r3, #3
 800623e:	e010      	b.n	8006262 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	683a      	ldr	r2, [r7, #0]
 8006244:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800624e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006250:	f107 020e 	add.w	r2, r7, #14
 8006254:	4610      	mov	r0, r2
 8006256:	4798      	blx	r3
 8006258:	4602      	mov	r2, r0
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800626a:	b580      	push	{r7, lr}
 800626c:	b082      	sub	sp, #8
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f001 fcc0 	bl	8007bf8 <USBD_LL_Start>
 8006278:	4603      	mov	r3, r0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3708      	adds	r7, #8
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}

08006282 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006282:	b480      	push	{r7}
 8006284:	b083      	sub	sp, #12
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800628a:	2300      	movs	r3, #0
}
 800628c:	4618      	mov	r0, r3
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	460b      	mov	r3, r1
 80062a2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80062a4:	2303      	movs	r3, #3
 80062a6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d009      	beq.n	80062c6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	78fa      	ldrb	r2, [r7, #3]
 80062bc:	4611      	mov	r1, r2
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	4798      	blx	r3
 80062c2:	4603      	mov	r3, r0
 80062c4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80062c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3710      	adds	r7, #16
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	460b      	mov	r3, r1
 80062da:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d007      	beq.n	80062f6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	78fa      	ldrb	r2, [r7, #3]
 80062f0:	4611      	mov	r1, r2
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	4798      	blx	r3
  }

  return USBD_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3708      	adds	r7, #8
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006310:	6839      	ldr	r1, [r7, #0]
 8006312:	4618      	mov	r0, r3
 8006314:	f000 ff2c 	bl	8007170 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006326:	461a      	mov	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006334:	f003 031f 	and.w	r3, r3, #31
 8006338:	2b01      	cmp	r3, #1
 800633a:	d00e      	beq.n	800635a <USBD_LL_SetupStage+0x5a>
 800633c:	2b01      	cmp	r3, #1
 800633e:	d302      	bcc.n	8006346 <USBD_LL_SetupStage+0x46>
 8006340:	2b02      	cmp	r3, #2
 8006342:	d014      	beq.n	800636e <USBD_LL_SetupStage+0x6e>
 8006344:	e01d      	b.n	8006382 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800634c:	4619      	mov	r1, r3
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 fa18 	bl	8006784 <USBD_StdDevReq>
 8006354:	4603      	mov	r3, r0
 8006356:	73fb      	strb	r3, [r7, #15]
      break;
 8006358:	e020      	b.n	800639c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006360:	4619      	mov	r1, r3
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 fa7c 	bl	8006860 <USBD_StdItfReq>
 8006368:	4603      	mov	r3, r0
 800636a:	73fb      	strb	r3, [r7, #15]
      break;
 800636c:	e016      	b.n	800639c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006374:	4619      	mov	r1, r3
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 fab8 	bl	80068ec <USBD_StdEPReq>
 800637c:	4603      	mov	r3, r0
 800637e:	73fb      	strb	r3, [r7, #15]
      break;
 8006380:	e00c      	b.n	800639c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006388:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800638c:	b2db      	uxtb	r3, r3
 800638e:	4619      	mov	r1, r3
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f001 fc91 	bl	8007cb8 <USBD_LL_StallEP>
 8006396:	4603      	mov	r3, r0
 8006398:	73fb      	strb	r3, [r7, #15]
      break;
 800639a:	bf00      	nop
  }

  return ret;
 800639c:	7bfb      	ldrb	r3, [r7, #15]
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3710      	adds	r7, #16
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b086      	sub	sp, #24
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	60f8      	str	r0, [r7, #12]
 80063ae:	460b      	mov	r3, r1
 80063b0:	607a      	str	r2, [r7, #4]
 80063b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80063b4:	7afb      	ldrb	r3, [r7, #11]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d137      	bne.n	800642a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80063c0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80063c8:	2b03      	cmp	r3, #3
 80063ca:	d14a      	bne.n	8006462 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	689a      	ldr	r2, [r3, #8]
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d913      	bls.n	8006400 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	689a      	ldr	r2, [r3, #8]
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	1ad2      	subs	r2, r2, r3
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	68da      	ldr	r2, [r3, #12]
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	4293      	cmp	r3, r2
 80063f0:	bf28      	it	cs
 80063f2:	4613      	movcs	r3, r2
 80063f4:	461a      	mov	r2, r3
 80063f6:	6879      	ldr	r1, [r7, #4]
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f000 ffad 	bl	8007358 <USBD_CtlContinueRx>
 80063fe:	e030      	b.n	8006462 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d00a      	beq.n	8006422 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006412:	2b03      	cmp	r3, #3
 8006414:	d105      	bne.n	8006422 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	68f8      	ldr	r0, [r7, #12]
 8006420:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8006422:	68f8      	ldr	r0, [r7, #12]
 8006424:	f000 ffa9 	bl	800737a <USBD_CtlSendStatus>
 8006428:	e01b      	b.n	8006462 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006430:	699b      	ldr	r3, [r3, #24]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d013      	beq.n	800645e <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800643c:	2b03      	cmp	r3, #3
 800643e:	d10e      	bne.n	800645e <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006446:	699b      	ldr	r3, [r3, #24]
 8006448:	7afa      	ldrb	r2, [r7, #11]
 800644a:	4611      	mov	r1, r2
 800644c:	68f8      	ldr	r0, [r7, #12]
 800644e:	4798      	blx	r3
 8006450:	4603      	mov	r3, r0
 8006452:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006454:	7dfb      	ldrb	r3, [r7, #23]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d003      	beq.n	8006462 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800645a:	7dfb      	ldrb	r3, [r7, #23]
 800645c:	e002      	b.n	8006464 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800645e:	2303      	movs	r3, #3
 8006460:	e000      	b.n	8006464 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8006462:	2300      	movs	r3, #0
}
 8006464:	4618      	mov	r0, r3
 8006466:	3718      	adds	r7, #24
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b086      	sub	sp, #24
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	460b      	mov	r3, r1
 8006476:	607a      	str	r2, [r7, #4]
 8006478:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800647a:	7afb      	ldrb	r3, [r7, #11]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d16a      	bne.n	8006556 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	3314      	adds	r3, #20
 8006484:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800648c:	2b02      	cmp	r3, #2
 800648e:	d155      	bne.n	800653c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	689a      	ldr	r2, [r3, #8]
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	429a      	cmp	r2, r3
 800649a:	d914      	bls.n	80064c6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	689a      	ldr	r2, [r3, #8]
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	1ad2      	subs	r2, r2, r3
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	461a      	mov	r2, r3
 80064b0:	6879      	ldr	r1, [r7, #4]
 80064b2:	68f8      	ldr	r0, [r7, #12]
 80064b4:	f000 ff22 	bl	80072fc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80064b8:	2300      	movs	r3, #0
 80064ba:	2200      	movs	r2, #0
 80064bc:	2100      	movs	r1, #0
 80064be:	68f8      	ldr	r0, [r7, #12]
 80064c0:	f001 fca4 	bl	8007e0c <USBD_LL_PrepareReceive>
 80064c4:	e03a      	b.n	800653c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	68da      	ldr	r2, [r3, #12]
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d11c      	bne.n	800650c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	685a      	ldr	r2, [r3, #4]
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80064da:	429a      	cmp	r2, r3
 80064dc:	d316      	bcc.n	800650c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	685a      	ldr	r2, [r3, #4]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d20f      	bcs.n	800650c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80064ec:	2200      	movs	r2, #0
 80064ee:	2100      	movs	r1, #0
 80064f0:	68f8      	ldr	r0, [r7, #12]
 80064f2:	f000 ff03 	bl	80072fc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80064fe:	2300      	movs	r3, #0
 8006500:	2200      	movs	r2, #0
 8006502:	2100      	movs	r1, #0
 8006504:	68f8      	ldr	r0, [r7, #12]
 8006506:	f001 fc81 	bl	8007e0c <USBD_LL_PrepareReceive>
 800650a:	e017      	b.n	800653c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00a      	beq.n	800652e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800651e:	2b03      	cmp	r3, #3
 8006520:	d105      	bne.n	800652e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	68f8      	ldr	r0, [r7, #12]
 800652c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800652e:	2180      	movs	r1, #128	; 0x80
 8006530:	68f8      	ldr	r0, [r7, #12]
 8006532:	f001 fbc1 	bl	8007cb8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006536:	68f8      	ldr	r0, [r7, #12]
 8006538:	f000 ff32 	bl	80073a0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006542:	2b01      	cmp	r3, #1
 8006544:	d123      	bne.n	800658e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006546:	68f8      	ldr	r0, [r7, #12]
 8006548:	f7ff fe9b 	bl	8006282 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006554:	e01b      	b.n	800658e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800655c:	695b      	ldr	r3, [r3, #20]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d013      	beq.n	800658a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006568:	2b03      	cmp	r3, #3
 800656a:	d10e      	bne.n	800658a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006572:	695b      	ldr	r3, [r3, #20]
 8006574:	7afa      	ldrb	r2, [r7, #11]
 8006576:	4611      	mov	r1, r2
 8006578:	68f8      	ldr	r0, [r7, #12]
 800657a:	4798      	blx	r3
 800657c:	4603      	mov	r3, r0
 800657e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006580:	7dfb      	ldrb	r3, [r7, #23]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d003      	beq.n	800658e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8006586:	7dfb      	ldrb	r3, [r7, #23]
 8006588:	e002      	b.n	8006590 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800658a:	2303      	movs	r3, #3
 800658c:	e000      	b.n	8006590 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800658e:	2300      	movs	r3, #0
}
 8006590:	4618      	mov	r0, r3
 8006592:	3718      	adds	r7, #24
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d009      	beq.n	80065dc <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	6852      	ldr	r2, [r2, #4]
 80065d4:	b2d2      	uxtb	r2, r2
 80065d6:	4611      	mov	r1, r2
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80065dc:	2340      	movs	r3, #64	; 0x40
 80065de:	2200      	movs	r2, #0
 80065e0:	2100      	movs	r1, #0
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f001 fb23 	bl	8007c2e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2240      	movs	r2, #64	; 0x40
 80065f4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80065f8:	2340      	movs	r3, #64	; 0x40
 80065fa:	2200      	movs	r2, #0
 80065fc:	2180      	movs	r1, #128	; 0x80
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f001 fb15 	bl	8007c2e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2240      	movs	r2, #64	; 0x40
 800660e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3708      	adds	r7, #8
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}

0800661a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800661a:	b480      	push	{r7}
 800661c:	b083      	sub	sp, #12
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
 8006622:	460b      	mov	r3, r1
 8006624:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	78fa      	ldrb	r2, [r7, #3]
 800662a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	370c      	adds	r7, #12
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr

0800663a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800663a:	b480      	push	{r7}
 800663c:	b083      	sub	sp, #12
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2204      	movs	r2, #4
 8006652:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	370c      	adds	r7, #12
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006672:	2b04      	cmp	r3, #4
 8006674:	d105      	bne.n	8006682 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800669e:	2b03      	cmp	r3, #3
 80066a0:	d10b      	bne.n	80066ba <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066a8:	69db      	ldr	r3, [r3, #28]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d005      	beq.n	80066ba <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066b4:	69db      	ldr	r3, [r3, #28]
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3708      	adds	r7, #8
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	460b      	mov	r3, r1
 80066ce:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	370c      	adds	r7, #12
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr

080066de <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80066de:	b480      	push	{r7}
 80066e0:	b083      	sub	sp, #12
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
 80066e6:	460b      	mov	r3, r1
 80066e8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	370c      	adds	r7, #12
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	370c      	adds	r7, #12
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr

0800670e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800670e:	b580      	push	{r7, lr}
 8006710:	b082      	sub	sp, #8
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2201      	movs	r2, #1
 800671a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006724:	2b00      	cmp	r3, #0
 8006726:	d009      	beq.n	800673c <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	6852      	ldr	r2, [r2, #4]
 8006734:	b2d2      	uxtb	r2, r2
 8006736:	4611      	mov	r1, r2
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	4798      	blx	r3
  }

  return USBD_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3708      	adds	r7, #8
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}

08006746 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006746:	b480      	push	{r7}
 8006748:	b087      	sub	sp, #28
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	3301      	adds	r3, #1
 800675c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006764:	8a3b      	ldrh	r3, [r7, #16]
 8006766:	021b      	lsls	r3, r3, #8
 8006768:	b21a      	sxth	r2, r3
 800676a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800676e:	4313      	orrs	r3, r2
 8006770:	b21b      	sxth	r3, r3
 8006772:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006774:	89fb      	ldrh	r3, [r7, #14]
}
 8006776:	4618      	mov	r0, r3
 8006778:	371c      	adds	r7, #28
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
	...

08006784 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800678e:	2300      	movs	r3, #0
 8006790:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800679a:	2b20      	cmp	r3, #32
 800679c:	d004      	beq.n	80067a8 <USBD_StdDevReq+0x24>
 800679e:	2b40      	cmp	r3, #64	; 0x40
 80067a0:	d002      	beq.n	80067a8 <USBD_StdDevReq+0x24>
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d00a      	beq.n	80067bc <USBD_StdDevReq+0x38>
 80067a6:	e050      	b.n	800684a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	6839      	ldr	r1, [r7, #0]
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	4798      	blx	r3
 80067b6:	4603      	mov	r3, r0
 80067b8:	73fb      	strb	r3, [r7, #15]
    break;
 80067ba:	e04b      	b.n	8006854 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	785b      	ldrb	r3, [r3, #1]
 80067c0:	2b09      	cmp	r3, #9
 80067c2:	d83c      	bhi.n	800683e <USBD_StdDevReq+0xba>
 80067c4:	a201      	add	r2, pc, #4	; (adr r2, 80067cc <USBD_StdDevReq+0x48>)
 80067c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ca:	bf00      	nop
 80067cc:	08006821 	.word	0x08006821
 80067d0:	08006835 	.word	0x08006835
 80067d4:	0800683f 	.word	0x0800683f
 80067d8:	0800682b 	.word	0x0800682b
 80067dc:	0800683f 	.word	0x0800683f
 80067e0:	080067ff 	.word	0x080067ff
 80067e4:	080067f5 	.word	0x080067f5
 80067e8:	0800683f 	.word	0x0800683f
 80067ec:	08006817 	.word	0x08006817
 80067f0:	08006809 	.word	0x08006809
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80067f4:	6839      	ldr	r1, [r7, #0]
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 f9ce 	bl	8006b98 <USBD_GetDescriptor>
      break;
 80067fc:	e024      	b.n	8006848 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80067fe:	6839      	ldr	r1, [r7, #0]
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 fb33 	bl	8006e6c <USBD_SetAddress>
      break;
 8006806:	e01f      	b.n	8006848 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8006808:	6839      	ldr	r1, [r7, #0]
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 fb70 	bl	8006ef0 <USBD_SetConfig>
 8006810:	4603      	mov	r3, r0
 8006812:	73fb      	strb	r3, [r7, #15]
      break;
 8006814:	e018      	b.n	8006848 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8006816:	6839      	ldr	r1, [r7, #0]
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 fc0d 	bl	8007038 <USBD_GetConfig>
      break;
 800681e:	e013      	b.n	8006848 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8006820:	6839      	ldr	r1, [r7, #0]
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 fc3c 	bl	80070a0 <USBD_GetStatus>
      break;
 8006828:	e00e      	b.n	8006848 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800682a:	6839      	ldr	r1, [r7, #0]
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 fc6a 	bl	8007106 <USBD_SetFeature>
      break;
 8006832:	e009      	b.n	8006848 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8006834:	6839      	ldr	r1, [r7, #0]
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 fc79 	bl	800712e <USBD_ClrFeature>
      break;
 800683c:	e004      	b.n	8006848 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800683e:	6839      	ldr	r1, [r7, #0]
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 fccf 	bl	80071e4 <USBD_CtlError>
      break;
 8006846:	bf00      	nop
    }
    break;
 8006848:	e004      	b.n	8006854 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800684a:	6839      	ldr	r1, [r7, #0]
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 fcc9 	bl	80071e4 <USBD_CtlError>
    break;
 8006852:	bf00      	nop
  }

  return ret;
 8006854:	7bfb      	ldrb	r3, [r7, #15]
}
 8006856:	4618      	mov	r0, r3
 8006858:	3710      	adds	r7, #16
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop

08006860 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800686a:	2300      	movs	r3, #0
 800686c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006876:	2b20      	cmp	r3, #32
 8006878:	d003      	beq.n	8006882 <USBD_StdItfReq+0x22>
 800687a:	2b40      	cmp	r3, #64	; 0x40
 800687c:	d001      	beq.n	8006882 <USBD_StdItfReq+0x22>
 800687e:	2b00      	cmp	r3, #0
 8006880:	d12a      	bne.n	80068d8 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006888:	3b01      	subs	r3, #1
 800688a:	2b02      	cmp	r3, #2
 800688c:	d81d      	bhi.n	80068ca <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	889b      	ldrh	r3, [r3, #4]
 8006892:	b2db      	uxtb	r3, r3
 8006894:	2b01      	cmp	r3, #1
 8006896:	d813      	bhi.n	80068c0 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	6839      	ldr	r1, [r7, #0]
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	4798      	blx	r3
 80068a6:	4603      	mov	r3, r0
 80068a8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	88db      	ldrh	r3, [r3, #6]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d110      	bne.n	80068d4 <USBD_StdItfReq+0x74>
 80068b2:	7bfb      	ldrb	r3, [r7, #15]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d10d      	bne.n	80068d4 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 fd5e 	bl	800737a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80068be:	e009      	b.n	80068d4 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80068c0:	6839      	ldr	r1, [r7, #0]
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 fc8e 	bl	80071e4 <USBD_CtlError>
      break;
 80068c8:	e004      	b.n	80068d4 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80068ca:	6839      	ldr	r1, [r7, #0]
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 fc89 	bl	80071e4 <USBD_CtlError>
      break;
 80068d2:	e000      	b.n	80068d6 <USBD_StdItfReq+0x76>
      break;
 80068d4:	bf00      	nop
    }
    break;
 80068d6:	e004      	b.n	80068e2 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80068d8:	6839      	ldr	r1, [r7, #0]
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 fc82 	bl	80071e4 <USBD_CtlError>
    break;
 80068e0:	bf00      	nop
  }

  return ret;
 80068e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3710      	adds	r7, #16
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80068f6:	2300      	movs	r3, #0
 80068f8:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	889b      	ldrh	r3, [r3, #4]
 80068fe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006908:	2b20      	cmp	r3, #32
 800690a:	d004      	beq.n	8006916 <USBD_StdEPReq+0x2a>
 800690c:	2b40      	cmp	r3, #64	; 0x40
 800690e:	d002      	beq.n	8006916 <USBD_StdEPReq+0x2a>
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00a      	beq.n	800692a <USBD_StdEPReq+0x3e>
 8006914:	e135      	b.n	8006b82 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	6839      	ldr	r1, [r7, #0]
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	4798      	blx	r3
 8006924:	4603      	mov	r3, r0
 8006926:	73fb      	strb	r3, [r7, #15]
    break;
 8006928:	e130      	b.n	8006b8c <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	785b      	ldrb	r3, [r3, #1]
 800692e:	2b01      	cmp	r3, #1
 8006930:	d03e      	beq.n	80069b0 <USBD_StdEPReq+0xc4>
 8006932:	2b03      	cmp	r3, #3
 8006934:	d002      	beq.n	800693c <USBD_StdEPReq+0x50>
 8006936:	2b00      	cmp	r3, #0
 8006938:	d077      	beq.n	8006a2a <USBD_StdEPReq+0x13e>
 800693a:	e11c      	b.n	8006b76 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006942:	2b02      	cmp	r3, #2
 8006944:	d002      	beq.n	800694c <USBD_StdEPReq+0x60>
 8006946:	2b03      	cmp	r3, #3
 8006948:	d015      	beq.n	8006976 <USBD_StdEPReq+0x8a>
 800694a:	e02b      	b.n	80069a4 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800694c:	7bbb      	ldrb	r3, [r7, #14]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d00c      	beq.n	800696c <USBD_StdEPReq+0x80>
 8006952:	7bbb      	ldrb	r3, [r7, #14]
 8006954:	2b80      	cmp	r3, #128	; 0x80
 8006956:	d009      	beq.n	800696c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006958:	7bbb      	ldrb	r3, [r7, #14]
 800695a:	4619      	mov	r1, r3
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f001 f9ab 	bl	8007cb8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006962:	2180      	movs	r1, #128	; 0x80
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f001 f9a7 	bl	8007cb8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800696a:	e020      	b.n	80069ae <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800696c:	6839      	ldr	r1, [r7, #0]
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 fc38 	bl	80071e4 <USBD_CtlError>
        break;
 8006974:	e01b      	b.n	80069ae <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	885b      	ldrh	r3, [r3, #2]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d10e      	bne.n	800699c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800697e:	7bbb      	ldrb	r3, [r7, #14]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00b      	beq.n	800699c <USBD_StdEPReq+0xb0>
 8006984:	7bbb      	ldrb	r3, [r7, #14]
 8006986:	2b80      	cmp	r3, #128	; 0x80
 8006988:	d008      	beq.n	800699c <USBD_StdEPReq+0xb0>
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	88db      	ldrh	r3, [r3, #6]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d104      	bne.n	800699c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8006992:	7bbb      	ldrb	r3, [r7, #14]
 8006994:	4619      	mov	r1, r3
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f001 f98e 	bl	8007cb8 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 fcec 	bl	800737a <USBD_CtlSendStatus>

        break;
 80069a2:	e004      	b.n	80069ae <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80069a4:	6839      	ldr	r1, [r7, #0]
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 fc1c 	bl	80071e4 <USBD_CtlError>
        break;
 80069ac:	bf00      	nop
      }
      break;
 80069ae:	e0e7      	b.n	8006b80 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	d002      	beq.n	80069c0 <USBD_StdEPReq+0xd4>
 80069ba:	2b03      	cmp	r3, #3
 80069bc:	d015      	beq.n	80069ea <USBD_StdEPReq+0xfe>
 80069be:	e02d      	b.n	8006a1c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80069c0:	7bbb      	ldrb	r3, [r7, #14]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00c      	beq.n	80069e0 <USBD_StdEPReq+0xf4>
 80069c6:	7bbb      	ldrb	r3, [r7, #14]
 80069c8:	2b80      	cmp	r3, #128	; 0x80
 80069ca:	d009      	beq.n	80069e0 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80069cc:	7bbb      	ldrb	r3, [r7, #14]
 80069ce:	4619      	mov	r1, r3
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f001 f971 	bl	8007cb8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80069d6:	2180      	movs	r1, #128	; 0x80
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f001 f96d 	bl	8007cb8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80069de:	e023      	b.n	8006a28 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80069e0:	6839      	ldr	r1, [r7, #0]
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 fbfe 	bl	80071e4 <USBD_CtlError>
        break;
 80069e8:	e01e      	b.n	8006a28 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	885b      	ldrh	r3, [r3, #2]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d119      	bne.n	8006a26 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80069f2:	7bbb      	ldrb	r3, [r7, #14]
 80069f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d004      	beq.n	8006a06 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80069fc:	7bbb      	ldrb	r3, [r7, #14]
 80069fe:	4619      	mov	r1, r3
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f001 f978 	bl	8007cf6 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 fcb7 	bl	800737a <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	6839      	ldr	r1, [r7, #0]
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	4798      	blx	r3
        }
        break;
 8006a1a:	e004      	b.n	8006a26 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8006a1c:	6839      	ldr	r1, [r7, #0]
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 fbe0 	bl	80071e4 <USBD_CtlError>
        break;
 8006a24:	e000      	b.n	8006a28 <USBD_StdEPReq+0x13c>
        break;
 8006a26:	bf00      	nop
      }
      break;
 8006a28:	e0aa      	b.n	8006b80 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	d002      	beq.n	8006a3a <USBD_StdEPReq+0x14e>
 8006a34:	2b03      	cmp	r3, #3
 8006a36:	d032      	beq.n	8006a9e <USBD_StdEPReq+0x1b2>
 8006a38:	e097      	b.n	8006b6a <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a3a:	7bbb      	ldrb	r3, [r7, #14]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d007      	beq.n	8006a50 <USBD_StdEPReq+0x164>
 8006a40:	7bbb      	ldrb	r3, [r7, #14]
 8006a42:	2b80      	cmp	r3, #128	; 0x80
 8006a44:	d004      	beq.n	8006a50 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8006a46:	6839      	ldr	r1, [r7, #0]
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 fbcb 	bl	80071e4 <USBD_CtlError>
          break;
 8006a4e:	e091      	b.n	8006b74 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	da0b      	bge.n	8006a70 <USBD_StdEPReq+0x184>
 8006a58:	7bbb      	ldrb	r3, [r7, #14]
 8006a5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a5e:	4613      	mov	r3, r2
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	4413      	add	r3, r2
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	3310      	adds	r3, #16
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	3304      	adds	r3, #4
 8006a6e:	e00b      	b.n	8006a88 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006a70:	7bbb      	ldrb	r3, [r7, #14]
 8006a72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a76:	4613      	mov	r3, r2
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	4413      	add	r3, r2
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	4413      	add	r3, r2
 8006a86:	3304      	adds	r3, #4
 8006a88:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	2202      	movs	r2, #2
 8006a94:	4619      	mov	r1, r3
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 fc15 	bl	80072c6 <USBD_CtlSendData>
        break;
 8006a9c:	e06a      	b.n	8006b74 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8006a9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	da11      	bge.n	8006aca <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006aa6:	7bbb      	ldrb	r3, [r7, #14]
 8006aa8:	f003 020f 	and.w	r2, r3, #15
 8006aac:	6879      	ldr	r1, [r7, #4]
 8006aae:	4613      	mov	r3, r2
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4413      	add	r3, r2
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	440b      	add	r3, r1
 8006ab8:	3324      	adds	r3, #36	; 0x24
 8006aba:	881b      	ldrh	r3, [r3, #0]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d117      	bne.n	8006af0 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006ac0:	6839      	ldr	r1, [r7, #0]
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 fb8e 	bl	80071e4 <USBD_CtlError>
            break;
 8006ac8:	e054      	b.n	8006b74 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006aca:	7bbb      	ldrb	r3, [r7, #14]
 8006acc:	f003 020f 	and.w	r2, r3, #15
 8006ad0:	6879      	ldr	r1, [r7, #4]
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	4413      	add	r3, r2
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	440b      	add	r3, r1
 8006adc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006ae0:	881b      	ldrh	r3, [r3, #0]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d104      	bne.n	8006af0 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006ae6:	6839      	ldr	r1, [r7, #0]
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 fb7b 	bl	80071e4 <USBD_CtlError>
            break;
 8006aee:	e041      	b.n	8006b74 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006af0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	da0b      	bge.n	8006b10 <USBD_StdEPReq+0x224>
 8006af8:	7bbb      	ldrb	r3, [r7, #14]
 8006afa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006afe:	4613      	mov	r3, r2
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	4413      	add	r3, r2
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	3310      	adds	r3, #16
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	4413      	add	r3, r2
 8006b0c:	3304      	adds	r3, #4
 8006b0e:	e00b      	b.n	8006b28 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006b10:	7bbb      	ldrb	r3, [r7, #14]
 8006b12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b16:	4613      	mov	r3, r2
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	4413      	add	r3, r2
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	4413      	add	r3, r2
 8006b26:	3304      	adds	r3, #4
 8006b28:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006b2a:	7bbb      	ldrb	r3, [r7, #14]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d002      	beq.n	8006b36 <USBD_StdEPReq+0x24a>
 8006b30:	7bbb      	ldrb	r3, [r7, #14]
 8006b32:	2b80      	cmp	r3, #128	; 0x80
 8006b34:	d103      	bne.n	8006b3e <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	601a      	str	r2, [r3, #0]
 8006b3c:	e00e      	b.n	8006b5c <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006b3e:	7bbb      	ldrb	r3, [r7, #14]
 8006b40:	4619      	mov	r1, r3
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f001 f8f6 	bl	8007d34 <USBD_LL_IsStallEP>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d003      	beq.n	8006b56 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	2201      	movs	r2, #1
 8006b52:	601a      	str	r2, [r3, #0]
 8006b54:	e002      	b.n	8006b5c <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	2202      	movs	r2, #2
 8006b60:	4619      	mov	r1, r3
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 fbaf 	bl	80072c6 <USBD_CtlSendData>
          break;
 8006b68:	e004      	b.n	8006b74 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8006b6a:	6839      	ldr	r1, [r7, #0]
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 fb39 	bl	80071e4 <USBD_CtlError>
        break;
 8006b72:	bf00      	nop
      }
      break;
 8006b74:	e004      	b.n	8006b80 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8006b76:	6839      	ldr	r1, [r7, #0]
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 fb33 	bl	80071e4 <USBD_CtlError>
      break;
 8006b7e:	bf00      	nop
    }
    break;
 8006b80:	e004      	b.n	8006b8c <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8006b82:	6839      	ldr	r1, [r7, #0]
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 fb2d 	bl	80071e4 <USBD_CtlError>
    break;
 8006b8a:	bf00      	nop
  }

  return ret;
 8006b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3710      	adds	r7, #16
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
	...

08006b98 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006baa:	2300      	movs	r3, #0
 8006bac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	885b      	ldrh	r3, [r3, #2]
 8006bb2:	0a1b      	lsrs	r3, r3, #8
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	2b06      	cmp	r3, #6
 8006bba:	f200 8128 	bhi.w	8006e0e <USBD_GetDescriptor+0x276>
 8006bbe:	a201      	add	r2, pc, #4	; (adr r2, 8006bc4 <USBD_GetDescriptor+0x2c>)
 8006bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc4:	08006be1 	.word	0x08006be1
 8006bc8:	08006bf9 	.word	0x08006bf9
 8006bcc:	08006c39 	.word	0x08006c39
 8006bd0:	08006e0f 	.word	0x08006e0f
 8006bd4:	08006e0f 	.word	0x08006e0f
 8006bd8:	08006daf 	.word	0x08006daf
 8006bdc:	08006ddb 	.word	0x08006ddb
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	7c12      	ldrb	r2, [r2, #16]
 8006bec:	f107 0108 	add.w	r1, r7, #8
 8006bf0:	4610      	mov	r0, r2
 8006bf2:	4798      	blx	r3
 8006bf4:	60f8      	str	r0, [r7, #12]
    break;
 8006bf6:	e112      	b.n	8006e1e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	7c1b      	ldrb	r3, [r3, #16]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d10d      	bne.n	8006c1c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c08:	f107 0208 	add.w	r2, r7, #8
 8006c0c:	4610      	mov	r0, r2
 8006c0e:	4798      	blx	r3
 8006c10:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	3301      	adds	r3, #1
 8006c16:	2202      	movs	r2, #2
 8006c18:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006c1a:	e100      	b.n	8006e1e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c24:	f107 0208 	add.w	r2, r7, #8
 8006c28:	4610      	mov	r0, r2
 8006c2a:	4798      	blx	r3
 8006c2c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	3301      	adds	r3, #1
 8006c32:	2202      	movs	r2, #2
 8006c34:	701a      	strb	r2, [r3, #0]
    break;
 8006c36:	e0f2      	b.n	8006e1e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	885b      	ldrh	r3, [r3, #2]
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	2b05      	cmp	r3, #5
 8006c40:	f200 80ac 	bhi.w	8006d9c <USBD_GetDescriptor+0x204>
 8006c44:	a201      	add	r2, pc, #4	; (adr r2, 8006c4c <USBD_GetDescriptor+0xb4>)
 8006c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c4a:	bf00      	nop
 8006c4c:	08006c65 	.word	0x08006c65
 8006c50:	08006c99 	.word	0x08006c99
 8006c54:	08006ccd 	.word	0x08006ccd
 8006c58:	08006d01 	.word	0x08006d01
 8006c5c:	08006d35 	.word	0x08006d35
 8006c60:	08006d69 	.word	0x08006d69
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d00b      	beq.n	8006c88 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	7c12      	ldrb	r2, [r2, #16]
 8006c7c:	f107 0108 	add.w	r1, r7, #8
 8006c80:	4610      	mov	r0, r2
 8006c82:	4798      	blx	r3
 8006c84:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c86:	e091      	b.n	8006dac <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006c88:	6839      	ldr	r1, [r7, #0]
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 faaa 	bl	80071e4 <USBD_CtlError>
        err++;
 8006c90:	7afb      	ldrb	r3, [r7, #11]
 8006c92:	3301      	adds	r3, #1
 8006c94:	72fb      	strb	r3, [r7, #11]
      break;
 8006c96:	e089      	b.n	8006dac <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d00b      	beq.n	8006cbc <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	7c12      	ldrb	r2, [r2, #16]
 8006cb0:	f107 0108 	add.w	r1, r7, #8
 8006cb4:	4610      	mov	r0, r2
 8006cb6:	4798      	blx	r3
 8006cb8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006cba:	e077      	b.n	8006dac <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006cbc:	6839      	ldr	r1, [r7, #0]
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 fa90 	bl	80071e4 <USBD_CtlError>
        err++;
 8006cc4:	7afb      	ldrb	r3, [r7, #11]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	72fb      	strb	r3, [r7, #11]
      break;
 8006cca:	e06f      	b.n	8006dac <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d00b      	beq.n	8006cf0 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	7c12      	ldrb	r2, [r2, #16]
 8006ce4:	f107 0108 	add.w	r1, r7, #8
 8006ce8:	4610      	mov	r0, r2
 8006cea:	4798      	blx	r3
 8006cec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006cee:	e05d      	b.n	8006dac <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006cf0:	6839      	ldr	r1, [r7, #0]
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 fa76 	bl	80071e4 <USBD_CtlError>
        err++;
 8006cf8:	7afb      	ldrb	r3, [r7, #11]
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	72fb      	strb	r3, [r7, #11]
      break;
 8006cfe:	e055      	b.n	8006dac <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d06:	691b      	ldr	r3, [r3, #16]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d00b      	beq.n	8006d24 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d12:	691b      	ldr	r3, [r3, #16]
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	7c12      	ldrb	r2, [r2, #16]
 8006d18:	f107 0108 	add.w	r1, r7, #8
 8006d1c:	4610      	mov	r0, r2
 8006d1e:	4798      	blx	r3
 8006d20:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d22:	e043      	b.n	8006dac <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006d24:	6839      	ldr	r1, [r7, #0]
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 fa5c 	bl	80071e4 <USBD_CtlError>
        err++;
 8006d2c:	7afb      	ldrb	r3, [r7, #11]
 8006d2e:	3301      	adds	r3, #1
 8006d30:	72fb      	strb	r3, [r7, #11]
      break;
 8006d32:	e03b      	b.n	8006dac <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d3a:	695b      	ldr	r3, [r3, #20]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00b      	beq.n	8006d58 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d46:	695b      	ldr	r3, [r3, #20]
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	7c12      	ldrb	r2, [r2, #16]
 8006d4c:	f107 0108 	add.w	r1, r7, #8
 8006d50:	4610      	mov	r0, r2
 8006d52:	4798      	blx	r3
 8006d54:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d56:	e029      	b.n	8006dac <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006d58:	6839      	ldr	r1, [r7, #0]
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 fa42 	bl	80071e4 <USBD_CtlError>
        err++;
 8006d60:	7afb      	ldrb	r3, [r7, #11]
 8006d62:	3301      	adds	r3, #1
 8006d64:	72fb      	strb	r3, [r7, #11]
      break;
 8006d66:	e021      	b.n	8006dac <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d6e:	699b      	ldr	r3, [r3, #24]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d00b      	beq.n	8006d8c <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d7a:	699b      	ldr	r3, [r3, #24]
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	7c12      	ldrb	r2, [r2, #16]
 8006d80:	f107 0108 	add.w	r1, r7, #8
 8006d84:	4610      	mov	r0, r2
 8006d86:	4798      	blx	r3
 8006d88:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d8a:	e00f      	b.n	8006dac <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006d8c:	6839      	ldr	r1, [r7, #0]
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 fa28 	bl	80071e4 <USBD_CtlError>
        err++;
 8006d94:	7afb      	ldrb	r3, [r7, #11]
 8006d96:	3301      	adds	r3, #1
 8006d98:	72fb      	strb	r3, [r7, #11]
      break;
 8006d9a:	e007      	b.n	8006dac <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8006d9c:	6839      	ldr	r1, [r7, #0]
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 fa20 	bl	80071e4 <USBD_CtlError>
      err++;
 8006da4:	7afb      	ldrb	r3, [r7, #11]
 8006da6:	3301      	adds	r3, #1
 8006da8:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8006daa:	bf00      	nop
    }
    break;
 8006dac:	e037      	b.n	8006e1e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	7c1b      	ldrb	r3, [r3, #16]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d109      	bne.n	8006dca <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dbe:	f107 0208 	add.w	r2, r7, #8
 8006dc2:	4610      	mov	r0, r2
 8006dc4:	4798      	blx	r3
 8006dc6:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006dc8:	e029      	b.n	8006e1e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006dca:	6839      	ldr	r1, [r7, #0]
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 fa09 	bl	80071e4 <USBD_CtlError>
      err++;
 8006dd2:	7afb      	ldrb	r3, [r7, #11]
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	72fb      	strb	r3, [r7, #11]
    break;
 8006dd8:	e021      	b.n	8006e1e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	7c1b      	ldrb	r3, [r3, #16]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d10d      	bne.n	8006dfe <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dea:	f107 0208 	add.w	r2, r7, #8
 8006dee:	4610      	mov	r0, r2
 8006df0:	4798      	blx	r3
 8006df2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	3301      	adds	r3, #1
 8006df8:	2207      	movs	r2, #7
 8006dfa:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006dfc:	e00f      	b.n	8006e1e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006dfe:	6839      	ldr	r1, [r7, #0]
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 f9ef 	bl	80071e4 <USBD_CtlError>
      err++;
 8006e06:	7afb      	ldrb	r3, [r7, #11]
 8006e08:	3301      	adds	r3, #1
 8006e0a:	72fb      	strb	r3, [r7, #11]
    break;
 8006e0c:	e007      	b.n	8006e1e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8006e0e:	6839      	ldr	r1, [r7, #0]
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 f9e7 	bl	80071e4 <USBD_CtlError>
    err++;
 8006e16:	7afb      	ldrb	r3, [r7, #11]
 8006e18:	3301      	adds	r3, #1
 8006e1a:	72fb      	strb	r3, [r7, #11]
    break;
 8006e1c:	bf00      	nop
  }

  if (err != 0U)
 8006e1e:	7afb      	ldrb	r3, [r7, #11]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d11e      	bne.n	8006e62 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	88db      	ldrh	r3, [r3, #6]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d016      	beq.n	8006e5a <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8006e2c:	893b      	ldrh	r3, [r7, #8]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00e      	beq.n	8006e50 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	88da      	ldrh	r2, [r3, #6]
 8006e36:	893b      	ldrh	r3, [r7, #8]
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	bf28      	it	cs
 8006e3c:	4613      	movcs	r3, r2
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8006e42:	893b      	ldrh	r3, [r7, #8]
 8006e44:	461a      	mov	r2, r3
 8006e46:	68f9      	ldr	r1, [r7, #12]
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 fa3c 	bl	80072c6 <USBD_CtlSendData>
 8006e4e:	e009      	b.n	8006e64 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8006e50:	6839      	ldr	r1, [r7, #0]
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 f9c6 	bl	80071e4 <USBD_CtlError>
 8006e58:	e004      	b.n	8006e64 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 fa8d 	bl	800737a <USBD_CtlSendStatus>
 8006e60:	e000      	b.n	8006e64 <USBD_GetDescriptor+0x2cc>
    return;
 8006e62:	bf00      	nop
    }
  }
}
 8006e64:	3710      	adds	r7, #16
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop

08006e6c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	889b      	ldrh	r3, [r3, #4]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d130      	bne.n	8006ee0 <USBD_SetAddress+0x74>
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	88db      	ldrh	r3, [r3, #6]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d12c      	bne.n	8006ee0 <USBD_SetAddress+0x74>
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	885b      	ldrh	r3, [r3, #2]
 8006e8a:	2b7f      	cmp	r3, #127	; 0x7f
 8006e8c:	d828      	bhi.n	8006ee0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	885b      	ldrh	r3, [r3, #2]
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e98:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ea0:	2b03      	cmp	r3, #3
 8006ea2:	d104      	bne.n	8006eae <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006ea4:	6839      	ldr	r1, [r7, #0]
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 f99c 	bl	80071e4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eac:	e01c      	b.n	8006ee8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	7bfa      	ldrb	r2, [r7, #15]
 8006eb2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006eb6:	7bfb      	ldrb	r3, [r7, #15]
 8006eb8:	4619      	mov	r1, r3
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 ff66 	bl	8007d8c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 fa5a 	bl	800737a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006ec6:	7bfb      	ldrb	r3, [r7, #15]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d004      	beq.n	8006ed6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2202      	movs	r2, #2
 8006ed0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ed4:	e008      	b.n	8006ee8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ede:	e003      	b.n	8006ee8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006ee0:	6839      	ldr	r1, [r7, #0]
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 f97e 	bl	80071e4 <USBD_CtlError>
  }
}
 8006ee8:	bf00      	nop
 8006eea:	3710      	adds	r7, #16
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006efa:	2300      	movs	r3, #0
 8006efc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	885b      	ldrh	r3, [r3, #2]
 8006f02:	b2da      	uxtb	r2, r3
 8006f04:	4b4b      	ldr	r3, [pc, #300]	; (8007034 <USBD_SetConfig+0x144>)
 8006f06:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006f08:	4b4a      	ldr	r3, [pc, #296]	; (8007034 <USBD_SetConfig+0x144>)
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d905      	bls.n	8006f1c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006f10:	6839      	ldr	r1, [r7, #0]
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 f966 	bl	80071e4 <USBD_CtlError>
    return USBD_FAIL;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	e087      	b.n	800702c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f22:	2b02      	cmp	r3, #2
 8006f24:	d002      	beq.n	8006f2c <USBD_SetConfig+0x3c>
 8006f26:	2b03      	cmp	r3, #3
 8006f28:	d025      	beq.n	8006f76 <USBD_SetConfig+0x86>
 8006f2a:	e071      	b.n	8007010 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8006f2c:	4b41      	ldr	r3, [pc, #260]	; (8007034 <USBD_SetConfig+0x144>)
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d01c      	beq.n	8006f6e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8006f34:	4b3f      	ldr	r3, [pc, #252]	; (8007034 <USBD_SetConfig+0x144>)
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	461a      	mov	r2, r3
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006f3e:	4b3d      	ldr	r3, [pc, #244]	; (8007034 <USBD_SetConfig+0x144>)
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	4619      	mov	r1, r3
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f7ff f9a7 	bl	8006298 <USBD_SetClassConfig>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8006f4e:	7bfb      	ldrb	r3, [r7, #15]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d004      	beq.n	8006f5e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8006f54:	6839      	ldr	r1, [r7, #0]
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 f944 	bl	80071e4 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006f5c:	e065      	b.n	800702a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 fa0b 	bl	800737a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2203      	movs	r2, #3
 8006f68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006f6c:	e05d      	b.n	800702a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 fa03 	bl	800737a <USBD_CtlSendStatus>
    break;
 8006f74:	e059      	b.n	800702a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8006f76:	4b2f      	ldr	r3, [pc, #188]	; (8007034 <USBD_SetConfig+0x144>)
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d112      	bne.n	8006fa4 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2202      	movs	r2, #2
 8006f82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8006f86:	4b2b      	ldr	r3, [pc, #172]	; (8007034 <USBD_SetConfig+0x144>)
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006f90:	4b28      	ldr	r3, [pc, #160]	; (8007034 <USBD_SetConfig+0x144>)
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	4619      	mov	r1, r3
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f7ff f99a 	bl	80062d0 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 f9ec 	bl	800737a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006fa2:	e042      	b.n	800702a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8006fa4:	4b23      	ldr	r3, [pc, #140]	; (8007034 <USBD_SetConfig+0x144>)
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	461a      	mov	r2, r3
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d02a      	beq.n	8007008 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	4619      	mov	r1, r3
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f7ff f988 	bl	80062d0 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8006fc0:	4b1c      	ldr	r3, [pc, #112]	; (8007034 <USBD_SetConfig+0x144>)
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006fca:	4b1a      	ldr	r3, [pc, #104]	; (8007034 <USBD_SetConfig+0x144>)
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	4619      	mov	r1, r3
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f7ff f961 	bl	8006298 <USBD_SetClassConfig>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8006fda:	7bfb      	ldrb	r3, [r7, #15]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d00f      	beq.n	8007000 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8006fe0:	6839      	ldr	r1, [r7, #0]
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 f8fe 	bl	80071e4 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	4619      	mov	r1, r3
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f7ff f96d 	bl	80062d0 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2202      	movs	r2, #2
 8006ffa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006ffe:	e014      	b.n	800702a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 f9ba 	bl	800737a <USBD_CtlSendStatus>
    break;
 8007006:	e010      	b.n	800702a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 f9b6 	bl	800737a <USBD_CtlSendStatus>
    break;
 800700e:	e00c      	b.n	800702a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8007010:	6839      	ldr	r1, [r7, #0]
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 f8e6 	bl	80071e4 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007018:	4b06      	ldr	r3, [pc, #24]	; (8007034 <USBD_SetConfig+0x144>)
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	4619      	mov	r1, r3
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f7ff f956 	bl	80062d0 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8007024:	2303      	movs	r3, #3
 8007026:	73fb      	strb	r3, [r7, #15]
    break;
 8007028:	bf00      	nop
  }

  return ret;
 800702a:	7bfb      	ldrb	r3, [r7, #15]
}
 800702c:	4618      	mov	r0, r3
 800702e:	3710      	adds	r7, #16
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	2000020c 	.word	0x2000020c

08007038 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	88db      	ldrh	r3, [r3, #6]
 8007046:	2b01      	cmp	r3, #1
 8007048:	d004      	beq.n	8007054 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800704a:	6839      	ldr	r1, [r7, #0]
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 f8c9 	bl	80071e4 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8007052:	e021      	b.n	8007098 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800705a:	2b01      	cmp	r3, #1
 800705c:	db17      	blt.n	800708e <USBD_GetConfig+0x56>
 800705e:	2b02      	cmp	r3, #2
 8007060:	dd02      	ble.n	8007068 <USBD_GetConfig+0x30>
 8007062:	2b03      	cmp	r3, #3
 8007064:	d00b      	beq.n	800707e <USBD_GetConfig+0x46>
 8007066:	e012      	b.n	800708e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	3308      	adds	r3, #8
 8007072:	2201      	movs	r2, #1
 8007074:	4619      	mov	r1, r3
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 f925 	bl	80072c6 <USBD_CtlSendData>
      break;
 800707c:	e00c      	b.n	8007098 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	3304      	adds	r3, #4
 8007082:	2201      	movs	r2, #1
 8007084:	4619      	mov	r1, r3
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 f91d 	bl	80072c6 <USBD_CtlSendData>
      break;
 800708c:	e004      	b.n	8007098 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800708e:	6839      	ldr	r1, [r7, #0]
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 f8a7 	bl	80071e4 <USBD_CtlError>
      break;
 8007096:	bf00      	nop
}
 8007098:	bf00      	nop
 800709a:	3708      	adds	r7, #8
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070b0:	3b01      	subs	r3, #1
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	d81e      	bhi.n	80070f4 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	88db      	ldrh	r3, [r3, #6]
 80070ba:	2b02      	cmp	r3, #2
 80070bc:	d004      	beq.n	80070c8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80070be:	6839      	ldr	r1, [r7, #0]
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 f88f 	bl	80071e4 <USBD_CtlError>
      break;
 80070c6:	e01a      	b.n	80070fe <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2201      	movs	r2, #1
 80070cc:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d005      	beq.n	80070e4 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	f043 0202 	orr.w	r2, r3, #2
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	330c      	adds	r3, #12
 80070e8:	2202      	movs	r2, #2
 80070ea:	4619      	mov	r1, r3
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 f8ea 	bl	80072c6 <USBD_CtlSendData>
    break;
 80070f2:	e004      	b.n	80070fe <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80070f4:	6839      	ldr	r1, [r7, #0]
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 f874 	bl	80071e4 <USBD_CtlError>
    break;
 80070fc:	bf00      	nop
  }
}
 80070fe:	bf00      	nop
 8007100:	3708      	adds	r7, #8
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}

08007106 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007106:	b580      	push	{r7, lr}
 8007108:	b082      	sub	sp, #8
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
 800710e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	885b      	ldrh	r3, [r3, #2]
 8007114:	2b01      	cmp	r3, #1
 8007116:	d106      	bne.n	8007126 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 f92a 	bl	800737a <USBD_CtlSendStatus>
  }
}
 8007126:	bf00      	nop
 8007128:	3708      	adds	r7, #8
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800712e:	b580      	push	{r7, lr}
 8007130:	b082      	sub	sp, #8
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
 8007136:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800713e:	3b01      	subs	r3, #1
 8007140:	2b02      	cmp	r3, #2
 8007142:	d80b      	bhi.n	800715c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	885b      	ldrh	r3, [r3, #2]
 8007148:	2b01      	cmp	r3, #1
 800714a:	d10c      	bne.n	8007166 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 f910 	bl	800737a <USBD_CtlSendStatus>
      }
      break;
 800715a:	e004      	b.n	8007166 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800715c:	6839      	ldr	r1, [r7, #0]
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 f840 	bl	80071e4 <USBD_CtlError>
      break;
 8007164:	e000      	b.n	8007168 <USBD_ClrFeature+0x3a>
      break;
 8007166:	bf00      	nop
  }
}
 8007168:	bf00      	nop
 800716a:	3708      	adds	r7, #8
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	781a      	ldrb	r2, [r3, #0]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	3301      	adds	r3, #1
 800718a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	781a      	ldrb	r2, [r3, #0]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	3301      	adds	r3, #1
 8007198:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800719a:	68f8      	ldr	r0, [r7, #12]
 800719c:	f7ff fad3 	bl	8006746 <SWAPBYTE>
 80071a0:	4603      	mov	r3, r0
 80071a2:	461a      	mov	r2, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	3301      	adds	r3, #1
 80071ac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	3301      	adds	r3, #1
 80071b2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80071b4:	68f8      	ldr	r0, [r7, #12]
 80071b6:	f7ff fac6 	bl	8006746 <SWAPBYTE>
 80071ba:	4603      	mov	r3, r0
 80071bc:	461a      	mov	r2, r3
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	3301      	adds	r3, #1
 80071c6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	3301      	adds	r3, #1
 80071cc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f7ff fab9 	bl	8006746 <SWAPBYTE>
 80071d4:	4603      	mov	r3, r0
 80071d6:	461a      	mov	r2, r3
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	80da      	strh	r2, [r3, #6]
}
 80071dc:	bf00      	nop
 80071de:	3710      	adds	r7, #16
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80071ee:	2180      	movs	r1, #128	; 0x80
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 fd61 	bl	8007cb8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80071f6:	2100      	movs	r1, #0
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 fd5d 	bl	8007cb8 <USBD_LL_StallEP>
}
 80071fe:	bf00      	nop
 8007200:	3708      	adds	r7, #8
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}

08007206 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007206:	b580      	push	{r7, lr}
 8007208:	b086      	sub	sp, #24
 800720a:	af00      	add	r7, sp, #0
 800720c:	60f8      	str	r0, [r7, #12]
 800720e:	60b9      	str	r1, [r7, #8]
 8007210:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007212:	2300      	movs	r3, #0
 8007214:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d036      	beq.n	800728a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007220:	6938      	ldr	r0, [r7, #16]
 8007222:	f000 f836 	bl	8007292 <USBD_GetLen>
 8007226:	4603      	mov	r3, r0
 8007228:	3301      	adds	r3, #1
 800722a:	b29b      	uxth	r3, r3
 800722c:	005b      	lsls	r3, r3, #1
 800722e:	b29a      	uxth	r2, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007234:	7dfb      	ldrb	r3, [r7, #23]
 8007236:	68ba      	ldr	r2, [r7, #8]
 8007238:	4413      	add	r3, r2
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	7812      	ldrb	r2, [r2, #0]
 800723e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007240:	7dfb      	ldrb	r3, [r7, #23]
 8007242:	3301      	adds	r3, #1
 8007244:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007246:	7dfb      	ldrb	r3, [r7, #23]
 8007248:	68ba      	ldr	r2, [r7, #8]
 800724a:	4413      	add	r3, r2
 800724c:	2203      	movs	r2, #3
 800724e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007250:	7dfb      	ldrb	r3, [r7, #23]
 8007252:	3301      	adds	r3, #1
 8007254:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007256:	e013      	b.n	8007280 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007258:	7dfb      	ldrb	r3, [r7, #23]
 800725a:	68ba      	ldr	r2, [r7, #8]
 800725c:	4413      	add	r3, r2
 800725e:	693a      	ldr	r2, [r7, #16]
 8007260:	7812      	ldrb	r2, [r2, #0]
 8007262:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	3301      	adds	r3, #1
 8007268:	613b      	str	r3, [r7, #16]
    idx++;
 800726a:	7dfb      	ldrb	r3, [r7, #23]
 800726c:	3301      	adds	r3, #1
 800726e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007270:	7dfb      	ldrb	r3, [r7, #23]
 8007272:	68ba      	ldr	r2, [r7, #8]
 8007274:	4413      	add	r3, r2
 8007276:	2200      	movs	r2, #0
 8007278:	701a      	strb	r2, [r3, #0]
    idx++;
 800727a:	7dfb      	ldrb	r3, [r7, #23]
 800727c:	3301      	adds	r3, #1
 800727e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d1e7      	bne.n	8007258 <USBD_GetString+0x52>
 8007288:	e000      	b.n	800728c <USBD_GetString+0x86>
    return;
 800728a:	bf00      	nop
  }
}
 800728c:	3718      	adds	r7, #24
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007292:	b480      	push	{r7}
 8007294:	b085      	sub	sp, #20
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800729a:	2300      	movs	r3, #0
 800729c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80072a2:	e005      	b.n	80072b0 <USBD_GetLen+0x1e>
  {
    len++;
 80072a4:	7bfb      	ldrb	r3, [r7, #15]
 80072a6:	3301      	adds	r3, #1
 80072a8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	3301      	adds	r3, #1
 80072ae:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d1f5      	bne.n	80072a4 <USBD_GetLen+0x12>
  }

  return len;
 80072b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3714      	adds	r7, #20
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr

080072c6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80072c6:	b580      	push	{r7, lr}
 80072c8:	b084      	sub	sp, #16
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	60f8      	str	r0, [r7, #12]
 80072ce:	60b9      	str	r1, [r7, #8]
 80072d0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2202      	movs	r2, #2
 80072d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	68ba      	ldr	r2, [r7, #8]
 80072ea:	2100      	movs	r1, #0
 80072ec:	68f8      	ldr	r0, [r7, #12]
 80072ee:	f000 fd6c 	bl	8007dca <USBD_LL_Transmit>

  return USBD_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3710      	adds	r7, #16
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	68ba      	ldr	r2, [r7, #8]
 800730c:	2100      	movs	r1, #0
 800730e:	68f8      	ldr	r0, [r7, #12]
 8007310:	f000 fd5b 	bl	8007dca <USBD_LL_Transmit>

  return USBD_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800731e:	b580      	push	{r7, lr}
 8007320:	b084      	sub	sp, #16
 8007322:	af00      	add	r7, sp, #0
 8007324:	60f8      	str	r0, [r7, #12]
 8007326:	60b9      	str	r1, [r7, #8]
 8007328:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2203      	movs	r2, #3
 800732e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	68ba      	ldr	r2, [r7, #8]
 8007346:	2100      	movs	r1, #0
 8007348:	68f8      	ldr	r0, [r7, #12]
 800734a:	f000 fd5f 	bl	8007e0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800734e:	2300      	movs	r3, #0
}
 8007350:	4618      	mov	r0, r3
 8007352:	3710      	adds	r7, #16
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	68ba      	ldr	r2, [r7, #8]
 8007368:	2100      	movs	r1, #0
 800736a:	68f8      	ldr	r0, [r7, #12]
 800736c:	f000 fd4e 	bl	8007e0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b082      	sub	sp, #8
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2204      	movs	r2, #4
 8007386:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800738a:	2300      	movs	r3, #0
 800738c:	2200      	movs	r2, #0
 800738e:	2100      	movs	r1, #0
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 fd1a 	bl	8007dca <USBD_LL_Transmit>

  return USBD_OK;
 8007396:	2300      	movs	r3, #0
}
 8007398:	4618      	mov	r0, r3
 800739a:	3708      	adds	r7, #8
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2205      	movs	r2, #5
 80073ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073b0:	2300      	movs	r3, #0
 80073b2:	2200      	movs	r2, #0
 80073b4:	2100      	movs	r1, #0
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 fd28 	bl	8007e0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80073bc:	2300      	movs	r3, #0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3708      	adds	r7, #8
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
	...

080073c8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80073cc:	2200      	movs	r2, #0
 80073ce:	4912      	ldr	r1, [pc, #72]	; (8007418 <MX_USB_DEVICE_Init+0x50>)
 80073d0:	4812      	ldr	r0, [pc, #72]	; (800741c <MX_USB_DEVICE_Init+0x54>)
 80073d2:	f7fe fef3 	bl	80061bc <USBD_Init>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d001      	beq.n	80073e0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80073dc:	f7f9 fa74 	bl	80008c8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80073e0:	490f      	ldr	r1, [pc, #60]	; (8007420 <MX_USB_DEVICE_Init+0x58>)
 80073e2:	480e      	ldr	r0, [pc, #56]	; (800741c <MX_USB_DEVICE_Init+0x54>)
 80073e4:	f7fe ff20 	bl	8006228 <USBD_RegisterClass>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d001      	beq.n	80073f2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80073ee:	f7f9 fa6b 	bl	80008c8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80073f2:	490c      	ldr	r1, [pc, #48]	; (8007424 <MX_USB_DEVICE_Init+0x5c>)
 80073f4:	4809      	ldr	r0, [pc, #36]	; (800741c <MX_USB_DEVICE_Init+0x54>)
 80073f6:	f7fe fe45 	bl	8006084 <USBD_CDC_RegisterInterface>
 80073fa:	4603      	mov	r3, r0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d001      	beq.n	8007404 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007400:	f7f9 fa62 	bl	80008c8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007404:	4805      	ldr	r0, [pc, #20]	; (800741c <MX_USB_DEVICE_Init+0x54>)
 8007406:	f7fe ff30 	bl	800626a <USBD_Start>
 800740a:	4603      	mov	r3, r0
 800740c:	2b00      	cmp	r3, #0
 800740e:	d001      	beq.n	8007414 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007410:	f7f9 fa5a 	bl	80008c8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007414:	bf00      	nop
 8007416:	bd80      	pop	{r7, pc}
 8007418:	20000138 	.word	0x20000138
 800741c:	200004c8 	.word	0x200004c8
 8007420:	20000018 	.word	0x20000018
 8007424:	20000124 	.word	0x20000124

08007428 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800742c:	2200      	movs	r2, #0
 800742e:	4905      	ldr	r1, [pc, #20]	; (8007444 <CDC_Init_FS+0x1c>)
 8007430:	4805      	ldr	r0, [pc, #20]	; (8007448 <CDC_Init_FS+0x20>)
 8007432:	f7fe fe3c 	bl	80060ae <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007436:	4905      	ldr	r1, [pc, #20]	; (800744c <CDC_Init_FS+0x24>)
 8007438:	4803      	ldr	r0, [pc, #12]	; (8007448 <CDC_Init_FS+0x20>)
 800743a:	f7fe fe51 	bl	80060e0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800743e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007440:	4618      	mov	r0, r3
 8007442:	bd80      	pop	{r7, pc}
 8007444:	20000f98 	.word	0x20000f98
 8007448:	200004c8 	.word	0x200004c8
 800744c:	20000798 	.word	0x20000798

08007450 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007450:	b480      	push	{r7}
 8007452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007454:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007456:	4618      	mov	r0, r3
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007460:	b480      	push	{r7}
 8007462:	b083      	sub	sp, #12
 8007464:	af00      	add	r7, sp, #0
 8007466:	4603      	mov	r3, r0
 8007468:	6039      	str	r1, [r7, #0]
 800746a:	71fb      	strb	r3, [r7, #7]
 800746c:	4613      	mov	r3, r2
 800746e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007470:	79fb      	ldrb	r3, [r7, #7]
 8007472:	2b23      	cmp	r3, #35	; 0x23
 8007474:	f200 8098 	bhi.w	80075a8 <CDC_Control_FS+0x148>
 8007478:	a201      	add	r2, pc, #4	; (adr r2, 8007480 <CDC_Control_FS+0x20>)
 800747a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800747e:	bf00      	nop
 8007480:	080075a9 	.word	0x080075a9
 8007484:	080075a9 	.word	0x080075a9
 8007488:	080075a9 	.word	0x080075a9
 800748c:	080075a9 	.word	0x080075a9
 8007490:	080075a9 	.word	0x080075a9
 8007494:	080075a9 	.word	0x080075a9
 8007498:	080075a9 	.word	0x080075a9
 800749c:	080075a9 	.word	0x080075a9
 80074a0:	080075a9 	.word	0x080075a9
 80074a4:	080075a9 	.word	0x080075a9
 80074a8:	080075a9 	.word	0x080075a9
 80074ac:	080075a9 	.word	0x080075a9
 80074b0:	080075a9 	.word	0x080075a9
 80074b4:	080075a9 	.word	0x080075a9
 80074b8:	080075a9 	.word	0x080075a9
 80074bc:	080075a9 	.word	0x080075a9
 80074c0:	080075a9 	.word	0x080075a9
 80074c4:	080075a9 	.word	0x080075a9
 80074c8:	080075a9 	.word	0x080075a9
 80074cc:	080075a9 	.word	0x080075a9
 80074d0:	080075a9 	.word	0x080075a9
 80074d4:	080075a9 	.word	0x080075a9
 80074d8:	080075a9 	.word	0x080075a9
 80074dc:	080075a9 	.word	0x080075a9
 80074e0:	080075a9 	.word	0x080075a9
 80074e4:	080075a9 	.word	0x080075a9
 80074e8:	080075a9 	.word	0x080075a9
 80074ec:	080075a9 	.word	0x080075a9
 80074f0:	080075a9 	.word	0x080075a9
 80074f4:	080075a9 	.word	0x080075a9
 80074f8:	080075a9 	.word	0x080075a9
 80074fc:	080075a9 	.word	0x080075a9
 8007500:	08007511 	.word	0x08007511
 8007504:	08007555 	.word	0x08007555
 8007508:	080075a9 	.word	0x080075a9
 800750c:	080075a9 	.word	0x080075a9
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
       linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	461a      	mov	r2, r3
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	3301      	adds	r3, #1
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	021b      	lsls	r3, r3, #8
 800751e:	431a      	orrs	r2, r3
                               (pbuf[2] << 16) | (pbuf[3] << 24));
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	3302      	adds	r3, #2
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	041b      	lsls	r3, r3, #16
       linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8007528:	431a      	orrs	r2, r3
                               (pbuf[2] << 16) | (pbuf[3] << 24));
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	3303      	adds	r3, #3
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	061b      	lsls	r3, r3, #24
 8007532:	4313      	orrs	r3, r2
       linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8007534:	461a      	mov	r2, r3
 8007536:	4b20      	ldr	r3, [pc, #128]	; (80075b8 <CDC_Control_FS+0x158>)
 8007538:	601a      	str	r2, [r3, #0]
       linecoding.format     = pbuf[4];
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	791a      	ldrb	r2, [r3, #4]
 800753e:	4b1e      	ldr	r3, [pc, #120]	; (80075b8 <CDC_Control_FS+0x158>)
 8007540:	711a      	strb	r2, [r3, #4]
       linecoding.paritytype = pbuf[5];
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	795a      	ldrb	r2, [r3, #5]
 8007546:	4b1c      	ldr	r3, [pc, #112]	; (80075b8 <CDC_Control_FS+0x158>)
 8007548:	715a      	strb	r2, [r3, #5]
       linecoding.datatype   = pbuf[6];
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	799a      	ldrb	r2, [r3, #6]
 800754e:	4b1a      	ldr	r3, [pc, #104]	; (80075b8 <CDC_Control_FS+0x158>)
 8007550:	719a      	strb	r2, [r3, #6]

       /* Add your code here */
       break;
 8007552:	e02a      	b.n	80075aa <CDC_Control_FS+0x14a>

     case CDC_GET_LINE_CODING:
       pbuf[0] = (uint8_t)(linecoding.bitrate);
 8007554:	4b18      	ldr	r3, [pc, #96]	; (80075b8 <CDC_Control_FS+0x158>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	b2da      	uxtb	r2, r3
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	701a      	strb	r2, [r3, #0]
       pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 800755e:	4b16      	ldr	r3, [pc, #88]	; (80075b8 <CDC_Control_FS+0x158>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	0a1a      	lsrs	r2, r3, #8
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	3301      	adds	r3, #1
 8007568:	b2d2      	uxtb	r2, r2
 800756a:	701a      	strb	r2, [r3, #0]
       pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 800756c:	4b12      	ldr	r3, [pc, #72]	; (80075b8 <CDC_Control_FS+0x158>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	0c1a      	lsrs	r2, r3, #16
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	3302      	adds	r3, #2
 8007576:	b2d2      	uxtb	r2, r2
 8007578:	701a      	strb	r2, [r3, #0]
       pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 800757a:	4b0f      	ldr	r3, [pc, #60]	; (80075b8 <CDC_Control_FS+0x158>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	0e1a      	lsrs	r2, r3, #24
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	3303      	adds	r3, #3
 8007584:	b2d2      	uxtb	r2, r2
 8007586:	701a      	strb	r2, [r3, #0]
       pbuf[4] = linecoding.format;
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	3304      	adds	r3, #4
 800758c:	4a0a      	ldr	r2, [pc, #40]	; (80075b8 <CDC_Control_FS+0x158>)
 800758e:	7912      	ldrb	r2, [r2, #4]
 8007590:	701a      	strb	r2, [r3, #0]
       pbuf[5] = linecoding.paritytype;
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	3305      	adds	r3, #5
 8007596:	4a08      	ldr	r2, [pc, #32]	; (80075b8 <CDC_Control_FS+0x158>)
 8007598:	7952      	ldrb	r2, [r2, #5]
 800759a:	701a      	strb	r2, [r3, #0]
       pbuf[6] = linecoding.datatype;
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	3306      	adds	r3, #6
 80075a0:	4a05      	ldr	r2, [pc, #20]	; (80075b8 <CDC_Control_FS+0x158>)
 80075a2:	7992      	ldrb	r2, [r2, #6]
 80075a4:	701a      	strb	r2, [r3, #0]

       /* Add your code here */
       break;
 80075a6:	e000      	b.n	80075aa <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80075a8:	bf00      	nop
  }

  return (USBD_OK);
 80075aa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr
 80075b8:	2000011c 	.word	0x2000011c

080075bc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b082      	sub	sp, #8
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80075c6:	6879      	ldr	r1, [r7, #4]
 80075c8:	4805      	ldr	r0, [pc, #20]	; (80075e0 <CDC_Receive_FS+0x24>)
 80075ca:	f7fe fd89 	bl	80060e0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80075ce:	4804      	ldr	r0, [pc, #16]	; (80075e0 <CDC_Receive_FS+0x24>)
 80075d0:	f7fe fdca 	bl	8006168 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80075d4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3708      	adds	r7, #8
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	200004c8 	.word	0x200004c8

080075e4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	460b      	mov	r3, r1
 80075ee:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80075f0:	2300      	movs	r3, #0
 80075f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80075f4:	4b0d      	ldr	r3, [pc, #52]	; (800762c <CDC_Transmit_FS+0x48>)
 80075f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075fa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007602:	2b00      	cmp	r3, #0
 8007604:	d001      	beq.n	800760a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007606:	2301      	movs	r3, #1
 8007608:	e00b      	b.n	8007622 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800760a:	887b      	ldrh	r3, [r7, #2]
 800760c:	461a      	mov	r2, r3
 800760e:	6879      	ldr	r1, [r7, #4]
 8007610:	4806      	ldr	r0, [pc, #24]	; (800762c <CDC_Transmit_FS+0x48>)
 8007612:	f7fe fd4c 	bl	80060ae <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007616:	4805      	ldr	r0, [pc, #20]	; (800762c <CDC_Transmit_FS+0x48>)
 8007618:	f7fe fd76 	bl	8006108 <USBD_CDC_TransmitPacket>
 800761c:	4603      	mov	r3, r0
 800761e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007620:	7bfb      	ldrb	r3, [r7, #15]
}
 8007622:	4618      	mov	r0, r3
 8007624:	3710      	adds	r7, #16
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
 800762a:	bf00      	nop
 800762c:	200004c8 	.word	0x200004c8

08007630 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007630:	b480      	push	{r7}
 8007632:	b087      	sub	sp, #28
 8007634:	af00      	add	r7, sp, #0
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	4613      	mov	r3, r2
 800763c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800763e:	2300      	movs	r3, #0
 8007640:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007642:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007646:	4618      	mov	r0, r3
 8007648:	371c      	adds	r7, #28
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr
	...

08007654 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007654:	b480      	push	{r7}
 8007656:	b083      	sub	sp, #12
 8007658:	af00      	add	r7, sp, #0
 800765a:	4603      	mov	r3, r0
 800765c:	6039      	str	r1, [r7, #0]
 800765e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	2212      	movs	r2, #18
 8007664:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007666:	4b03      	ldr	r3, [pc, #12]	; (8007674 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007668:	4618      	mov	r0, r3
 800766a:	370c      	adds	r7, #12
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr
 8007674:	20000154 	.word	0x20000154

08007678 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	4603      	mov	r3, r0
 8007680:	6039      	str	r1, [r7, #0]
 8007682:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	2204      	movs	r2, #4
 8007688:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800768a:	4b03      	ldr	r3, [pc, #12]	; (8007698 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800768c:	4618      	mov	r0, r3
 800768e:	370c      	adds	r7, #12
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr
 8007698:	20000168 	.word	0x20000168

0800769c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	4603      	mov	r3, r0
 80076a4:	6039      	str	r1, [r7, #0]
 80076a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80076a8:	79fb      	ldrb	r3, [r7, #7]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d105      	bne.n	80076ba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80076ae:	683a      	ldr	r2, [r7, #0]
 80076b0:	4907      	ldr	r1, [pc, #28]	; (80076d0 <USBD_FS_ProductStrDescriptor+0x34>)
 80076b2:	4808      	ldr	r0, [pc, #32]	; (80076d4 <USBD_FS_ProductStrDescriptor+0x38>)
 80076b4:	f7ff fda7 	bl	8007206 <USBD_GetString>
 80076b8:	e004      	b.n	80076c4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80076ba:	683a      	ldr	r2, [r7, #0]
 80076bc:	4904      	ldr	r1, [pc, #16]	; (80076d0 <USBD_FS_ProductStrDescriptor+0x34>)
 80076be:	4805      	ldr	r0, [pc, #20]	; (80076d4 <USBD_FS_ProductStrDescriptor+0x38>)
 80076c0:	f7ff fda1 	bl	8007206 <USBD_GetString>
  }
  return USBD_StrDesc;
 80076c4:	4b02      	ldr	r3, [pc, #8]	; (80076d0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3708      	adds	r7, #8
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	20001798 	.word	0x20001798
 80076d4:	080080dc 	.word	0x080080dc

080076d8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
 80076de:	4603      	mov	r3, r0
 80076e0:	6039      	str	r1, [r7, #0]
 80076e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80076e4:	683a      	ldr	r2, [r7, #0]
 80076e6:	4904      	ldr	r1, [pc, #16]	; (80076f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80076e8:	4804      	ldr	r0, [pc, #16]	; (80076fc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80076ea:	f7ff fd8c 	bl	8007206 <USBD_GetString>
  return USBD_StrDesc;
 80076ee:	4b02      	ldr	r3, [pc, #8]	; (80076f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3708      	adds	r7, #8
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	20001798 	.word	0x20001798
 80076fc:	080080dc 	.word	0x080080dc

08007700 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b082      	sub	sp, #8
 8007704:	af00      	add	r7, sp, #0
 8007706:	4603      	mov	r3, r0
 8007708:	6039      	str	r1, [r7, #0]
 800770a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	221a      	movs	r2, #26
 8007710:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007712:	f000 f843 	bl	800779c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007716:	4b02      	ldr	r3, [pc, #8]	; (8007720 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007718:	4618      	mov	r0, r3
 800771a:	3708      	adds	r7, #8
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}
 8007720:	2000016c 	.word	0x2000016c

08007724 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b082      	sub	sp, #8
 8007728:	af00      	add	r7, sp, #0
 800772a:	4603      	mov	r3, r0
 800772c:	6039      	str	r1, [r7, #0]
 800772e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007730:	79fb      	ldrb	r3, [r7, #7]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d105      	bne.n	8007742 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007736:	683a      	ldr	r2, [r7, #0]
 8007738:	4907      	ldr	r1, [pc, #28]	; (8007758 <USBD_FS_ConfigStrDescriptor+0x34>)
 800773a:	4808      	ldr	r0, [pc, #32]	; (800775c <USBD_FS_ConfigStrDescriptor+0x38>)
 800773c:	f7ff fd63 	bl	8007206 <USBD_GetString>
 8007740:	e004      	b.n	800774c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007742:	683a      	ldr	r2, [r7, #0]
 8007744:	4904      	ldr	r1, [pc, #16]	; (8007758 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007746:	4805      	ldr	r0, [pc, #20]	; (800775c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007748:	f7ff fd5d 	bl	8007206 <USBD_GetString>
  }
  return USBD_StrDesc;
 800774c:	4b02      	ldr	r3, [pc, #8]	; (8007758 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800774e:	4618      	mov	r0, r3
 8007750:	3708      	adds	r7, #8
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	20001798 	.word	0x20001798
 800775c:	080080e8 	.word	0x080080e8

08007760 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
 8007766:	4603      	mov	r3, r0
 8007768:	6039      	str	r1, [r7, #0]
 800776a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800776c:	79fb      	ldrb	r3, [r7, #7]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d105      	bne.n	800777e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007772:	683a      	ldr	r2, [r7, #0]
 8007774:	4907      	ldr	r1, [pc, #28]	; (8007794 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007776:	4808      	ldr	r0, [pc, #32]	; (8007798 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007778:	f7ff fd45 	bl	8007206 <USBD_GetString>
 800777c:	e004      	b.n	8007788 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800777e:	683a      	ldr	r2, [r7, #0]
 8007780:	4904      	ldr	r1, [pc, #16]	; (8007794 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007782:	4805      	ldr	r0, [pc, #20]	; (8007798 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007784:	f7ff fd3f 	bl	8007206 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007788:	4b02      	ldr	r3, [pc, #8]	; (8007794 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800778a:	4618      	mov	r0, r3
 800778c:	3708      	adds	r7, #8
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	20001798 	.word	0x20001798
 8007798:	080080f4 	.word	0x080080f4

0800779c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80077a2:	4b0f      	ldr	r3, [pc, #60]	; (80077e0 <Get_SerialNum+0x44>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80077a8:	4b0e      	ldr	r3, [pc, #56]	; (80077e4 <Get_SerialNum+0x48>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80077ae:	4b0e      	ldr	r3, [pc, #56]	; (80077e8 <Get_SerialNum+0x4c>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80077b4:	68fa      	ldr	r2, [r7, #12]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4413      	add	r3, r2
 80077ba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d009      	beq.n	80077d6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80077c2:	2208      	movs	r2, #8
 80077c4:	4909      	ldr	r1, [pc, #36]	; (80077ec <Get_SerialNum+0x50>)
 80077c6:	68f8      	ldr	r0, [r7, #12]
 80077c8:	f000 f814 	bl	80077f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80077cc:	2204      	movs	r2, #4
 80077ce:	4908      	ldr	r1, [pc, #32]	; (80077f0 <Get_SerialNum+0x54>)
 80077d0:	68b8      	ldr	r0, [r7, #8]
 80077d2:	f000 f80f 	bl	80077f4 <IntToUnicode>
  }
}
 80077d6:	bf00      	nop
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	1fff7a10 	.word	0x1fff7a10
 80077e4:	1fff7a14 	.word	0x1fff7a14
 80077e8:	1fff7a18 	.word	0x1fff7a18
 80077ec:	2000016e 	.word	0x2000016e
 80077f0:	2000017e 	.word	0x2000017e

080077f4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b087      	sub	sp, #28
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	4613      	mov	r3, r2
 8007800:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007802:	2300      	movs	r3, #0
 8007804:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007806:	2300      	movs	r3, #0
 8007808:	75fb      	strb	r3, [r7, #23]
 800780a:	e027      	b.n	800785c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	0f1b      	lsrs	r3, r3, #28
 8007810:	2b09      	cmp	r3, #9
 8007812:	d80b      	bhi.n	800782c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	0f1b      	lsrs	r3, r3, #28
 8007818:	b2da      	uxtb	r2, r3
 800781a:	7dfb      	ldrb	r3, [r7, #23]
 800781c:	005b      	lsls	r3, r3, #1
 800781e:	4619      	mov	r1, r3
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	440b      	add	r3, r1
 8007824:	3230      	adds	r2, #48	; 0x30
 8007826:	b2d2      	uxtb	r2, r2
 8007828:	701a      	strb	r2, [r3, #0]
 800782a:	e00a      	b.n	8007842 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	0f1b      	lsrs	r3, r3, #28
 8007830:	b2da      	uxtb	r2, r3
 8007832:	7dfb      	ldrb	r3, [r7, #23]
 8007834:	005b      	lsls	r3, r3, #1
 8007836:	4619      	mov	r1, r3
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	440b      	add	r3, r1
 800783c:	3237      	adds	r2, #55	; 0x37
 800783e:	b2d2      	uxtb	r2, r2
 8007840:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	011b      	lsls	r3, r3, #4
 8007846:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007848:	7dfb      	ldrb	r3, [r7, #23]
 800784a:	005b      	lsls	r3, r3, #1
 800784c:	3301      	adds	r3, #1
 800784e:	68ba      	ldr	r2, [r7, #8]
 8007850:	4413      	add	r3, r2
 8007852:	2200      	movs	r2, #0
 8007854:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007856:	7dfb      	ldrb	r3, [r7, #23]
 8007858:	3301      	adds	r3, #1
 800785a:	75fb      	strb	r3, [r7, #23]
 800785c:	7dfa      	ldrb	r2, [r7, #23]
 800785e:	79fb      	ldrb	r3, [r7, #7]
 8007860:	429a      	cmp	r2, r3
 8007862:	d3d3      	bcc.n	800780c <IntToUnicode+0x18>
  }
}
 8007864:	bf00      	nop
 8007866:	371c      	adds	r7, #28
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr

08007870 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b08a      	sub	sp, #40	; 0x28
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007878:	f107 0314 	add.w	r3, r7, #20
 800787c:	2200      	movs	r2, #0
 800787e:	601a      	str	r2, [r3, #0]
 8007880:	605a      	str	r2, [r3, #4]
 8007882:	609a      	str	r2, [r3, #8]
 8007884:	60da      	str	r2, [r3, #12]
 8007886:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007890:	d169      	bne.n	8007966 <HAL_PCD_MspInit+0xf6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007892:	2300      	movs	r3, #0
 8007894:	613b      	str	r3, [r7, #16]
 8007896:	4b36      	ldr	r3, [pc, #216]	; (8007970 <HAL_PCD_MspInit+0x100>)
 8007898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800789a:	4a35      	ldr	r2, [pc, #212]	; (8007970 <HAL_PCD_MspInit+0x100>)
 800789c:	f043 0301 	orr.w	r3, r3, #1
 80078a0:	6313      	str	r3, [r2, #48]	; 0x30
 80078a2:	4b33      	ldr	r3, [pc, #204]	; (8007970 <HAL_PCD_MspInit+0x100>)
 80078a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078a6:	f003 0301 	and.w	r3, r3, #1
 80078aa:	613b      	str	r3, [r7, #16]
 80078ac:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80078ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80078b4:	2300      	movs	r3, #0
 80078b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078b8:	2300      	movs	r3, #0
 80078ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078bc:	f107 0314 	add.w	r3, r7, #20
 80078c0:	4619      	mov	r1, r3
 80078c2:	482c      	ldr	r0, [pc, #176]	; (8007974 <HAL_PCD_MspInit+0x104>)
 80078c4:	f7fa faec 	bl	8001ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80078c8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80078cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078ce:	2302      	movs	r3, #2
 80078d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078d2:	2300      	movs	r3, #0
 80078d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078d6:	2303      	movs	r3, #3
 80078d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80078da:	230a      	movs	r3, #10
 80078dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078de:	f107 0314 	add.w	r3, r7, #20
 80078e2:	4619      	mov	r1, r3
 80078e4:	4823      	ldr	r0, [pc, #140]	; (8007974 <HAL_PCD_MspInit+0x104>)
 80078e6:	f7fa fadb 	bl	8001ea0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80078ea:	4b21      	ldr	r3, [pc, #132]	; (8007970 <HAL_PCD_MspInit+0x100>)
 80078ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ee:	4a20      	ldr	r2, [pc, #128]	; (8007970 <HAL_PCD_MspInit+0x100>)
 80078f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078f4:	6353      	str	r3, [r2, #52]	; 0x34
 80078f6:	2300      	movs	r3, #0
 80078f8:	60fb      	str	r3, [r7, #12]
 80078fa:	4b1d      	ldr	r3, [pc, #116]	; (8007970 <HAL_PCD_MspInit+0x100>)
 80078fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078fe:	4a1c      	ldr	r2, [pc, #112]	; (8007970 <HAL_PCD_MspInit+0x100>)
 8007900:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007904:	6453      	str	r3, [r2, #68]	; 0x44
 8007906:	4b1a      	ldr	r3, [pc, #104]	; (8007970 <HAL_PCD_MspInit+0x100>)
 8007908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800790a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800790e:	60fb      	str	r3, [r7, #12]
 8007910:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007912:	2200      	movs	r2, #0
 8007914:	2100      	movs	r1, #0
 8007916:	2043      	movs	r0, #67	; 0x43
 8007918:	f7f9 ff1d 	bl	8001756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800791c:	2043      	movs	r0, #67	; 0x43
 800791e:	f7f9 ff36 	bl	800178e <HAL_NVIC_EnableIRQ>
    if(pcdHandle->Init.low_power_enable == 1)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6a1b      	ldr	r3, [r3, #32]
 8007926:	2b01      	cmp	r3, #1
 8007928:	d11d      	bne.n	8007966 <HAL_PCD_MspInit+0xf6>
    {
      /* Enable EXTI Line 18 for USB wakeup */
      __HAL_USB_OTG_FS_WAKEUP_EXTI_CLEAR_FLAG();
 800792a:	4b13      	ldr	r3, [pc, #76]	; (8007978 <HAL_PCD_MspInit+0x108>)
 800792c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007930:	615a      	str	r2, [r3, #20]
      __HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_RISING_EDGE();
 8007932:	4b11      	ldr	r3, [pc, #68]	; (8007978 <HAL_PCD_MspInit+0x108>)
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	4a10      	ldr	r2, [pc, #64]	; (8007978 <HAL_PCD_MspInit+0x108>)
 8007938:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800793c:	60d3      	str	r3, [r2, #12]
 800793e:	4b0e      	ldr	r3, [pc, #56]	; (8007978 <HAL_PCD_MspInit+0x108>)
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	4a0d      	ldr	r2, [pc, #52]	; (8007978 <HAL_PCD_MspInit+0x108>)
 8007944:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007948:	6093      	str	r3, [r2, #8]
      __HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_IT();
 800794a:	4b0b      	ldr	r3, [pc, #44]	; (8007978 <HAL_PCD_MspInit+0x108>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a0a      	ldr	r2, [pc, #40]	; (8007978 <HAL_PCD_MspInit+0x108>)
 8007950:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007954:	6013      	str	r3, [r2, #0]
      HAL_NVIC_SetPriority(OTG_FS_WKUP_IRQn, 0, 0);
 8007956:	2200      	movs	r2, #0
 8007958:	2100      	movs	r1, #0
 800795a:	202a      	movs	r0, #42	; 0x2a
 800795c:	f7f9 fefb 	bl	8001756 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(OTG_FS_WKUP_IRQn);
 8007960:	202a      	movs	r0, #42	; 0x2a
 8007962:	f7f9 ff14 	bl	800178e <HAL_NVIC_EnableIRQ>
    }
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007966:	bf00      	nop
 8007968:	3728      	adds	r7, #40	; 0x28
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	40023800 	.word	0x40023800
 8007974:	40020000 	.word	0x40020000
 8007978:	40013c00 	.word	0x40013c00

0800797c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b082      	sub	sp, #8
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007990:	4619      	mov	r1, r3
 8007992:	4610      	mov	r0, r2
 8007994:	f7fe fcb4 	bl	8006300 <USBD_LL_SetupStage>
}
 8007998:	bf00      	nop
 800799a:	3708      	adds	r7, #8
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b082      	sub	sp, #8
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	460b      	mov	r3, r1
 80079aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80079b2:	78fa      	ldrb	r2, [r7, #3]
 80079b4:	6879      	ldr	r1, [r7, #4]
 80079b6:	4613      	mov	r3, r2
 80079b8:	00db      	lsls	r3, r3, #3
 80079ba:	1a9b      	subs	r3, r3, r2
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	440b      	add	r3, r1
 80079c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	78fb      	ldrb	r3, [r7, #3]
 80079c8:	4619      	mov	r1, r3
 80079ca:	f7fe fcec 	bl	80063a6 <USBD_LL_DataOutStage>
}
 80079ce:	bf00      	nop
 80079d0:	3708      	adds	r7, #8
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079d6:	b580      	push	{r7, lr}
 80079d8:	b082      	sub	sp, #8
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
 80079de:	460b      	mov	r3, r1
 80079e0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80079e8:	78fa      	ldrb	r2, [r7, #3]
 80079ea:	6879      	ldr	r1, [r7, #4]
 80079ec:	4613      	mov	r3, r2
 80079ee:	00db      	lsls	r3, r3, #3
 80079f0:	1a9b      	subs	r3, r3, r2
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	440b      	add	r3, r1
 80079f6:	3348      	adds	r3, #72	; 0x48
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	78fb      	ldrb	r3, [r7, #3]
 80079fc:	4619      	mov	r1, r3
 80079fe:	f7fe fd35 	bl	800646c <USBD_LL_DataInStage>
}
 8007a02:	bf00      	nop
 8007a04:	3708      	adds	r7, #8
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b082      	sub	sp, #8
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f7fe fe39 	bl	8006690 <USBD_LL_SOF>
}
 8007a1e:	bf00      	nop
 8007a20:	3708      	adds	r7, #8
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}

08007a26 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a26:	b580      	push	{r7, lr}
 8007a28:	b084      	sub	sp, #16
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	68db      	ldr	r3, [r3, #12]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d102      	bne.n	8007a40 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	73fb      	strb	r3, [r7, #15]
 8007a3e:	e008      	b.n	8007a52 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	2b02      	cmp	r3, #2
 8007a46:	d102      	bne.n	8007a4e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	73fb      	strb	r3, [r7, #15]
 8007a4c:	e001      	b.n	8007a52 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007a4e:	f7f8 ff3b 	bl	80008c8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a58:	7bfa      	ldrb	r2, [r7, #15]
 8007a5a:	4611      	mov	r1, r2
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f7fe fddc 	bl	800661a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f7fe fd95 	bl	8006598 <USBD_LL_Reset>
}
 8007a6e:	bf00      	nop
 8007a70:	3710      	adds	r7, #16
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
	...

08007a78 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a86:	4618      	mov	r0, r3
 8007a88:	f7fe fdd7 	bl	800663a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	6812      	ldr	r2, [r2, #0]
 8007a9a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a9e:	f043 0301 	orr.w	r3, r3, #1
 8007aa2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6a1b      	ldr	r3, [r3, #32]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d005      	beq.n	8007ab8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007aac:	4b04      	ldr	r3, [pc, #16]	; (8007ac0 <HAL_PCD_SuspendCallback+0x48>)
 8007aae:	691b      	ldr	r3, [r3, #16]
 8007ab0:	4a03      	ldr	r2, [pc, #12]	; (8007ac0 <HAL_PCD_SuspendCallback+0x48>)
 8007ab2:	f043 0306 	orr.w	r3, r3, #6
 8007ab6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007ab8:	bf00      	nop
 8007aba:	3708      	adds	r7, #8
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}
 8007ac0:	e000ed00 	.word	0xe000ed00

08007ac4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f7fe fdc6 	bl	8006664 <USBD_LL_Resume>
}
 8007ad8:	bf00      	nop
 8007ada:	3708      	adds	r7, #8
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	460b      	mov	r3, r1
 8007aea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007af2:	78fa      	ldrb	r2, [r7, #3]
 8007af4:	4611      	mov	r1, r2
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7fe fdf1 	bl	80066de <USBD_LL_IsoOUTIncomplete>
}
 8007afc:	bf00      	nop
 8007afe:	3708      	adds	r7, #8
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b16:	78fa      	ldrb	r2, [r7, #3]
 8007b18:	4611      	mov	r1, r2
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f7fe fdd2 	bl	80066c4 <USBD_LL_IsoINIncomplete>
}
 8007b20:	bf00      	nop
 8007b22:	3708      	adds	r7, #8
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b36:	4618      	mov	r0, r3
 8007b38:	f7fe fdde 	bl	80066f8 <USBD_LL_DevConnected>
}
 8007b3c:	bf00      	nop
 8007b3e:	3708      	adds	r7, #8
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7fe fddb 	bl	800670e <USBD_LL_DevDisconnected>
}
 8007b58:	bf00      	nop
 8007b5a:	3708      	adds	r7, #8
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b082      	sub	sp, #8
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d13c      	bne.n	8007bea <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007b70:	4a20      	ldr	r2, [pc, #128]	; (8007bf4 <USBD_LL_Init+0x94>)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	4a1e      	ldr	r2, [pc, #120]	; (8007bf4 <USBD_LL_Init+0x94>)
 8007b7c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007b80:	4b1c      	ldr	r3, [pc, #112]	; (8007bf4 <USBD_LL_Init+0x94>)
 8007b82:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007b86:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007b88:	4b1a      	ldr	r3, [pc, #104]	; (8007bf4 <USBD_LL_Init+0x94>)
 8007b8a:	2204      	movs	r2, #4
 8007b8c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007b8e:	4b19      	ldr	r3, [pc, #100]	; (8007bf4 <USBD_LL_Init+0x94>)
 8007b90:	2202      	movs	r2, #2
 8007b92:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007b94:	4b17      	ldr	r3, [pc, #92]	; (8007bf4 <USBD_LL_Init+0x94>)
 8007b96:	2200      	movs	r2, #0
 8007b98:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007b9a:	4b16      	ldr	r3, [pc, #88]	; (8007bf4 <USBD_LL_Init+0x94>)
 8007b9c:	2202      	movs	r2, #2
 8007b9e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007ba0:	4b14      	ldr	r3, [pc, #80]	; (8007bf4 <USBD_LL_Init+0x94>)
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = ENABLE;
 8007ba6:	4b13      	ldr	r3, [pc, #76]	; (8007bf4 <USBD_LL_Init+0x94>)
 8007ba8:	2201      	movs	r2, #1
 8007baa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = ENABLE;
 8007bac:	4b11      	ldr	r3, [pc, #68]	; (8007bf4 <USBD_LL_Init+0x94>)
 8007bae:	2201      	movs	r2, #1
 8007bb0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8007bb2:	4b10      	ldr	r3, [pc, #64]	; (8007bf4 <USBD_LL_Init+0x94>)
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007bb8:	4b0e      	ldr	r3, [pc, #56]	; (8007bf4 <USBD_LL_Init+0x94>)
 8007bba:	2200      	movs	r2, #0
 8007bbc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007bbe:	480d      	ldr	r0, [pc, #52]	; (8007bf4 <USBD_LL_Init+0x94>)
 8007bc0:	f7fa fb21 	bl	8002206 <HAL_PCD_Init>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d001      	beq.n	8007bce <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007bca:	f7f8 fe7d 	bl	80008c8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007bce:	2180      	movs	r1, #128	; 0x80
 8007bd0:	4808      	ldr	r0, [pc, #32]	; (8007bf4 <USBD_LL_Init+0x94>)
 8007bd2:	f7fb fc7e 	bl	80034d2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007bd6:	2240      	movs	r2, #64	; 0x40
 8007bd8:	2100      	movs	r1, #0
 8007bda:	4806      	ldr	r0, [pc, #24]	; (8007bf4 <USBD_LL_Init+0x94>)
 8007bdc:	f7fb fc32 	bl	8003444 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007be0:	2280      	movs	r2, #128	; 0x80
 8007be2:	2101      	movs	r1, #1
 8007be4:	4803      	ldr	r0, [pc, #12]	; (8007bf4 <USBD_LL_Init+0x94>)
 8007be6:	f7fb fc2d 	bl	8003444 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007bea:	2300      	movs	r3, #0
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3708      	adds	r7, #8
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}
 8007bf4:	20001998 	.word	0x20001998

08007bf8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c00:	2300      	movs	r3, #0
 8007c02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c04:	2300      	movs	r3, #0
 8007c06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f7fa fc16 	bl	8002440 <HAL_PCD_Start>
 8007c14:	4603      	mov	r3, r0
 8007c16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c18:	7bfb      	ldrb	r3, [r7, #15]
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f000 f92a 	bl	8007e74 <USBD_Get_USB_Status>
 8007c20:	4603      	mov	r3, r0
 8007c22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c24:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3710      	adds	r7, #16
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b084      	sub	sp, #16
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
 8007c36:	4608      	mov	r0, r1
 8007c38:	4611      	mov	r1, r2
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	70fb      	strb	r3, [r7, #3]
 8007c40:	460b      	mov	r3, r1
 8007c42:	70bb      	strb	r3, [r7, #2]
 8007c44:	4613      	mov	r3, r2
 8007c46:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007c56:	78bb      	ldrb	r3, [r7, #2]
 8007c58:	883a      	ldrh	r2, [r7, #0]
 8007c5a:	78f9      	ldrb	r1, [r7, #3]
 8007c5c:	f7fa fffa 	bl	8002c54 <HAL_PCD_EP_Open>
 8007c60:	4603      	mov	r3, r0
 8007c62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c64:	7bfb      	ldrb	r3, [r7, #15]
 8007c66:	4618      	mov	r0, r3
 8007c68:	f000 f904 	bl	8007e74 <USBD_Get_USB_Status>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c70:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3710      	adds	r7, #16
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}

08007c7a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c7a:	b580      	push	{r7, lr}
 8007c7c:	b084      	sub	sp, #16
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
 8007c82:	460b      	mov	r3, r1
 8007c84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c86:	2300      	movs	r3, #0
 8007c88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c94:	78fa      	ldrb	r2, [r7, #3]
 8007c96:	4611      	mov	r1, r2
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f7fb f843 	bl	8002d24 <HAL_PCD_EP_Close>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ca2:	7bfb      	ldrb	r3, [r7, #15]
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f000 f8e5 	bl	8007e74 <USBD_Get_USB_Status>
 8007caa:	4603      	mov	r3, r0
 8007cac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cae:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3710      	adds	r7, #16
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007cd2:	78fa      	ldrb	r2, [r7, #3]
 8007cd4:	4611      	mov	r1, r2
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f7fb f91b 	bl	8002f12 <HAL_PCD_EP_SetStall>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ce0:	7bfb      	ldrb	r3, [r7, #15]
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f000 f8c6 	bl	8007e74 <USBD_Get_USB_Status>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cec:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3710      	adds	r7, #16
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b084      	sub	sp, #16
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
 8007cfe:	460b      	mov	r3, r1
 8007d00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d02:	2300      	movs	r3, #0
 8007d04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d06:	2300      	movs	r3, #0
 8007d08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d10:	78fa      	ldrb	r2, [r7, #3]
 8007d12:	4611      	mov	r1, r2
 8007d14:	4618      	mov	r0, r3
 8007d16:	f7fb f960 	bl	8002fda <HAL_PCD_EP_ClrStall>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d1e:	7bfb      	ldrb	r3, [r7, #15]
 8007d20:	4618      	mov	r0, r3
 8007d22:	f000 f8a7 	bl	8007e74 <USBD_Get_USB_Status>
 8007d26:	4603      	mov	r3, r0
 8007d28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3710      	adds	r7, #16
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b085      	sub	sp, #20
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d46:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007d48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	da0b      	bge.n	8007d68 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007d50:	78fb      	ldrb	r3, [r7, #3]
 8007d52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d56:	68f9      	ldr	r1, [r7, #12]
 8007d58:	4613      	mov	r3, r2
 8007d5a:	00db      	lsls	r3, r3, #3
 8007d5c:	1a9b      	subs	r3, r3, r2
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	440b      	add	r3, r1
 8007d62:	333e      	adds	r3, #62	; 0x3e
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	e00b      	b.n	8007d80 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007d68:	78fb      	ldrb	r3, [r7, #3]
 8007d6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d6e:	68f9      	ldr	r1, [r7, #12]
 8007d70:	4613      	mov	r3, r2
 8007d72:	00db      	lsls	r3, r3, #3
 8007d74:	1a9b      	subs	r3, r3, r2
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	440b      	add	r3, r1
 8007d7a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007d7e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3714      	adds	r7, #20
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b084      	sub	sp, #16
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	460b      	mov	r3, r1
 8007d96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007da6:	78fa      	ldrb	r2, [r7, #3]
 8007da8:	4611      	mov	r1, r2
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7fa ff2d 	bl	8002c0a <HAL_PCD_SetAddress>
 8007db0:	4603      	mov	r3, r0
 8007db2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007db4:	7bfb      	ldrb	r3, [r7, #15]
 8007db6:	4618      	mov	r0, r3
 8007db8:	f000 f85c 	bl	8007e74 <USBD_Get_USB_Status>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}

08007dca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007dca:	b580      	push	{r7, lr}
 8007dcc:	b086      	sub	sp, #24
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	60f8      	str	r0, [r7, #12]
 8007dd2:	607a      	str	r2, [r7, #4]
 8007dd4:	603b      	str	r3, [r7, #0]
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dde:	2300      	movs	r3, #0
 8007de0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007de8:	7af9      	ldrb	r1, [r7, #11]
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	f7fb f846 	bl	8002e7e <HAL_PCD_EP_Transmit>
 8007df2:	4603      	mov	r3, r0
 8007df4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007df6:	7dfb      	ldrb	r3, [r7, #23]
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f000 f83b 	bl	8007e74 <USBD_Get_USB_Status>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007e02:	7dbb      	ldrb	r3, [r7, #22]
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3718      	adds	r7, #24
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b086      	sub	sp, #24
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	607a      	str	r2, [r7, #4]
 8007e16:	603b      	str	r3, [r7, #0]
 8007e18:	460b      	mov	r3, r1
 8007e1a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e20:	2300      	movs	r3, #0
 8007e22:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007e2a:	7af9      	ldrb	r1, [r7, #11]
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	f7fa ffc2 	bl	8002db8 <HAL_PCD_EP_Receive>
 8007e34:	4603      	mov	r3, r0
 8007e36:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e38:	7dfb      	ldrb	r3, [r7, #23]
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f000 f81a 	bl	8007e74 <USBD_Get_USB_Status>
 8007e40:	4603      	mov	r3, r0
 8007e42:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007e44:	7dbb      	ldrb	r3, [r7, #22]
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3718      	adds	r7, #24
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}

08007e4e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e4e:	b580      	push	{r7, lr}
 8007e50:	b082      	sub	sp, #8
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
 8007e56:	460b      	mov	r3, r1
 8007e58:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e60:	78fa      	ldrb	r2, [r7, #3]
 8007e62:	4611      	mov	r1, r2
 8007e64:	4618      	mov	r0, r3
 8007e66:	f7fa fff2 	bl	8002e4e <HAL_PCD_EP_GetRxCount>
 8007e6a:	4603      	mov	r3, r0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3708      	adds	r7, #8
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b085      	sub	sp, #20
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007e82:	79fb      	ldrb	r3, [r7, #7]
 8007e84:	2b03      	cmp	r3, #3
 8007e86:	d817      	bhi.n	8007eb8 <USBD_Get_USB_Status+0x44>
 8007e88:	a201      	add	r2, pc, #4	; (adr r2, 8007e90 <USBD_Get_USB_Status+0x1c>)
 8007e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e8e:	bf00      	nop
 8007e90:	08007ea1 	.word	0x08007ea1
 8007e94:	08007ea7 	.word	0x08007ea7
 8007e98:	08007ead 	.word	0x08007ead
 8007e9c:	08007eb3 	.word	0x08007eb3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	73fb      	strb	r3, [r7, #15]
    break;
 8007ea4:	e00b      	b.n	8007ebe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007ea6:	2303      	movs	r3, #3
 8007ea8:	73fb      	strb	r3, [r7, #15]
    break;
 8007eaa:	e008      	b.n	8007ebe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007eac:	2301      	movs	r3, #1
 8007eae:	73fb      	strb	r3, [r7, #15]
    break;
 8007eb0:	e005      	b.n	8007ebe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007eb2:	2303      	movs	r3, #3
 8007eb4:	73fb      	strb	r3, [r7, #15]
    break;
 8007eb6:	e002      	b.n	8007ebe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007eb8:	2303      	movs	r3, #3
 8007eba:	73fb      	strb	r3, [r7, #15]
    break;
 8007ebc:	bf00      	nop
  }
  return usb_status;
 8007ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3714      	adds	r7, #20
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <__errno>:
 8007ecc:	4b01      	ldr	r3, [pc, #4]	; (8007ed4 <__errno+0x8>)
 8007ece:	6818      	ldr	r0, [r3, #0]
 8007ed0:	4770      	bx	lr
 8007ed2:	bf00      	nop
 8007ed4:	20000188 	.word	0x20000188

08007ed8 <__libc_init_array>:
 8007ed8:	b570      	push	{r4, r5, r6, lr}
 8007eda:	4e0d      	ldr	r6, [pc, #52]	; (8007f10 <__libc_init_array+0x38>)
 8007edc:	4c0d      	ldr	r4, [pc, #52]	; (8007f14 <__libc_init_array+0x3c>)
 8007ede:	1ba4      	subs	r4, r4, r6
 8007ee0:	10a4      	asrs	r4, r4, #2
 8007ee2:	2500      	movs	r5, #0
 8007ee4:	42a5      	cmp	r5, r4
 8007ee6:	d109      	bne.n	8007efc <__libc_init_array+0x24>
 8007ee8:	4e0b      	ldr	r6, [pc, #44]	; (8007f18 <__libc_init_array+0x40>)
 8007eea:	4c0c      	ldr	r4, [pc, #48]	; (8007f1c <__libc_init_array+0x44>)
 8007eec:	f000 f8ea 	bl	80080c4 <_init>
 8007ef0:	1ba4      	subs	r4, r4, r6
 8007ef2:	10a4      	asrs	r4, r4, #2
 8007ef4:	2500      	movs	r5, #0
 8007ef6:	42a5      	cmp	r5, r4
 8007ef8:	d105      	bne.n	8007f06 <__libc_init_array+0x2e>
 8007efa:	bd70      	pop	{r4, r5, r6, pc}
 8007efc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f00:	4798      	blx	r3
 8007f02:	3501      	adds	r5, #1
 8007f04:	e7ee      	b.n	8007ee4 <__libc_init_array+0xc>
 8007f06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f0a:	4798      	blx	r3
 8007f0c:	3501      	adds	r5, #1
 8007f0e:	e7f2      	b.n	8007ef6 <__libc_init_array+0x1e>
 8007f10:	0800812c 	.word	0x0800812c
 8007f14:	0800812c 	.word	0x0800812c
 8007f18:	0800812c 	.word	0x0800812c
 8007f1c:	08008130 	.word	0x08008130

08007f20 <malloc>:
 8007f20:	4b02      	ldr	r3, [pc, #8]	; (8007f2c <malloc+0xc>)
 8007f22:	4601      	mov	r1, r0
 8007f24:	6818      	ldr	r0, [r3, #0]
 8007f26:	f000 b861 	b.w	8007fec <_malloc_r>
 8007f2a:	bf00      	nop
 8007f2c:	20000188 	.word	0x20000188

08007f30 <free>:
 8007f30:	4b02      	ldr	r3, [pc, #8]	; (8007f3c <free+0xc>)
 8007f32:	4601      	mov	r1, r0
 8007f34:	6818      	ldr	r0, [r3, #0]
 8007f36:	f000 b80b 	b.w	8007f50 <_free_r>
 8007f3a:	bf00      	nop
 8007f3c:	20000188 	.word	0x20000188

08007f40 <memset>:
 8007f40:	4402      	add	r2, r0
 8007f42:	4603      	mov	r3, r0
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d100      	bne.n	8007f4a <memset+0xa>
 8007f48:	4770      	bx	lr
 8007f4a:	f803 1b01 	strb.w	r1, [r3], #1
 8007f4e:	e7f9      	b.n	8007f44 <memset+0x4>

08007f50 <_free_r>:
 8007f50:	b538      	push	{r3, r4, r5, lr}
 8007f52:	4605      	mov	r5, r0
 8007f54:	2900      	cmp	r1, #0
 8007f56:	d045      	beq.n	8007fe4 <_free_r+0x94>
 8007f58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f5c:	1f0c      	subs	r4, r1, #4
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	bfb8      	it	lt
 8007f62:	18e4      	addlt	r4, r4, r3
 8007f64:	f000 f8ac 	bl	80080c0 <__malloc_lock>
 8007f68:	4a1f      	ldr	r2, [pc, #124]	; (8007fe8 <_free_r+0x98>)
 8007f6a:	6813      	ldr	r3, [r2, #0]
 8007f6c:	4610      	mov	r0, r2
 8007f6e:	b933      	cbnz	r3, 8007f7e <_free_r+0x2e>
 8007f70:	6063      	str	r3, [r4, #4]
 8007f72:	6014      	str	r4, [r2, #0]
 8007f74:	4628      	mov	r0, r5
 8007f76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f7a:	f000 b8a2 	b.w	80080c2 <__malloc_unlock>
 8007f7e:	42a3      	cmp	r3, r4
 8007f80:	d90c      	bls.n	8007f9c <_free_r+0x4c>
 8007f82:	6821      	ldr	r1, [r4, #0]
 8007f84:	1862      	adds	r2, r4, r1
 8007f86:	4293      	cmp	r3, r2
 8007f88:	bf04      	itt	eq
 8007f8a:	681a      	ldreq	r2, [r3, #0]
 8007f8c:	685b      	ldreq	r3, [r3, #4]
 8007f8e:	6063      	str	r3, [r4, #4]
 8007f90:	bf04      	itt	eq
 8007f92:	1852      	addeq	r2, r2, r1
 8007f94:	6022      	streq	r2, [r4, #0]
 8007f96:	6004      	str	r4, [r0, #0]
 8007f98:	e7ec      	b.n	8007f74 <_free_r+0x24>
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	685a      	ldr	r2, [r3, #4]
 8007f9e:	b10a      	cbz	r2, 8007fa4 <_free_r+0x54>
 8007fa0:	42a2      	cmp	r2, r4
 8007fa2:	d9fa      	bls.n	8007f9a <_free_r+0x4a>
 8007fa4:	6819      	ldr	r1, [r3, #0]
 8007fa6:	1858      	adds	r0, r3, r1
 8007fa8:	42a0      	cmp	r0, r4
 8007faa:	d10b      	bne.n	8007fc4 <_free_r+0x74>
 8007fac:	6820      	ldr	r0, [r4, #0]
 8007fae:	4401      	add	r1, r0
 8007fb0:	1858      	adds	r0, r3, r1
 8007fb2:	4282      	cmp	r2, r0
 8007fb4:	6019      	str	r1, [r3, #0]
 8007fb6:	d1dd      	bne.n	8007f74 <_free_r+0x24>
 8007fb8:	6810      	ldr	r0, [r2, #0]
 8007fba:	6852      	ldr	r2, [r2, #4]
 8007fbc:	605a      	str	r2, [r3, #4]
 8007fbe:	4401      	add	r1, r0
 8007fc0:	6019      	str	r1, [r3, #0]
 8007fc2:	e7d7      	b.n	8007f74 <_free_r+0x24>
 8007fc4:	d902      	bls.n	8007fcc <_free_r+0x7c>
 8007fc6:	230c      	movs	r3, #12
 8007fc8:	602b      	str	r3, [r5, #0]
 8007fca:	e7d3      	b.n	8007f74 <_free_r+0x24>
 8007fcc:	6820      	ldr	r0, [r4, #0]
 8007fce:	1821      	adds	r1, r4, r0
 8007fd0:	428a      	cmp	r2, r1
 8007fd2:	bf04      	itt	eq
 8007fd4:	6811      	ldreq	r1, [r2, #0]
 8007fd6:	6852      	ldreq	r2, [r2, #4]
 8007fd8:	6062      	str	r2, [r4, #4]
 8007fda:	bf04      	itt	eq
 8007fdc:	1809      	addeq	r1, r1, r0
 8007fde:	6021      	streq	r1, [r4, #0]
 8007fe0:	605c      	str	r4, [r3, #4]
 8007fe2:	e7c7      	b.n	8007f74 <_free_r+0x24>
 8007fe4:	bd38      	pop	{r3, r4, r5, pc}
 8007fe6:	bf00      	nop
 8007fe8:	20000210 	.word	0x20000210

08007fec <_malloc_r>:
 8007fec:	b570      	push	{r4, r5, r6, lr}
 8007fee:	1ccd      	adds	r5, r1, #3
 8007ff0:	f025 0503 	bic.w	r5, r5, #3
 8007ff4:	3508      	adds	r5, #8
 8007ff6:	2d0c      	cmp	r5, #12
 8007ff8:	bf38      	it	cc
 8007ffa:	250c      	movcc	r5, #12
 8007ffc:	2d00      	cmp	r5, #0
 8007ffe:	4606      	mov	r6, r0
 8008000:	db01      	blt.n	8008006 <_malloc_r+0x1a>
 8008002:	42a9      	cmp	r1, r5
 8008004:	d903      	bls.n	800800e <_malloc_r+0x22>
 8008006:	230c      	movs	r3, #12
 8008008:	6033      	str	r3, [r6, #0]
 800800a:	2000      	movs	r0, #0
 800800c:	bd70      	pop	{r4, r5, r6, pc}
 800800e:	f000 f857 	bl	80080c0 <__malloc_lock>
 8008012:	4a21      	ldr	r2, [pc, #132]	; (8008098 <_malloc_r+0xac>)
 8008014:	6814      	ldr	r4, [r2, #0]
 8008016:	4621      	mov	r1, r4
 8008018:	b991      	cbnz	r1, 8008040 <_malloc_r+0x54>
 800801a:	4c20      	ldr	r4, [pc, #128]	; (800809c <_malloc_r+0xb0>)
 800801c:	6823      	ldr	r3, [r4, #0]
 800801e:	b91b      	cbnz	r3, 8008028 <_malloc_r+0x3c>
 8008020:	4630      	mov	r0, r6
 8008022:	f000 f83d 	bl	80080a0 <_sbrk_r>
 8008026:	6020      	str	r0, [r4, #0]
 8008028:	4629      	mov	r1, r5
 800802a:	4630      	mov	r0, r6
 800802c:	f000 f838 	bl	80080a0 <_sbrk_r>
 8008030:	1c43      	adds	r3, r0, #1
 8008032:	d124      	bne.n	800807e <_malloc_r+0x92>
 8008034:	230c      	movs	r3, #12
 8008036:	6033      	str	r3, [r6, #0]
 8008038:	4630      	mov	r0, r6
 800803a:	f000 f842 	bl	80080c2 <__malloc_unlock>
 800803e:	e7e4      	b.n	800800a <_malloc_r+0x1e>
 8008040:	680b      	ldr	r3, [r1, #0]
 8008042:	1b5b      	subs	r3, r3, r5
 8008044:	d418      	bmi.n	8008078 <_malloc_r+0x8c>
 8008046:	2b0b      	cmp	r3, #11
 8008048:	d90f      	bls.n	800806a <_malloc_r+0x7e>
 800804a:	600b      	str	r3, [r1, #0]
 800804c:	50cd      	str	r5, [r1, r3]
 800804e:	18cc      	adds	r4, r1, r3
 8008050:	4630      	mov	r0, r6
 8008052:	f000 f836 	bl	80080c2 <__malloc_unlock>
 8008056:	f104 000b 	add.w	r0, r4, #11
 800805a:	1d23      	adds	r3, r4, #4
 800805c:	f020 0007 	bic.w	r0, r0, #7
 8008060:	1ac3      	subs	r3, r0, r3
 8008062:	d0d3      	beq.n	800800c <_malloc_r+0x20>
 8008064:	425a      	negs	r2, r3
 8008066:	50e2      	str	r2, [r4, r3]
 8008068:	e7d0      	b.n	800800c <_malloc_r+0x20>
 800806a:	428c      	cmp	r4, r1
 800806c:	684b      	ldr	r3, [r1, #4]
 800806e:	bf16      	itet	ne
 8008070:	6063      	strne	r3, [r4, #4]
 8008072:	6013      	streq	r3, [r2, #0]
 8008074:	460c      	movne	r4, r1
 8008076:	e7eb      	b.n	8008050 <_malloc_r+0x64>
 8008078:	460c      	mov	r4, r1
 800807a:	6849      	ldr	r1, [r1, #4]
 800807c:	e7cc      	b.n	8008018 <_malloc_r+0x2c>
 800807e:	1cc4      	adds	r4, r0, #3
 8008080:	f024 0403 	bic.w	r4, r4, #3
 8008084:	42a0      	cmp	r0, r4
 8008086:	d005      	beq.n	8008094 <_malloc_r+0xa8>
 8008088:	1a21      	subs	r1, r4, r0
 800808a:	4630      	mov	r0, r6
 800808c:	f000 f808 	bl	80080a0 <_sbrk_r>
 8008090:	3001      	adds	r0, #1
 8008092:	d0cf      	beq.n	8008034 <_malloc_r+0x48>
 8008094:	6025      	str	r5, [r4, #0]
 8008096:	e7db      	b.n	8008050 <_malloc_r+0x64>
 8008098:	20000210 	.word	0x20000210
 800809c:	20000214 	.word	0x20000214

080080a0 <_sbrk_r>:
 80080a0:	b538      	push	{r3, r4, r5, lr}
 80080a2:	4c06      	ldr	r4, [pc, #24]	; (80080bc <_sbrk_r+0x1c>)
 80080a4:	2300      	movs	r3, #0
 80080a6:	4605      	mov	r5, r0
 80080a8:	4608      	mov	r0, r1
 80080aa:	6023      	str	r3, [r4, #0]
 80080ac:	f7f8 fd84 	bl	8000bb8 <_sbrk>
 80080b0:	1c43      	adds	r3, r0, #1
 80080b2:	d102      	bne.n	80080ba <_sbrk_r+0x1a>
 80080b4:	6823      	ldr	r3, [r4, #0]
 80080b6:	b103      	cbz	r3, 80080ba <_sbrk_r+0x1a>
 80080b8:	602b      	str	r3, [r5, #0]
 80080ba:	bd38      	pop	{r3, r4, r5, pc}
 80080bc:	20001da0 	.word	0x20001da0

080080c0 <__malloc_lock>:
 80080c0:	4770      	bx	lr

080080c2 <__malloc_unlock>:
 80080c2:	4770      	bx	lr

080080c4 <_init>:
 80080c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080c6:	bf00      	nop
 80080c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080ca:	bc08      	pop	{r3}
 80080cc:	469e      	mov	lr, r3
 80080ce:	4770      	bx	lr

080080d0 <_fini>:
 80080d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080d2:	bf00      	nop
 80080d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080d6:	bc08      	pop	{r3}
 80080d8:	469e      	mov	lr, r3
 80080da:	4770      	bx	lr
